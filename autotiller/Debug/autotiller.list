
autotiller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  08009888  08009888  0000a888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4b0  0800a4b0  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4b0  0800a4b0  0000b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4b8  0800a4b8  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b8  0800a4b8  0000b4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4bc  0800a4bc  0000b4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a4c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  200001dc  0800a69c  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  0800a69c  0000c944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fec7  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f7  00000000  00000000  0001c0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0001e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a75  00000000  00000000  0001f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b7d  00000000  00000000  0001fba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dbe  00000000  00000000  00038722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097de3  00000000  00000000  000494e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e12c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  000e1308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e5d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009870 	.word	0x08009870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009870 	.word	0x08009870

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b0af      	sub	sp, #188	@ 0xbc
 8000eac:	af2a      	add	r7, sp, #168	@ 0xa8
 8000eae:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	799b      	ldrb	r3, [r3, #6]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000ec0:	687c      	ldr	r4, [r7, #4]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000ec6:	f107 030e 	add.w	r3, r7, #14
 8000eca:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000ed0:	4668      	mov	r0, sp
 8000ed2:	f104 0310 	add.w	r3, r4, #16
 8000ed6:	229c      	movs	r2, #156	@ 0x9c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f006 fdbe 	bl	8007a5a <memcpy>
 8000ede:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ee2:	f001 fbb6 	bl	8002652 <bno055_read_regs>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <bno055_init+0x4c>
        return err;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	e0b6      	b.n	8001062 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ef8:	d001      	beq.n	8000efe <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000efa:	2306      	movs	r3, #6
 8000efc:	e0b1      	b.n	8001062 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f001 fa74 	bl	80023ee <bno055_set_opmode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <bno055_init+0x6c>
        return err;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	e0a6      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f002 fd31 	bl	800397c <HAL_Delay>
    bno055_reset(imu);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f001 fb53 	bl	80025c6 <bno055_reset>
    HAL_Delay(5000);
 8000f20:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f24:	f002 fd2a 	bl	800397c <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 faee 	bl	800250c <bno055_set_pwr_mode>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <bno055_init+0x96>
        return err;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	e091      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f002 fd1c 	bl	800397c <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000f44:	2100      	movs	r1, #0
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f001 fbe7 	bl	800271a <bno055_set_page>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <bno055_init+0xb2>
        return err;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	e083      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000f5a:	200c      	movs	r0, #12
 8000f5c:	f002 fd0e 	bl	800397c <HAL_Delay>
    bno055_on(imu);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f001 fb53 	bl	800260c <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	791b      	ldrb	r3, [r3, #4]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 fa3e 	bl	80023ee <bno055_set_opmode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <bno055_init+0xd8>
        return err;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	e070      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8000f80:	2018      	movs	r0, #24
 8000f82:	f002 fcfb 	bl	800397c <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a38      	ldr	r2, [pc, #224]	@ (800106c <bno055_init+0x1c4>)
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a38      	ldr	r2, [pc, #224]	@ (8001070 <bno055_init+0x1c8>)
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a37      	ldr	r2, [pc, #220]	@ (8001074 <bno055_init+0x1cc>)
 8000f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a37      	ldr	r2, [pc, #220]	@ (8001078 <bno055_init+0x1d0>)
 8000f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a36      	ldr	r2, [pc, #216]	@ (800107c <bno055_init+0x1d4>)
 8000fa2:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a36      	ldr	r2, [pc, #216]	@ (8001080 <bno055_init+0x1d8>)
 8000fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a35      	ldr	r2, [pc, #212]	@ (8001084 <bno055_init+0x1dc>)
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a35      	ldr	r2, [pc, #212]	@ (8001088 <bno055_init+0x1e0>)
 8000fb4:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a34      	ldr	r2, [pc, #208]	@ (800108c <bno055_init+0x1e4>)
 8000fba:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a34      	ldr	r2, [pc, #208]	@ (8001090 <bno055_init+0x1e8>)
 8000fc0:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a33      	ldr	r2, [pc, #204]	@ (8001094 <bno055_init+0x1ec>)
 8000fc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a33      	ldr	r2, [pc, #204]	@ (8001098 <bno055_init+0x1f0>)
 8000fcc:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a32      	ldr	r2, [pc, #200]	@ (800109c <bno055_init+0x1f4>)
 8000fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a32      	ldr	r2, [pc, #200]	@ (80010a0 <bno055_init+0x1f8>)
 8000fd8:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a31      	ldr	r2, [pc, #196]	@ (80010a4 <bno055_init+0x1fc>)
 8000fde:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <bno055_init+0x200>)
 8000fe4:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a30      	ldr	r2, [pc, #192]	@ (80010ac <bno055_init+0x204>)
 8000fea:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a30      	ldr	r2, [pc, #192]	@ (80010b0 <bno055_init+0x208>)
 8000ff0:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <bno055_init+0x20c>)
 8000ff6:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80010b8 <bno055_init+0x210>)
 8000ffc:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a2e      	ldr	r2, [pc, #184]	@ (80010bc <bno055_init+0x214>)
 8001002:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	@ (80010c0 <bno055_init+0x218>)
 8001008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a2d      	ldr	r2, [pc, #180]	@ (80010c4 <bno055_init+0x21c>)
 8001010:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a2c      	ldr	r2, [pc, #176]	@ (80010c8 <bno055_init+0x220>)
 8001016:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <bno055_init+0x224>)
 800101c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a2b      	ldr	r2, [pc, #172]	@ (80010d0 <bno055_init+0x228>)
 8001024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <bno055_init+0x22c>)
 800102c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <bno055_init+0x230>)
 8001034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <bno055_init+0x234>)
 800103c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <bno055_init+0x238>)
 8001044:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a26      	ldr	r2, [pc, #152]	@ (80010e4 <bno055_init+0x23c>)
 800104c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a25      	ldr	r2, [pc, #148]	@ (80010e8 <bno055_init+0x240>)
 8001054:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a24      	ldr	r2, [pc, #144]	@ (80010ec <bno055_init+0x244>)
 800105c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	080010f1 	.word	0x080010f1
 8001070:	08001159 	.word	0x08001159
 8001074:	080011d9 	.word	0x080011d9
 8001078:	08001259 	.word	0x08001259
 800107c:	080012d9 	.word	0x080012d9
 8001080:	080013a5 	.word	0x080013a5
 8001084:	08001425 	.word	0x08001425
 8001088:	080014a5 	.word	0x080014a5
 800108c:	08001525 	.word	0x08001525
 8001090:	080015f1 	.word	0x080015f1
 8001094:	08001671 	.word	0x08001671
 8001098:	080016f1 	.word	0x080016f1
 800109c:	08001771 	.word	0x08001771
 80010a0:	0800183d 	.word	0x0800183d
 80010a4:	080018a9 	.word	0x080018a9
 80010a8:	08001915 	.word	0x08001915
 80010ac:	08001981 	.word	0x08001981
 80010b0:	08001a35 	.word	0x08001a35
 80010b4:	08001ab9 	.word	0x08001ab9
 80010b8:	08001b3d 	.word	0x08001b3d
 80010bc:	08001bc1 	.word	0x08001bc1
 80010c0:	08001c8d 	.word	0x08001c8d
 80010c4:	08001d11 	.word	0x08001d11
 80010c8:	08001d95 	.word	0x08001d95
 80010cc:	08001e19 	.word	0x08001e19
 80010d0:	08001ee5 	.word	0x08001ee5
 80010d4:	08001f55 	.word	0x08001f55
 80010d8:	08001fc5 	.word	0x08001fc5
 80010dc:	08002035 	.word	0x08002035
 80010e0:	080020a5 	.word	0x080020a5
 80010e4:	08002181 	.word	0x08002181
 80010e8:	08002251 	.word	0x08002251
 80010ec:	0800231f 	.word	0x0800231f

080010f0 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b0af      	sub	sp, #188	@ 0xbc
 80010f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80010fe:	687c      	ldr	r4, [r7, #4]
 8001100:	2301      	movs	r3, #1
 8001102:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001104:	f107 030e 	add.w	r3, r7, #14
 8001108:	9328      	str	r3, [sp, #160]	@ 0xa0
 800110a:	2334      	movs	r3, #52	@ 0x34
 800110c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800110e:	4668      	mov	r0, sp
 8001110:	f104 0310 	add.w	r3, r4, #16
 8001114:	229c      	movs	r2, #156	@ 0x9c
 8001116:	4619      	mov	r1, r3
 8001118:	f006 fc9f 	bl	8007a5a <memcpy>
 800111c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001120:	f001 fa97 	bl	8002652 <bno055_read_regs>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <bno055_temperature+0x42>
        return err;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	e00d      	b.n	800114e <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7bdb      	ldrb	r3, [r3, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <bno055_temperature+0x54>
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	e001      	b.n	8001148 <bno055_temperature+0x58>
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
	...

08001158 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b0af      	sub	sp, #188	@ 0xbc
 800115c:	af2a      	add	r7, sp, #168	@ 0xa8
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001162:	687c      	ldr	r4, [r7, #4]
 8001164:	2302      	movs	r3, #2
 8001166:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800116e:	2308      	movs	r3, #8
 8001170:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001172:	4668      	mov	r0, sp
 8001174:	f104 0310 	add.w	r3, r4, #16
 8001178:	229c      	movs	r2, #156	@ 0x9c
 800117a:	4619      	mov	r1, r3
 800117c:	f006 fc6d 	bl	8007a5a <memcpy>
 8001180:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001184:	f001 fa65 	bl	8002652 <bno055_read_regs>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <bno055_acc_x+0x3e>
        return err;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	e019      	b.n	80011ca <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7b3b      	ldrb	r3, [r7, #12]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <bno055_acc_x+0x62>
 80011b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011d4 <bno055_acc_x+0x7c>
 80011b8:	e001      	b.n	80011be <bno055_acc_x+0x66>
 80011ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80011be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011c8:	2300      	movs	r3, #0
};
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	42c80000 	.word	0x42c80000

080011d8 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0af      	sub	sp, #188	@ 0xbc
 80011dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80011e2:	687c      	ldr	r4, [r7, #4]
 80011e4:	2302      	movs	r3, #2
 80011e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80011ee:	230a      	movs	r3, #10
 80011f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80011f2:	4668      	mov	r0, sp
 80011f4:	f104 0310 	add.w	r3, r4, #16
 80011f8:	229c      	movs	r2, #156	@ 0x9c
 80011fa:	4619      	mov	r1, r3
 80011fc:	f006 fc2d 	bl	8007a5a <memcpy>
 8001200:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001204:	f001 fa25 	bl	8002652 <bno055_read_regs>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <bno055_acc_y+0x3e>
        return err;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	e019      	b.n	800124a <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21b      	sxth	r3, r3
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <bno055_acc_y+0x62>
 8001234:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001254 <bno055_acc_y+0x7c>
 8001238:	e001      	b.n	800123e <bno055_acc_y+0x66>
 800123a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800123e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001248:	2300      	movs	r3, #0
};
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	bf00      	nop
 8001254:	42c80000 	.word	0x42c80000

08001258 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b0af      	sub	sp, #188	@ 0xbc
 800125c:	af2a      	add	r7, sp, #168	@ 0xa8
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001262:	687c      	ldr	r4, [r7, #4]
 8001264:	2302      	movs	r3, #2
 8001266:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800126e:	230c      	movs	r3, #12
 8001270:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001272:	4668      	mov	r0, sp
 8001274:	f104 0310 	add.w	r3, r4, #16
 8001278:	229c      	movs	r2, #156	@ 0x9c
 800127a:	4619      	mov	r1, r3
 800127c:	f006 fbed 	bl	8007a5a <memcpy>
 8001280:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001284:	f001 f9e5 	bl	8002652 <bno055_read_regs>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <bno055_acc_z+0x3e>
        return err;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	e019      	b.n	80012ca <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7b3b      	ldrb	r3, [r7, #12]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <bno055_acc_z+0x62>
 80012b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80012d4 <bno055_acc_z+0x7c>
 80012b8:	e001      	b.n	80012be <bno055_acc_z+0x66>
 80012ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80012be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012c8:	2300      	movs	r3, #0
};
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	42c80000 	.word	0x42c80000

080012d8 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b0b1      	sub	sp, #196	@ 0xc4
 80012dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80012e2:	687c      	ldr	r4, [r7, #4]
 80012e4:	2306      	movs	r3, #6
 80012e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80012ee:	2308      	movs	r3, #8
 80012f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80012f2:	4668      	mov	r0, sp
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	229c      	movs	r2, #156	@ 0x9c
 80012fa:	4619      	mov	r1, r3
 80012fc:	f006 fbad 	bl	8007a5a <memcpy>
 8001300:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001304:	f001 f9a5 	bl	8002652 <bno055_read_regs>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <bno055_acc+0x3e>
        return err;
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	e03f      	b.n	8001396 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <bno055_acc+0x4a>
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <bno055_acc+0xc8>)
 8001320:	e001      	b.n	8001326 <bno055_acc+0x4e>
 8001322:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001326:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001328:	7a7b      	ldrb	r3, [r7, #9]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	7a3b      	ldrb	r3, [r7, #8]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800133e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21a      	sxth	r2, r3
 8001352:	7abb      	ldrb	r3, [r7, #10]
 8001354:	b21b      	sxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b21b      	sxth	r3, r3
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001362:	ed97 7a04 	vldr	s14, [r7, #16]
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a04 	vldr	s14, [r7, #16]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001394:	2300      	movs	r3, #0
};
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
 800139e:	bf00      	nop
 80013a0:	42c80000 	.word	0x42c80000

080013a4 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b0af      	sub	sp, #188	@ 0xbc
 80013a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80013ae:	687c      	ldr	r4, [r7, #4]
 80013b0:	2302      	movs	r3, #2
 80013b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80013ba:	2328      	movs	r3, #40	@ 0x28
 80013bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80013be:	4668      	mov	r0, sp
 80013c0:	f104 0310 	add.w	r3, r4, #16
 80013c4:	229c      	movs	r2, #156	@ 0x9c
 80013c6:	4619      	mov	r1, r3
 80013c8:	f006 fb47 	bl	8007a5a <memcpy>
 80013cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013d0:	f001 f93f 	bl	8002652 <bno055_read_regs>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <bno055_linear_acc_x+0x3e>
        return err;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	e019      	b.n	8001416 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013e2:	7b7b      	ldrb	r3, [r7, #13]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7b3b      	ldrb	r3, [r7, #12]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <bno055_linear_acc_x+0x62>
 8001400:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001420 <bno055_linear_acc_x+0x7c>
 8001404:	e001      	b.n	800140a <bno055_linear_acc_x+0x66>
 8001406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800140a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001414:	2300      	movs	r3, #0
};
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	42c80000 	.word	0x42c80000

08001424 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b0af      	sub	sp, #188	@ 0xbc
 8001428:	af2a      	add	r7, sp, #168	@ 0xa8
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800142e:	687c      	ldr	r4, [r7, #4]
 8001430:	2302      	movs	r3, #2
 8001432:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	9328      	str	r3, [sp, #160]	@ 0xa0
 800143a:	232a      	movs	r3, #42	@ 0x2a
 800143c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800143e:	4668      	mov	r0, sp
 8001440:	f104 0310 	add.w	r3, r4, #16
 8001444:	229c      	movs	r2, #156	@ 0x9c
 8001446:	4619      	mov	r1, r3
 8001448:	f006 fb07 	bl	8007a5a <memcpy>
 800144c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001450:	f001 f8ff 	bl	8002652 <bno055_read_regs>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <bno055_linear_acc_y+0x3e>
        return err;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	e019      	b.n	8001496 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <bno055_linear_acc_y+0x62>
 8001480:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80014a0 <bno055_linear_acc_y+0x7c>
 8001484:	e001      	b.n	800148a <bno055_linear_acc_y+0x66>
 8001486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001494:	2300      	movs	r3, #0
};
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	42c80000 	.word	0x42c80000

080014a4 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b0af      	sub	sp, #188	@ 0xbc
 80014a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80014ae:	687c      	ldr	r4, [r7, #4]
 80014b0:	2302      	movs	r3, #2
 80014b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80014ba:	232c      	movs	r3, #44	@ 0x2c
 80014bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80014be:	4668      	mov	r0, sp
 80014c0:	f104 0310 	add.w	r3, r4, #16
 80014c4:	229c      	movs	r2, #156	@ 0x9c
 80014c6:	4619      	mov	r1, r3
 80014c8:	f006 fac7 	bl	8007a5a <memcpy>
 80014cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014d0:	f001 f8bf 	bl	8002652 <bno055_read_regs>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <bno055_linear_acc_z+0x3e>
        return err;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	e019      	b.n	8001516 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	7b3b      	ldrb	r3, [r7, #12]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <bno055_linear_acc_z+0x62>
 8001500:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001520 <bno055_linear_acc_z+0x7c>
 8001504:	e001      	b.n	800150a <bno055_linear_acc_z+0x66>
 8001506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800150a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001514:	2300      	movs	r3, #0
};
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	42c80000 	.word	0x42c80000

08001524 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b0b1      	sub	sp, #196	@ 0xc4
 8001528:	af2a      	add	r7, sp, #168	@ 0xa8
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 800152e:	687c      	ldr	r4, [r7, #4]
 8001530:	2306      	movs	r3, #6
 8001532:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	9328      	str	r3, [sp, #160]	@ 0xa0
 800153a:	2328      	movs	r3, #40	@ 0x28
 800153c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800153e:	4668      	mov	r0, sp
 8001540:	f104 0310 	add.w	r3, r4, #16
 8001544:	229c      	movs	r2, #156	@ 0x9c
 8001546:	4619      	mov	r1, r3
 8001548:	f006 fa87 	bl	8007a5a <memcpy>
 800154c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001550:	f001 f87f 	bl	8002652 <bno055_read_regs>
 8001554:	4603      	mov	r3, r0
 8001556:	75fb      	strb	r3, [r7, #23]
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <bno055_linear_acc+0x3e>
        return err;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	e03f      	b.n	80015e2 <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <bno055_linear_acc+0x4a>
 800156a:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <bno055_linear_acc+0xc8>)
 800156c:	e001      	b.n	8001572 <bno055_linear_acc+0x4e>
 800156e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001572:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7a3b      	ldrb	r3, [r7, #8]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21b      	sxth	r3, r3
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800158a:	ed97 7a04 	vldr	s14, [r7, #16]
 800158e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7abb      	ldrb	r3, [r7, #10]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80015bc:	7b7b      	ldrb	r3, [r7, #13]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	7b3b      	ldrb	r3, [r7, #12]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80015e0:	2300      	movs	r3, #0
};
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	42c80000 	.word	0x42c80000

080015f0 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b0af      	sub	sp, #188	@ 0xbc
 80015f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80015fa:	687c      	ldr	r4, [r7, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001606:	2314      	movs	r3, #20
 8001608:	9327      	str	r3, [sp, #156]	@ 0x9c
 800160a:	4668      	mov	r0, sp
 800160c:	f104 0310 	add.w	r3, r4, #16
 8001610:	229c      	movs	r2, #156	@ 0x9c
 8001612:	4619      	mov	r1, r3
 8001614:	f006 fa21 	bl	8007a5a <memcpy>
 8001618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800161c:	f001 f819 	bl	8002652 <bno055_read_regs>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <bno055_gyro_x+0x3e>
        return err;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	e019      	b.n	8001662 <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	7b3b      	ldrb	r3, [r7, #12]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <bno055_gyro_x+0x62>
 800164c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001650:	e001      	b.n	8001656 <bno055_gyro_x+0x66>
 8001652:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800166c <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001660:	2300      	movs	r3, #0
};
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	44610000 	.word	0x44610000

08001670 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b0af      	sub	sp, #188	@ 0xbc
 8001674:	af2a      	add	r7, sp, #168	@ 0xa8
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800167a:	687c      	ldr	r4, [r7, #4]
 800167c:	2302      	movs	r3, #2
 800167e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001686:	2316      	movs	r3, #22
 8001688:	9327      	str	r3, [sp, #156]	@ 0x9c
 800168a:	4668      	mov	r0, sp
 800168c:	f104 0310 	add.w	r3, r4, #16
 8001690:	229c      	movs	r2, #156	@ 0x9c
 8001692:	4619      	mov	r1, r3
 8001694:	f006 f9e1 	bl	8007a5a <memcpy>
 8001698:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800169c:	f000 ffd9 	bl	8002652 <bno055_read_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <bno055_gyro_y+0x3e>
        return err;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	e019      	b.n	80016e2 <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80016ae:	7b7b      	ldrb	r3, [r7, #13]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7b3b      	ldrb	r3, [r7, #12]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <bno055_gyro_y+0x62>
 80016cc:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80016d0:	e001      	b.n	80016d6 <bno055_gyro_y+0x66>
 80016d2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80016ec <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80016d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016e0:	2300      	movs	r3, #0
};
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	44610000 	.word	0x44610000

080016f0 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b0af      	sub	sp, #188	@ 0xbc
 80016f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80016fa:	687c      	ldr	r4, [r7, #4]
 80016fc:	2302      	movs	r3, #2
 80016fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001706:	2318      	movs	r3, #24
 8001708:	9327      	str	r3, [sp, #156]	@ 0x9c
 800170a:	4668      	mov	r0, sp
 800170c:	f104 0310 	add.w	r3, r4, #16
 8001710:	229c      	movs	r2, #156	@ 0x9c
 8001712:	4619      	mov	r1, r3
 8001714:	f006 f9a1 	bl	8007a5a <memcpy>
 8001718:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800171c:	f000 ff99 	bl	8002652 <bno055_read_regs>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <bno055_gyro_z+0x3e>
        return err;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	e019      	b.n	8001762 <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <bno055_gyro_z+0x62>
 800174c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001750:	e001      	b.n	8001756 <bno055_gyro_z+0x66>
 8001752:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800176c <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001760:	2300      	movs	r3, #0
};
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	bf00      	nop
 800176c:	44610000 	.word	0x44610000

08001770 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b0b1      	sub	sp, #196	@ 0xc4
 8001774:	af2a      	add	r7, sp, #168	@ 0xa8
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 800177a:	687c      	ldr	r4, [r7, #4]
 800177c:	2306      	movs	r3, #6
 800177e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001786:	2314      	movs	r3, #20
 8001788:	9327      	str	r3, [sp, #156]	@ 0x9c
 800178a:	4668      	mov	r0, sp
 800178c:	f104 0310 	add.w	r3, r4, #16
 8001790:	229c      	movs	r2, #156	@ 0x9c
 8001792:	4619      	mov	r1, r3
 8001794:	f006 f961 	bl	8007a5a <memcpy>
 8001798:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800179c:	f000 ff59 	bl	8002652 <bno055_read_regs>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <bno055_gyro+0x3e>
        return err;
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	e03f      	b.n	800182e <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <bno055_gyro+0x4c>
 80017b6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80017ba:	e000      	b.n	80017be <bno055_gyro+0x4e>
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017be:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80017c0:	7a7b      	ldrb	r3, [r7, #9]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	7a3b      	ldrb	r3, [r7, #8]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80017da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80017e4:	7afb      	ldrb	r3, [r7, #11]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	7abb      	ldrb	r3, [r7, #10]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80017fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	7b3b      	ldrb	r3, [r7, #12]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21b      	sxth	r3, r3
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	44610000 	.word	0x44610000

0800183c <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b0af      	sub	sp, #188	@ 0xbc
 8001840:	af2a      	add	r7, sp, #168	@ 0xa8
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001846:	687c      	ldr	r4, [r7, #4]
 8001848:	2302      	movs	r3, #2
 800184a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001852:	230e      	movs	r3, #14
 8001854:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001856:	4668      	mov	r0, sp
 8001858:	f104 0310 	add.w	r3, r4, #16
 800185c:	229c      	movs	r2, #156	@ 0x9c
 800185e:	4619      	mov	r1, r3
 8001860:	f006 f8fb 	bl	8007a5a <memcpy>
 8001864:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001868:	f000 fef3 	bl	8002652 <bno055_read_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <bno055_mag_x+0x3e>
        return err;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	e012      	b.n	80018a0 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800187a:	7b7b      	ldrb	r3, [r7, #13]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	7b3b      	ldrb	r3, [r7, #12]
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b21b      	sxth	r3, r3
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001890:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}

080018a8 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b0af      	sub	sp, #188	@ 0xbc
 80018ac:	af2a      	add	r7, sp, #168	@ 0xa8
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80018b2:	687c      	ldr	r4, [r7, #4]
 80018b4:	2302      	movs	r3, #2
 80018b6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80018be:	2310      	movs	r3, #16
 80018c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80018c2:	4668      	mov	r0, sp
 80018c4:	f104 0310 	add.w	r3, r4, #16
 80018c8:	229c      	movs	r2, #156	@ 0x9c
 80018ca:	4619      	mov	r1, r3
 80018cc:	f006 f8c5 	bl	8007a5a <memcpy>
 80018d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018d4:	f000 febd 	bl	8002652 <bno055_read_regs>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <bno055_mag_y+0x3e>
        return err;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	e012      	b.n	800190c <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b0af      	sub	sp, #188	@ 0xbc
 8001918:	af2a      	add	r7, sp, #168	@ 0xa8
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800191e:	687c      	ldr	r4, [r7, #4]
 8001920:	2302      	movs	r3, #2
 8001922:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	9328      	str	r3, [sp, #160]	@ 0xa0
 800192a:	2312      	movs	r3, #18
 800192c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800192e:	4668      	mov	r0, sp
 8001930:	f104 0310 	add.w	r3, r4, #16
 8001934:	229c      	movs	r2, #156	@ 0x9c
 8001936:	4619      	mov	r1, r3
 8001938:	f006 f88f 	bl	8007a5a <memcpy>
 800193c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001940:	f000 fe87 	bl	8002652 <bno055_read_regs>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <bno055_mag_z+0x3e>
        return err;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	e012      	b.n	8001978 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001952:	7b7b      	ldrb	r3, [r7, #13]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b21a      	sxth	r2, r3
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	b21b      	sxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b21b      	sxth	r3, r3
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800196c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}

08001980 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b0af      	sub	sp, #188	@ 0xbc
 8001984:	af2a      	add	r7, sp, #168	@ 0xa8
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 800198a:	687c      	ldr	r4, [r7, #4]
 800198c:	2306      	movs	r3, #6
 800198e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001996:	230e      	movs	r3, #14
 8001998:	9327      	str	r3, [sp, #156]	@ 0x9c
 800199a:	4668      	mov	r0, sp
 800199c:	f104 0310 	add.w	r3, r4, #16
 80019a0:	229c      	movs	r2, #156	@ 0x9c
 80019a2:	4619      	mov	r1, r3
 80019a4:	f006 f859 	bl	8007a5a <memcpy>
 80019a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019ac:	f000 fe51 	bl	8002652 <bno055_read_regs>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <bno055_mag+0x3e>
        return err;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	e036      	b.n	8001a2c <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	7a3b      	ldrb	r3, [r7, #8]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001a06:	7b7b      	ldrb	r3, [r7, #13]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001a2a:	2300      	movs	r3, #0
};
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b0b1      	sub	sp, #196	@ 0xc4
 8001a38:	af2a      	add	r7, sp, #168	@ 0xa8
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001a3e:	687c      	ldr	r4, [r7, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001a4a:	232e      	movs	r3, #46	@ 0x2e
 8001a4c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001a4e:	4668      	mov	r0, sp
 8001a50:	f104 0310 	add.w	r3, r4, #16
 8001a54:	229c      	movs	r2, #156	@ 0x9c
 8001a56:	4619      	mov	r1, r3
 8001a58:	f005 ffff 	bl	8007a5a <memcpy>
 8001a5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a60:	f000 fdf7 	bl	8002652 <bno055_read_regs>
 8001a64:	4603      	mov	r3, r0
 8001a66:	75fb      	strb	r3, [r7, #23]
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <bno055_gravity_x+0x3e>
        return err;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	e01b      	b.n	8001aaa <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <bno055_gravity_x+0x4a>
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <bno055_gravity_x+0x80>)
 8001a7c:	e001      	b.n	8001a82 <bno055_gravity_x+0x4e>
 8001a7e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a82:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	7b3b      	ldrb	r3, [r7, #12]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	42c80000 	.word	0x42c80000

08001ab8 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b0b1      	sub	sp, #196	@ 0xc4
 8001abc:	af2a      	add	r7, sp, #168	@ 0xa8
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001ac2:	687c      	ldr	r4, [r7, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ace:	2330      	movs	r3, #48	@ 0x30
 8001ad0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ad2:	4668      	mov	r0, sp
 8001ad4:	f104 0310 	add.w	r3, r4, #16
 8001ad8:	229c      	movs	r2, #156	@ 0x9c
 8001ada:	4619      	mov	r1, r3
 8001adc:	f005 ffbd 	bl	8007a5a <memcpy>
 8001ae0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ae4:	f000 fdb5 	bl	8002652 <bno055_read_regs>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	75fb      	strb	r3, [r7, #23]
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <bno055_gravity_y+0x3e>
        return err;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	e01b      	b.n	8001b2e <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <bno055_gravity_y+0x4a>
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <bno055_gravity_y+0x80>)
 8001b00:	e001      	b.n	8001b06 <bno055_gravity_y+0x4e>
 8001b02:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b06:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7b3b      	ldrb	r3, [r7, #12]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	42c80000 	.word	0x42c80000

08001b3c <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b0b1      	sub	sp, #196	@ 0xc4
 8001b40:	af2a      	add	r7, sp, #168	@ 0xa8
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001b46:	687c      	ldr	r4, [r7, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001b52:	2332      	movs	r3, #50	@ 0x32
 8001b54:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001b56:	4668      	mov	r0, sp
 8001b58:	f104 0310 	add.w	r3, r4, #16
 8001b5c:	229c      	movs	r2, #156	@ 0x9c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f005 ff7b 	bl	8007a5a <memcpy>
 8001b64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b68:	f000 fd73 	bl	8002652 <bno055_read_regs>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	75fb      	strb	r3, [r7, #23]
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <bno055_gravity_z+0x3e>
        return err;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	e01b      	b.n	8001bb2 <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <bno055_gravity_z+0x4a>
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <bno055_gravity_z+0x80>)
 8001b84:	e001      	b.n	8001b8a <bno055_gravity_z+0x4e>
 8001b86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b8a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ba2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	42c80000 	.word	0x42c80000

08001bc0 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b0b1      	sub	sp, #196	@ 0xc4
 8001bc4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001bca:	687c      	ldr	r4, [r7, #4]
 8001bcc:	2306      	movs	r3, #6
 8001bce:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001bd6:	232e      	movs	r3, #46	@ 0x2e
 8001bd8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001bda:	4668      	mov	r0, sp
 8001bdc:	f104 0310 	add.w	r3, r4, #16
 8001be0:	229c      	movs	r2, #156	@ 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	f005 ff39 	bl	8007a5a <memcpy>
 8001be8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bec:	f000 fd31 	bl	8002652 <bno055_read_regs>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <bno055_gravity+0x3e>
        return err;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	e03f      	b.n	8001c7e <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <bno055_gravity+0x4a>
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <bno055_gravity+0xc8>)
 8001c08:	e001      	b.n	8001c0e <bno055_gravity+0x4e>
 8001c0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c0e:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	7a3b      	ldrb	r3, [r7, #8]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c26:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	7abb      	ldrb	r3, [r7, #10]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001c58:	7b7b      	ldrb	r3, [r7, #13]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	7b3b      	ldrb	r3, [r7, #12]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	42c80000 	.word	0x42c80000

08001c8c <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b0b1      	sub	sp, #196	@ 0xc4
 8001c90:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001c96:	687c      	ldr	r4, [r7, #4]
 8001c98:	2302      	movs	r3, #2
 8001c9a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ca2:	231a      	movs	r3, #26
 8001ca4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ca6:	4668      	mov	r0, sp
 8001ca8:	f104 0310 	add.w	r3, r4, #16
 8001cac:	229c      	movs	r2, #156	@ 0x9c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f005 fed3 	bl	8007a5a <memcpy>
 8001cb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cb8:	f000 fccb 	bl	8002652 <bno055_read_regs>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	75fb      	strb	r3, [r7, #23]
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	e01b      	b.n	8001d02 <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <bno055_euler_yaw+0x4c>
 8001cd2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001cd6:	e000      	b.n	8001cda <bno055_euler_yaw+0x4e>
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cda:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	7b3b      	ldrb	r3, [r7, #12]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cf2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	44610000 	.word	0x44610000

08001d10 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b0b1      	sub	sp, #196	@ 0xc4
 8001d14:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001d1a:	687c      	ldr	r4, [r7, #4]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001d26:	231c      	movs	r3, #28
 8001d28:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001d2a:	4668      	mov	r0, sp
 8001d2c:	f104 0310 	add.w	r3, r4, #16
 8001d30:	229c      	movs	r2, #156	@ 0x9c
 8001d32:	4619      	mov	r1, r3
 8001d34:	f005 fe91 	bl	8007a5a <memcpy>
 8001d38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d3c:	f000 fc89 	bl	8002652 <bno055_read_regs>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <bno055_euler_roll+0x3e>
        return err;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	e01b      	b.n	8001d86 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <bno055_euler_roll+0x4c>
 8001d56:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001d5a:	e000      	b.n	8001d5e <bno055_euler_roll+0x4e>
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d5e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	44610000 	.word	0x44610000

08001d94 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b0b1      	sub	sp, #196	@ 0xc4
 8001d98:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001d9e:	687c      	ldr	r4, [r7, #4]
 8001da0:	2302      	movs	r3, #2
 8001da2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001daa:	231e      	movs	r3, #30
 8001dac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001dae:	4668      	mov	r0, sp
 8001db0:	f104 0310 	add.w	r3, r4, #16
 8001db4:	229c      	movs	r2, #156	@ 0x9c
 8001db6:	4619      	mov	r1, r3
 8001db8:	f005 fe4f 	bl	8007a5a <memcpy>
 8001dbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dc0:	f000 fc47 	bl	8002652 <bno055_read_regs>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	75fb      	strb	r3, [r7, #23]
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <bno055_euler_pitch+0x3e>
        return err;
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	e01b      	b.n	8001e0a <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <bno055_euler_pitch+0x4c>
 8001dda:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001dde:	e000      	b.n	8001de2 <bno055_euler_pitch+0x4e>
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001de2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001de4:	7b7b      	ldrb	r3, [r7, #13]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	7b3b      	ldrb	r3, [r7, #12]
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	44610000 	.word	0x44610000

08001e18 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b0b1      	sub	sp, #196	@ 0xc4
 8001e1c:	af2a      	add	r7, sp, #168	@ 0xa8
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001e22:	687c      	ldr	r4, [r7, #4]
 8001e24:	2306      	movs	r3, #6
 8001e26:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001e2e:	231a      	movs	r3, #26
 8001e30:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001e32:	4668      	mov	r0, sp
 8001e34:	f104 0310 	add.w	r3, r4, #16
 8001e38:	229c      	movs	r2, #156	@ 0x9c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f005 fe0d 	bl	8007a5a <memcpy>
 8001e40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e44:	f000 fc05 	bl	8002652 <bno055_read_regs>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	e03f      	b.n	8001ed6 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <bno055_euler+0x4c>
 8001e5e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001e62:	e000      	b.n	8001e66 <bno055_euler+0x4e>
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e66:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001e68:	7a7b      	ldrb	r3, [r7, #9]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	7a3b      	ldrb	r3, [r7, #8]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	7abb      	ldrb	r3, [r7, #10]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ea2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001eb0:	7b7b      	ldrb	r3, [r7, #13]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ec6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	44610000 	.word	0x44610000

08001ee4 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b0af      	sub	sp, #188	@ 0xbc
 8001ee8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001eee:	687c      	ldr	r4, [r7, #4]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001efa:	2320      	movs	r3, #32
 8001efc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001efe:	4668      	mov	r0, sp
 8001f00:	f104 0310 	add.w	r3, r4, #16
 8001f04:	229c      	movs	r2, #156	@ 0x9c
 8001f06:	4619      	mov	r1, r3
 8001f08:	f005 fda7 	bl	8007a5a <memcpy>
 8001f0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f10:	f000 fb9f 	bl	8002652 <bno055_read_regs>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <bno055_quaternion_w+0x3e>
        return err;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	e012      	b.n	8001f48 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f22:	7b7b      	ldrb	r3, [r7, #13]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	7b3b      	ldrb	r3, [r7, #12]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f38:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001f50 <bno055_quaternion_w+0x6c>
 8001f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	46800000 	.word	0x46800000

08001f54 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b0af      	sub	sp, #188	@ 0xbc
 8001f58:	af2a      	add	r7, sp, #168	@ 0xa8
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001f5e:	687c      	ldr	r4, [r7, #4]
 8001f60:	2302      	movs	r3, #2
 8001f62:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f6a:	2322      	movs	r3, #34	@ 0x22
 8001f6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f6e:	4668      	mov	r0, sp
 8001f70:	f104 0310 	add.w	r3, r4, #16
 8001f74:	229c      	movs	r2, #156	@ 0x9c
 8001f76:	4619      	mov	r1, r3
 8001f78:	f005 fd6f 	bl	8007a5a <memcpy>
 8001f7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f80:	f000 fb67 	bl	8002652 <bno055_read_regs>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <bno055_quaternion_x+0x3e>
        return err;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	e012      	b.n	8001fb8 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f92:	7b7b      	ldrb	r3, [r7, #13]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	7b3b      	ldrb	r3, [r7, #12]
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa8:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001fc0 <bno055_quaternion_x+0x6c>
 8001fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	46800000 	.word	0x46800000

08001fc4 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b0af      	sub	sp, #188	@ 0xbc
 8001fc8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001fce:	687c      	ldr	r4, [r7, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001fda:	2324      	movs	r3, #36	@ 0x24
 8001fdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001fde:	4668      	mov	r0, sp
 8001fe0:	f104 0310 	add.w	r3, r4, #16
 8001fe4:	229c      	movs	r2, #156	@ 0x9c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f005 fd37 	bl	8007a5a <memcpy>
 8001fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ff0:	f000 fb2f 	bl	8002652 <bno055_read_regs>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <bno055_quaternion_y+0x3e>
        return err;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	e012      	b.n	8002028 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002002:	7b7b      	ldrb	r3, [r7, #13]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21b      	sxth	r3, r3
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002030 <bno055_quaternion_y+0x6c>
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	46800000 	.word	0x46800000

08002034 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b0af      	sub	sp, #188	@ 0xbc
 8002038:	af2a      	add	r7, sp, #168	@ 0xa8
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800203e:	687c      	ldr	r4, [r7, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	9328      	str	r3, [sp, #160]	@ 0xa0
 800204a:	2326      	movs	r3, #38	@ 0x26
 800204c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800204e:	4668      	mov	r0, sp
 8002050:	f104 0310 	add.w	r3, r4, #16
 8002054:	229c      	movs	r2, #156	@ 0x9c
 8002056:	4619      	mov	r1, r3
 8002058:	f005 fcff 	bl	8007a5a <memcpy>
 800205c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002060:	f000 faf7 	bl	8002652 <bno055_read_regs>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <bno055_quaternion_z+0x3e>
        return err;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	e012      	b.n	8002098 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7b3b      	ldrb	r3, [r7, #12]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002088:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80020a0 <bno055_quaternion_z+0x6c>
 800208c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	46800000 	.word	0x46800000

080020a4 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b0b1      	sub	sp, #196	@ 0xc4
 80020a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80020ae:	687c      	ldr	r4, [r7, #4]
 80020b0:	2308      	movs	r3, #8
 80020b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80020ba:	2320      	movs	r3, #32
 80020bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80020be:	4668      	mov	r0, sp
 80020c0:	f104 0310 	add.w	r3, r4, #16
 80020c4:	229c      	movs	r2, #156	@ 0x9c
 80020c6:	4619      	mov	r1, r3
 80020c8:	f005 fcc7 	bl	8007a5a <memcpy>
 80020cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020d0:	f000 fabf 	bl	8002652 <bno055_read_regs>
 80020d4:	4603      	mov	r3, r0
 80020d6:	75fb      	strb	r3, [r7, #23]
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <bno055_quaternion+0x3e>
        return err;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	e048      	b.n	8002174 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80020e2:	7b7b      	ldrb	r3, [r7, #13]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800217c <bno055_quaternion+0xd8>
 80020fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21a      	sxth	r2, r3
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800217c <bno055_quaternion+0xd8>
 8002120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 800212a:	7c7b      	ldrb	r3, [r7, #17]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b21a      	sxth	r2, r3
 8002130:	7c3b      	ldrb	r3, [r7, #16]
 8002132:	b21b      	sxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b21b      	sxth	r3, r3
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002140:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800217c <bno055_quaternion+0xd8>
 8002144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800214e:	7cfb      	ldrb	r3, [r7, #19]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21a      	sxth	r2, r3
 8002154:	7cbb      	ldrb	r3, [r7, #18]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21b      	sxth	r3, r3
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002164:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800217c <bno055_quaternion+0xd8>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd90      	pop	{r4, r7, pc}
 800217c:	46800000 	.word	0x46800000

08002180 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b0af      	sub	sp, #188	@ 0xbc
 8002184:	af2a      	add	r7, sp, #168	@ 0xa8
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	70fb      	strb	r3, [r7, #3]
 8002192:	460b      	mov	r3, r1
 8002194:	70bb      	strb	r3, [r7, #2]
 8002196:	4613      	mov	r3, r2
 8002198:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800219a:	2101      	movs	r1, #1
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fabc 	bl	800271a <bno055_set_page>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <bno055_acc_conf+0x30>
        return err;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	e04b      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80021b0:	2100      	movs	r1, #0
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f91b 	bl	80023ee <bno055_set_opmode>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <bno055_acc_conf+0x46>
        return err;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	e040      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80021c6:	200c      	movs	r0, #12
 80021c8:	f001 fbd8 	bl	800397c <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	78bb      	ldrb	r3, [r7, #2]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80021dc:	687c      	ldr	r4, [r7, #4]
 80021de:	2301      	movs	r3, #1
 80021e0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80021e2:	f107 030e 	add.w	r3, r7, #14
 80021e6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80021e8:	2308      	movs	r3, #8
 80021ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 80021ec:	4668      	mov	r0, sp
 80021ee:	f104 0310 	add.w	r3, r4, #16
 80021f2:	229c      	movs	r2, #156	@ 0x9c
 80021f4:	4619      	mov	r1, r3
 80021f6:	f005 fc30 	bl	8007a5a <memcpy>
 80021fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021fe:	f000 fa5e 	bl	80026be <bno055_write_regs>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <bno055_acc_conf+0x90>
        return err;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	e01b      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8e9 	bl	80023ee <bno055_set_opmode>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <bno055_acc_conf+0xaa>
        return err;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	e00e      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800222a:	2018      	movs	r0, #24
 800222c:	f001 fba6 	bl	800397c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa71 	bl	800271a <bno055_set_page>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <bno055_acc_conf+0xc6>
        return err;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	e000      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}

08002250 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b0af      	sub	sp, #188	@ 0xbc
 8002254:	af2a      	add	r7, sp, #168	@ 0xa8
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4603      	mov	r3, r0
 8002260:	70fb      	strb	r3, [r7, #3]
 8002262:	460b      	mov	r3, r1
 8002264:	70bb      	strb	r3, [r7, #2]
 8002266:	4613      	mov	r3, r2
 8002268:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800226a:	2101      	movs	r1, #1
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fa54 	bl	800271a <bno055_set_page>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <bno055_gyr_conf+0x30>
        return err;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	e04a      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002280:	2100      	movs	r1, #0
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8b3 	bl	80023ee <bno055_set_opmode>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <bno055_gyr_conf+0x46>
        return err;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	e03f      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002296:	200c      	movs	r0, #12
 8002298:	f001 fb70 	bl	800397c <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	78bb      	ldrb	r3, [r7, #2]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	733b      	strb	r3, [r7, #12]
 80022a6:	787b      	ldrb	r3, [r7, #1]
 80022a8:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80022aa:	687c      	ldr	r4, [r7, #4]
 80022ac:	2302      	movs	r3, #2
 80022ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80022b6:	230a      	movs	r3, #10
 80022b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80022ba:	4668      	mov	r0, sp
 80022bc:	f104 0310 	add.w	r3, r4, #16
 80022c0:	229c      	movs	r2, #156	@ 0x9c
 80022c2:	4619      	mov	r1, r3
 80022c4:	f005 fbc9 	bl	8007a5a <memcpy>
 80022c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022cc:	f000 f9f7 	bl	80026be <bno055_write_regs>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	e01b      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	791b      	ldrb	r3, [r3, #4]
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f882 	bl	80023ee <bno055_set_opmode>
 80022ea:	4603      	mov	r3, r0
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <bno055_gyr_conf+0xa8>
        return err;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	e00e      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80022f8:	2018      	movs	r0, #24
 80022fa:	f001 fb3f 	bl	800397c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80022fe:	2100      	movs	r1, #0
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fa0a 	bl	800271a <bno055_set_page>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <bno055_gyr_conf+0xc4>
        return err;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	e000      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}

0800231e <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 800231e:	b590      	push	{r4, r7, lr}
 8002320:	b0af      	sub	sp, #188	@ 0xbc
 8002322:	af2a      	add	r7, sp, #168	@ 0xa8
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	4608      	mov	r0, r1
 8002328:	4611      	mov	r1, r2
 800232a:	461a      	mov	r2, r3
 800232c:	4603      	mov	r3, r0
 800232e:	70fb      	strb	r3, [r7, #3]
 8002330:	460b      	mov	r3, r1
 8002332:	70bb      	strb	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002338:	2101      	movs	r1, #1
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f9ed 	bl	800271a <bno055_set_page>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <bno055_mag_conf+0x30>
        return err;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	e04b      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800234e:	2100      	movs	r1, #0
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f84c 	bl	80023ee <bno055_set_opmode>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <bno055_mag_conf+0x46>
        return err;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	e040      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002364:	200c      	movs	r0, #12
 8002366:	f001 fb09 	bl	800397c <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	78bb      	ldrb	r3, [r7, #2]
 800236e:	4313      	orrs	r3, r2
 8002370:	b2da      	uxtb	r2, r3
 8002372:	787b      	ldrb	r3, [r7, #1]
 8002374:	4313      	orrs	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800237a:	687c      	ldr	r4, [r7, #4]
 800237c:	2301      	movs	r3, #1
 800237e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002380:	f107 030e 	add.w	r3, r7, #14
 8002384:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002386:	2309      	movs	r3, #9
 8002388:	9327      	str	r3, [sp, #156]	@ 0x9c
 800238a:	4668      	mov	r0, sp
 800238c:	f104 0310 	add.w	r3, r4, #16
 8002390:	229c      	movs	r2, #156	@ 0x9c
 8002392:	4619      	mov	r1, r3
 8002394:	f005 fb61 	bl	8007a5a <memcpy>
 8002398:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800239c:	f000 f98f 	bl	80026be <bno055_write_regs>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <bno055_mag_conf+0x90>
        return err;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	e01b      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f81a 	bl	80023ee <bno055_set_opmode>
 80023ba:	4603      	mov	r3, r0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <bno055_mag_conf+0xaa>
        return err;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	e00e      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80023c8:	2018      	movs	r0, #24
 80023ca:	f001 fad7 	bl	800397c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f9a2 	bl	800271a <bno055_set_page>
 80023d6:	4603      	mov	r3, r0
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <bno055_mag_conf+0xc6>
        return err;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	e000      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}

080023ee <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80023ee:	b590      	push	{r4, r7, lr}
 80023f0:	b0af      	sub	sp, #188	@ 0xbc
 80023f2:	af2a      	add	r7, sp, #168	@ 0xa8
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80023fa:	687c      	ldr	r4, [r7, #4]
 80023fc:	2301      	movs	r3, #1
 80023fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002400:	1cfb      	adds	r3, r7, #3
 8002402:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002404:	233d      	movs	r3, #61	@ 0x3d
 8002406:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002408:	4668      	mov	r0, sp
 800240a:	f104 0310 	add.w	r3, r4, #16
 800240e:	229c      	movs	r2, #156	@ 0x9c
 8002410:	4619      	mov	r1, r3
 8002412:	f005 fb22 	bl	8007a5a <memcpy>
 8002416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800241a:	f000 f950 	bl	80026be <bno055_write_regs>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	e003      	b.n	8002434 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800242c:	2018      	movs	r0, #24
 800242e:	f001 faa5 	bl	800397c <HAL_Delay>
    return BNO_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}

0800243c <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b0af      	sub	sp, #188	@ 0xbc
 8002440:	af2a      	add	r7, sp, #168	@ 0xa8
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	70fb      	strb	r3, [r7, #3]
 800244e:	460b      	mov	r3, r1
 8002450:	70bb      	strb	r3, [r7, #2]
 8002452:	4613      	mov	r3, r2
 8002454:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002456:	2100      	movs	r1, #0
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ffc8 	bl	80023ee <bno055_set_opmode>
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <bno055_set_unit+0x30>
        return err;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	e04b      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f953 	bl	800271a <bno055_set_page>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <bno055_set_unit+0x46>
        return err;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	e040      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	78bb      	ldrb	r3, [r7, #2]
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	787b      	ldrb	r3, [r7, #1]
 800248c:	4313      	orrs	r3, r2
 800248e:	b2da      	uxtb	r2, r3
 8002490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002494:	4313      	orrs	r3, r2
 8002496:	b2db      	uxtb	r3, r3
 8002498:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 800249a:	687c      	ldr	r4, [r7, #4]
 800249c:	2301      	movs	r3, #1
 800249e:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024a0:	f107 030e 	add.w	r3, r7, #14
 80024a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024a6:	233b      	movs	r3, #59	@ 0x3b
 80024a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024aa:	4668      	mov	r0, sp
 80024ac:	f104 0310 	add.w	r3, r4, #16
 80024b0:	229c      	movs	r2, #156	@ 0x9c
 80024b2:	4619      	mov	r1, r3
 80024b4:	f005 fad1 	bl	8007a5a <memcpy>
 80024b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024bc:	f000 f8ff 	bl	80026be <bno055_write_regs>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <bno055_set_unit+0x92>
        return err;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	e01a      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	78ba      	ldrb	r2, [r7, #2]
 80024d2:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	787a      	ldrb	r2, [r7, #1]
 80024d8:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024e0:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff7d 	bl	80023ee <bno055_set_opmode>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <bno055_set_unit+0xc6>
        return err;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	e000      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bd90      	pop	{r4, r7, pc}

0800250c <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b0af      	sub	sp, #188	@ 0xbc
 8002510:	af2a      	add	r7, sp, #168	@ 0xa8
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800251e:	2304      	movs	r3, #4
 8002520:	e04d      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002522:	2100      	movs	r1, #0
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff62 	bl	80023ee <bno055_set_opmode>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <bno055_set_pwr_mode+0x2c>
        return err;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	e042      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002538:	2100      	movs	r1, #0
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8ed 	bl	800271a <bno055_set_page>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <bno055_set_pwr_mode+0x42>
        return err;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	e037      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 800254e:	687c      	ldr	r4, [r7, #4]
 8002550:	2301      	movs	r3, #1
 8002552:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002554:	1cfb      	adds	r3, r7, #3
 8002556:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002558:	233e      	movs	r3, #62	@ 0x3e
 800255a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800255c:	4668      	mov	r0, sp
 800255e:	f104 0310 	add.w	r3, r4, #16
 8002562:	229c      	movs	r2, #156	@ 0x9c
 8002564:	4619      	mov	r1, r3
 8002566:	f005 fa78 	bl	8007a5a <memcpy>
 800256a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800256e:	f000 f8a6 	bl	80026be <bno055_write_regs>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	e01e      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002586:	2100      	movs	r1, #0
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f8c6 	bl	800271a <bno055_set_page>
 800258e:	4603      	mov	r3, r0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <bno055_set_pwr_mode+0x90>
        return err;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	e010      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	791b      	ldrb	r3, [r3, #4]
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff23 	bl	80023ee <bno055_set_opmode>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <bno055_set_pwr_mode+0xaa>
        return err;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	e003      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 80025b6:	2002      	movs	r0, #2
 80025b8:	f001 f9e0 	bl	800397c <HAL_Delay>
    return BNO_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}

080025c6 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80025c6:	b590      	push	{r4, r7, lr}
 80025c8:	b0af      	sub	sp, #188	@ 0xbc
 80025ca:	af2a      	add	r7, sp, #168	@ 0xa8
 80025cc:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80025d2:	687c      	ldr	r4, [r7, #4]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80025d8:	f107 030f 	add.w	r3, r7, #15
 80025dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80025de:	233f      	movs	r3, #63	@ 0x3f
 80025e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80025e2:	4668      	mov	r0, sp
 80025e4:	f104 0310 	add.w	r3, r4, #16
 80025e8:	229c      	movs	r2, #156	@ 0x9c
 80025ea:	4619      	mov	r1, r3
 80025ec:	f005 fa35 	bl	8007a5a <memcpy>
 80025f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025f4:	f000 f863 	bl	80026be <bno055_write_regs>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b0af      	sub	sp, #188	@ 0xbc
 8002610:	af2a      	add	r7, sp, #168	@ 0xa8
 8002612:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002618:	687c      	ldr	r4, [r7, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	9329      	str	r3, [sp, #164]	@ 0xa4
 800261e:	f107 030f 	add.w	r3, r7, #15
 8002622:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002624:	233f      	movs	r3, #63	@ 0x3f
 8002626:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002628:	4668      	mov	r0, sp
 800262a:	f104 0310 	add.w	r3, r4, #16
 800262e:	229c      	movs	r2, #156	@ 0x9c
 8002630:	4619      	mov	r1, r3
 8002632:	f005 fa12 	bl	8007a5a <memcpy>
 8002636:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800263a:	f000 f840 	bl	80026be <bno055_write_regs>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <bno055_on+0x3e>
    }
    return BNO_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}

08002652 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8002652:	b084      	sub	sp, #16
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af02      	add	r7, sp, #8
 800265a:	f107 0c10 	add.w	ip, r7, #16
 800265e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002662:	6938      	ldr	r0, [r7, #16]
 8002664:	7dbb      	ldrb	r3, [r7, #22]
 8002666:	4619      	mov	r1, r3
 8002668:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2301      	movs	r3, #1
 8002674:	f002 f960 	bl	8004938 <HAL_I2C_Master_Transmit>
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002682:	2301      	movs	r3, #1
 8002684:	e014      	b.n	80026b0 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8002686:	6938      	ldr	r0, [r7, #16]
 8002688:	7dbb      	ldrb	r3, [r7, #22]
 800268a:	4619      	mov	r1, r3
 800268c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002690:	b29b      	uxth	r3, r3
 8002692:	f04f 32ff 	mov.w	r2, #4294967295
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800269c:	f002 fa4a 	bl	8004b34 <HAL_I2C_Master_Receive>
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026ba:	b004      	add	sp, #16
 80026bc:	4770      	bx	lr

080026be <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80026be:	b084      	sub	sp, #16
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af04      	add	r7, sp, #16
 80026c6:	f107 0418 	add.w	r4, r7, #24
 80026ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80026ce:	69b8      	ldr	r0, [r7, #24]
 80026d0:	7fbb      	ldrb	r3, [r7, #30]
 80026d2:	461d      	mov	r5, r3
 80026d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026de:	b299      	uxth	r1, r3
 80026e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f04f 34ff 	mov.w	r4, #4294967295
 80026ea:	9402      	str	r4, [sp, #8]
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	4629      	mov	r1, r5
 80026f8:	f002 fc4e 	bl	8004f98 <HAL_I2C_Mem_Write>
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002716:	b004      	add	sp, #16
 8002718:	4770      	bx	lr

0800271a <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b0af      	sub	sp, #188	@ 0xbc
 800271e:	af2a      	add	r7, sp, #168	@ 0xa8
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7b5a      	ldrb	r2, [r3, #13]
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <bno055_set_page+0x1a>
        return BNO_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e024      	b.n	800277e <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d901      	bls.n	800273e <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800273a:	2302      	movs	r3, #2
 800273c:	e01f      	b.n	800277e <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 800273e:	687c      	ldr	r4, [r7, #4]
 8002740:	2301      	movs	r3, #1
 8002742:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002744:	1cfb      	adds	r3, r7, #3
 8002746:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002748:	2307      	movs	r3, #7
 800274a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800274c:	4668      	mov	r0, sp
 800274e:	f104 0310 	add.w	r3, r4, #16
 8002752:	229c      	movs	r2, #156	@ 0x9c
 8002754:	4619      	mov	r1, r3
 8002756:	f005 f980 	bl	8007a5a <memcpy>
 800275a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800275e:	f7ff ffae 	bl	80026be <bno055_write_regs>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <bno055_set_page+0x56>
        return err;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	e006      	b.n	800277e <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002776:	2002      	movs	r0, #2
 8002778:	f001 f900 	bl	800397c <HAL_Delay>
    return BNO_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
	...

08002788 <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b06      	cmp	r3, #6
 8002796:	d81f      	bhi.n	80027d8 <bno055_err_str+0x50>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <bno055_err_str+0x18>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027bd 	.word	0x080027bd
 80027a4:	080027c1 	.word	0x080027c1
 80027a8:	080027c5 	.word	0x080027c5
 80027ac:	080027d1 	.word	0x080027d1
 80027b0:	080027c9 	.word	0x080027c9
 80027b4:	080027cd 	.word	0x080027cd
 80027b8:	080027d5 	.word	0x080027d5
        case BNO_OK:
            return "[BNO] Ok!";
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <bno055_err_str+0x60>)
 80027be:	e00c      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <bno055_err_str+0x64>)
 80027c2:	e00a      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <bno055_err_str+0x68>)
 80027c6:	e008      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 80027c8:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <bno055_err_str+0x6c>)
 80027ca:	e006      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <bno055_err_str+0x70>)
 80027ce:	e004      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <bno055_err_str+0x74>)
 80027d2:	e002      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 80027d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <bno055_err_str+0x78>)
 80027d6:	e000      	b.n	80027da <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <bno055_err_str+0x60>)
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	08009888 	.word	0x08009888
 80027ec:	08009894 	.word	0x08009894
 80027f0:	080098a8 	.word	0x080098a8
 80027f4:	080098c4 	.word	0x080098c4
 80027f8:	080098e8 	.word	0x080098e8
 80027fc:	08009900 	.word	0x08009900
 8002800:	0800990c 	.word	0x0800990c

08002804 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800280c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002810:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800281c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002820:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002824:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800282c:	e000      	b.n	8002830 <ITM_SendChar+0x2c>
    {
      __NOP();
 800282e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002830:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f9      	beq.n	800282e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800283a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <ADC_Select_CH0>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Select_CH0 (void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800285a:	463b      	mov	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800286e:	2302      	movs	r3, #2
 8002870:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002872:	463b      	mov	r3, r7
 8002874:	4619      	mov	r1, r3
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <ADC_Select_CH0+0x3c>)
 8002878:	f001 fa68 	bl	8003d4c <HAL_ADC_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <ADC_Select_CH0+0x32>
	{
	Error_Handler();
 8002882:	f000 fae5 	bl	8002e50 <Error_Handler>
	}
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200001f8 	.word	0x200001f8

08002894 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800289a:	463b      	mov	r3, r7
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ae:	463b      	mov	r3, r7
 80028b0:	4619      	mov	r1, r3
 80028b2:	4806      	ldr	r0, [pc, #24]	@ (80028cc <ADC_Select_CH1+0x38>)
 80028b4:	f001 fa4a 	bl	8003d4c <HAL_ADC_ConfigChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <ADC_Select_CH1+0x2e>
	{
	Error_Handler();
 80028be:	f000 fac7 	bl	8002e50 <Error_Handler>
	}
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200001f8 	.word	0x200001f8

080028d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 80028d6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028d8:	f000 ffde 	bl	8003898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028dc:	f000 f8ee 	bl	8002abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e0:	f000 fa16 	bl	8002d10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028e4:	f000 f9ea 	bl	8002cbc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80028e8:	f000 f952 	bl	8002b90 <MX_ADC1_Init>
  MX_I2C1_Init();
 80028ec:	f000 f98a 	bl	8002c04 <MX_I2C1_Init>
  MX_I2C2_Init();
 80028f0:	f000 f9b6 	bl	8002c60 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  bno = (bno055_t)
 80028f4:	4b62      	ldr	r3, [pc, #392]	@ (8002a80 <main+0x1b0>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	23ac      	movs	r3, #172	@ 0xac
 80028fa:	461a      	mov	r2, r3
 80028fc:	2100      	movs	r1, #0
 80028fe:	f005 f82d 	bl	800795c <memset>
 8002902:	4b5f      	ldr	r3, [pc, #380]	@ (8002a80 <main+0x1b0>)
 8002904:	4a5f      	ldr	r2, [pc, #380]	@ (8002a84 <main+0x1b4>)
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4b5d      	ldr	r3, [pc, #372]	@ (8002a80 <main+0x1b0>)
 800290a:	2208      	movs	r2, #8
 800290c:	711a      	strb	r2, [r3, #4]
 800290e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a80 <main+0x1b0>)
 8002910:	2229      	movs	r2, #41	@ 0x29
 8002912:	719a      	strb	r2, [r3, #6]
  {
	  .i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU, ._temp_unit = 0,
	  // .ptr = &bno,
  };
  HAL_Delay(1000);
 8002914:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002918:	f001 f830 	bl	800397c <HAL_Delay>

  if ((err = bno055_init(&bno)) == BNO_OK)
 800291c:	4858      	ldr	r0, [pc, #352]	@ (8002a80 <main+0x1b0>)
 800291e:	f7fe fac3 	bl	8000ea8 <bno055_init>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b58      	ldr	r3, [pc, #352]	@ (8002a88 <main+0x1b8>)
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	4b57      	ldr	r3, [pc, #348]	@ (8002a88 <main+0x1b8>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <main+0x70>
    {
    	  printf("[+] BNO055 init success\r\n");
 8002932:	4856      	ldr	r0, [pc, #344]	@ (8002a8c <main+0x1bc>)
 8002934:	f004 ff12 	bl	800775c <puts>
  	  HAL_Delay(100);
 8002938:	2064      	movs	r0, #100	@ 0x64
 800293a:	f001 f81f 	bl	800397c <HAL_Delay>
 800293e:	e00d      	b.n	800295c <main+0x8c>
    }
    else
    {
  	  printf("[!] BNO055 init failed\r\n");
 8002940:	4853      	ldr	r0, [pc, #332]	@ (8002a90 <main+0x1c0>)
 8002942:	f004 ff0b 	bl	800775c <puts>
  	  printf("%s\n", bno055_err_str(err));
 8002946:	4b50      	ldr	r3, [pc, #320]	@ (8002a88 <main+0x1b8>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ff1c 	bl	8002788 <bno055_err_str>
 8002950:	4603      	mov	r3, r0
 8002952:	4618      	mov	r0, r3
 8002954:	f004 ff02 	bl	800775c <puts>
  	  Error_Handler();
 8002958:	f000 fa7a 	bl	8002e50 <Error_Handler>
    }
  	  HAL_Delay(100);
 800295c:	2064      	movs	r0, #100	@ 0x64
 800295e:	f001 f80d 	bl	800397c <HAL_Delay>
  	  err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8002962:	2300      	movs	r3, #0
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	4844      	ldr	r0, [pc, #272]	@ (8002a80 <main+0x1b0>)
 800296e:	f7ff fd65 	bl	800243c <bno055_set_unit>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	4b44      	ldr	r3, [pc, #272]	@ (8002a88 <main+0x1b8>)
 8002978:	701a      	strb	r2, [r3, #0]
    if (err != BNO_OK)
 800297a:	4b43      	ldr	r3, [pc, #268]	@ (8002a88 <main+0x1b8>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <main+0xc0>
    {
  	  printf("[BNO] Failed to set units. Err: %d\r\n", err);
 8002982:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <main+0x1b8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4842      	ldr	r0, [pc, #264]	@ (8002a94 <main+0x1c4>)
 800298a:	f004 fe7f 	bl	800768c <iprintf>
 800298e:	e002      	b.n	8002996 <main+0xc6>
    }
    else
    {
  	  printf("[BNO] Unit selection success\r\n");
 8002990:	4841      	ldr	r0, [pc, #260]	@ (8002a98 <main+0x1c8>)
 8002992:	f004 fee3 	bl	800775c <puts>
    }

    HAL_Delay(1000);
 8002996:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800299a:	f000 ffef 	bl	800397c <HAL_Delay>
    bno055_euler_t eul = {0, 0, 0};
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

    SSD1306_Init();
 80029b6:	f000 fa51 	bl	8002e5c <SSD1306_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bno.euler(&bno, &eul);
 80029ba:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <main+0x1b0>)
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c0:	f507 727a 	add.w	r2, r7, #1000	@ 0x3e8
 80029c4:	4611      	mov	r1, r2
 80029c6:	482e      	ldr	r0, [pc, #184]	@ (8002a80 <main+0x1b0>)
 80029c8:	4798      	blx	r3

	  //uint32_t yaw = (int)eul.yaw;

	  ADC_Select_CH0();
 80029ca:	f7ff ff43 	bl	8002854 <ADC_Select_CH0>
	  HAL_ADC_Start(&hadc1);
 80029ce:	4833      	ldr	r0, [pc, #204]	@ (8002a9c <main+0x1cc>)
 80029d0:	f001 f83c 	bl	8003a4c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80029d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80029d8:	4830      	ldr	r0, [pc, #192]	@ (8002a9c <main+0x1cc>)
 80029da:	f001 f91e 	bl	8003c1a <HAL_ADC_PollForConversion>
	  feedback_pot = HAL_ADC_GetValue(&hadc1);
 80029de:	482f      	ldr	r0, [pc, #188]	@ (8002a9c <main+0x1cc>)
 80029e0:	f001 f9a6 	bl	8003d30 <HAL_ADC_GetValue>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa0 <main+0x1d0>)
 80029e8:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 80029ea:	482c      	ldr	r0, [pc, #176]	@ (8002a9c <main+0x1cc>)
 80029ec:	f001 f8e2 	bl	8003bb4 <HAL_ADC_Stop>

	  ADC_Select_CH1();
 80029f0:	f7ff ff50 	bl	8002894 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 80029f4:	4829      	ldr	r0, [pc, #164]	@ (8002a9c <main+0x1cc>)
 80029f6:	f001 f829 	bl	8003a4c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80029fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80029fe:	4827      	ldr	r0, [pc, #156]	@ (8002a9c <main+0x1cc>)
 8002a00:	f001 f90b 	bl	8003c1a <HAL_ADC_PollForConversion>
	  offset_pot = HAL_ADC_GetValue(&hadc1);
 8002a04:	4825      	ldr	r0, [pc, #148]	@ (8002a9c <main+0x1cc>)
 8002a06:	f001 f993 	bl	8003d30 <HAL_ADC_GetValue>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a25      	ldr	r2, [pc, #148]	@ (8002aa4 <main+0x1d4>)
 8002a0e:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8002a10:	4822      	ldr	r0, [pc, #136]	@ (8002a9c <main+0x1cc>)
 8002a12:	f001 f8cf 	bl	8003bb4 <HAL_ADC_Stop>


	  printf("%ld  %ld\r\n", feedback_pot, offset_pot);
 8002a16:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <main+0x1d0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <main+0x1d4>)
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4821      	ldr	r0, [pc, #132]	@ (8002aa8 <main+0x1d8>)
 8002a22:	f004 fe33 	bl	800768c <iprintf>
	  fflush(stdout);
 8002a26:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <main+0x1dc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 fd57 	bl	80074e0 <fflush>
	  HAL_Delay(2);
 8002a32:	2002      	movs	r0, #2
 8002a34:	f000 ffa2 	bl	800397c <HAL_Delay>

	  char char_buff[1000];
	  sprintf(char_buff, "%ld", offset_pot);
 8002a38:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <main+0x1d4>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	491c      	ldr	r1, [pc, #112]	@ (8002ab0 <main+0x1e0>)
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fe93 	bl	800776c <siprintf>

	  SSD1306_GotoXY (0,0);
 8002a46:	2100      	movs	r1, #0
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f000 fb71 	bl	8003130 <SSD1306_GotoXY>
	  SSD1306_Puts ("Offset:", &Font_7x10, 1);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4918      	ldr	r1, [pc, #96]	@ (8002ab4 <main+0x1e4>)
 8002a52:	4819      	ldr	r0, [pc, #100]	@ (8002ab8 <main+0x1e8>)
 8002a54:	f000 fc00 	bl	8003258 <SSD1306_Puts>

	  SSD1306_GotoXY (50,0);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2032      	movs	r0, #50	@ 0x32
 8002a5c:	f000 fb68 	bl	8003130 <SSD1306_GotoXY>
	  SSD1306_Puts (char_buff, &Font_7x10, 1);
 8002a60:	463b      	mov	r3, r7
 8002a62:	2201      	movs	r2, #1
 8002a64:	4913      	ldr	r1, [pc, #76]	@ (8002ab4 <main+0x1e4>)
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fbf6 	bl	8003258 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8002a6c:	f000 faba 	bl	8002fe4 <SSD1306_UpdateScreen>
	  HAL_Delay (2);
 8002a70:	2002      	movs	r0, #2
 8002a72:	f000 ff83 	bl	800397c <HAL_Delay>
	  SSD1306_Clear();
 8002a76:	f000 fc14 	bl	80032a2 <SSD1306_Clear>
  {
 8002a7a:	bf00      	nop
 8002a7c:	e79d      	b.n	80029ba <main+0xea>
 8002a7e:	bf00      	nop
 8002a80:	20000330 	.word	0x20000330
 8002a84:	20000240 	.word	0x20000240
 8002a88:	200003dc 	.word	0x200003dc
 8002a8c:	08009924 	.word	0x08009924
 8002a90:	08009940 	.word	0x08009940
 8002a94:	08009958 	.word	0x08009958
 8002a98:	08009980 	.word	0x08009980
 8002a9c:	200001f8 	.word	0x200001f8
 8002aa0:	200003e0 	.word	0x200003e0
 8002aa4:	200003e4 	.word	0x200003e4
 8002aa8:	080099a0 	.word	0x080099a0
 8002aac:	20000020 	.word	0x20000020
 8002ab0:	080099ac 	.word	0x080099ac
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	080099b0 	.word	0x080099b0

08002abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b094      	sub	sp, #80	@ 0x50
 8002ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ac2:	f107 0320 	add.w	r3, r7, #32
 8002ac6:	2230      	movs	r2, #48	@ 0x30
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 ff46 	bl	800795c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	4b28      	ldr	r3, [pc, #160]	@ (8002b88 <SystemClock_Config+0xcc>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <SystemClock_Config+0xcc>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af0:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <SystemClock_Config+0xcc>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	4b22      	ldr	r3, [pc, #136]	@ (8002b8c <SystemClock_Config+0xd0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a21      	ldr	r2, [pc, #132]	@ (8002b8c <SystemClock_Config+0xd0>)
 8002b06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b8c <SystemClock_Config+0xd0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b20:	2310      	movs	r3, #16
 8002b22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b24:	2302      	movs	r3, #2
 8002b26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b36:	2304      	movs	r3, #4
 8002b38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b3e:	f107 0320 	add.w	r3, r7, #32
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 f86c 	bl	8005c20 <HAL_RCC_OscConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b4e:	f000 f97f 	bl	8002e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b52:	230f      	movs	r3, #15
 8002b54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b56:	2302      	movs	r3, #2
 8002b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 face 	bl	8006110 <HAL_RCC_ClockConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b7a:	f000 f969 	bl	8002e50 <Error_Handler>
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3750      	adds	r7, #80	@ 0x50
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000

08002b90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b94:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002b96:	4a19      	ldr	r2, [pc, #100]	@ (8002bfc <MX_ADC1_Init+0x6c>)
 8002b98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b9a:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002b9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ba0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ba2:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ba8:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bb4:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c00 <MX_ADC1_Init+0x70>)
 8002bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002bce:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002bd0:	2205      	movs	r2, #5
 8002bd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002be2:	4805      	ldr	r0, [pc, #20]	@ (8002bf8 <MX_ADC1_Init+0x68>)
 8002be4:	f000 feee 	bl	80039c4 <HAL_ADC_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8002bee:	f000 f92f 	bl	8002e50 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200001f8 	.word	0x200001f8
 8002bfc:	40012000 	.word	0x40012000
 8002c00:	0f000001 	.word	0x0f000001

08002c04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c08:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c0a:	4a13      	ldr	r2, [pc, #76]	@ (8002c58 <MX_I2C1_Init+0x54>)
 8002c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c10:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <MX_I2C1_Init+0x58>)
 8002c12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c2e:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c34:	4b07      	ldr	r3, [pc, #28]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c40:	4804      	ldr	r0, [pc, #16]	@ (8002c54 <MX_I2C1_Init+0x50>)
 8002c42:	f001 fd35 	bl	80046b0 <HAL_I2C_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c4c:	f000 f900 	bl	8002e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000240 	.word	0x20000240
 8002c58:	40005400 	.word	0x40005400
 8002c5c:	000186a0 	.word	0x000186a0

08002c60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c66:	4a13      	ldr	r2, [pc, #76]	@ (8002cb4 <MX_I2C2_Init+0x54>)
 8002c68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c6c:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <MX_I2C2_Init+0x58>)
 8002c6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c90:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c9c:	4804      	ldr	r0, [pc, #16]	@ (8002cb0 <MX_I2C2_Init+0x50>)
 8002c9e:	f001 fd07 	bl	80046b0 <HAL_I2C_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002ca8:	f000 f8d2 	bl	8002e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000294 	.word	0x20000294
 8002cb4:	40005800 	.word	0x40005800
 8002cb8:	00061a80 	.word	0x00061a80

08002cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	@ (8002d0c <MX_USART2_UART_Init+0x50>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	f003 fc2c 	bl	8006550 <HAL_UART_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cfe:	f000 f8a7 	bl	8002e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200002e8 	.word	0x200002e8
 8002d0c:	40004400 	.word	0x40004400

08002d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	@ 0x28
 8002d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	4b38      	ldr	r3, [pc, #224]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	4a37      	ldr	r2, [pc, #220]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d36:	4b35      	ldr	r3, [pc, #212]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b31      	ldr	r3, [pc, #196]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	4a30      	ldr	r2, [pc, #192]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d52:	4b2e      	ldr	r3, [pc, #184]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	4b2a      	ldr	r3, [pc, #168]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	4a29      	ldr	r2, [pc, #164]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6e:	4b27      	ldr	r3, [pc, #156]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	4b23      	ldr	r3, [pc, #140]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	4a22      	ldr	r2, [pc, #136]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8a:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <MX_GPIO_Init+0xfc>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|reverse_Pin, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8002d9c:	481c      	ldr	r0, [pc, #112]	@ (8002e10 <MX_GPIO_Init+0x100>)
 8002d9e:	f001 fc6d 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(forward_GPIO_Port, forward_Pin, GPIO_PIN_RESET);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2180      	movs	r1, #128	@ 0x80
 8002da6:	481b      	ldr	r0, [pc, #108]	@ (8002e14 <MX_GPIO_Init+0x104>)
 8002da8:	f001 fc68 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002db2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4814      	ldr	r0, [pc, #80]	@ (8002e14 <MX_GPIO_Init+0x104>)
 8002dc4:	f001 fad6 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin reverse_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|reverse_Pin;
 8002dc8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	4619      	mov	r1, r3
 8002de0:	480b      	ldr	r0, [pc, #44]	@ (8002e10 <MX_GPIO_Init+0x100>)
 8002de2:	f001 fac7 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pin : forward_Pin */
  GPIO_InitStruct.Pin = forward_Pin;
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(forward_GPIO_Port, &GPIO_InitStruct);
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4805      	ldr	r0, [pc, #20]	@ (8002e14 <MX_GPIO_Init+0x104>)
 8002dfe:	f001 fab9 	bl	8004374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e02:	bf00      	nop
 8002e04:	3728      	adds	r7, #40	@ 0x28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020800 	.word	0x40020800

08002e18 <_write>:

/* USER CODE BEGIN 4 */

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e009      	b.n	8002e3e <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	60ba      	str	r2, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fce6 	bl	8002804 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	dbf1      	blt.n	8002e2a <_write+0x12>
  }
  return len;
 8002e46:	687b      	ldr	r3, [r7, #4]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e54:	b672      	cpsid	i
}
 8002e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <Error_Handler+0x8>

08002e5c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002e62:	f000 fa27 	bl	80032b4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002e66:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	2178      	movs	r1, #120	@ 0x78
 8002e6e:	485b      	ldr	r0, [pc, #364]	@ (8002fdc <SSD1306_Init+0x180>)
 8002e70:	f002 f98c 	bl	800518c <HAL_I2C_IsDeviceReady>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e0a9      	b.n	8002fd2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002e7e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002e82:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e84:	e002      	b.n	8002e8c <SSD1306_Init+0x30>
		p--;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f9      	bne.n	8002e86 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002e92:	22ae      	movs	r2, #174	@ 0xae
 8002e94:	2100      	movs	r1, #0
 8002e96:	2078      	movs	r0, #120	@ 0x78
 8002e98:	f000 fa88 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2078      	movs	r0, #120	@ 0x78
 8002ea2:	f000 fa83 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	2078      	movs	r0, #120	@ 0x78
 8002eac:	f000 fa7e 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002eb0:	22b0      	movs	r2, #176	@ 0xb0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2078      	movs	r0, #120	@ 0x78
 8002eb6:	f000 fa79 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002eba:	22c8      	movs	r2, #200	@ 0xc8
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2078      	movs	r0, #120	@ 0x78
 8002ec0:	f000 fa74 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2078      	movs	r0, #120	@ 0x78
 8002eca:	f000 fa6f 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002ece:	2210      	movs	r2, #16
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2078      	movs	r0, #120	@ 0x78
 8002ed4:	f000 fa6a 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002ed8:	2240      	movs	r2, #64	@ 0x40
 8002eda:	2100      	movs	r1, #0
 8002edc:	2078      	movs	r0, #120	@ 0x78
 8002ede:	f000 fa65 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002ee2:	2281      	movs	r2, #129	@ 0x81
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2078      	movs	r0, #120	@ 0x78
 8002ee8:	f000 fa60 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002eec:	22ff      	movs	r2, #255	@ 0xff
 8002eee:	2100      	movs	r1, #0
 8002ef0:	2078      	movs	r0, #120	@ 0x78
 8002ef2:	f000 fa5b 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002ef6:	22a1      	movs	r2, #161	@ 0xa1
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2078      	movs	r0, #120	@ 0x78
 8002efc:	f000 fa56 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002f00:	22a6      	movs	r2, #166	@ 0xa6
 8002f02:	2100      	movs	r1, #0
 8002f04:	2078      	movs	r0, #120	@ 0x78
 8002f06:	f000 fa51 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002f0a:	22a8      	movs	r2, #168	@ 0xa8
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	2078      	movs	r0, #120	@ 0x78
 8002f10:	f000 fa4c 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002f14:	223f      	movs	r2, #63	@ 0x3f
 8002f16:	2100      	movs	r1, #0
 8002f18:	2078      	movs	r0, #120	@ 0x78
 8002f1a:	f000 fa47 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f1e:	22a4      	movs	r2, #164	@ 0xa4
 8002f20:	2100      	movs	r1, #0
 8002f22:	2078      	movs	r0, #120	@ 0x78
 8002f24:	f000 fa42 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002f28:	22d3      	movs	r2, #211	@ 0xd3
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2078      	movs	r0, #120	@ 0x78
 8002f2e:	f000 fa3d 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002f32:	2200      	movs	r2, #0
 8002f34:	2100      	movs	r1, #0
 8002f36:	2078      	movs	r0, #120	@ 0x78
 8002f38:	f000 fa38 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f3c:	22d5      	movs	r2, #213	@ 0xd5
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2078      	movs	r0, #120	@ 0x78
 8002f42:	f000 fa33 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002f46:	22f0      	movs	r2, #240	@ 0xf0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2078      	movs	r0, #120	@ 0x78
 8002f4c:	f000 fa2e 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002f50:	22d9      	movs	r2, #217	@ 0xd9
 8002f52:	2100      	movs	r1, #0
 8002f54:	2078      	movs	r0, #120	@ 0x78
 8002f56:	f000 fa29 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002f5a:	2222      	movs	r2, #34	@ 0x22
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	2078      	movs	r0, #120	@ 0x78
 8002f60:	f000 fa24 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002f64:	22da      	movs	r2, #218	@ 0xda
 8002f66:	2100      	movs	r1, #0
 8002f68:	2078      	movs	r0, #120	@ 0x78
 8002f6a:	f000 fa1f 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002f6e:	2212      	movs	r2, #18
 8002f70:	2100      	movs	r1, #0
 8002f72:	2078      	movs	r0, #120	@ 0x78
 8002f74:	f000 fa1a 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002f78:	22db      	movs	r2, #219	@ 0xdb
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2078      	movs	r0, #120	@ 0x78
 8002f7e:	f000 fa15 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002f82:	2220      	movs	r2, #32
 8002f84:	2100      	movs	r1, #0
 8002f86:	2078      	movs	r0, #120	@ 0x78
 8002f88:	f000 fa10 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002f8c:	228d      	movs	r2, #141	@ 0x8d
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2078      	movs	r0, #120	@ 0x78
 8002f92:	f000 fa0b 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002f96:	2214      	movs	r2, #20
 8002f98:	2100      	movs	r1, #0
 8002f9a:	2078      	movs	r0, #120	@ 0x78
 8002f9c:	f000 fa06 	bl	80033ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002fa0:	22af      	movs	r2, #175	@ 0xaf
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	2078      	movs	r0, #120	@ 0x78
 8002fa6:	f000 fa01 	bl	80033ac <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002faa:	222e      	movs	r2, #46	@ 0x2e
 8002fac:	2100      	movs	r1, #0
 8002fae:	2078      	movs	r0, #120	@ 0x78
 8002fb0:	f000 f9fc 	bl	80033ac <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f000 f843 	bl	8003040 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002fba:	f000 f813 	bl	8002fe4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002fbe:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <SSD1306_Init+0x184>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <SSD1306_Init+0x184>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002fca:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <SSD1306_Init+0x184>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002fd0:	2301      	movs	r3, #1
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000294 	.word	0x20000294
 8002fe0:	200007e8 	.word	0x200007e8

08002fe4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002fea:	2300      	movs	r3, #0
 8002fec:	71fb      	strb	r3, [r7, #7]
 8002fee:	e01d      	b.n	800302c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	3b50      	subs	r3, #80	@ 0x50
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2078      	movs	r0, #120	@ 0x78
 8002ffc:	f000 f9d6 	bl	80033ac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003000:	2200      	movs	r2, #0
 8003002:	2100      	movs	r1, #0
 8003004:	2078      	movs	r0, #120	@ 0x78
 8003006:	f000 f9d1 	bl	80033ac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800300a:	2210      	movs	r2, #16
 800300c:	2100      	movs	r1, #0
 800300e:	2078      	movs	r0, #120	@ 0x78
 8003010:	f000 f9cc 	bl	80033ac <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	01db      	lsls	r3, r3, #7
 8003018:	4a08      	ldr	r2, [pc, #32]	@ (800303c <SSD1306_UpdateScreen+0x58>)
 800301a:	441a      	add	r2, r3
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	2140      	movs	r1, #64	@ 0x40
 8003020:	2078      	movs	r0, #120	@ 0x78
 8003022:	f000 f95d 	bl	80032e0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	3301      	adds	r3, #1
 800302a:	71fb      	strb	r3, [r7, #7]
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	2b07      	cmp	r3, #7
 8003030:	d9de      	bls.n	8002ff0 <SSD1306_UpdateScreen+0xc>
	}
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200003e8 	.word	0x200003e8

08003040 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <SSD1306_Fill+0x14>
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <SSD1306_Fill+0x16>
 8003054:	23ff      	movs	r3, #255	@ 0xff
 8003056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800305a:	4619      	mov	r1, r3
 800305c:	4803      	ldr	r0, [pc, #12]	@ (800306c <SSD1306_Fill+0x2c>)
 800305e:	f004 fc7d 	bl	800795c <memset>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200003e8 	.word	0x200003e8

08003070 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
 800307a:	460b      	mov	r3, r1
 800307c:	80bb      	strh	r3, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	70fb      	strb	r3, [r7, #3]
	if (
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	2b7f      	cmp	r3, #127	@ 0x7f
 8003086:	d848      	bhi.n	800311a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003088:	88bb      	ldrh	r3, [r7, #4]
 800308a:	2b3f      	cmp	r3, #63	@ 0x3f
 800308c:	d845      	bhi.n	800311a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800308e:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <SSD1306_DrawPixel+0xb8>)
 8003090:	791b      	ldrb	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d11a      	bne.n	80030e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	88bb      	ldrh	r3, [r7, #4]
 80030ae:	08db      	lsrs	r3, r3, #3
 80030b0:	b298      	uxth	r0, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	01db      	lsls	r3, r3, #7
 80030b6:	4413      	add	r3, r2
 80030b8:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <SSD1306_DrawPixel+0xbc>)
 80030ba:	5cd3      	ldrb	r3, [r2, r3]
 80030bc:	b25a      	sxtb	r2, r3
 80030be:	88bb      	ldrh	r3, [r7, #4]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	4313      	orrs	r3, r2
 80030ce:	b259      	sxtb	r1, r3
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	4603      	mov	r3, r0
 80030d4:	01db      	lsls	r3, r3, #7
 80030d6:	4413      	add	r3, r2
 80030d8:	b2c9      	uxtb	r1, r1
 80030da:	4a14      	ldr	r2, [pc, #80]	@ (800312c <SSD1306_DrawPixel+0xbc>)
 80030dc:	54d1      	strb	r1, [r2, r3]
 80030de:	e01d      	b.n	800311c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	88bb      	ldrh	r3, [r7, #4]
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	b298      	uxth	r0, r3
 80030e8:	4603      	mov	r3, r0
 80030ea:	01db      	lsls	r3, r3, #7
 80030ec:	4413      	add	r3, r2
 80030ee:	4a0f      	ldr	r2, [pc, #60]	@ (800312c <SSD1306_DrawPixel+0xbc>)
 80030f0:	5cd3      	ldrb	r3, [r2, r3]
 80030f2:	b25a      	sxtb	r2, r3
 80030f4:	88bb      	ldrh	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	b25b      	sxtb	r3, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	b25b      	sxtb	r3, r3
 8003106:	4013      	ands	r3, r2
 8003108:	b259      	sxtb	r1, r3
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	4603      	mov	r3, r0
 800310e:	01db      	lsls	r3, r3, #7
 8003110:	4413      	add	r3, r2
 8003112:	b2c9      	uxtb	r1, r1
 8003114:	4a05      	ldr	r2, [pc, #20]	@ (800312c <SSD1306_DrawPixel+0xbc>)
 8003116:	54d1      	strb	r1, [r2, r3]
 8003118:	e000      	b.n	800311c <SSD1306_DrawPixel+0xac>
		return;
 800311a:	bf00      	nop
	}
}
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	200007e8 	.word	0x200007e8
 800312c:	200003e8 	.word	0x200003e8

08003130 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	460a      	mov	r2, r1
 800313a:	80fb      	strh	r3, [r7, #6]
 800313c:	4613      	mov	r3, r2
 800313e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003140:	4a05      	ldr	r2, [pc, #20]	@ (8003158 <SSD1306_GotoXY+0x28>)
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003146:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <SSD1306_GotoXY+0x28>)
 8003148:	88bb      	ldrh	r3, [r7, #4]
 800314a:	8053      	strh	r3, [r2, #2]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	200007e8 	.word	0x200007e8

0800315c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
 8003168:	4613      	mov	r3, r2
 800316a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800316c:	4b39      	ldr	r3, [pc, #228]	@ (8003254 <SSD1306_Putc+0xf8>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	4413      	add	r3, r2
	if (
 8003178:	2b7f      	cmp	r3, #127	@ 0x7f
 800317a:	dc07      	bgt.n	800318c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800317c:	4b35      	ldr	r3, [pc, #212]	@ (8003254 <SSD1306_Putc+0xf8>)
 800317e:	885b      	ldrh	r3, [r3, #2]
 8003180:	461a      	mov	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003188:	2b3f      	cmp	r3, #63	@ 0x3f
 800318a:	dd01      	ble.n	8003190 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800318c:	2300      	movs	r3, #0
 800318e:	e05d      	b.n	800324c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e04b      	b.n	800322e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	3b20      	subs	r3, #32
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	7849      	ldrb	r1, [r1, #1]
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4619      	mov	r1, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	440b      	add	r3, r1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e030      	b.n	800321c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80031ca:	4b22      	ldr	r3, [pc, #136]	@ (8003254 <SSD1306_Putc+0xf8>)
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	b298      	uxth	r0, r3
 80031d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003254 <SSD1306_Putc+0xf8>)
 80031d8:	885a      	ldrh	r2, [r3, #2]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4413      	add	r3, r2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	79ba      	ldrb	r2, [r7, #6]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f7ff ff43 	bl	8003070 <SSD1306_DrawPixel>
 80031ea:	e014      	b.n	8003216 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80031ec:	4b19      	ldr	r3, [pc, #100]	@ (8003254 <SSD1306_Putc+0xf8>)
 80031ee:	881a      	ldrh	r2, [r3, #0]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	b298      	uxth	r0, r3
 80031f8:	4b16      	ldr	r3, [pc, #88]	@ (8003254 <SSD1306_Putc+0xf8>)
 80031fa:	885a      	ldrh	r2, [r3, #2]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4413      	add	r3, r2
 8003202:	b299      	uxth	r1, r3
 8003204:	79bb      	ldrb	r3, [r7, #6]
 8003206:	2b00      	cmp	r3, #0
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	f7ff ff2d 	bl	8003070 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	3301      	adds	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4293      	cmp	r3, r2
 8003226:	d3c8      	bcc.n	80031ba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3301      	adds	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	461a      	mov	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	4293      	cmp	r3, r2
 8003238:	d3ad      	bcc.n	8003196 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <SSD1306_Putc+0xf8>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	4413      	add	r3, r2
 8003244:	b29a      	uxth	r2, r3
 8003246:	4b03      	ldr	r3, [pc, #12]	@ (8003254 <SSD1306_Putc+0xf8>)
 8003248:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800324a:	79fb      	ldrb	r3, [r7, #7]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200007e8 	.word	0x200007e8

08003258 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003266:	e012      	b.n	800328e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	79fa      	ldrb	r2, [r7, #7]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff73 	bl	800315c <SSD1306_Putc>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d002      	beq.n	8003288 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	e008      	b.n	800329a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e8      	bne.n	8003268 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	781b      	ldrb	r3, [r3, #0]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7ff feca 	bl	8003040 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80032ac:	f7ff fe9a 	bl	8002fe4 <SSD1306_UpdateScreen>
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80032ba:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <ssd1306_I2C_Init+0x28>)
 80032bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032be:	e002      	b.n	80032c6 <ssd1306_I2C_Init+0x12>
		p--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f9      	bne.n	80032c0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	0003d090 	.word	0x0003d090

080032e0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b0c7      	sub	sp, #284	@ 0x11c
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	4604      	mov	r4, r0
 80032e8:	4608      	mov	r0, r1
 80032ea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80032ee:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80032f2:	600a      	str	r2, [r1, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032fa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80032fe:	4622      	mov	r2, r4
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003306:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800330a:	4602      	mov	r2, r0
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003312:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003316:	460a      	mov	r2, r1
 8003318:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800331a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800331e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003322:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003326:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003334:	e015      	b.n	8003362 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003336:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800333a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800333e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	441a      	add	r2, r3
 8003346:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800334a:	3301      	adds	r3, #1
 800334c:	7811      	ldrb	r1, [r2, #0]
 800334e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003352:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003356:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003358:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800335c:	3301      	adds	r3, #1
 800335e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003362:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003366:	b29b      	uxth	r3, r3
 8003368:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800336c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d8df      	bhi.n	8003336 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8003376:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800337a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b299      	uxth	r1, r3
 8003382:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003386:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	b29b      	uxth	r3, r3
 8003390:	f107 020c 	add.w	r2, r7, #12
 8003394:	200a      	movs	r0, #10
 8003396:	9000      	str	r0, [sp, #0]
 8003398:	4803      	ldr	r0, [pc, #12]	@ (80033a8 <ssd1306_I2C_WriteMulti+0xc8>)
 800339a:	f001 facd 	bl	8004938 <HAL_I2C_Master_Transmit>
}
 800339e:	bf00      	nop
 80033a0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd90      	pop	{r4, r7, pc}
 80033a8:	20000294 	.word	0x20000294

080033ac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
 80033b6:	460b      	mov	r3, r1
 80033b8:	71bb      	strb	r3, [r7, #6]
 80033ba:	4613      	mov	r3, r2
 80033bc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80033be:	79bb      	ldrb	r3, [r7, #6]
 80033c0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80033c2:	797b      	ldrb	r3, [r7, #5]
 80033c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	b299      	uxth	r1, r3
 80033ca:	f107 020c 	add.w	r2, r7, #12
 80033ce:	230a      	movs	r3, #10
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2302      	movs	r3, #2
 80033d4:	4803      	ldr	r0, [pc, #12]	@ (80033e4 <ssd1306_I2C_Write+0x38>)
 80033d6:	f001 faaf 	bl	8004938 <HAL_I2C_Master_Transmit>
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000294 	.word	0x20000294

080033e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_MspInit+0x4c>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003434 <HAL_MspInit+0x4c>)
 80033f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_MspInit+0x4c>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <HAL_MspInit+0x4c>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	4a08      	ldr	r2, [pc, #32]	@ (8003434 <HAL_MspInit+0x4c>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	@ 0x40
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HAL_MspInit+0x4c>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003426:	2007      	movs	r0, #7
 8003428:	f000 ff70 	bl	800430c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800

08003438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <HAL_ADC_MspInit+0x7c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d127      	bne.n	80034aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_ADC_MspInit+0x80>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	4a15      	ldr	r2, [pc, #84]	@ (80034b8 <HAL_ADC_MspInit+0x80>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003468:	6453      	str	r3, [r2, #68]	@ 0x44
 800346a:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <HAL_ADC_MspInit+0x80>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <HAL_ADC_MspInit+0x80>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	4a0e      	ldr	r2, [pc, #56]	@ (80034b8 <HAL_ADC_MspInit+0x80>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6313      	str	r3, [r2, #48]	@ 0x30
 8003486:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <HAL_ADC_MspInit+0x80>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = feedback_pot_Pin|offset_pot_Pin;
 8003492:	2303      	movs	r3, #3
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003496:	2303      	movs	r3, #3
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	4805      	ldr	r0, [pc, #20]	@ (80034bc <HAL_ADC_MspInit+0x84>)
 80034a6:	f000 ff65 	bl	8004374 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80034aa:	bf00      	nop
 80034ac:	3728      	adds	r7, #40	@ 0x28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40012000 	.word	0x40012000
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40020000 	.word	0x40020000

080034c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	@ 0x30
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3b      	ldr	r2, [pc, #236]	@ (80035cc <HAL_I2C_MspInit+0x10c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d12c      	bne.n	800353c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	4b3a      	ldr	r3, [pc, #232]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	4a39      	ldr	r2, [pc, #228]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f2:	4b37      	ldr	r3, [pc, #220]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = bno_scl_Pin|bno_sda_Pin;
 80034fe:	23c0      	movs	r3, #192	@ 0xc0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003502:	2312      	movs	r3, #18
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350a:	2303      	movs	r3, #3
 800350c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800350e:	2304      	movs	r3, #4
 8003510:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	4619      	mov	r1, r3
 8003518:	482e      	ldr	r0, [pc, #184]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 800351a:	f000 ff2b 	bl	8004374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a2a      	ldr	r2, [pc, #168]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 8003528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800353a:	e042      	b.n	80035c2 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a25      	ldr	r2, [pc, #148]	@ (80035d8 <HAL_I2C_MspInit+0x118>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d13d      	bne.n	80035c2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	4b21      	ldr	r3, [pc, #132]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	4a20      	ldr	r2, [pc, #128]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	6313      	str	r3, [r2, #48]	@ 0x30
 8003556:	4b1e      	ldr	r3, [pc, #120]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = oled_scl_Pin;
 8003562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003568:	2312      	movs	r3, #18
 800356a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003570:	2303      	movs	r3, #3
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003574:	2304      	movs	r3, #4
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(oled_scl_GPIO_Port, &GPIO_InitStruct);
 8003578:	f107 031c 	add.w	r3, r7, #28
 800357c:	4619      	mov	r1, r3
 800357e:	4815      	ldr	r0, [pc, #84]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 8003580:	f000 fef8 	bl	8004374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = oled_sda_Pin;
 8003584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800358a:	2312      	movs	r3, #18
 800358c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003592:	2303      	movs	r3, #3
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003596:	2309      	movs	r3, #9
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(oled_sda_GPIO_Port, &GPIO_InitStruct);
 800359a:	f107 031c 	add.w	r3, r7, #28
 800359e:	4619      	mov	r1, r3
 80035a0:	480c      	ldr	r0, [pc, #48]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 80035a2:	f000 fee7 	bl	8004374 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	4a08      	ldr	r2, [pc, #32]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 80035b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b6:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
}
 80035c2:	bf00      	nop
 80035c4:	3730      	adds	r7, #48	@ 0x30
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40005400 	.word	0x40005400
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40020400 	.word	0x40020400
 80035d8:	40005800 	.word	0x40005800

080035dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	@ 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a19      	ldr	r2, [pc, #100]	@ (8003660 <HAL_UART_MspInit+0x84>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d12b      	bne.n	8003656 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <HAL_UART_MspInit+0x88>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	4a17      	ldr	r2, [pc, #92]	@ (8003664 <HAL_UART_MspInit+0x88>)
 8003608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800360c:	6413      	str	r3, [r2, #64]	@ 0x40
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_UART_MspInit+0x88>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_UART_MspInit+0x88>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	4a10      	ldr	r2, [pc, #64]	@ (8003664 <HAL_UART_MspInit+0x88>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6313      	str	r3, [r2, #48]	@ 0x30
 800362a:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <HAL_UART_MspInit+0x88>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003636:	230c      	movs	r3, #12
 8003638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003646:	2307      	movs	r3, #7
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	4805      	ldr	r0, [pc, #20]	@ (8003668 <HAL_UART_MspInit+0x8c>)
 8003652:	f000 fe8f 	bl	8004374 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003656:	bf00      	nop
 8003658:	3728      	adds	r7, #40	@ 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40004400 	.word	0x40004400
 8003664:	40023800 	.word	0x40023800
 8003668:	40020000 	.word	0x40020000

0800366c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <NMI_Handler+0x4>

08003674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <HardFault_Handler+0x4>

0800367c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <MemManage_Handler+0x4>

08003684 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <BusFault_Handler+0x4>

0800368c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <UsageFault_Handler+0x4>

08003694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036c2:	f000 f93b 	bl	800393c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}

080036ca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0
  return 1;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <_kill>:

int _kill(int pid, int sig)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036e4:	f004 f98c 	bl	8007a00 <__errno>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2216      	movs	r2, #22
 80036ec:	601a      	str	r2, [r3, #0]
  return -1;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <_exit>:

void _exit (int status)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003702:	f04f 31ff 	mov.w	r1, #4294967295
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffe7 	bl	80036da <_kill>
  while (1) {}    /* Make sure we hang here */
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <_exit+0x12>

08003710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	e00a      	b.n	8003738 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003722:	f3af 8000 	nop.w
 8003726:	4601      	mov	r1, r0
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	60ba      	str	r2, [r7, #8]
 800372e:	b2ca      	uxtb	r2, r1
 8003730:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3301      	adds	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	dbf0      	blt.n	8003722 <_read+0x12>
  }

  return len;
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_close>:
  }
  return len;
}

int _close(int file)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003772:	605a      	str	r2, [r3, #4]
  return 0;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <_isatty>:

int _isatty(int file)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800378a:	2301      	movs	r3, #1
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037bc:	4a14      	ldr	r2, [pc, #80]	@ (8003810 <_sbrk+0x5c>)
 80037be:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <_sbrk+0x60>)
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037c8:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <_sbrk+0x64>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <_sbrk+0x64>)
 80037d2:	4a12      	ldr	r2, [pc, #72]	@ (800381c <_sbrk+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d6:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <_sbrk+0x64>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d207      	bcs.n	80037f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e4:	f004 f90c 	bl	8007a00 <__errno>
 80037e8:	4603      	mov	r3, r0
 80037ea:	220c      	movs	r2, #12
 80037ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	e009      	b.n	8003808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f4:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <_sbrk+0x64>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fa:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <_sbrk+0x64>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	4a05      	ldr	r2, [pc, #20]	@ (8003818 <_sbrk+0x64>)
 8003804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20020000 	.word	0x20020000
 8003814:	00000400 	.word	0x00000400
 8003818:	200007f0 	.word	0x200007f0
 800381c:	20000948 	.word	0x20000948

08003820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003824:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <SystemInit+0x20>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	4a05      	ldr	r2, [pc, #20]	@ (8003840 <SystemInit+0x20>)
 800382c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003844:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800387c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003848:	f7ff ffea 	bl	8003820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800384c:	480c      	ldr	r0, [pc, #48]	@ (8003880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800384e:	490d      	ldr	r1, [pc, #52]	@ (8003884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003850:	4a0d      	ldr	r2, [pc, #52]	@ (8003888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003854:	e002      	b.n	800385c <LoopCopyDataInit>

08003856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385a:	3304      	adds	r3, #4

0800385c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800385c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800385e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003860:	d3f9      	bcc.n	8003856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003864:	4c0a      	ldr	r4, [pc, #40]	@ (8003890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003868:	e001      	b.n	800386e <LoopFillZerobss>

0800386a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800386c:	3204      	adds	r2, #4

0800386e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800386e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003870:	d3fb      	bcc.n	800386a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003872:	f004 f8cb 	bl	8007a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003876:	f7ff f82b 	bl	80028d0 <main>
  bx  lr    
 800387a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800387c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003884:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003888:	0800a4c0 	.word	0x0800a4c0
  ldr r2, =_sbss
 800388c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003890:	20000944 	.word	0x20000944

08003894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003894:	e7fe      	b.n	8003894 <ADC_IRQHandler>
	...

08003898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800389c:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <HAL_Init+0x40>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0d      	ldr	r2, [pc, #52]	@ (80038d8 <HAL_Init+0x40>)
 80038a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <HAL_Init+0x40>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0a      	ldr	r2, [pc, #40]	@ (80038d8 <HAL_Init+0x40>)
 80038ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038b4:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a07      	ldr	r2, [pc, #28]	@ (80038d8 <HAL_Init+0x40>)
 80038ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038c0:	2003      	movs	r0, #3
 80038c2:	f000 fd23 	bl	800430c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038c6:	2000      	movs	r0, #0
 80038c8:	f000 f808 	bl	80038dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038cc:	f7ff fd8c 	bl	80033e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00

080038dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038e4:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <HAL_InitTick+0x54>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <HAL_InitTick+0x58>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4619      	mov	r1, r3
 80038ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fd2d 	bl	800435a <HAL_SYSTICK_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e00e      	b.n	8003928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b0f      	cmp	r3, #15
 800390e:	d80a      	bhi.n	8003926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003910:	2200      	movs	r2, #0
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	f000 fd03 	bl	8004322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800391c:	4a06      	ldr	r2, [pc, #24]	@ (8003938 <HAL_InitTick+0x5c>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000008 	.word	0x20000008
 8003934:	20000010 	.word	0x20000010
 8003938:	2000000c 	.word	0x2000000c

0800393c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_IncTick+0x20>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_IncTick+0x24>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4413      	add	r3, r2
 800394c:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <HAL_IncTick+0x24>)
 800394e:	6013      	str	r3, [r2, #0]
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000010 	.word	0x20000010
 8003960:	200007f4 	.word	0x200007f4

08003964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return uwTick;
 8003968:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <HAL_GetTick+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	200007f4 	.word	0x200007f4

0800397c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7ff ffee 	bl	8003964 <HAL_GetTick>
 8003988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d005      	beq.n	80039a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003996:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <HAL_Delay+0x44>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039a2:	bf00      	nop
 80039a4:	f7ff ffde 	bl	8003964 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d8f7      	bhi.n	80039a4 <HAL_Delay+0x28>
  {
  }
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000010 	.word	0x20000010

080039c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e033      	b.n	8003a42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fd28 	bl	8003438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d118      	bne.n	8003a34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a0a:	f023 0302 	bic.w	r3, r3, #2
 8003a0e:	f043 0202 	orr.w	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 faca 	bl	8003fb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a32:	e001      	b.n	8003a38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_Start+0x1a>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e097      	b.n	8003b96 <HAL_ADC_Start+0x14a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d018      	beq.n	8003aae <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a8c:	4b45      	ldr	r3, [pc, #276]	@ (8003ba4 <HAL_ADC_Start+0x158>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a45      	ldr	r2, [pc, #276]	@ (8003ba8 <HAL_ADC_Start+0x15c>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0c9a      	lsrs	r2, r3, #18
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003aa0:	e002      	b.n	8003aa8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f9      	bne.n	8003aa2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d15f      	bne.n	8003b7c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ae6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afa:	d106      	bne.n	8003b0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	f023 0206 	bic.w	r2, r3, #6
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b08:	e002      	b.n	8003b10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b18:	4b24      	ldr	r3, [pc, #144]	@ (8003bac <HAL_ADC_Start+0x160>)
 8003b1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003b24:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d129      	bne.n	8003b94 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	e020      	b.n	8003b94 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <HAL_ADC_Start+0x164>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d11b      	bne.n	8003b94 <HAL_ADC_Start+0x148>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d114      	bne.n	8003b94 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b78:	609a      	str	r2, [r3, #8]
 8003b7a:	e00b      	b.n	8003b94 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000008 	.word	0x20000008
 8003ba8:	431bde83 	.word	0x431bde83
 8003bac:	40012300 	.word	0x40012300
 8003bb0:	40012000 	.word	0x40012000

08003bb4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_Stop+0x16>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e021      	b.n	8003c0e <HAL_ADC_Stop+0x5a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c36:	d113      	bne.n	8003c60 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c46:	d10b      	bne.n	8003c60 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e063      	b.n	8003d28 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c60:	f7ff fe80 	bl	8003964 <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c66:	e021      	b.n	8003cac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d01d      	beq.n	8003cac <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_ADC_PollForConversion+0x6c>
 8003c76:	f7ff fe75 	bl	8003964 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d212      	bcs.n	8003cac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d00b      	beq.n	8003cac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e03d      	b.n	8003d28 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d1d6      	bne.n	8003c68 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f06f 0212 	mvn.w	r2, #18
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d123      	bne.n	8003d26 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11f      	bne.n	8003d26 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d006      	beq.n	8003d02 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d111      	bne.n	8003d26 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d105      	bne.n	8003d26 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e113      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x244>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b09      	cmp	r3, #9
 8003d76:	d925      	bls.n	8003dc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68d9      	ldr	r1, [r3, #12]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3b1e      	subs	r3, #30
 8003d8e:	2207      	movs	r2, #7
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43da      	mvns	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68d9      	ldr	r1, [r3, #12]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	4618      	mov	r0, r3
 8003db0:	4603      	mov	r3, r0
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4403      	add	r3, r0
 8003db6:	3b1e      	subs	r3, #30
 8003db8:	409a      	lsls	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	e022      	b.n	8003e0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6919      	ldr	r1, [r3, #16]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	2207      	movs	r2, #7
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	400a      	ands	r2, r1
 8003de6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6919      	ldr	r1, [r3, #16]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	4618      	mov	r0, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4403      	add	r3, r0
 8003e00:	409a      	lsls	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d824      	bhi.n	8003e5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	3b05      	subs	r3, #5
 8003e24:	221f      	movs	r2, #31
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	400a      	ands	r2, r1
 8003e32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	4618      	mov	r0, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b05      	subs	r3, #5
 8003e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e5a:	e04c      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d824      	bhi.n	8003eae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	3b23      	subs	r3, #35	@ 0x23
 8003e76:	221f      	movs	r2, #31
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	400a      	ands	r2, r1
 8003e84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4618      	mov	r0, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3b23      	subs	r3, #35	@ 0x23
 8003ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003eac:	e023      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3b41      	subs	r3, #65	@ 0x41
 8003ec0:	221f      	movs	r2, #31
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	400a      	ands	r2, r1
 8003ece:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4618      	mov	r0, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3b41      	subs	r3, #65	@ 0x41
 8003eea:	fa00 f203 	lsl.w	r2, r0, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ef6:	4b29      	ldr	r3, [pc, #164]	@ (8003f9c <HAL_ADC_ConfigChannel+0x250>)
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a28      	ldr	r2, [pc, #160]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x254>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10f      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x1d8>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b12      	cmp	r3, #18
 8003f0a:	d10b      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x254>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12b      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x23a>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x258>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <HAL_ADC_ConfigChannel+0x1f4>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b11      	cmp	r3, #17
 8003f3e:	d122      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a11      	ldr	r2, [pc, #68]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x258>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d111      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f62:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x25c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a11      	ldr	r2, [pc, #68]	@ (8003fac <HAL_ADC_ConfigChannel+0x260>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	0c9a      	lsrs	r2, r3, #18
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f78:	e002      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f9      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40012300 	.word	0x40012300
 8003fa0:	40012000 	.word	0x40012000
 8003fa4:	10000012 	.word	0x10000012
 8003fa8:	20000008 	.word	0x20000008
 8003fac:	431bde83 	.word	0x431bde83

08003fb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fb8:	4b79      	ldr	r3, [pc, #484]	@ (80041a0 <ADC_Init+0x1f0>)
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800402a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6899      	ldr	r1, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004042:	4a58      	ldr	r2, [pc, #352]	@ (80041a4 <ADC_Init+0x1f4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d022      	beq.n	800408e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004056:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	e00f      	b.n	80040ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800409c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80040ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0202 	bic.w	r2, r2, #2
 80040bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7e1b      	ldrb	r3, [r3, #24]
 80040c8:	005a      	lsls	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80040fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	3b01      	subs	r3, #1
 8004108:	035a      	lsls	r2, r3, #13
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	e007      	b.n	8004124 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004132:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	3b01      	subs	r3, #1
 8004140:	051a      	lsls	r2, r3, #20
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004166:	025a      	lsls	r2, r3, #9
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6899      	ldr	r1, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	029a      	lsls	r2, r3, #10
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40012300 	.word	0x40012300
 80041a4:	0f000001 	.word	0x0f000001

080041a8 <__NVIC_SetPriorityGrouping>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <__NVIC_SetPriorityGrouping+0x44>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041c4:	4013      	ands	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041da:	4a04      	ldr	r2, [pc, #16]	@ (80041ec <__NVIC_SetPriorityGrouping+0x44>)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	60d3      	str	r3, [r2, #12]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <__NVIC_GetPriorityGrouping>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f4:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <__NVIC_GetPriorityGrouping+0x18>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	f003 0307 	and.w	r3, r3, #7
}
 80041fe:	4618      	mov	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <__NVIC_SetPriority>:
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421c:	2b00      	cmp	r3, #0
 800421e:	db0a      	blt.n	8004236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	490c      	ldr	r1, [pc, #48]	@ (8004258 <__NVIC_SetPriority+0x4c>)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	0112      	lsls	r2, r2, #4
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	440b      	add	r3, r1
 8004230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004234:	e00a      	b.n	800424c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4908      	ldr	r1, [pc, #32]	@ (800425c <__NVIC_SetPriority+0x50>)
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	3b04      	subs	r3, #4
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	440b      	add	r3, r1
 800424a:	761a      	strb	r2, [r3, #24]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000e100 	.word	0xe000e100
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <NVIC_EncodePriority>:
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	@ 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f1c3 0307 	rsb	r3, r3, #7
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf28      	it	cs
 800427e:	2304      	movcs	r3, #4
 8004280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3304      	adds	r3, #4
 8004286:	2b06      	cmp	r3, #6
 8004288:	d902      	bls.n	8004290 <NVIC_EncodePriority+0x30>
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3b03      	subs	r3, #3
 800428e:	e000      	b.n	8004292 <NVIC_EncodePriority+0x32>
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	f04f 32ff 	mov.w	r2, #4294967295
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	401a      	ands	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	43d9      	mvns	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	4313      	orrs	r3, r2
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3724      	adds	r7, #36	@ 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <SysTick_Config>:
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042d8:	d301      	bcc.n	80042de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042da:	2301      	movs	r3, #1
 80042dc:	e00f      	b.n	80042fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042de:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <SysTick_Config+0x40>)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042e6:	210f      	movs	r1, #15
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	f7ff ff8e 	bl	800420c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <SysTick_Config+0x40>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042f6:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <SysTick_Config+0x40>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	e000e010 	.word	0xe000e010

0800430c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff47 	bl	80041a8 <__NVIC_SetPriorityGrouping>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004322:	b580      	push	{r7, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	af00      	add	r7, sp, #0
 8004328:	4603      	mov	r3, r0
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004334:	f7ff ff5c 	bl	80041f0 <__NVIC_GetPriorityGrouping>
 8004338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	6978      	ldr	r0, [r7, #20]
 8004340:	f7ff ff8e 	bl	8004260 <NVIC_EncodePriority>
 8004344:	4602      	mov	r2, r0
 8004346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff5d 	bl	800420c <__NVIC_SetPriority>
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff ffb0 	bl	80042c8 <SysTick_Config>
 8004368:	4603      	mov	r3, r0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004374:	b480      	push	{r7}
 8004376:	b089      	sub	sp, #36	@ 0x24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e159      	b.n	8004644 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004390:	2201      	movs	r2, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	f040 8148 	bne.w	800463e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d005      	beq.n	80043c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d130      	bne.n	8004428 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	2203      	movs	r2, #3
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043fc:	2201      	movs	r2, #1
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 0201 	and.w	r2, r3, #1
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	2b03      	cmp	r3, #3
 8004432:	d017      	beq.n	8004464 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	2203      	movs	r2, #3
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d123      	bne.n	80044b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	08da      	lsrs	r2, r3, #3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3208      	adds	r2, #8
 8004478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	220f      	movs	r2, #15
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	08da      	lsrs	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3208      	adds	r2, #8
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2203      	movs	r2, #3
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0203 	and.w	r2, r3, #3
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80a2 	beq.w	800463e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4b57      	ldr	r3, [pc, #348]	@ (800465c <HAL_GPIO_Init+0x2e8>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	4a56      	ldr	r2, [pc, #344]	@ (800465c <HAL_GPIO_Init+0x2e8>)
 8004504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004508:	6453      	str	r3, [r2, #68]	@ 0x44
 800450a:	4b54      	ldr	r3, [pc, #336]	@ (800465c <HAL_GPIO_Init+0x2e8>)
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004516:	4a52      	ldr	r2, [pc, #328]	@ (8004660 <HAL_GPIO_Init+0x2ec>)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3302      	adds	r3, #2
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	220f      	movs	r2, #15
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a49      	ldr	r2, [pc, #292]	@ (8004664 <HAL_GPIO_Init+0x2f0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d019      	beq.n	8004576 <HAL_GPIO_Init+0x202>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a48      	ldr	r2, [pc, #288]	@ (8004668 <HAL_GPIO_Init+0x2f4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_GPIO_Init+0x1fe>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a47      	ldr	r2, [pc, #284]	@ (800466c <HAL_GPIO_Init+0x2f8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00d      	beq.n	800456e <HAL_GPIO_Init+0x1fa>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a46      	ldr	r2, [pc, #280]	@ (8004670 <HAL_GPIO_Init+0x2fc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <HAL_GPIO_Init+0x1f6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a45      	ldr	r2, [pc, #276]	@ (8004674 <HAL_GPIO_Init+0x300>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d101      	bne.n	8004566 <HAL_GPIO_Init+0x1f2>
 8004562:	2304      	movs	r3, #4
 8004564:	e008      	b.n	8004578 <HAL_GPIO_Init+0x204>
 8004566:	2307      	movs	r3, #7
 8004568:	e006      	b.n	8004578 <HAL_GPIO_Init+0x204>
 800456a:	2303      	movs	r3, #3
 800456c:	e004      	b.n	8004578 <HAL_GPIO_Init+0x204>
 800456e:	2302      	movs	r3, #2
 8004570:	e002      	b.n	8004578 <HAL_GPIO_Init+0x204>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_GPIO_Init+0x204>
 8004576:	2300      	movs	r3, #0
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	f002 0203 	and.w	r2, r2, #3
 800457e:	0092      	lsls	r2, r2, #2
 8004580:	4093      	lsls	r3, r2
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004588:	4935      	ldr	r1, [pc, #212]	@ (8004660 <HAL_GPIO_Init+0x2ec>)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	3302      	adds	r3, #2
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004596:	4b38      	ldr	r3, [pc, #224]	@ (8004678 <HAL_GPIO_Init+0x304>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	43db      	mvns	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004678 <HAL_GPIO_Init+0x304>)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004678 <HAL_GPIO_Init+0x304>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e4:	4a24      	ldr	r2, [pc, #144]	@ (8004678 <HAL_GPIO_Init+0x304>)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045ea:	4b23      	ldr	r3, [pc, #140]	@ (8004678 <HAL_GPIO_Init+0x304>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800460e:	4a1a      	ldr	r2, [pc, #104]	@ (8004678 <HAL_GPIO_Init+0x304>)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004614:	4b18      	ldr	r3, [pc, #96]	@ (8004678 <HAL_GPIO_Init+0x304>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004638:	4a0f      	ldr	r2, [pc, #60]	@ (8004678 <HAL_GPIO_Init+0x304>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3301      	adds	r3, #1
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	2b0f      	cmp	r3, #15
 8004648:	f67f aea2 	bls.w	8004390 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	3724      	adds	r7, #36	@ 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	40013800 	.word	0x40013800
 8004664:	40020000 	.word	0x40020000
 8004668:	40020400 	.word	0x40020400
 800466c:	40020800 	.word	0x40020800
 8004670:	40020c00 	.word	0x40020c00
 8004674:	40021000 	.word	0x40021000
 8004678:	40013c00 	.word	0x40013c00

0800467c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
 8004688:	4613      	mov	r3, r2
 800468a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800468c:	787b      	ldrb	r3, [r7, #1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004698:	e003      	b.n	80046a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800469a:	887b      	ldrh	r3, [r7, #2]
 800469c:	041a      	lsls	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	619a      	str	r2, [r3, #24]
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e12b      	b.n	800491a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe fef2 	bl	80034c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2224      	movs	r2, #36	@ 0x24
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004714:	f001 fef4 	bl	8006500 <HAL_RCC_GetPCLK1Freq>
 8004718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4a81      	ldr	r2, [pc, #516]	@ (8004924 <HAL_I2C_Init+0x274>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d807      	bhi.n	8004734 <HAL_I2C_Init+0x84>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a80      	ldr	r2, [pc, #512]	@ (8004928 <HAL_I2C_Init+0x278>)
 8004728:	4293      	cmp	r3, r2
 800472a:	bf94      	ite	ls
 800472c:	2301      	movls	r3, #1
 800472e:	2300      	movhi	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e006      	b.n	8004742 <HAL_I2C_Init+0x92>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a7d      	ldr	r2, [pc, #500]	@ (800492c <HAL_I2C_Init+0x27c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	bf94      	ite	ls
 800473c:	2301      	movls	r3, #1
 800473e:	2300      	movhi	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0e7      	b.n	800491a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a78      	ldr	r2, [pc, #480]	@ (8004930 <HAL_I2C_Init+0x280>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	0c9b      	lsrs	r3, r3, #18
 8004754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a6a      	ldr	r2, [pc, #424]	@ (8004924 <HAL_I2C_Init+0x274>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d802      	bhi.n	8004784 <HAL_I2C_Init+0xd4>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	3301      	adds	r3, #1
 8004782:	e009      	b.n	8004798 <HAL_I2C_Init+0xe8>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	4a69      	ldr	r2, [pc, #420]	@ (8004934 <HAL_I2C_Init+0x284>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	099b      	lsrs	r3, r3, #6
 8004796:	3301      	adds	r3, #1
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	430b      	orrs	r3, r1
 800479e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	495c      	ldr	r1, [pc, #368]	@ (8004924 <HAL_I2C_Init+0x274>)
 80047b4:	428b      	cmp	r3, r1
 80047b6:	d819      	bhi.n	80047ec <HAL_I2C_Init+0x13c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1e59      	subs	r1, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c6:	1c59      	adds	r1, r3, #1
 80047c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047cc:	400b      	ands	r3, r1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_I2C_Init+0x138>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1e59      	subs	r1, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e0:	3301      	adds	r3, #1
 80047e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e6:	e051      	b.n	800488c <HAL_I2C_Init+0x1dc>
 80047e8:	2304      	movs	r3, #4
 80047ea:	e04f      	b.n	800488c <HAL_I2C_Init+0x1dc>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d111      	bne.n	8004818 <HAL_I2C_Init+0x168>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1e58      	subs	r0, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	440b      	add	r3, r1
 8004802:	fbb0 f3f3 	udiv	r3, r0, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e012      	b.n	800483e <HAL_I2C_Init+0x18e>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1e58      	subs	r0, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	0099      	lsls	r1, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	fbb0 f3f3 	udiv	r3, r0, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Init+0x196>
 8004842:	2301      	movs	r3, #1
 8004844:	e022      	b.n	800488c <HAL_I2C_Init+0x1dc>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10e      	bne.n	800486c <HAL_I2C_Init+0x1bc>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1e58      	subs	r0, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6859      	ldr	r1, [r3, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	440b      	add	r3, r1
 800485c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004860:	3301      	adds	r3, #1
 8004862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800486a:	e00f      	b.n	800488c <HAL_I2C_Init+0x1dc>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1e58      	subs	r0, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	0099      	lsls	r1, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004882:	3301      	adds	r3, #1
 8004884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	6809      	ldr	r1, [r1, #0]
 8004890:	4313      	orrs	r3, r2
 8004892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6911      	ldr	r1, [r2, #16]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68d2      	ldr	r2, [r2, #12]
 80048c6:	4311      	orrs	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	000186a0 	.word	0x000186a0
 8004928:	001e847f 	.word	0x001e847f
 800492c:	003d08ff 	.word	0x003d08ff
 8004930:	431bde83 	.word	0x431bde83
 8004934:	10624dd3 	.word	0x10624dd3

08004938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	461a      	mov	r2, r3
 8004944:	460b      	mov	r3, r1
 8004946:	817b      	strh	r3, [r7, #10]
 8004948:	4613      	mov	r3, r2
 800494a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800494c:	f7ff f80a 	bl	8003964 <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b20      	cmp	r3, #32
 800495c:	f040 80e0 	bne.w	8004b20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2319      	movs	r3, #25
 8004966:	2201      	movs	r2, #1
 8004968:	4970      	ldr	r1, [pc, #448]	@ (8004b2c <HAL_I2C_Master_Transmit+0x1f4>)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 ff22 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004976:	2302      	movs	r3, #2
 8004978:	e0d3      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_I2C_Master_Transmit+0x50>
 8004984:	2302      	movs	r3, #2
 8004986:	e0cc      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ea>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d007      	beq.n	80049ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0201 	orr.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2221      	movs	r2, #33	@ 0x21
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2210      	movs	r2, #16
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	893a      	ldrh	r2, [r7, #8]
 80049de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a50      	ldr	r2, [pc, #320]	@ (8004b30 <HAL_I2C_Master_Transmit+0x1f8>)
 80049ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049f0:	8979      	ldrh	r1, [r7, #10]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6a3a      	ldr	r2, [r7, #32]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fcf6 	bl	80053e8 <I2C_MasterRequestWrite>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e08d      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a1c:	e066      	b.n	8004aec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	6a39      	ldr	r1, [r7, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 ffe0 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d107      	bne.n	8004a46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06b      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d11b      	bne.n	8004ac0 <HAL_I2C_Master_Transmit+0x188>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d017      	beq.n	8004ac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	6a39      	ldr	r1, [r7, #32]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 ffd7 	bl	8005a78 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00d      	beq.n	8004aec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d107      	bne.n	8004ae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e01a      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d194      	bne.n	8004a1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	00100002 	.word	0x00100002
 8004b30:	ffff0000 	.word	0xffff0000

08004b34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	@ 0x30
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	460b      	mov	r3, r1
 8004b42:	817b      	strh	r3, [r7, #10]
 8004b44:	4613      	mov	r3, r2
 8004b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b48:	f7fe ff0c 	bl	8003964 <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	f040 8217 	bne.w	8004f8a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2319      	movs	r3, #25
 8004b62:	2201      	movs	r2, #1
 8004b64:	497c      	ldr	r1, [pc, #496]	@ (8004d58 <HAL_I2C_Master_Receive+0x224>)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fe24 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
 8004b74:	e20a      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_I2C_Master_Receive+0x50>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e203      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d007      	beq.n	8004baa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2222      	movs	r2, #34	@ 0x22
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	893a      	ldrh	r2, [r7, #8]
 8004bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a5c      	ldr	r2, [pc, #368]	@ (8004d5c <HAL_I2C_Master_Receive+0x228>)
 8004bea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bec:	8979      	ldrh	r1, [r7, #10]
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fc7a 	bl	80054ec <I2C_MasterRequestRead>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1c4      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d113      	bne.n	8004c32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	623b      	str	r3, [r7, #32]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	623b      	str	r3, [r7, #32]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e198      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d11b      	bne.n	8004c72 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	e178      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d11b      	bne.n	8004cb2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	e158      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cd8:	e144      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	f200 80f1 	bhi.w	8004ec6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d123      	bne.n	8004d34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 ff09 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e145      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d32:	e117      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d14e      	bne.n	8004dda <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	2200      	movs	r2, #0
 8004d44:	4906      	ldr	r1, [pc, #24]	@ (8004d60 <HAL_I2C_Master_Receive+0x22c>)
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fd34 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e11a      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
 8004d56:	bf00      	nop
 8004d58:	00100002 	.word	0x00100002
 8004d5c:	ffff0000 	.word	0xffff0000
 8004d60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dd8:	e0c4      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de0:	2200      	movs	r2, #0
 8004de2:	496c      	ldr	r1, [pc, #432]	@ (8004f94 <HAL_I2C_Master_Receive+0x460>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fce5 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0cb      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	4955      	ldr	r1, [pc, #340]	@ (8004f94 <HAL_I2C_Master_Receive+0x460>)
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fcb7 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e09d      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ec4:	e04e      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fe1c 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e058      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d124      	bne.n	8004f64 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d107      	bne.n	8004f32 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f30:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f aeb6 	bne.w	8004cda <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e000      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
  }
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3728      	adds	r7, #40	@ 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	00010004 	.word	0x00010004

08004f98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	817b      	strh	r3, [r7, #10]
 8004faa:	460b      	mov	r3, r1
 8004fac:	813b      	strh	r3, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fb2:	f7fe fcd7 	bl	8003964 <HAL_GetTick>
 8004fb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	f040 80d9 	bne.w	8005178 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2319      	movs	r3, #25
 8004fcc:	2201      	movs	r2, #1
 8004fce:	496d      	ldr	r1, [pc, #436]	@ (8005184 <HAL_I2C_Mem_Write+0x1ec>)
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fbef 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e0cc      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_I2C_Mem_Write+0x56>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e0c5      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d007      	beq.n	8005014 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2221      	movs	r2, #33	@ 0x21
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2240      	movs	r2, #64	@ 0x40
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a3a      	ldr	r2, [r7, #32]
 800503e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a4d      	ldr	r2, [pc, #308]	@ (8005188 <HAL_I2C_Mem_Write+0x1f0>)
 8005054:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005056:	88f8      	ldrh	r0, [r7, #6]
 8005058:	893a      	ldrh	r2, [r7, #8]
 800505a:	8979      	ldrh	r1, [r7, #10]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	4603      	mov	r3, r0
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fb0e 	bl	8005688 <I2C_RequestMemoryWrite>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d052      	beq.n	8005118 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e081      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fcb4 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00d      	beq.n	80050a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	2b04      	cmp	r3, #4
 800508c:	d107      	bne.n	800509e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800509c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06b      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	781a      	ldrb	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d11b      	bne.n	8005118 <HAL_I2C_Mem_Write+0x180>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d017      	beq.n	8005118 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1aa      	bne.n	8005076 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fca7 	bl	8005a78 <I2C_WaitOnBTFFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	2b04      	cmp	r3, #4
 8005136:	d107      	bne.n	8005148 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005146:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e016      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800515a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	00100002 	.word	0x00100002
 8005188:	ffff0000 	.word	0xffff0000

0800518c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	@ 0x28
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	460b      	mov	r3, r1
 800519a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800519c:	f7fe fbe2 	bl	8003964 <HAL_GetTick>
 80051a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	f040 8111 	bne.w	80053d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2319      	movs	r3, #25
 80051ba:	2201      	movs	r2, #1
 80051bc:	4988      	ldr	r1, [pc, #544]	@ (80053e0 <HAL_I2C_IsDeviceReady+0x254>)
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 faf8 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80051ca:	2302      	movs	r3, #2
 80051cc:	e104      	b.n	80053d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_I2C_IsDeviceReady+0x50>
 80051d8:	2302      	movs	r3, #2
 80051da:	e0fd      	b.n	80053d8 <HAL_I2C_IsDeviceReady+0x24c>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d007      	beq.n	8005202 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2224      	movs	r2, #36	@ 0x24
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a70      	ldr	r2, [pc, #448]	@ (80053e4 <HAL_I2C_IsDeviceReady+0x258>)
 8005224:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005234:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2200      	movs	r2, #0
 800523e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fab6 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00d      	beq.n	800526a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525c:	d103      	bne.n	8005266 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005264:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e0b6      	b.n	80053d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005278:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800527a:	f7fe fb73 	bl	8003964 <HAL_GetTick>
 800527e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	bf0c      	ite	eq
 800528e:	2301      	moveq	r3, #1
 8005290:	2300      	movne	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052ae:	e025      	b.n	80052fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052b0:	f7fe fb58 	bl	8003964 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d302      	bcc.n	80052c6 <HAL_I2C_IsDeviceReady+0x13a>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	22a0      	movs	r2, #160	@ 0xa0
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2ba0      	cmp	r3, #160	@ 0xa0
 8005306:	d005      	beq.n	8005314 <HAL_I2C_IsDeviceReady+0x188>
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_I2C_IsDeviceReady+0x188>
 800530e:	7dbb      	ldrb	r3, [r7, #22]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0cd      	beq.n	80052b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d129      	bne.n	800537e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005338:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2319      	movs	r3, #25
 8005356:	2201      	movs	r2, #1
 8005358:	4921      	ldr	r1, [pc, #132]	@ (80053e0 <HAL_I2C_IsDeviceReady+0x254>)
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fa2a 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e036      	b.n	80053d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e02c      	b.n	80053d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800538c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005396:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	2319      	movs	r3, #25
 800539e:	2201      	movs	r2, #1
 80053a0:	490f      	ldr	r1, [pc, #60]	@ (80053e0 <HAL_I2C_IsDeviceReady+0x254>)
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fa06 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e012      	b.n	80053d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3301      	adds	r3, #1
 80053b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	f4ff af32 	bcc.w	8005226 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	00100002 	.word	0x00100002
 80053e4:	ffff0000 	.word	0xffff0000

080053e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	460b      	mov	r3, r1
 80053f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b08      	cmp	r3, #8
 8005402:	d006      	beq.n	8005412 <I2C_MasterRequestWrite+0x2a>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d003      	beq.n	8005412 <I2C_MasterRequestWrite+0x2a>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005410:	d108      	bne.n	8005424 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e00b      	b.n	800543c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	2b12      	cmp	r3, #18
 800542a:	d107      	bne.n	800543c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800543a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f9b3 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00d      	beq.n	8005470 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005462:	d103      	bne.n	800546c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800546a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e035      	b.n	80054dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005478:	d108      	bne.n	800548c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547a:	897b      	ldrh	r3, [r7, #10]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005488:	611a      	str	r2, [r3, #16]
 800548a:	e01b      	b.n	80054c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800548c:	897b      	ldrh	r3, [r7, #10]
 800548e:	11db      	asrs	r3, r3, #7
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0306 	and.w	r3, r3, #6
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f063 030f 	orn	r3, r3, #15
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	490e      	ldr	r1, [pc, #56]	@ (80054e4 <I2C_MasterRequestWrite+0xfc>)
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f9fc 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e010      	b.n	80054dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054ba:	897b      	ldrh	r3, [r7, #10]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	4907      	ldr	r1, [pc, #28]	@ (80054e8 <I2C_MasterRequestWrite+0x100>)
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f9ec 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	00010008 	.word	0x00010008
 80054e8:	00010002 	.word	0x00010002

080054ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	460b      	mov	r3, r1
 80054fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005510:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d006      	beq.n	8005526 <I2C_MasterRequestRead+0x3a>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d003      	beq.n	8005526 <I2C_MasterRequestRead+0x3a>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005524:	d108      	bne.n	8005538 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e00b      	b.n	8005550 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	2b11      	cmp	r3, #17
 800553e:	d107      	bne.n	8005550 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800554e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f929 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005576:	d103      	bne.n	8005580 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800557e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e079      	b.n	8005678 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800558c:	d108      	bne.n	80055a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800558e:	897b      	ldrh	r3, [r7, #10]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	611a      	str	r2, [r3, #16]
 800559e:	e05f      	b.n	8005660 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055a0:	897b      	ldrh	r3, [r7, #10]
 80055a2:	11db      	asrs	r3, r3, #7
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f003 0306 	and.w	r3, r3, #6
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f063 030f 	orn	r3, r3, #15
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	4930      	ldr	r1, [pc, #192]	@ (8005680 <I2C_MasterRequestRead+0x194>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f972 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e054      	b.n	8005678 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055ce:	897b      	ldrh	r3, [r7, #10]
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4929      	ldr	r1, [pc, #164]	@ (8005684 <I2C_MasterRequestRead+0x198>)
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f962 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e044      	b.n	8005678 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005612:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f8c7 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00d      	beq.n	8005648 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563a:	d103      	bne.n	8005644 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005642:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e017      	b.n	8005678 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005648:	897b      	ldrh	r3, [r7, #10]
 800564a:	11db      	asrs	r3, r3, #7
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0306 	and.w	r3, r3, #6
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f063 030e 	orn	r3, r3, #14
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4907      	ldr	r1, [pc, #28]	@ (8005684 <I2C_MasterRequestRead+0x198>)
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f91e 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	00010008 	.word	0x00010008
 8005684:	00010002 	.word	0x00010002

08005688 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	4608      	mov	r0, r1
 8005692:	4611      	mov	r1, r2
 8005694:	461a      	mov	r2, r3
 8005696:	4603      	mov	r3, r0
 8005698:	817b      	strh	r3, [r7, #10]
 800569a:	460b      	mov	r3, r1
 800569c:	813b      	strh	r3, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f878 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d8:	d103      	bne.n	80056e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e05f      	b.n	80057a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056e6:	897b      	ldrh	r3, [r7, #10]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	492d      	ldr	r1, [pc, #180]	@ (80057b0 <I2C_RequestMemoryWrite+0x128>)
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f8d3 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e04c      	b.n	80057a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005724:	6a39      	ldr	r1, [r7, #32]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f95e 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00d      	beq.n	800574e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	2b04      	cmp	r3, #4
 8005738:	d107      	bne.n	800574a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e02b      	b.n	80057a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d105      	bne.n	8005760 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005754:	893b      	ldrh	r3, [r7, #8]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	611a      	str	r2, [r3, #16]
 800575e:	e021      	b.n	80057a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005760:	893b      	ldrh	r3, [r7, #8]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	b29b      	uxth	r3, r3
 8005766:	b2da      	uxtb	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	6a39      	ldr	r1, [r7, #32]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f938 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	2b04      	cmp	r3, #4
 8005784:	d107      	bne.n	8005796 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e005      	b.n	80057a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800579a:	893b      	ldrh	r3, [r7, #8]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	00010002 	.word	0x00010002

080057b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057c4:	e048      	b.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d044      	beq.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ce:	f7fe f8c9 	bl	8003964 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d302      	bcc.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d139      	bne.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10d      	bne.n	800580a <I2C_WaitOnFlagUntilTimeout+0x56>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	43da      	mvns	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	e00c      	b.n	8005824 <I2C_WaitOnFlagUntilTimeout+0x70>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	43da      	mvns	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	429a      	cmp	r2, r3
 8005828:	d116      	bne.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e023      	b.n	80058a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	d10d      	bne.n	800587e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	43da      	mvns	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	e00c      	b.n	8005898 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	43da      	mvns	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	429a      	cmp	r2, r3
 800589c:	d093      	beq.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058b6:	e071      	b.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c6:	d123      	bne.n	8005910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	f043 0204 	orr.w	r2, r3, #4
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e067      	b.n	80059e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d041      	beq.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005918:	f7fe f824 	bl	8003964 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d136      	bne.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	0c1b      	lsrs	r3, r3, #16
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10c      	bne.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	43da      	mvns	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4013      	ands	r3, r2
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	e00b      	b.n	800596a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	43da      	mvns	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e021      	b.n	80059e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0c1b      	lsrs	r3, r3, #16
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d10c      	bne.n	80059c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	43da      	mvns	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e00b      	b.n	80059d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	43da      	mvns	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4013      	ands	r3, r2
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f af6d 	bne.w	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f4:	e034      	b.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f8e3 	bl	8005bc2 <I2C_IsAcknowledgeFailed>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e034      	b.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d028      	beq.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0e:	f7fd ffa9 	bl	8003964 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11d      	bne.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2e:	2b80      	cmp	r3, #128	@ 0x80
 8005a30:	d016      	beq.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e007      	b.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d1c3      	bne.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a84:	e034      	b.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f89b 	bl	8005bc2 <I2C_IsAcknowledgeFailed>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e034      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d028      	beq.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f7fd ff61 	bl	8003964 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11d      	bne.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d016      	beq.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d1c3      	bne.n	8005a86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b14:	e049      	b.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d119      	bne.n	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0210 	mvn.w	r2, #16
 8005b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e030      	b.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f7fd ff04 	bl	8003964 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11d      	bne.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	d016      	beq.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e007      	b.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b40      	cmp	r3, #64	@ 0x40
 8005bb6:	d1ae      	bne.n	8005b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd8:	d11b      	bne.n	8005c12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005be2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	f043 0204 	orr.w	r2, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e267      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d075      	beq.n	8005d2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c3e:	4b88      	ldr	r3, [pc, #544]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d00c      	beq.n	8005c64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4a:	4b85      	ldr	r3, [pc, #532]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d112      	bne.n	8005c7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c56:	4b82      	ldr	r3, [pc, #520]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c62:	d10b      	bne.n	8005c7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c64:	4b7e      	ldr	r3, [pc, #504]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05b      	beq.n	8005d28 <HAL_RCC_OscConfig+0x108>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d157      	bne.n	8005d28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e242      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c84:	d106      	bne.n	8005c94 <HAL_RCC_OscConfig+0x74>
 8005c86:	4b76      	ldr	r3, [pc, #472]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a75      	ldr	r2, [pc, #468]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e01d      	b.n	8005cd0 <HAL_RCC_OscConfig+0xb0>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x98>
 8005c9e:	4b70      	ldr	r3, [pc, #448]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a6f      	ldr	r2, [pc, #444]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b6d      	ldr	r3, [pc, #436]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a6c      	ldr	r2, [pc, #432]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e00b      	b.n	8005cd0 <HAL_RCC_OscConfig+0xb0>
 8005cb8:	4b69      	ldr	r3, [pc, #420]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a68      	ldr	r2, [pc, #416]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	4b66      	ldr	r3, [pc, #408]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a65      	ldr	r2, [pc, #404]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fd fe44 	bl	8003964 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ce0:	f7fd fe40 	bl	8003964 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	@ 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e207      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0xc0>
 8005cfe:	e014      	b.n	8005d2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fd fe30 	bl	8003964 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d08:	f7fd fe2c 	bl	8003964 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b64      	cmp	r3, #100	@ 0x64
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e1f3      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1a:	4b51      	ldr	r3, [pc, #324]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0xe8>
 8005d26:	e000      	b.n	8005d2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d063      	beq.n	8005dfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d36:	4b4a      	ldr	r3, [pc, #296]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d42:	4b47      	ldr	r3, [pc, #284]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d11c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d4e:	4b44      	ldr	r3, [pc, #272]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d116      	bne.n	8005d88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5a:	4b41      	ldr	r3, [pc, #260]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_RCC_OscConfig+0x152>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e1c7      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d72:	4b3b      	ldr	r3, [pc, #236]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4937      	ldr	r1, [pc, #220]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d86:	e03a      	b.n	8005dfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d90:	4b34      	ldr	r3, [pc, #208]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fd fde5 	bl	8003964 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d9e:	f7fd fde1 	bl	8003964 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e1a8      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbc:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4925      	ldr	r1, [pc, #148]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	600b      	str	r3, [r1, #0]
 8005dd0:	e015      	b.n	8005dfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd2:	4b24      	ldr	r3, [pc, #144]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fd fdc4 	bl	8003964 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de0:	f7fd fdc0 	bl	8003964 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e187      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d036      	beq.n	8005e78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e12:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <HAL_RCC_OscConfig+0x248>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fd fda4 	bl	8003964 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e20:	f7fd fda0 	bl	8003964 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e167      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e32:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x200>
 8005e3e:	e01b      	b.n	8005e78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e40:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <HAL_RCC_OscConfig+0x248>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e46:	f7fd fd8d 	bl	8003964 <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e4c:	e00e      	b.n	8005e6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e4e:	f7fd fd89 	bl	8003964 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d907      	bls.n	8005e6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e150      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
 8005e60:	40023800 	.word	0x40023800
 8005e64:	42470000 	.word	0x42470000
 8005e68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e6c:	4b88      	ldr	r3, [pc, #544]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1ea      	bne.n	8005e4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8097 	beq.w	8005fb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e8a:	4b81      	ldr	r3, [pc, #516]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10f      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	4b7d      	ldr	r3, [pc, #500]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ea6:	4b7a      	ldr	r3, [pc, #488]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb6:	4b77      	ldr	r3, [pc, #476]	@ (8006094 <HAL_RCC_OscConfig+0x474>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d118      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ec2:	4b74      	ldr	r3, [pc, #464]	@ (8006094 <HAL_RCC_OscConfig+0x474>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a73      	ldr	r2, [pc, #460]	@ (8006094 <HAL_RCC_OscConfig+0x474>)
 8005ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ece:	f7fd fd49 	bl	8003964 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed6:	f7fd fd45 	bl	8003964 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e10c      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee8:	4b6a      	ldr	r3, [pc, #424]	@ (8006094 <HAL_RCC_OscConfig+0x474>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f0      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d106      	bne.n	8005f0a <HAL_RCC_OscConfig+0x2ea>
 8005efc:	4b64      	ldr	r3, [pc, #400]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f00:	4a63      	ldr	r2, [pc, #396]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f08:	e01c      	b.n	8005f44 <HAL_RCC_OscConfig+0x324>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	d10c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x30c>
 8005f12:	4b5f      	ldr	r3, [pc, #380]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f16:	4a5e      	ldr	r2, [pc, #376]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f18:	f043 0304 	orr.w	r3, r3, #4
 8005f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	4a5b      	ldr	r2, [pc, #364]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f2a:	e00b      	b.n	8005f44 <HAL_RCC_OscConfig+0x324>
 8005f2c:	4b58      	ldr	r3, [pc, #352]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f30:	4a57      	ldr	r2, [pc, #348]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f38:	4b55      	ldr	r3, [pc, #340]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3c:	4a54      	ldr	r2, [pc, #336]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	f023 0304 	bic.w	r3, r3, #4
 8005f42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d015      	beq.n	8005f78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4c:	f7fd fd0a 	bl	8003964 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f54:	f7fd fd06 	bl	8003964 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e0cb      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6a:	4b49      	ldr	r3, [pc, #292]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0ee      	beq.n	8005f54 <HAL_RCC_OscConfig+0x334>
 8005f76:	e014      	b.n	8005fa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f78:	f7fd fcf4 	bl	8003964 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f80:	f7fd fcf0 	bl	8003964 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e0b5      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f96:	4b3e      	ldr	r3, [pc, #248]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1ee      	bne.n	8005f80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fa8:	4b39      	ldr	r3, [pc, #228]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	4a38      	ldr	r2, [pc, #224]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80a1 	beq.w	8006100 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fbe:	4b34      	ldr	r3, [pc, #208]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d05c      	beq.n	8006084 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d141      	bne.n	8006056 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd2:	4b31      	ldr	r3, [pc, #196]	@ (8006098 <HAL_RCC_OscConfig+0x478>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd8:	f7fd fcc4 	bl	8003964 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe0:	f7fd fcc0 	bl	8003964 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e087      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff2:	4b27      	ldr	r3, [pc, #156]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1f0      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69da      	ldr	r2, [r3, #28]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	019b      	lsls	r3, r3, #6
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	3b01      	subs	r3, #1
 8006018:	041b      	lsls	r3, r3, #16
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	061b      	lsls	r3, r3, #24
 8006022:	491b      	ldr	r1, [pc, #108]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8006024:	4313      	orrs	r3, r2
 8006026:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006028:	4b1b      	ldr	r3, [pc, #108]	@ (8006098 <HAL_RCC_OscConfig+0x478>)
 800602a:	2201      	movs	r2, #1
 800602c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602e:	f7fd fc99 	bl	8003964 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006036:	f7fd fc95 	bl	8003964 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e05c      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006048:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f0      	beq.n	8006036 <HAL_RCC_OscConfig+0x416>
 8006054:	e054      	b.n	8006100 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006056:	4b10      	ldr	r3, [pc, #64]	@ (8006098 <HAL_RCC_OscConfig+0x478>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605c:	f7fd fc82 	bl	8003964 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006064:	f7fd fc7e 	bl	8003964 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e045      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006076:	4b06      	ldr	r3, [pc, #24]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x444>
 8006082:	e03d      	b.n	8006100 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d107      	bne.n	800609c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e038      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
 8006090:	40023800 	.word	0x40023800
 8006094:	40007000 	.word	0x40007000
 8006098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800609c:	4b1b      	ldr	r3, [pc, #108]	@ (800610c <HAL_RCC_OscConfig+0x4ec>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d028      	beq.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d121      	bne.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d11a      	bne.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060cc:	4013      	ands	r3, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d111      	bne.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	3b01      	subs	r3, #1
 80060e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800

08006110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0cc      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006124:	4b68      	ldr	r3, [pc, #416]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d90c      	bls.n	800614c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006132:	4b65      	ldr	r3, [pc, #404]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b63      	ldr	r3, [pc, #396]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d001      	beq.n	800614c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0b8      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d020      	beq.n	800619a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006164:	4b59      	ldr	r3, [pc, #356]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	4a58      	ldr	r2, [pc, #352]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800616e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800617c:	4b53      	ldr	r3, [pc, #332]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4a52      	ldr	r2, [pc, #328]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006188:	4b50      	ldr	r3, [pc, #320]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	494d      	ldr	r1, [pc, #308]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d044      	beq.n	8006230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d107      	bne.n	80061be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ae:	4b47      	ldr	r3, [pc, #284]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d119      	bne.n	80061ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e07f      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d003      	beq.n	80061ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d107      	bne.n	80061de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ce:	4b3f      	ldr	r3, [pc, #252]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e06f      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061de:	4b3b      	ldr	r3, [pc, #236]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e067      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ee:	4b37      	ldr	r3, [pc, #220]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f023 0203 	bic.w	r2, r3, #3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4934      	ldr	r1, [pc, #208]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006200:	f7fd fbb0 	bl	8003964 <HAL_GetTick>
 8006204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006206:	e00a      	b.n	800621e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006208:	f7fd fbac 	bl	8003964 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006216:	4293      	cmp	r3, r2
 8006218:	d901      	bls.n	800621e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e04f      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800621e:	4b2b      	ldr	r3, [pc, #172]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 020c 	and.w	r2, r3, #12
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	429a      	cmp	r2, r3
 800622e:	d1eb      	bne.n	8006208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006230:	4b25      	ldr	r3, [pc, #148]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d20c      	bcs.n	8006258 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623e:	4b22      	ldr	r3, [pc, #136]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006246:	4b20      	ldr	r3, [pc, #128]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e032      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006264:	4b19      	ldr	r3, [pc, #100]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4916      	ldr	r1, [pc, #88]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006282:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	490e      	ldr	r1, [pc, #56]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006296:	f000 f821 	bl	80062dc <HAL_RCC_GetSysClockFreq>
 800629a:	4602      	mov	r2, r0
 800629c:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	490a      	ldr	r1, [pc, #40]	@ (80062d0 <HAL_RCC_ClockConfig+0x1c0>)
 80062a8:	5ccb      	ldrb	r3, [r1, r3]
 80062aa:	fa22 f303 	lsr.w	r3, r2, r3
 80062ae:	4a09      	ldr	r2, [pc, #36]	@ (80062d4 <HAL_RCC_ClockConfig+0x1c4>)
 80062b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80062b2:	4b09      	ldr	r3, [pc, #36]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fd fb10 	bl	80038dc <HAL_InitTick>

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40023c00 	.word	0x40023c00
 80062cc:	40023800 	.word	0x40023800
 80062d0:	0800a124 	.word	0x0800a124
 80062d4:	20000008 	.word	0x20000008
 80062d8:	2000000c 	.word	0x2000000c

080062dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e0:	b094      	sub	sp, #80	@ 0x50
 80062e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062f4:	4b79      	ldr	r3, [pc, #484]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x200>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 030c 	and.w	r3, r3, #12
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d00d      	beq.n	800631c <HAL_RCC_GetSysClockFreq+0x40>
 8006300:	2b08      	cmp	r3, #8
 8006302:	f200 80e1 	bhi.w	80064c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_RCC_GetSysClockFreq+0x34>
 800630a:	2b04      	cmp	r3, #4
 800630c:	d003      	beq.n	8006316 <HAL_RCC_GetSysClockFreq+0x3a>
 800630e:	e0db      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006310:	4b73      	ldr	r3, [pc, #460]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006312:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006314:	e0db      	b.n	80064ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006316:	4b73      	ldr	r3, [pc, #460]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006318:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800631a:	e0d8      	b.n	80064ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800631c:	4b6f      	ldr	r3, [pc, #444]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x200>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006324:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006326:	4b6d      	ldr	r3, [pc, #436]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d063      	beq.n	80063fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006332:	4b6a      	ldr	r3, [pc, #424]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	099b      	lsrs	r3, r3, #6
 8006338:	2200      	movs	r2, #0
 800633a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800633c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006344:	633b      	str	r3, [r7, #48]	@ 0x30
 8006346:	2300      	movs	r3, #0
 8006348:	637b      	str	r3, [r7, #52]	@ 0x34
 800634a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800634e:	4622      	mov	r2, r4
 8006350:	462b      	mov	r3, r5
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f04f 0100 	mov.w	r1, #0
 800635a:	0159      	lsls	r1, r3, #5
 800635c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006360:	0150      	lsls	r0, r2, #5
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4621      	mov	r1, r4
 8006368:	1a51      	subs	r1, r2, r1
 800636a:	6139      	str	r1, [r7, #16]
 800636c:	4629      	mov	r1, r5
 800636e:	eb63 0301 	sbc.w	r3, r3, r1
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006380:	4659      	mov	r1, fp
 8006382:	018b      	lsls	r3, r1, #6
 8006384:	4651      	mov	r1, sl
 8006386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800638a:	4651      	mov	r1, sl
 800638c:	018a      	lsls	r2, r1, #6
 800638e:	4651      	mov	r1, sl
 8006390:	ebb2 0801 	subs.w	r8, r2, r1
 8006394:	4659      	mov	r1, fp
 8006396:	eb63 0901 	sbc.w	r9, r3, r1
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ae:	4690      	mov	r8, r2
 80063b0:	4699      	mov	r9, r3
 80063b2:	4623      	mov	r3, r4
 80063b4:	eb18 0303 	adds.w	r3, r8, r3
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	462b      	mov	r3, r5
 80063bc:	eb49 0303 	adc.w	r3, r9, r3
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063ce:	4629      	mov	r1, r5
 80063d0:	024b      	lsls	r3, r1, #9
 80063d2:	4621      	mov	r1, r4
 80063d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063d8:	4621      	mov	r1, r4
 80063da:	024a      	lsls	r2, r1, #9
 80063dc:	4610      	mov	r0, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e2:	2200      	movs	r2, #0
 80063e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063ec:	f7fa fbe4 	bl	8000bb8 <__aeabi_uldivmod>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4613      	mov	r3, r2
 80063f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063f8:	e058      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063fa:	4b38      	ldr	r3, [pc, #224]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x200>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	099b      	lsrs	r3, r3, #6
 8006400:	2200      	movs	r2, #0
 8006402:	4618      	mov	r0, r3
 8006404:	4611      	mov	r1, r2
 8006406:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	2300      	movs	r3, #0
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006410:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006414:	4642      	mov	r2, r8
 8006416:	464b      	mov	r3, r9
 8006418:	f04f 0000 	mov.w	r0, #0
 800641c:	f04f 0100 	mov.w	r1, #0
 8006420:	0159      	lsls	r1, r3, #5
 8006422:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006426:	0150      	lsls	r0, r2, #5
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4641      	mov	r1, r8
 800642e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006432:	4649      	mov	r1, r9
 8006434:	eb63 0b01 	sbc.w	fp, r3, r1
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006444:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006448:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800644c:	ebb2 040a 	subs.w	r4, r2, sl
 8006450:	eb63 050b 	sbc.w	r5, r3, fp
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	00eb      	lsls	r3, r5, #3
 800645e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006462:	00e2      	lsls	r2, r4, #3
 8006464:	4614      	mov	r4, r2
 8006466:	461d      	mov	r5, r3
 8006468:	4643      	mov	r3, r8
 800646a:	18e3      	adds	r3, r4, r3
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	464b      	mov	r3, r9
 8006470:	eb45 0303 	adc.w	r3, r5, r3
 8006474:	607b      	str	r3, [r7, #4]
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	f04f 0300 	mov.w	r3, #0
 800647e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006482:	4629      	mov	r1, r5
 8006484:	028b      	lsls	r3, r1, #10
 8006486:	4621      	mov	r1, r4
 8006488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800648c:	4621      	mov	r1, r4
 800648e:	028a      	lsls	r2, r1, #10
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006496:	2200      	movs	r2, #0
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	61fa      	str	r2, [r7, #28]
 800649c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a0:	f7fa fb8a 	bl	8000bb8 <__aeabi_uldivmod>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4613      	mov	r3, r2
 80064aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064ac:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x200>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	3301      	adds	r3, #1
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80064bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064c6:	e002      	b.n	80064ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064c8:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80064ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3750      	adds	r7, #80	@ 0x50
 80064d4:	46bd      	mov	sp, r7
 80064d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064da:	bf00      	nop
 80064dc:	40023800 	.word	0x40023800
 80064e0:	00f42400 	.word	0x00f42400
 80064e4:	007a1200 	.word	0x007a1200

080064e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064ec:	4b03      	ldr	r3, [pc, #12]	@ (80064fc <HAL_RCC_GetHCLKFreq+0x14>)
 80064ee:	681b      	ldr	r3, [r3, #0]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000008 	.word	0x20000008

08006500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006504:	f7ff fff0 	bl	80064e8 <HAL_RCC_GetHCLKFreq>
 8006508:	4602      	mov	r2, r0
 800650a:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	0a9b      	lsrs	r3, r3, #10
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4903      	ldr	r1, [pc, #12]	@ (8006524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006516:	5ccb      	ldrb	r3, [r1, r3]
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40023800 	.word	0x40023800
 8006524:	0800a134 	.word	0x0800a134

08006528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800652c:	f7ff ffdc 	bl	80064e8 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	0b5b      	lsrs	r3, r3, #13
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4903      	ldr	r1, [pc, #12]	@ (800654c <HAL_RCC_GetPCLK2Freq+0x24>)
 800653e:	5ccb      	ldrb	r3, [r1, r3]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40023800 	.word	0x40023800
 800654c:	0800a134 	.word	0x0800a134

08006550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e042      	b.n	80065e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fd f830 	bl	80035dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2224      	movs	r2, #36	@ 0x24
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f82b 	bl	80065f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695a      	ldr	r2, [r3, #20]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f4:	b0c0      	sub	sp, #256	@ 0x100
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660c:	68d9      	ldr	r1, [r3, #12]
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	ea40 0301 	orr.w	r3, r0, r1
 8006618:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	431a      	orrs	r2, r3
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	431a      	orrs	r2, r3
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006648:	f021 010c 	bic.w	r1, r1, #12
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006656:	430b      	orrs	r3, r1
 8006658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666a:	6999      	ldr	r1, [r3, #24]
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	ea40 0301 	orr.w	r3, r0, r1
 8006676:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4b8f      	ldr	r3, [pc, #572]	@ (80068bc <UART_SetConfig+0x2cc>)
 8006680:	429a      	cmp	r2, r3
 8006682:	d005      	beq.n	8006690 <UART_SetConfig+0xa0>
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b8d      	ldr	r3, [pc, #564]	@ (80068c0 <UART_SetConfig+0x2d0>)
 800668c:	429a      	cmp	r2, r3
 800668e:	d104      	bne.n	800669a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006690:	f7ff ff4a 	bl	8006528 <HAL_RCC_GetPCLK2Freq>
 8006694:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006698:	e003      	b.n	80066a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800669a:	f7ff ff31 	bl	8006500 <HAL_RCC_GetPCLK1Freq>
 800669e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ac:	f040 810c 	bne.w	80068c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066c2:	4622      	mov	r2, r4
 80066c4:	462b      	mov	r3, r5
 80066c6:	1891      	adds	r1, r2, r2
 80066c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066ca:	415b      	adcs	r3, r3
 80066cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066d2:	4621      	mov	r1, r4
 80066d4:	eb12 0801 	adds.w	r8, r2, r1
 80066d8:	4629      	mov	r1, r5
 80066da:	eb43 0901 	adc.w	r9, r3, r1
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066f2:	4690      	mov	r8, r2
 80066f4:	4699      	mov	r9, r3
 80066f6:	4623      	mov	r3, r4
 80066f8:	eb18 0303 	adds.w	r3, r8, r3
 80066fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006700:	462b      	mov	r3, r5
 8006702:	eb49 0303 	adc.w	r3, r9, r3
 8006706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006716:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800671a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800671e:	460b      	mov	r3, r1
 8006720:	18db      	adds	r3, r3, r3
 8006722:	653b      	str	r3, [r7, #80]	@ 0x50
 8006724:	4613      	mov	r3, r2
 8006726:	eb42 0303 	adc.w	r3, r2, r3
 800672a:	657b      	str	r3, [r7, #84]	@ 0x54
 800672c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006730:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006734:	f7fa fa40 	bl	8000bb8 <__aeabi_uldivmod>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4b61      	ldr	r3, [pc, #388]	@ (80068c4 <UART_SetConfig+0x2d4>)
 800673e:	fba3 2302 	umull	r2, r3, r3, r2
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	011c      	lsls	r4, r3, #4
 8006746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800674a:	2200      	movs	r2, #0
 800674c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006750:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006754:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006758:	4642      	mov	r2, r8
 800675a:	464b      	mov	r3, r9
 800675c:	1891      	adds	r1, r2, r2
 800675e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006760:	415b      	adcs	r3, r3
 8006762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006764:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006768:	4641      	mov	r1, r8
 800676a:	eb12 0a01 	adds.w	sl, r2, r1
 800676e:	4649      	mov	r1, r9
 8006770:	eb43 0b01 	adc.w	fp, r3, r1
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006780:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006784:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006788:	4692      	mov	sl, r2
 800678a:	469b      	mov	fp, r3
 800678c:	4643      	mov	r3, r8
 800678e:	eb1a 0303 	adds.w	r3, sl, r3
 8006792:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006796:	464b      	mov	r3, r9
 8006798:	eb4b 0303 	adc.w	r3, fp, r3
 800679c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067b4:	460b      	mov	r3, r1
 80067b6:	18db      	adds	r3, r3, r3
 80067b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80067ba:	4613      	mov	r3, r2
 80067bc:	eb42 0303 	adc.w	r3, r2, r3
 80067c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067ca:	f7fa f9f5 	bl	8000bb8 <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4611      	mov	r1, r2
 80067d4:	4b3b      	ldr	r3, [pc, #236]	@ (80068c4 <UART_SetConfig+0x2d4>)
 80067d6:	fba3 2301 	umull	r2, r3, r3, r1
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	2264      	movs	r2, #100	@ 0x64
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	1acb      	subs	r3, r1, r3
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067ea:	4b36      	ldr	r3, [pc, #216]	@ (80068c4 <UART_SetConfig+0x2d4>)
 80067ec:	fba3 2302 	umull	r2, r3, r3, r2
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067f8:	441c      	add	r4, r3
 80067fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006804:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006808:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800680c:	4642      	mov	r2, r8
 800680e:	464b      	mov	r3, r9
 8006810:	1891      	adds	r1, r2, r2
 8006812:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006814:	415b      	adcs	r3, r3
 8006816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800681c:	4641      	mov	r1, r8
 800681e:	1851      	adds	r1, r2, r1
 8006820:	6339      	str	r1, [r7, #48]	@ 0x30
 8006822:	4649      	mov	r1, r9
 8006824:	414b      	adcs	r3, r1
 8006826:	637b      	str	r3, [r7, #52]	@ 0x34
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006834:	4659      	mov	r1, fp
 8006836:	00cb      	lsls	r3, r1, #3
 8006838:	4651      	mov	r1, sl
 800683a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800683e:	4651      	mov	r1, sl
 8006840:	00ca      	lsls	r2, r1, #3
 8006842:	4610      	mov	r0, r2
 8006844:	4619      	mov	r1, r3
 8006846:	4603      	mov	r3, r0
 8006848:	4642      	mov	r2, r8
 800684a:	189b      	adds	r3, r3, r2
 800684c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006850:	464b      	mov	r3, r9
 8006852:	460a      	mov	r2, r1
 8006854:	eb42 0303 	adc.w	r3, r2, r3
 8006858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006868:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800686c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006870:	460b      	mov	r3, r1
 8006872:	18db      	adds	r3, r3, r3
 8006874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006876:	4613      	mov	r3, r2
 8006878:	eb42 0303 	adc.w	r3, r2, r3
 800687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800687e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006882:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006886:	f7fa f997 	bl	8000bb8 <__aeabi_uldivmod>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <UART_SetConfig+0x2d4>)
 8006890:	fba3 1302 	umull	r1, r3, r3, r2
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	2164      	movs	r1, #100	@ 0x64
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	3332      	adds	r3, #50	@ 0x32
 80068a2:	4a08      	ldr	r2, [pc, #32]	@ (80068c4 <UART_SetConfig+0x2d4>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	f003 0207 	and.w	r2, r3, #7
 80068ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4422      	add	r2, r4
 80068b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068b8:	e106      	b.n	8006ac8 <UART_SetConfig+0x4d8>
 80068ba:	bf00      	nop
 80068bc:	40011000 	.word	0x40011000
 80068c0:	40011400 	.word	0x40011400
 80068c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068da:	4642      	mov	r2, r8
 80068dc:	464b      	mov	r3, r9
 80068de:	1891      	adds	r1, r2, r2
 80068e0:	6239      	str	r1, [r7, #32]
 80068e2:	415b      	adcs	r3, r3
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068ea:	4641      	mov	r1, r8
 80068ec:	1854      	adds	r4, r2, r1
 80068ee:	4649      	mov	r1, r9
 80068f0:	eb43 0501 	adc.w	r5, r3, r1
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	00eb      	lsls	r3, r5, #3
 80068fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006902:	00e2      	lsls	r2, r4, #3
 8006904:	4614      	mov	r4, r2
 8006906:	461d      	mov	r5, r3
 8006908:	4643      	mov	r3, r8
 800690a:	18e3      	adds	r3, r4, r3
 800690c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006910:	464b      	mov	r3, r9
 8006912:	eb45 0303 	adc.w	r3, r5, r3
 8006916:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006926:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006936:	4629      	mov	r1, r5
 8006938:	008b      	lsls	r3, r1, #2
 800693a:	4621      	mov	r1, r4
 800693c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006940:	4621      	mov	r1, r4
 8006942:	008a      	lsls	r2, r1, #2
 8006944:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006948:	f7fa f936 	bl	8000bb8 <__aeabi_uldivmod>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4b60      	ldr	r3, [pc, #384]	@ (8006ad4 <UART_SetConfig+0x4e4>)
 8006952:	fba3 2302 	umull	r2, r3, r3, r2
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	011c      	lsls	r4, r3, #4
 800695a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800695e:	2200      	movs	r2, #0
 8006960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006964:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006968:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	1891      	adds	r1, r2, r2
 8006972:	61b9      	str	r1, [r7, #24]
 8006974:	415b      	adcs	r3, r3
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800697c:	4641      	mov	r1, r8
 800697e:	1851      	adds	r1, r2, r1
 8006980:	6139      	str	r1, [r7, #16]
 8006982:	4649      	mov	r1, r9
 8006984:	414b      	adcs	r3, r1
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006994:	4659      	mov	r1, fp
 8006996:	00cb      	lsls	r3, r1, #3
 8006998:	4651      	mov	r1, sl
 800699a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800699e:	4651      	mov	r1, sl
 80069a0:	00ca      	lsls	r2, r1, #3
 80069a2:	4610      	mov	r0, r2
 80069a4:	4619      	mov	r1, r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	4642      	mov	r2, r8
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069b0:	464b      	mov	r3, r9
 80069b2:	460a      	mov	r2, r1
 80069b4:	eb42 0303 	adc.w	r3, r2, r3
 80069b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069d4:	4649      	mov	r1, r9
 80069d6:	008b      	lsls	r3, r1, #2
 80069d8:	4641      	mov	r1, r8
 80069da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069de:	4641      	mov	r1, r8
 80069e0:	008a      	lsls	r2, r1, #2
 80069e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069e6:	f7fa f8e7 	bl	8000bb8 <__aeabi_uldivmod>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	4b38      	ldr	r3, [pc, #224]	@ (8006ad4 <UART_SetConfig+0x4e4>)
 80069f2:	fba3 2301 	umull	r2, r3, r3, r1
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	2264      	movs	r2, #100	@ 0x64
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	1acb      	subs	r3, r1, r3
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	3332      	adds	r3, #50	@ 0x32
 8006a04:	4a33      	ldr	r2, [pc, #204]	@ (8006ad4 <UART_SetConfig+0x4e4>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a10:	441c      	add	r4, r3
 8006a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a16:	2200      	movs	r2, #0
 8006a18:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a20:	4642      	mov	r2, r8
 8006a22:	464b      	mov	r3, r9
 8006a24:	1891      	adds	r1, r2, r2
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	415b      	adcs	r3, r3
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a30:	4641      	mov	r1, r8
 8006a32:	1851      	adds	r1, r2, r1
 8006a34:	6039      	str	r1, [r7, #0]
 8006a36:	4649      	mov	r1, r9
 8006a38:	414b      	adcs	r3, r1
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a48:	4659      	mov	r1, fp
 8006a4a:	00cb      	lsls	r3, r1, #3
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a52:	4651      	mov	r1, sl
 8006a54:	00ca      	lsls	r2, r1, #3
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	189b      	adds	r3, r3, r2
 8006a60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a62:	464b      	mov	r3, r9
 8006a64:	460a      	mov	r2, r1
 8006a66:	eb42 0303 	adc.w	r3, r2, r3
 8006a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a76:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a84:	4649      	mov	r1, r9
 8006a86:	008b      	lsls	r3, r1, #2
 8006a88:	4641      	mov	r1, r8
 8006a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a8e:	4641      	mov	r1, r8
 8006a90:	008a      	lsls	r2, r1, #2
 8006a92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a96:	f7fa f88f 	bl	8000bb8 <__aeabi_uldivmod>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <UART_SetConfig+0x4e4>)
 8006aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	2164      	movs	r1, #100	@ 0x64
 8006aa8:	fb01 f303 	mul.w	r3, r1, r3
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	3332      	adds	r3, #50	@ 0x32
 8006ab2:	4a08      	ldr	r2, [pc, #32]	@ (8006ad4 <UART_SetConfig+0x4e4>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	f003 020f 	and.w	r2, r3, #15
 8006abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4422      	add	r2, r4
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ad4:	51eb851f 	.word	0x51eb851f

08006ad8 <__cvt>:
 8006ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	ec57 6b10 	vmov	r6, r7, d0
 8006ae0:	2f00      	cmp	r7, #0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	bfbb      	ittet	lt
 8006aea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006aee:	461f      	movlt	r7, r3
 8006af0:	2300      	movge	r3, #0
 8006af2:	232d      	movlt	r3, #45	@ 0x2d
 8006af4:	700b      	strb	r3, [r1, #0]
 8006af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006af8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006afc:	4691      	mov	r9, r2
 8006afe:	f023 0820 	bic.w	r8, r3, #32
 8006b02:	bfbc      	itt	lt
 8006b04:	4632      	movlt	r2, r6
 8006b06:	4616      	movlt	r6, r2
 8006b08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b0c:	d005      	beq.n	8006b1a <__cvt+0x42>
 8006b0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b12:	d100      	bne.n	8006b16 <__cvt+0x3e>
 8006b14:	3401      	adds	r4, #1
 8006b16:	2102      	movs	r1, #2
 8006b18:	e000      	b.n	8006b1c <__cvt+0x44>
 8006b1a:	2103      	movs	r1, #3
 8006b1c:	ab03      	add	r3, sp, #12
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	ab02      	add	r3, sp, #8
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	ec47 6b10 	vmov	d0, r6, r7
 8006b28:	4653      	mov	r3, sl
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	f001 f82c 	bl	8007b88 <_dtoa_r>
 8006b30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b34:	4605      	mov	r5, r0
 8006b36:	d119      	bne.n	8006b6c <__cvt+0x94>
 8006b38:	f019 0f01 	tst.w	r9, #1
 8006b3c:	d00e      	beq.n	8006b5c <__cvt+0x84>
 8006b3e:	eb00 0904 	add.w	r9, r0, r4
 8006b42:	2200      	movs	r2, #0
 8006b44:	2300      	movs	r3, #0
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b4e:	b108      	cbz	r0, 8006b54 <__cvt+0x7c>
 8006b50:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b54:	2230      	movs	r2, #48	@ 0x30
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	454b      	cmp	r3, r9
 8006b5a:	d31e      	bcc.n	8006b9a <__cvt+0xc2>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b60:	1b5b      	subs	r3, r3, r5
 8006b62:	4628      	mov	r0, r5
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	b004      	add	sp, #16
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b70:	eb00 0904 	add.w	r9, r0, r4
 8006b74:	d1e5      	bne.n	8006b42 <__cvt+0x6a>
 8006b76:	7803      	ldrb	r3, [r0, #0]
 8006b78:	2b30      	cmp	r3, #48	@ 0x30
 8006b7a:	d10a      	bne.n	8006b92 <__cvt+0xba>
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4630      	mov	r0, r6
 8006b82:	4639      	mov	r1, r7
 8006b84:	f7f9 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b88:	b918      	cbnz	r0, 8006b92 <__cvt+0xba>
 8006b8a:	f1c4 0401 	rsb	r4, r4, #1
 8006b8e:	f8ca 4000 	str.w	r4, [sl]
 8006b92:	f8da 3000 	ldr.w	r3, [sl]
 8006b96:	4499      	add	r9, r3
 8006b98:	e7d3      	b.n	8006b42 <__cvt+0x6a>
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	9103      	str	r1, [sp, #12]
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	e7d9      	b.n	8006b56 <__cvt+0x7e>

08006ba2 <__exponent>:
 8006ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	bfba      	itte	lt
 8006ba8:	4249      	neglt	r1, r1
 8006baa:	232d      	movlt	r3, #45	@ 0x2d
 8006bac:	232b      	movge	r3, #43	@ 0x2b
 8006bae:	2909      	cmp	r1, #9
 8006bb0:	7002      	strb	r2, [r0, #0]
 8006bb2:	7043      	strb	r3, [r0, #1]
 8006bb4:	dd29      	ble.n	8006c0a <__exponent+0x68>
 8006bb6:	f10d 0307 	add.w	r3, sp, #7
 8006bba:	461d      	mov	r5, r3
 8006bbc:	270a      	movs	r7, #10
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006bc4:	fb07 1416 	mls	r4, r7, r6, r1
 8006bc8:	3430      	adds	r4, #48	@ 0x30
 8006bca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bce:	460c      	mov	r4, r1
 8006bd0:	2c63      	cmp	r4, #99	@ 0x63
 8006bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	dcf1      	bgt.n	8006bbe <__exponent+0x1c>
 8006bda:	3130      	adds	r1, #48	@ 0x30
 8006bdc:	1e94      	subs	r4, r2, #2
 8006bde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006be2:	1c41      	adds	r1, r0, #1
 8006be4:	4623      	mov	r3, r4
 8006be6:	42ab      	cmp	r3, r5
 8006be8:	d30a      	bcc.n	8006c00 <__exponent+0x5e>
 8006bea:	f10d 0309 	add.w	r3, sp, #9
 8006bee:	1a9b      	subs	r3, r3, r2
 8006bf0:	42ac      	cmp	r4, r5
 8006bf2:	bf88      	it	hi
 8006bf4:	2300      	movhi	r3, #0
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	4403      	add	r3, r0
 8006bfa:	1a18      	subs	r0, r3, r0
 8006bfc:	b003      	add	sp, #12
 8006bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c08:	e7ed      	b.n	8006be6 <__exponent+0x44>
 8006c0a:	2330      	movs	r3, #48	@ 0x30
 8006c0c:	3130      	adds	r1, #48	@ 0x30
 8006c0e:	7083      	strb	r3, [r0, #2]
 8006c10:	70c1      	strb	r1, [r0, #3]
 8006c12:	1d03      	adds	r3, r0, #4
 8006c14:	e7f1      	b.n	8006bfa <__exponent+0x58>
	...

08006c18 <_printf_float>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	b08d      	sub	sp, #52	@ 0x34
 8006c1e:	460c      	mov	r4, r1
 8006c20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c24:	4616      	mov	r6, r2
 8006c26:	461f      	mov	r7, r3
 8006c28:	4605      	mov	r5, r0
 8006c2a:	f000 fe9f 	bl	800796c <_localeconv_r>
 8006c2e:	6803      	ldr	r3, [r0, #0]
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7f9 fb24 	bl	8000280 <strlen>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c40:	9005      	str	r0, [sp, #20]
 8006c42:	3307      	adds	r3, #7
 8006c44:	f023 0307 	bic.w	r3, r3, #7
 8006c48:	f103 0208 	add.w	r2, r3, #8
 8006c4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c50:	f8d4 b000 	ldr.w	fp, [r4]
 8006c54:	f8c8 2000 	str.w	r2, [r8]
 8006c58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c60:	9307      	str	r3, [sp, #28]
 8006c62:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ee0 <_printf_float+0x2c8>)
 8006c70:	f04f 32ff 	mov.w	r2, #4294967295
 8006c74:	f7f9 ff62 	bl	8000b3c <__aeabi_dcmpun>
 8006c78:	bb70      	cbnz	r0, 8006cd8 <_printf_float+0xc0>
 8006c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c7e:	4b98      	ldr	r3, [pc, #608]	@ (8006ee0 <_printf_float+0x2c8>)
 8006c80:	f04f 32ff 	mov.w	r2, #4294967295
 8006c84:	f7f9 ff3c 	bl	8000b00 <__aeabi_dcmple>
 8006c88:	bb30      	cbnz	r0, 8006cd8 <_printf_float+0xc0>
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4640      	mov	r0, r8
 8006c90:	4649      	mov	r1, r9
 8006c92:	f7f9 ff2b 	bl	8000aec <__aeabi_dcmplt>
 8006c96:	b110      	cbz	r0, 8006c9e <_printf_float+0x86>
 8006c98:	232d      	movs	r3, #45	@ 0x2d
 8006c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c9e:	4a91      	ldr	r2, [pc, #580]	@ (8006ee4 <_printf_float+0x2cc>)
 8006ca0:	4b91      	ldr	r3, [pc, #580]	@ (8006ee8 <_printf_float+0x2d0>)
 8006ca2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ca6:	bf94      	ite	ls
 8006ca8:	4690      	movls	r8, r2
 8006caa:	4698      	movhi	r8, r3
 8006cac:	2303      	movs	r3, #3
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	f02b 0304 	bic.w	r3, fp, #4
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	f04f 0900 	mov.w	r9, #0
 8006cba:	9700      	str	r7, [sp, #0]
 8006cbc:	4633      	mov	r3, r6
 8006cbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f9d2 	bl	800706c <_printf_common>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f040 808d 	bne.w	8006de8 <_printf_float+0x1d0>
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd2:	b00d      	add	sp, #52	@ 0x34
 8006cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd8:	4642      	mov	r2, r8
 8006cda:	464b      	mov	r3, r9
 8006cdc:	4640      	mov	r0, r8
 8006cde:	4649      	mov	r1, r9
 8006ce0:	f7f9 ff2c 	bl	8000b3c <__aeabi_dcmpun>
 8006ce4:	b140      	cbz	r0, 8006cf8 <_printf_float+0xe0>
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bfbc      	itt	lt
 8006cec:	232d      	movlt	r3, #45	@ 0x2d
 8006cee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8006eec <_printf_float+0x2d4>)
 8006cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ef0 <_printf_float+0x2d8>)
 8006cf6:	e7d4      	b.n	8006ca2 <_printf_float+0x8a>
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006cfe:	9206      	str	r2, [sp, #24]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	d13b      	bne.n	8006d7c <_printf_float+0x164>
 8006d04:	2306      	movs	r3, #6
 8006d06:	6063      	str	r3, [r4, #4]
 8006d08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	6022      	str	r2, [r4, #0]
 8006d10:	9303      	str	r3, [sp, #12]
 8006d12:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d18:	ab09      	add	r3, sp, #36	@ 0x24
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	6861      	ldr	r1, [r4, #4]
 8006d1e:	ec49 8b10 	vmov	d0, r8, r9
 8006d22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d26:	4628      	mov	r0, r5
 8006d28:	f7ff fed6 	bl	8006ad8 <__cvt>
 8006d2c:	9b06      	ldr	r3, [sp, #24]
 8006d2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d30:	2b47      	cmp	r3, #71	@ 0x47
 8006d32:	4680      	mov	r8, r0
 8006d34:	d129      	bne.n	8006d8a <_printf_float+0x172>
 8006d36:	1cc8      	adds	r0, r1, #3
 8006d38:	db02      	blt.n	8006d40 <_printf_float+0x128>
 8006d3a:	6863      	ldr	r3, [r4, #4]
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	dd41      	ble.n	8006dc4 <_printf_float+0x1ac>
 8006d40:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d44:	fa5f fa8a 	uxtb.w	sl, sl
 8006d48:	3901      	subs	r1, #1
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d50:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d52:	f7ff ff26 	bl	8006ba2 <__exponent>
 8006d56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d58:	1813      	adds	r3, r2, r0
 8006d5a:	2a01      	cmp	r2, #1
 8006d5c:	4681      	mov	r9, r0
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	dc02      	bgt.n	8006d68 <_printf_float+0x150>
 8006d62:	6822      	ldr	r2, [r4, #0]
 8006d64:	07d2      	lsls	r2, r2, #31
 8006d66:	d501      	bpl.n	8006d6c <_printf_float+0x154>
 8006d68:	3301      	adds	r3, #1
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0a2      	beq.n	8006cba <_printf_float+0xa2>
 8006d74:	232d      	movs	r3, #45	@ 0x2d
 8006d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d7a:	e79e      	b.n	8006cba <_printf_float+0xa2>
 8006d7c:	9a06      	ldr	r2, [sp, #24]
 8006d7e:	2a47      	cmp	r2, #71	@ 0x47
 8006d80:	d1c2      	bne.n	8006d08 <_printf_float+0xf0>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1c0      	bne.n	8006d08 <_printf_float+0xf0>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e7bd      	b.n	8006d06 <_printf_float+0xee>
 8006d8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d8e:	d9db      	bls.n	8006d48 <_printf_float+0x130>
 8006d90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d94:	d118      	bne.n	8006dc8 <_printf_float+0x1b0>
 8006d96:	2900      	cmp	r1, #0
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	dd0b      	ble.n	8006db4 <_printf_float+0x19c>
 8006d9c:	6121      	str	r1, [r4, #16]
 8006d9e:	b913      	cbnz	r3, 8006da6 <_printf_float+0x18e>
 8006da0:	6822      	ldr	r2, [r4, #0]
 8006da2:	07d0      	lsls	r0, r2, #31
 8006da4:	d502      	bpl.n	8006dac <_printf_float+0x194>
 8006da6:	3301      	adds	r3, #1
 8006da8:	440b      	add	r3, r1
 8006daa:	6123      	str	r3, [r4, #16]
 8006dac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006dae:	f04f 0900 	mov.w	r9, #0
 8006db2:	e7db      	b.n	8006d6c <_printf_float+0x154>
 8006db4:	b913      	cbnz	r3, 8006dbc <_printf_float+0x1a4>
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	07d2      	lsls	r2, r2, #31
 8006dba:	d501      	bpl.n	8006dc0 <_printf_float+0x1a8>
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	e7f4      	b.n	8006daa <_printf_float+0x192>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e7f2      	b.n	8006daa <_printf_float+0x192>
 8006dc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dca:	4299      	cmp	r1, r3
 8006dcc:	db05      	blt.n	8006dda <_printf_float+0x1c2>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	6121      	str	r1, [r4, #16]
 8006dd2:	07d8      	lsls	r0, r3, #31
 8006dd4:	d5ea      	bpl.n	8006dac <_printf_float+0x194>
 8006dd6:	1c4b      	adds	r3, r1, #1
 8006dd8:	e7e7      	b.n	8006daa <_printf_float+0x192>
 8006dda:	2900      	cmp	r1, #0
 8006ddc:	bfd4      	ite	le
 8006dde:	f1c1 0202 	rsble	r2, r1, #2
 8006de2:	2201      	movgt	r2, #1
 8006de4:	4413      	add	r3, r2
 8006de6:	e7e0      	b.n	8006daa <_printf_float+0x192>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	055a      	lsls	r2, r3, #21
 8006dec:	d407      	bmi.n	8006dfe <_printf_float+0x1e6>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	4642      	mov	r2, r8
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d12b      	bne.n	8006e54 <_printf_float+0x23c>
 8006dfc:	e767      	b.n	8006cce <_printf_float+0xb6>
 8006dfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e02:	f240 80dd 	bls.w	8006fc0 <_printf_float+0x3a8>
 8006e06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f7f9 fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d033      	beq.n	8006e7e <_printf_float+0x266>
 8006e16:	4a37      	ldr	r2, [pc, #220]	@ (8006ef4 <_printf_float+0x2dc>)
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f af54 	beq.w	8006cce <_printf_float+0xb6>
 8006e26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e2a:	4543      	cmp	r3, r8
 8006e2c:	db02      	blt.n	8006e34 <_printf_float+0x21c>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	07d8      	lsls	r0, r3, #31
 8006e32:	d50f      	bpl.n	8006e54 <_printf_float+0x23c>
 8006e34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f af45 	beq.w	8006cce <_printf_float+0xb6>
 8006e44:	f04f 0900 	mov.w	r9, #0
 8006e48:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e4c:	f104 0a1a 	add.w	sl, r4, #26
 8006e50:	45c8      	cmp	r8, r9
 8006e52:	dc09      	bgt.n	8006e68 <_printf_float+0x250>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	079b      	lsls	r3, r3, #30
 8006e58:	f100 8103 	bmi.w	8007062 <_printf_float+0x44a>
 8006e5c:	68e0      	ldr	r0, [r4, #12]
 8006e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e60:	4298      	cmp	r0, r3
 8006e62:	bfb8      	it	lt
 8006e64:	4618      	movlt	r0, r3
 8006e66:	e734      	b.n	8006cd2 <_printf_float+0xba>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f af2b 	beq.w	8006cce <_printf_float+0xb6>
 8006e78:	f109 0901 	add.w	r9, r9, #1
 8006e7c:	e7e8      	b.n	8006e50 <_printf_float+0x238>
 8006e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	dc39      	bgt.n	8006ef8 <_printf_float+0x2e0>
 8006e84:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef4 <_printf_float+0x2dc>)
 8006e86:	2301      	movs	r3, #1
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f af1d 	beq.w	8006cce <_printf_float+0xb6>
 8006e94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e98:	ea59 0303 	orrs.w	r3, r9, r3
 8006e9c:	d102      	bne.n	8006ea4 <_printf_float+0x28c>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	07d9      	lsls	r1, r3, #31
 8006ea2:	d5d7      	bpl.n	8006e54 <_printf_float+0x23c>
 8006ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4628      	mov	r0, r5
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	f43f af0d 	beq.w	8006cce <_printf_float+0xb6>
 8006eb4:	f04f 0a00 	mov.w	sl, #0
 8006eb8:	f104 0b1a 	add.w	fp, r4, #26
 8006ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ebe:	425b      	negs	r3, r3
 8006ec0:	4553      	cmp	r3, sl
 8006ec2:	dc01      	bgt.n	8006ec8 <_printf_float+0x2b0>
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	e793      	b.n	8006df0 <_printf_float+0x1d8>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	465a      	mov	r2, fp
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f43f aefb 	beq.w	8006cce <_printf_float+0xb6>
 8006ed8:	f10a 0a01 	add.w	sl, sl, #1
 8006edc:	e7ee      	b.n	8006ebc <_printf_float+0x2a4>
 8006ede:	bf00      	nop
 8006ee0:	7fefffff 	.word	0x7fefffff
 8006ee4:	0800a13c 	.word	0x0800a13c
 8006ee8:	0800a140 	.word	0x0800a140
 8006eec:	0800a144 	.word	0x0800a144
 8006ef0:	0800a148 	.word	0x0800a148
 8006ef4:	0800a14c 	.word	0x0800a14c
 8006ef8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006efa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006efe:	4553      	cmp	r3, sl
 8006f00:	bfa8      	it	ge
 8006f02:	4653      	movge	r3, sl
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	4699      	mov	r9, r3
 8006f08:	dc36      	bgt.n	8006f78 <_printf_float+0x360>
 8006f0a:	f04f 0b00 	mov.w	fp, #0
 8006f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f12:	f104 021a 	add.w	r2, r4, #26
 8006f16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f18:	9306      	str	r3, [sp, #24]
 8006f1a:	eba3 0309 	sub.w	r3, r3, r9
 8006f1e:	455b      	cmp	r3, fp
 8006f20:	dc31      	bgt.n	8006f86 <_printf_float+0x36e>
 8006f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f24:	459a      	cmp	sl, r3
 8006f26:	dc3a      	bgt.n	8006f9e <_printf_float+0x386>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	07da      	lsls	r2, r3, #31
 8006f2c:	d437      	bmi.n	8006f9e <_printf_float+0x386>
 8006f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f30:	ebaa 0903 	sub.w	r9, sl, r3
 8006f34:	9b06      	ldr	r3, [sp, #24]
 8006f36:	ebaa 0303 	sub.w	r3, sl, r3
 8006f3a:	4599      	cmp	r9, r3
 8006f3c:	bfa8      	it	ge
 8006f3e:	4699      	movge	r9, r3
 8006f40:	f1b9 0f00 	cmp.w	r9, #0
 8006f44:	dc33      	bgt.n	8006fae <_printf_float+0x396>
 8006f46:	f04f 0800 	mov.w	r8, #0
 8006f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f4e:	f104 0b1a 	add.w	fp, r4, #26
 8006f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f54:	ebaa 0303 	sub.w	r3, sl, r3
 8006f58:	eba3 0309 	sub.w	r3, r3, r9
 8006f5c:	4543      	cmp	r3, r8
 8006f5e:	f77f af79 	ble.w	8006e54 <_printf_float+0x23c>
 8006f62:	2301      	movs	r3, #1
 8006f64:	465a      	mov	r2, fp
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f aeae 	beq.w	8006cce <_printf_float+0xb6>
 8006f72:	f108 0801 	add.w	r8, r8, #1
 8006f76:	e7ec      	b.n	8006f52 <_printf_float+0x33a>
 8006f78:	4642      	mov	r2, r8
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	d1c2      	bne.n	8006f0a <_printf_float+0x2f2>
 8006f84:	e6a3      	b.n	8006cce <_printf_float+0xb6>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	9206      	str	r2, [sp, #24]
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f ae9c 	beq.w	8006cce <_printf_float+0xb6>
 8006f96:	9a06      	ldr	r2, [sp, #24]
 8006f98:	f10b 0b01 	add.w	fp, fp, #1
 8006f9c:	e7bb      	b.n	8006f16 <_printf_float+0x2fe>
 8006f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d1c0      	bne.n	8006f2e <_printf_float+0x316>
 8006fac:	e68f      	b.n	8006cce <_printf_float+0xb6>
 8006fae:	9a06      	ldr	r2, [sp, #24]
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	4442      	add	r2, r8
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d1c3      	bne.n	8006f46 <_printf_float+0x32e>
 8006fbe:	e686      	b.n	8006cce <_printf_float+0xb6>
 8006fc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006fc4:	f1ba 0f01 	cmp.w	sl, #1
 8006fc8:	dc01      	bgt.n	8006fce <_printf_float+0x3b6>
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d536      	bpl.n	800703c <_printf_float+0x424>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f43f ae78 	beq.w	8006cce <_printf_float+0xb6>
 8006fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	f43f ae70 	beq.w	8006cce <_printf_float+0xb6>
 8006fee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ffa:	f7f9 fd6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ffe:	b9c0      	cbnz	r0, 8007032 <_printf_float+0x41a>
 8007000:	4653      	mov	r3, sl
 8007002:	f108 0201 	add.w	r2, r8, #1
 8007006:	4631      	mov	r1, r6
 8007008:	4628      	mov	r0, r5
 800700a:	47b8      	blx	r7
 800700c:	3001      	adds	r0, #1
 800700e:	d10c      	bne.n	800702a <_printf_float+0x412>
 8007010:	e65d      	b.n	8006cce <_printf_float+0xb6>
 8007012:	2301      	movs	r3, #1
 8007014:	465a      	mov	r2, fp
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	47b8      	blx	r7
 800701c:	3001      	adds	r0, #1
 800701e:	f43f ae56 	beq.w	8006cce <_printf_float+0xb6>
 8007022:	f108 0801 	add.w	r8, r8, #1
 8007026:	45d0      	cmp	r8, sl
 8007028:	dbf3      	blt.n	8007012 <_printf_float+0x3fa>
 800702a:	464b      	mov	r3, r9
 800702c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007030:	e6df      	b.n	8006df2 <_printf_float+0x1da>
 8007032:	f04f 0800 	mov.w	r8, #0
 8007036:	f104 0b1a 	add.w	fp, r4, #26
 800703a:	e7f4      	b.n	8007026 <_printf_float+0x40e>
 800703c:	2301      	movs	r3, #1
 800703e:	4642      	mov	r2, r8
 8007040:	e7e1      	b.n	8007006 <_printf_float+0x3ee>
 8007042:	2301      	movs	r3, #1
 8007044:	464a      	mov	r2, r9
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	47b8      	blx	r7
 800704c:	3001      	adds	r0, #1
 800704e:	f43f ae3e 	beq.w	8006cce <_printf_float+0xb6>
 8007052:	f108 0801 	add.w	r8, r8, #1
 8007056:	68e3      	ldr	r3, [r4, #12]
 8007058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800705a:	1a5b      	subs	r3, r3, r1
 800705c:	4543      	cmp	r3, r8
 800705e:	dcf0      	bgt.n	8007042 <_printf_float+0x42a>
 8007060:	e6fc      	b.n	8006e5c <_printf_float+0x244>
 8007062:	f04f 0800 	mov.w	r8, #0
 8007066:	f104 0919 	add.w	r9, r4, #25
 800706a:	e7f4      	b.n	8007056 <_printf_float+0x43e>

0800706c <_printf_common>:
 800706c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	4616      	mov	r6, r2
 8007072:	4698      	mov	r8, r3
 8007074:	688a      	ldr	r2, [r1, #8]
 8007076:	690b      	ldr	r3, [r1, #16]
 8007078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800707c:	4293      	cmp	r3, r2
 800707e:	bfb8      	it	lt
 8007080:	4613      	movlt	r3, r2
 8007082:	6033      	str	r3, [r6, #0]
 8007084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007088:	4607      	mov	r7, r0
 800708a:	460c      	mov	r4, r1
 800708c:	b10a      	cbz	r2, 8007092 <_printf_common+0x26>
 800708e:	3301      	adds	r3, #1
 8007090:	6033      	str	r3, [r6, #0]
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	0699      	lsls	r1, r3, #26
 8007096:	bf42      	ittt	mi
 8007098:	6833      	ldrmi	r3, [r6, #0]
 800709a:	3302      	addmi	r3, #2
 800709c:	6033      	strmi	r3, [r6, #0]
 800709e:	6825      	ldr	r5, [r4, #0]
 80070a0:	f015 0506 	ands.w	r5, r5, #6
 80070a4:	d106      	bne.n	80070b4 <_printf_common+0x48>
 80070a6:	f104 0a19 	add.w	sl, r4, #25
 80070aa:	68e3      	ldr	r3, [r4, #12]
 80070ac:	6832      	ldr	r2, [r6, #0]
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	42ab      	cmp	r3, r5
 80070b2:	dc26      	bgt.n	8007102 <_printf_common+0x96>
 80070b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	3b00      	subs	r3, #0
 80070bc:	bf18      	it	ne
 80070be:	2301      	movne	r3, #1
 80070c0:	0692      	lsls	r2, r2, #26
 80070c2:	d42b      	bmi.n	800711c <_printf_common+0xb0>
 80070c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070c8:	4641      	mov	r1, r8
 80070ca:	4638      	mov	r0, r7
 80070cc:	47c8      	blx	r9
 80070ce:	3001      	adds	r0, #1
 80070d0:	d01e      	beq.n	8007110 <_printf_common+0xa4>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	f003 0306 	and.w	r3, r3, #6
 80070da:	2b04      	cmp	r3, #4
 80070dc:	bf02      	ittt	eq
 80070de:	68e5      	ldreq	r5, [r4, #12]
 80070e0:	6833      	ldreq	r3, [r6, #0]
 80070e2:	1aed      	subeq	r5, r5, r3
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	bf0c      	ite	eq
 80070e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ec:	2500      	movne	r5, #0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	bfc4      	itt	gt
 80070f2:	1a9b      	subgt	r3, r3, r2
 80070f4:	18ed      	addgt	r5, r5, r3
 80070f6:	2600      	movs	r6, #0
 80070f8:	341a      	adds	r4, #26
 80070fa:	42b5      	cmp	r5, r6
 80070fc:	d11a      	bne.n	8007134 <_printf_common+0xc8>
 80070fe:	2000      	movs	r0, #0
 8007100:	e008      	b.n	8007114 <_printf_common+0xa8>
 8007102:	2301      	movs	r3, #1
 8007104:	4652      	mov	r2, sl
 8007106:	4641      	mov	r1, r8
 8007108:	4638      	mov	r0, r7
 800710a:	47c8      	blx	r9
 800710c:	3001      	adds	r0, #1
 800710e:	d103      	bne.n	8007118 <_printf_common+0xac>
 8007110:	f04f 30ff 	mov.w	r0, #4294967295
 8007114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007118:	3501      	adds	r5, #1
 800711a:	e7c6      	b.n	80070aa <_printf_common+0x3e>
 800711c:	18e1      	adds	r1, r4, r3
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	2030      	movs	r0, #48	@ 0x30
 8007122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007126:	4422      	add	r2, r4
 8007128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800712c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007130:	3302      	adds	r3, #2
 8007132:	e7c7      	b.n	80070c4 <_printf_common+0x58>
 8007134:	2301      	movs	r3, #1
 8007136:	4622      	mov	r2, r4
 8007138:	4641      	mov	r1, r8
 800713a:	4638      	mov	r0, r7
 800713c:	47c8      	blx	r9
 800713e:	3001      	adds	r0, #1
 8007140:	d0e6      	beq.n	8007110 <_printf_common+0xa4>
 8007142:	3601      	adds	r6, #1
 8007144:	e7d9      	b.n	80070fa <_printf_common+0x8e>
	...

08007148 <_printf_i>:
 8007148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	7e0f      	ldrb	r7, [r1, #24]
 800714e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007150:	2f78      	cmp	r7, #120	@ 0x78
 8007152:	4691      	mov	r9, r2
 8007154:	4680      	mov	r8, r0
 8007156:	460c      	mov	r4, r1
 8007158:	469a      	mov	sl, r3
 800715a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800715e:	d807      	bhi.n	8007170 <_printf_i+0x28>
 8007160:	2f62      	cmp	r7, #98	@ 0x62
 8007162:	d80a      	bhi.n	800717a <_printf_i+0x32>
 8007164:	2f00      	cmp	r7, #0
 8007166:	f000 80d2 	beq.w	800730e <_printf_i+0x1c6>
 800716a:	2f58      	cmp	r7, #88	@ 0x58
 800716c:	f000 80b9 	beq.w	80072e2 <_printf_i+0x19a>
 8007170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007178:	e03a      	b.n	80071f0 <_printf_i+0xa8>
 800717a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800717e:	2b15      	cmp	r3, #21
 8007180:	d8f6      	bhi.n	8007170 <_printf_i+0x28>
 8007182:	a101      	add	r1, pc, #4	@ (adr r1, 8007188 <_printf_i+0x40>)
 8007184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007188:	080071e1 	.word	0x080071e1
 800718c:	080071f5 	.word	0x080071f5
 8007190:	08007171 	.word	0x08007171
 8007194:	08007171 	.word	0x08007171
 8007198:	08007171 	.word	0x08007171
 800719c:	08007171 	.word	0x08007171
 80071a0:	080071f5 	.word	0x080071f5
 80071a4:	08007171 	.word	0x08007171
 80071a8:	08007171 	.word	0x08007171
 80071ac:	08007171 	.word	0x08007171
 80071b0:	08007171 	.word	0x08007171
 80071b4:	080072f5 	.word	0x080072f5
 80071b8:	0800721f 	.word	0x0800721f
 80071bc:	080072af 	.word	0x080072af
 80071c0:	08007171 	.word	0x08007171
 80071c4:	08007171 	.word	0x08007171
 80071c8:	08007317 	.word	0x08007317
 80071cc:	08007171 	.word	0x08007171
 80071d0:	0800721f 	.word	0x0800721f
 80071d4:	08007171 	.word	0x08007171
 80071d8:	08007171 	.word	0x08007171
 80071dc:	080072b7 	.word	0x080072b7
 80071e0:	6833      	ldr	r3, [r6, #0]
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6032      	str	r2, [r6, #0]
 80071e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071f0:	2301      	movs	r3, #1
 80071f2:	e09d      	b.n	8007330 <_printf_i+0x1e8>
 80071f4:	6833      	ldr	r3, [r6, #0]
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	1d19      	adds	r1, r3, #4
 80071fa:	6031      	str	r1, [r6, #0]
 80071fc:	0606      	lsls	r6, r0, #24
 80071fe:	d501      	bpl.n	8007204 <_printf_i+0xbc>
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	e003      	b.n	800720c <_printf_i+0xc4>
 8007204:	0645      	lsls	r5, r0, #25
 8007206:	d5fb      	bpl.n	8007200 <_printf_i+0xb8>
 8007208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800720c:	2d00      	cmp	r5, #0
 800720e:	da03      	bge.n	8007218 <_printf_i+0xd0>
 8007210:	232d      	movs	r3, #45	@ 0x2d
 8007212:	426d      	negs	r5, r5
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007218:	4859      	ldr	r0, [pc, #356]	@ (8007380 <_printf_i+0x238>)
 800721a:	230a      	movs	r3, #10
 800721c:	e011      	b.n	8007242 <_printf_i+0xfa>
 800721e:	6821      	ldr	r1, [r4, #0]
 8007220:	6833      	ldr	r3, [r6, #0]
 8007222:	0608      	lsls	r0, r1, #24
 8007224:	f853 5b04 	ldr.w	r5, [r3], #4
 8007228:	d402      	bmi.n	8007230 <_printf_i+0xe8>
 800722a:	0649      	lsls	r1, r1, #25
 800722c:	bf48      	it	mi
 800722e:	b2ad      	uxthmi	r5, r5
 8007230:	2f6f      	cmp	r7, #111	@ 0x6f
 8007232:	4853      	ldr	r0, [pc, #332]	@ (8007380 <_printf_i+0x238>)
 8007234:	6033      	str	r3, [r6, #0]
 8007236:	bf14      	ite	ne
 8007238:	230a      	movne	r3, #10
 800723a:	2308      	moveq	r3, #8
 800723c:	2100      	movs	r1, #0
 800723e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007242:	6866      	ldr	r6, [r4, #4]
 8007244:	60a6      	str	r6, [r4, #8]
 8007246:	2e00      	cmp	r6, #0
 8007248:	bfa2      	ittt	ge
 800724a:	6821      	ldrge	r1, [r4, #0]
 800724c:	f021 0104 	bicge.w	r1, r1, #4
 8007250:	6021      	strge	r1, [r4, #0]
 8007252:	b90d      	cbnz	r5, 8007258 <_printf_i+0x110>
 8007254:	2e00      	cmp	r6, #0
 8007256:	d04b      	beq.n	80072f0 <_printf_i+0x1a8>
 8007258:	4616      	mov	r6, r2
 800725a:	fbb5 f1f3 	udiv	r1, r5, r3
 800725e:	fb03 5711 	mls	r7, r3, r1, r5
 8007262:	5dc7      	ldrb	r7, [r0, r7]
 8007264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007268:	462f      	mov	r7, r5
 800726a:	42bb      	cmp	r3, r7
 800726c:	460d      	mov	r5, r1
 800726e:	d9f4      	bls.n	800725a <_printf_i+0x112>
 8007270:	2b08      	cmp	r3, #8
 8007272:	d10b      	bne.n	800728c <_printf_i+0x144>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	07df      	lsls	r7, r3, #31
 8007278:	d508      	bpl.n	800728c <_printf_i+0x144>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	4299      	cmp	r1, r3
 8007280:	bfde      	ittt	le
 8007282:	2330      	movle	r3, #48	@ 0x30
 8007284:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800728c:	1b92      	subs	r2, r2, r6
 800728e:	6122      	str	r2, [r4, #16]
 8007290:	f8cd a000 	str.w	sl, [sp]
 8007294:	464b      	mov	r3, r9
 8007296:	aa03      	add	r2, sp, #12
 8007298:	4621      	mov	r1, r4
 800729a:	4640      	mov	r0, r8
 800729c:	f7ff fee6 	bl	800706c <_printf_common>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d14a      	bne.n	800733a <_printf_i+0x1f2>
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	b004      	add	sp, #16
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f043 0320 	orr.w	r3, r3, #32
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	4833      	ldr	r0, [pc, #204]	@ (8007384 <_printf_i+0x23c>)
 80072b8:	2778      	movs	r7, #120	@ 0x78
 80072ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	6831      	ldr	r1, [r6, #0]
 80072c2:	061f      	lsls	r7, r3, #24
 80072c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80072c8:	d402      	bmi.n	80072d0 <_printf_i+0x188>
 80072ca:	065f      	lsls	r7, r3, #25
 80072cc:	bf48      	it	mi
 80072ce:	b2ad      	uxthmi	r5, r5
 80072d0:	6031      	str	r1, [r6, #0]
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	bf44      	itt	mi
 80072d6:	f043 0320 	orrmi.w	r3, r3, #32
 80072da:	6023      	strmi	r3, [r4, #0]
 80072dc:	b11d      	cbz	r5, 80072e6 <_printf_i+0x19e>
 80072de:	2310      	movs	r3, #16
 80072e0:	e7ac      	b.n	800723c <_printf_i+0xf4>
 80072e2:	4827      	ldr	r0, [pc, #156]	@ (8007380 <_printf_i+0x238>)
 80072e4:	e7e9      	b.n	80072ba <_printf_i+0x172>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	f023 0320 	bic.w	r3, r3, #32
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	e7f6      	b.n	80072de <_printf_i+0x196>
 80072f0:	4616      	mov	r6, r2
 80072f2:	e7bd      	b.n	8007270 <_printf_i+0x128>
 80072f4:	6833      	ldr	r3, [r6, #0]
 80072f6:	6825      	ldr	r5, [r4, #0]
 80072f8:	6961      	ldr	r1, [r4, #20]
 80072fa:	1d18      	adds	r0, r3, #4
 80072fc:	6030      	str	r0, [r6, #0]
 80072fe:	062e      	lsls	r6, r5, #24
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	d501      	bpl.n	8007308 <_printf_i+0x1c0>
 8007304:	6019      	str	r1, [r3, #0]
 8007306:	e002      	b.n	800730e <_printf_i+0x1c6>
 8007308:	0668      	lsls	r0, r5, #25
 800730a:	d5fb      	bpl.n	8007304 <_printf_i+0x1bc>
 800730c:	8019      	strh	r1, [r3, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	4616      	mov	r6, r2
 8007314:	e7bc      	b.n	8007290 <_printf_i+0x148>
 8007316:	6833      	ldr	r3, [r6, #0]
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	6032      	str	r2, [r6, #0]
 800731c:	681e      	ldr	r6, [r3, #0]
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	2100      	movs	r1, #0
 8007322:	4630      	mov	r0, r6
 8007324:	f7f8 ff5c 	bl	80001e0 <memchr>
 8007328:	b108      	cbz	r0, 800732e <_printf_i+0x1e6>
 800732a:	1b80      	subs	r0, r0, r6
 800732c:	6060      	str	r0, [r4, #4]
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	2300      	movs	r3, #0
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007338:	e7aa      	b.n	8007290 <_printf_i+0x148>
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	4632      	mov	r2, r6
 800733e:	4649      	mov	r1, r9
 8007340:	4640      	mov	r0, r8
 8007342:	47d0      	blx	sl
 8007344:	3001      	adds	r0, #1
 8007346:	d0ad      	beq.n	80072a4 <_printf_i+0x15c>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	079b      	lsls	r3, r3, #30
 800734c:	d413      	bmi.n	8007376 <_printf_i+0x22e>
 800734e:	68e0      	ldr	r0, [r4, #12]
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	4298      	cmp	r0, r3
 8007354:	bfb8      	it	lt
 8007356:	4618      	movlt	r0, r3
 8007358:	e7a6      	b.n	80072a8 <_printf_i+0x160>
 800735a:	2301      	movs	r3, #1
 800735c:	4632      	mov	r2, r6
 800735e:	4649      	mov	r1, r9
 8007360:	4640      	mov	r0, r8
 8007362:	47d0      	blx	sl
 8007364:	3001      	adds	r0, #1
 8007366:	d09d      	beq.n	80072a4 <_printf_i+0x15c>
 8007368:	3501      	adds	r5, #1
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	9903      	ldr	r1, [sp, #12]
 800736e:	1a5b      	subs	r3, r3, r1
 8007370:	42ab      	cmp	r3, r5
 8007372:	dcf2      	bgt.n	800735a <_printf_i+0x212>
 8007374:	e7eb      	b.n	800734e <_printf_i+0x206>
 8007376:	2500      	movs	r5, #0
 8007378:	f104 0619 	add.w	r6, r4, #25
 800737c:	e7f5      	b.n	800736a <_printf_i+0x222>
 800737e:	bf00      	nop
 8007380:	0800a14e 	.word	0x0800a14e
 8007384:	0800a15f 	.word	0x0800a15f

08007388 <__sflush_r>:
 8007388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007390:	0716      	lsls	r6, r2, #28
 8007392:	4605      	mov	r5, r0
 8007394:	460c      	mov	r4, r1
 8007396:	d454      	bmi.n	8007442 <__sflush_r+0xba>
 8007398:	684b      	ldr	r3, [r1, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dc02      	bgt.n	80073a4 <__sflush_r+0x1c>
 800739e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dd48      	ble.n	8007436 <__sflush_r+0xae>
 80073a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	d045      	beq.n	8007436 <__sflush_r+0xae>
 80073aa:	2300      	movs	r3, #0
 80073ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073b0:	682f      	ldr	r7, [r5, #0]
 80073b2:	6a21      	ldr	r1, [r4, #32]
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	d030      	beq.n	800741a <__sflush_r+0x92>
 80073b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	0759      	lsls	r1, r3, #29
 80073be:	d505      	bpl.n	80073cc <__sflush_r+0x44>
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073c6:	b10b      	cbz	r3, 80073cc <__sflush_r+0x44>
 80073c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	2300      	movs	r3, #0
 80073ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073d0:	6a21      	ldr	r1, [r4, #32]
 80073d2:	4628      	mov	r0, r5
 80073d4:	47b0      	blx	r6
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	d106      	bne.n	80073ea <__sflush_r+0x62>
 80073dc:	6829      	ldr	r1, [r5, #0]
 80073de:	291d      	cmp	r1, #29
 80073e0:	d82b      	bhi.n	800743a <__sflush_r+0xb2>
 80073e2:	4a2a      	ldr	r2, [pc, #168]	@ (800748c <__sflush_r+0x104>)
 80073e4:	410a      	asrs	r2, r1
 80073e6:	07d6      	lsls	r6, r2, #31
 80073e8:	d427      	bmi.n	800743a <__sflush_r+0xb2>
 80073ea:	2200      	movs	r2, #0
 80073ec:	6062      	str	r2, [r4, #4]
 80073ee:	04d9      	lsls	r1, r3, #19
 80073f0:	6922      	ldr	r2, [r4, #16]
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	d504      	bpl.n	8007400 <__sflush_r+0x78>
 80073f6:	1c42      	adds	r2, r0, #1
 80073f8:	d101      	bne.n	80073fe <__sflush_r+0x76>
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	b903      	cbnz	r3, 8007400 <__sflush_r+0x78>
 80073fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007402:	602f      	str	r7, [r5, #0]
 8007404:	b1b9      	cbz	r1, 8007436 <__sflush_r+0xae>
 8007406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800740a:	4299      	cmp	r1, r3
 800740c:	d002      	beq.n	8007414 <__sflush_r+0x8c>
 800740e:	4628      	mov	r0, r5
 8007410:	f001 f97e 	bl	8008710 <_free_r>
 8007414:	2300      	movs	r3, #0
 8007416:	6363      	str	r3, [r4, #52]	@ 0x34
 8007418:	e00d      	b.n	8007436 <__sflush_r+0xae>
 800741a:	2301      	movs	r3, #1
 800741c:	4628      	mov	r0, r5
 800741e:	47b0      	blx	r6
 8007420:	4602      	mov	r2, r0
 8007422:	1c50      	adds	r0, r2, #1
 8007424:	d1c9      	bne.n	80073ba <__sflush_r+0x32>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0c6      	beq.n	80073ba <__sflush_r+0x32>
 800742c:	2b1d      	cmp	r3, #29
 800742e:	d001      	beq.n	8007434 <__sflush_r+0xac>
 8007430:	2b16      	cmp	r3, #22
 8007432:	d11e      	bne.n	8007472 <__sflush_r+0xea>
 8007434:	602f      	str	r7, [r5, #0]
 8007436:	2000      	movs	r0, #0
 8007438:	e022      	b.n	8007480 <__sflush_r+0xf8>
 800743a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800743e:	b21b      	sxth	r3, r3
 8007440:	e01b      	b.n	800747a <__sflush_r+0xf2>
 8007442:	690f      	ldr	r7, [r1, #16]
 8007444:	2f00      	cmp	r7, #0
 8007446:	d0f6      	beq.n	8007436 <__sflush_r+0xae>
 8007448:	0793      	lsls	r3, r2, #30
 800744a:	680e      	ldr	r6, [r1, #0]
 800744c:	bf08      	it	eq
 800744e:	694b      	ldreq	r3, [r1, #20]
 8007450:	600f      	str	r7, [r1, #0]
 8007452:	bf18      	it	ne
 8007454:	2300      	movne	r3, #0
 8007456:	eba6 0807 	sub.w	r8, r6, r7
 800745a:	608b      	str	r3, [r1, #8]
 800745c:	f1b8 0f00 	cmp.w	r8, #0
 8007460:	dde9      	ble.n	8007436 <__sflush_r+0xae>
 8007462:	6a21      	ldr	r1, [r4, #32]
 8007464:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007466:	4643      	mov	r3, r8
 8007468:	463a      	mov	r2, r7
 800746a:	4628      	mov	r0, r5
 800746c:	47b0      	blx	r6
 800746e:	2800      	cmp	r0, #0
 8007470:	dc08      	bgt.n	8007484 <__sflush_r+0xfc>
 8007472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007484:	4407      	add	r7, r0
 8007486:	eba8 0800 	sub.w	r8, r8, r0
 800748a:	e7e7      	b.n	800745c <__sflush_r+0xd4>
 800748c:	dfbffffe 	.word	0xdfbffffe

08007490 <_fflush_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	690b      	ldr	r3, [r1, #16]
 8007494:	4605      	mov	r5, r0
 8007496:	460c      	mov	r4, r1
 8007498:	b913      	cbnz	r3, 80074a0 <_fflush_r+0x10>
 800749a:	2500      	movs	r5, #0
 800749c:	4628      	mov	r0, r5
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	b118      	cbz	r0, 80074aa <_fflush_r+0x1a>
 80074a2:	6a03      	ldr	r3, [r0, #32]
 80074a4:	b90b      	cbnz	r3, 80074aa <_fflush_r+0x1a>
 80074a6:	f000 f8bb 	bl	8007620 <__sinit>
 80074aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f3      	beq.n	800749a <_fflush_r+0xa>
 80074b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074b4:	07d0      	lsls	r0, r2, #31
 80074b6:	d404      	bmi.n	80074c2 <_fflush_r+0x32>
 80074b8:	0599      	lsls	r1, r3, #22
 80074ba:	d402      	bmi.n	80074c2 <_fflush_r+0x32>
 80074bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074be:	f000 faca 	bl	8007a56 <__retarget_lock_acquire_recursive>
 80074c2:	4628      	mov	r0, r5
 80074c4:	4621      	mov	r1, r4
 80074c6:	f7ff ff5f 	bl	8007388 <__sflush_r>
 80074ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074cc:	07da      	lsls	r2, r3, #31
 80074ce:	4605      	mov	r5, r0
 80074d0:	d4e4      	bmi.n	800749c <_fflush_r+0xc>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	059b      	lsls	r3, r3, #22
 80074d6:	d4e1      	bmi.n	800749c <_fflush_r+0xc>
 80074d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074da:	f000 fabd 	bl	8007a58 <__retarget_lock_release_recursive>
 80074de:	e7dd      	b.n	800749c <_fflush_r+0xc>

080074e0 <fflush>:
 80074e0:	4601      	mov	r1, r0
 80074e2:	b920      	cbnz	r0, 80074ee <fflush+0xe>
 80074e4:	4a04      	ldr	r2, [pc, #16]	@ (80074f8 <fflush+0x18>)
 80074e6:	4905      	ldr	r1, [pc, #20]	@ (80074fc <fflush+0x1c>)
 80074e8:	4805      	ldr	r0, [pc, #20]	@ (8007500 <fflush+0x20>)
 80074ea:	f000 b8b1 	b.w	8007650 <_fwalk_sglue>
 80074ee:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <fflush+0x24>)
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	f7ff bfcd 	b.w	8007490 <_fflush_r>
 80074f6:	bf00      	nop
 80074f8:	20000014 	.word	0x20000014
 80074fc:	08007491 	.word	0x08007491
 8007500:	20000024 	.word	0x20000024
 8007504:	20000020 	.word	0x20000020

08007508 <std>:
 8007508:	2300      	movs	r3, #0
 800750a:	b510      	push	{r4, lr}
 800750c:	4604      	mov	r4, r0
 800750e:	e9c0 3300 	strd	r3, r3, [r0]
 8007512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007516:	6083      	str	r3, [r0, #8]
 8007518:	8181      	strh	r1, [r0, #12]
 800751a:	6643      	str	r3, [r0, #100]	@ 0x64
 800751c:	81c2      	strh	r2, [r0, #14]
 800751e:	6183      	str	r3, [r0, #24]
 8007520:	4619      	mov	r1, r3
 8007522:	2208      	movs	r2, #8
 8007524:	305c      	adds	r0, #92	@ 0x5c
 8007526:	f000 fa19 	bl	800795c <memset>
 800752a:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <std+0x58>)
 800752c:	6263      	str	r3, [r4, #36]	@ 0x24
 800752e:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <std+0x5c>)
 8007530:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007532:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <std+0x60>)
 8007534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <std+0x64>)
 8007538:	6323      	str	r3, [r4, #48]	@ 0x30
 800753a:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <std+0x68>)
 800753c:	6224      	str	r4, [r4, #32]
 800753e:	429c      	cmp	r4, r3
 8007540:	d006      	beq.n	8007550 <std+0x48>
 8007542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007546:	4294      	cmp	r4, r2
 8007548:	d002      	beq.n	8007550 <std+0x48>
 800754a:	33d0      	adds	r3, #208	@ 0xd0
 800754c:	429c      	cmp	r4, r3
 800754e:	d105      	bne.n	800755c <std+0x54>
 8007550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f000 ba7c 	b.w	8007a54 <__retarget_lock_init_recursive>
 800755c:	bd10      	pop	{r4, pc}
 800755e:	bf00      	nop
 8007560:	080077ad 	.word	0x080077ad
 8007564:	080077cf 	.word	0x080077cf
 8007568:	08007807 	.word	0x08007807
 800756c:	0800782b 	.word	0x0800782b
 8007570:	200007f8 	.word	0x200007f8

08007574 <stdio_exit_handler>:
 8007574:	4a02      	ldr	r2, [pc, #8]	@ (8007580 <stdio_exit_handler+0xc>)
 8007576:	4903      	ldr	r1, [pc, #12]	@ (8007584 <stdio_exit_handler+0x10>)
 8007578:	4803      	ldr	r0, [pc, #12]	@ (8007588 <stdio_exit_handler+0x14>)
 800757a:	f000 b869 	b.w	8007650 <_fwalk_sglue>
 800757e:	bf00      	nop
 8007580:	20000014 	.word	0x20000014
 8007584:	08007491 	.word	0x08007491
 8007588:	20000024 	.word	0x20000024

0800758c <cleanup_stdio>:
 800758c:	6841      	ldr	r1, [r0, #4]
 800758e:	4b0c      	ldr	r3, [pc, #48]	@ (80075c0 <cleanup_stdio+0x34>)
 8007590:	4299      	cmp	r1, r3
 8007592:	b510      	push	{r4, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	d001      	beq.n	800759c <cleanup_stdio+0x10>
 8007598:	f7ff ff7a 	bl	8007490 <_fflush_r>
 800759c:	68a1      	ldr	r1, [r4, #8]
 800759e:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <cleanup_stdio+0x38>)
 80075a0:	4299      	cmp	r1, r3
 80075a2:	d002      	beq.n	80075aa <cleanup_stdio+0x1e>
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7ff ff73 	bl	8007490 <_fflush_r>
 80075aa:	68e1      	ldr	r1, [r4, #12]
 80075ac:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <cleanup_stdio+0x3c>)
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d004      	beq.n	80075bc <cleanup_stdio+0x30>
 80075b2:	4620      	mov	r0, r4
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f7ff bf6a 	b.w	8007490 <_fflush_r>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	200007f8 	.word	0x200007f8
 80075c4:	20000860 	.word	0x20000860
 80075c8:	200008c8 	.word	0x200008c8

080075cc <global_stdio_init.part.0>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <global_stdio_init.part.0+0x30>)
 80075d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007600 <global_stdio_init.part.0+0x34>)
 80075d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007604 <global_stdio_init.part.0+0x38>)
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	4620      	mov	r0, r4
 80075d8:	2200      	movs	r2, #0
 80075da:	2104      	movs	r1, #4
 80075dc:	f7ff ff94 	bl	8007508 <std>
 80075e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075e4:	2201      	movs	r2, #1
 80075e6:	2109      	movs	r1, #9
 80075e8:	f7ff ff8e 	bl	8007508 <std>
 80075ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075f0:	2202      	movs	r2, #2
 80075f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f6:	2112      	movs	r1, #18
 80075f8:	f7ff bf86 	b.w	8007508 <std>
 80075fc:	20000930 	.word	0x20000930
 8007600:	200007f8 	.word	0x200007f8
 8007604:	08007575 	.word	0x08007575

08007608 <__sfp_lock_acquire>:
 8007608:	4801      	ldr	r0, [pc, #4]	@ (8007610 <__sfp_lock_acquire+0x8>)
 800760a:	f000 ba24 	b.w	8007a56 <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	20000939 	.word	0x20000939

08007614 <__sfp_lock_release>:
 8007614:	4801      	ldr	r0, [pc, #4]	@ (800761c <__sfp_lock_release+0x8>)
 8007616:	f000 ba1f 	b.w	8007a58 <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	20000939 	.word	0x20000939

08007620 <__sinit>:
 8007620:	b510      	push	{r4, lr}
 8007622:	4604      	mov	r4, r0
 8007624:	f7ff fff0 	bl	8007608 <__sfp_lock_acquire>
 8007628:	6a23      	ldr	r3, [r4, #32]
 800762a:	b11b      	cbz	r3, 8007634 <__sinit+0x14>
 800762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007630:	f7ff bff0 	b.w	8007614 <__sfp_lock_release>
 8007634:	4b04      	ldr	r3, [pc, #16]	@ (8007648 <__sinit+0x28>)
 8007636:	6223      	str	r3, [r4, #32]
 8007638:	4b04      	ldr	r3, [pc, #16]	@ (800764c <__sinit+0x2c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f5      	bne.n	800762c <__sinit+0xc>
 8007640:	f7ff ffc4 	bl	80075cc <global_stdio_init.part.0>
 8007644:	e7f2      	b.n	800762c <__sinit+0xc>
 8007646:	bf00      	nop
 8007648:	0800758d 	.word	0x0800758d
 800764c:	20000930 	.word	0x20000930

08007650 <_fwalk_sglue>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	4607      	mov	r7, r0
 8007656:	4688      	mov	r8, r1
 8007658:	4614      	mov	r4, r2
 800765a:	2600      	movs	r6, #0
 800765c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007660:	f1b9 0901 	subs.w	r9, r9, #1
 8007664:	d505      	bpl.n	8007672 <_fwalk_sglue+0x22>
 8007666:	6824      	ldr	r4, [r4, #0]
 8007668:	2c00      	cmp	r4, #0
 800766a:	d1f7      	bne.n	800765c <_fwalk_sglue+0xc>
 800766c:	4630      	mov	r0, r6
 800766e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d907      	bls.n	8007688 <_fwalk_sglue+0x38>
 8007678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800767c:	3301      	adds	r3, #1
 800767e:	d003      	beq.n	8007688 <_fwalk_sglue+0x38>
 8007680:	4629      	mov	r1, r5
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	4306      	orrs	r6, r0
 8007688:	3568      	adds	r5, #104	@ 0x68
 800768a:	e7e9      	b.n	8007660 <_fwalk_sglue+0x10>

0800768c <iprintf>:
 800768c:	b40f      	push	{r0, r1, r2, r3}
 800768e:	b507      	push	{r0, r1, r2, lr}
 8007690:	4906      	ldr	r1, [pc, #24]	@ (80076ac <iprintf+0x20>)
 8007692:	ab04      	add	r3, sp, #16
 8007694:	6808      	ldr	r0, [r1, #0]
 8007696:	f853 2b04 	ldr.w	r2, [r3], #4
 800769a:	6881      	ldr	r1, [r0, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f001 fe3b 	bl	8009318 <_vfiprintf_r>
 80076a2:	b003      	add	sp, #12
 80076a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a8:	b004      	add	sp, #16
 80076aa:	4770      	bx	lr
 80076ac:	20000020 	.word	0x20000020

080076b0 <_puts_r>:
 80076b0:	6a03      	ldr	r3, [r0, #32]
 80076b2:	b570      	push	{r4, r5, r6, lr}
 80076b4:	6884      	ldr	r4, [r0, #8]
 80076b6:	4605      	mov	r5, r0
 80076b8:	460e      	mov	r6, r1
 80076ba:	b90b      	cbnz	r3, 80076c0 <_puts_r+0x10>
 80076bc:	f7ff ffb0 	bl	8007620 <__sinit>
 80076c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076c2:	07db      	lsls	r3, r3, #31
 80076c4:	d405      	bmi.n	80076d2 <_puts_r+0x22>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	0598      	lsls	r0, r3, #22
 80076ca:	d402      	bmi.n	80076d2 <_puts_r+0x22>
 80076cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ce:	f000 f9c2 	bl	8007a56 <__retarget_lock_acquire_recursive>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	0719      	lsls	r1, r3, #28
 80076d6:	d502      	bpl.n	80076de <_puts_r+0x2e>
 80076d8:	6923      	ldr	r3, [r4, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d135      	bne.n	800774a <_puts_r+0x9a>
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f8e5 	bl	80078b0 <__swsetup_r>
 80076e6:	b380      	cbz	r0, 800774a <_puts_r+0x9a>
 80076e8:	f04f 35ff 	mov.w	r5, #4294967295
 80076ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076ee:	07da      	lsls	r2, r3, #31
 80076f0:	d405      	bmi.n	80076fe <_puts_r+0x4e>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	059b      	lsls	r3, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_puts_r+0x4e>
 80076f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076fa:	f000 f9ad 	bl	8007a58 <__retarget_lock_release_recursive>
 80076fe:	4628      	mov	r0, r5
 8007700:	bd70      	pop	{r4, r5, r6, pc}
 8007702:	2b00      	cmp	r3, #0
 8007704:	da04      	bge.n	8007710 <_puts_r+0x60>
 8007706:	69a2      	ldr	r2, [r4, #24]
 8007708:	429a      	cmp	r2, r3
 800770a:	dc17      	bgt.n	800773c <_puts_r+0x8c>
 800770c:	290a      	cmp	r1, #10
 800770e:	d015      	beq.n	800773c <_puts_r+0x8c>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	6022      	str	r2, [r4, #0]
 8007716:	7019      	strb	r1, [r3, #0]
 8007718:	68a3      	ldr	r3, [r4, #8]
 800771a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800771e:	3b01      	subs	r3, #1
 8007720:	60a3      	str	r3, [r4, #8]
 8007722:	2900      	cmp	r1, #0
 8007724:	d1ed      	bne.n	8007702 <_puts_r+0x52>
 8007726:	2b00      	cmp	r3, #0
 8007728:	da11      	bge.n	800774e <_puts_r+0x9e>
 800772a:	4622      	mov	r2, r4
 800772c:	210a      	movs	r1, #10
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f87f 	bl	8007832 <__swbuf_r>
 8007734:	3001      	adds	r0, #1
 8007736:	d0d7      	beq.n	80076e8 <_puts_r+0x38>
 8007738:	250a      	movs	r5, #10
 800773a:	e7d7      	b.n	80076ec <_puts_r+0x3c>
 800773c:	4622      	mov	r2, r4
 800773e:	4628      	mov	r0, r5
 8007740:	f000 f877 	bl	8007832 <__swbuf_r>
 8007744:	3001      	adds	r0, #1
 8007746:	d1e7      	bne.n	8007718 <_puts_r+0x68>
 8007748:	e7ce      	b.n	80076e8 <_puts_r+0x38>
 800774a:	3e01      	subs	r6, #1
 800774c:	e7e4      	b.n	8007718 <_puts_r+0x68>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	6022      	str	r2, [r4, #0]
 8007754:	220a      	movs	r2, #10
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	e7ee      	b.n	8007738 <_puts_r+0x88>
	...

0800775c <puts>:
 800775c:	4b02      	ldr	r3, [pc, #8]	@ (8007768 <puts+0xc>)
 800775e:	4601      	mov	r1, r0
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	f7ff bfa5 	b.w	80076b0 <_puts_r>
 8007766:	bf00      	nop
 8007768:	20000020 	.word	0x20000020

0800776c <siprintf>:
 800776c:	b40e      	push	{r1, r2, r3}
 800776e:	b500      	push	{lr}
 8007770:	b09c      	sub	sp, #112	@ 0x70
 8007772:	ab1d      	add	r3, sp, #116	@ 0x74
 8007774:	9002      	str	r0, [sp, #8]
 8007776:	9006      	str	r0, [sp, #24]
 8007778:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800777c:	4809      	ldr	r0, [pc, #36]	@ (80077a4 <siprintf+0x38>)
 800777e:	9107      	str	r1, [sp, #28]
 8007780:	9104      	str	r1, [sp, #16]
 8007782:	4909      	ldr	r1, [pc, #36]	@ (80077a8 <siprintf+0x3c>)
 8007784:	f853 2b04 	ldr.w	r2, [r3], #4
 8007788:	9105      	str	r1, [sp, #20]
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	a902      	add	r1, sp, #8
 8007790:	f001 fc9c 	bl	80090cc <_svfiprintf_r>
 8007794:	9b02      	ldr	r3, [sp, #8]
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	b01c      	add	sp, #112	@ 0x70
 800779c:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a0:	b003      	add	sp, #12
 80077a2:	4770      	bx	lr
 80077a4:	20000020 	.word	0x20000020
 80077a8:	ffff0208 	.word	0xffff0208

080077ac <__sread>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	460c      	mov	r4, r1
 80077b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b4:	f000 f900 	bl	80079b8 <_read_r>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	bfab      	itete	ge
 80077bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077be:	89a3      	ldrhlt	r3, [r4, #12]
 80077c0:	181b      	addge	r3, r3, r0
 80077c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077c6:	bfac      	ite	ge
 80077c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077ca:	81a3      	strhlt	r3, [r4, #12]
 80077cc:	bd10      	pop	{r4, pc}

080077ce <__swrite>:
 80077ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d2:	461f      	mov	r7, r3
 80077d4:	898b      	ldrh	r3, [r1, #12]
 80077d6:	05db      	lsls	r3, r3, #23
 80077d8:	4605      	mov	r5, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	4616      	mov	r6, r2
 80077de:	d505      	bpl.n	80077ec <__swrite+0x1e>
 80077e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e4:	2302      	movs	r3, #2
 80077e6:	2200      	movs	r2, #0
 80077e8:	f000 f8d4 	bl	8007994 <_lseek_r>
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	4632      	mov	r2, r6
 80077fa:	463b      	mov	r3, r7
 80077fc:	4628      	mov	r0, r5
 80077fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007802:	f000 b8eb 	b.w	80079dc <_write_r>

08007806 <__sseek>:
 8007806:	b510      	push	{r4, lr}
 8007808:	460c      	mov	r4, r1
 800780a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780e:	f000 f8c1 	bl	8007994 <_lseek_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	bf15      	itete	ne
 8007818:	6560      	strne	r0, [r4, #84]	@ 0x54
 800781a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800781e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007822:	81a3      	strheq	r3, [r4, #12]
 8007824:	bf18      	it	ne
 8007826:	81a3      	strhne	r3, [r4, #12]
 8007828:	bd10      	pop	{r4, pc}

0800782a <__sclose>:
 800782a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782e:	f000 b8a1 	b.w	8007974 <_close_r>

08007832 <__swbuf_r>:
 8007832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007834:	460e      	mov	r6, r1
 8007836:	4614      	mov	r4, r2
 8007838:	4605      	mov	r5, r0
 800783a:	b118      	cbz	r0, 8007844 <__swbuf_r+0x12>
 800783c:	6a03      	ldr	r3, [r0, #32]
 800783e:	b90b      	cbnz	r3, 8007844 <__swbuf_r+0x12>
 8007840:	f7ff feee 	bl	8007620 <__sinit>
 8007844:	69a3      	ldr	r3, [r4, #24]
 8007846:	60a3      	str	r3, [r4, #8]
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	071a      	lsls	r2, r3, #28
 800784c:	d501      	bpl.n	8007852 <__swbuf_r+0x20>
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	b943      	cbnz	r3, 8007864 <__swbuf_r+0x32>
 8007852:	4621      	mov	r1, r4
 8007854:	4628      	mov	r0, r5
 8007856:	f000 f82b 	bl	80078b0 <__swsetup_r>
 800785a:	b118      	cbz	r0, 8007864 <__swbuf_r+0x32>
 800785c:	f04f 37ff 	mov.w	r7, #4294967295
 8007860:	4638      	mov	r0, r7
 8007862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	6922      	ldr	r2, [r4, #16]
 8007868:	1a98      	subs	r0, r3, r2
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	b2f6      	uxtb	r6, r6
 800786e:	4283      	cmp	r3, r0
 8007870:	4637      	mov	r7, r6
 8007872:	dc05      	bgt.n	8007880 <__swbuf_r+0x4e>
 8007874:	4621      	mov	r1, r4
 8007876:	4628      	mov	r0, r5
 8007878:	f7ff fe0a 	bl	8007490 <_fflush_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	d1ed      	bne.n	800785c <__swbuf_r+0x2a>
 8007880:	68a3      	ldr	r3, [r4, #8]
 8007882:	3b01      	subs	r3, #1
 8007884:	60a3      	str	r3, [r4, #8]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	701e      	strb	r6, [r3, #0]
 800788e:	6962      	ldr	r2, [r4, #20]
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	429a      	cmp	r2, r3
 8007894:	d004      	beq.n	80078a0 <__swbuf_r+0x6e>
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	07db      	lsls	r3, r3, #31
 800789a:	d5e1      	bpl.n	8007860 <__swbuf_r+0x2e>
 800789c:	2e0a      	cmp	r6, #10
 800789e:	d1df      	bne.n	8007860 <__swbuf_r+0x2e>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	f7ff fdf4 	bl	8007490 <_fflush_r>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d0d9      	beq.n	8007860 <__swbuf_r+0x2e>
 80078ac:	e7d6      	b.n	800785c <__swbuf_r+0x2a>
	...

080078b0 <__swsetup_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4b29      	ldr	r3, [pc, #164]	@ (8007958 <__swsetup_r+0xa8>)
 80078b4:	4605      	mov	r5, r0
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	460c      	mov	r4, r1
 80078ba:	b118      	cbz	r0, 80078c4 <__swsetup_r+0x14>
 80078bc:	6a03      	ldr	r3, [r0, #32]
 80078be:	b90b      	cbnz	r3, 80078c4 <__swsetup_r+0x14>
 80078c0:	f7ff feae 	bl	8007620 <__sinit>
 80078c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078c8:	0719      	lsls	r1, r3, #28
 80078ca:	d422      	bmi.n	8007912 <__swsetup_r+0x62>
 80078cc:	06da      	lsls	r2, r3, #27
 80078ce:	d407      	bmi.n	80078e0 <__swsetup_r+0x30>
 80078d0:	2209      	movs	r2, #9
 80078d2:	602a      	str	r2, [r5, #0]
 80078d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	f04f 30ff 	mov.w	r0, #4294967295
 80078de:	e033      	b.n	8007948 <__swsetup_r+0x98>
 80078e0:	0758      	lsls	r0, r3, #29
 80078e2:	d512      	bpl.n	800790a <__swsetup_r+0x5a>
 80078e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078e6:	b141      	cbz	r1, 80078fa <__swsetup_r+0x4a>
 80078e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078ec:	4299      	cmp	r1, r3
 80078ee:	d002      	beq.n	80078f6 <__swsetup_r+0x46>
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 ff0d 	bl	8008710 <_free_r>
 80078f6:	2300      	movs	r3, #0
 80078f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	2300      	movs	r3, #0
 8007904:	6063      	str	r3, [r4, #4]
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	f043 0308 	orr.w	r3, r3, #8
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	6923      	ldr	r3, [r4, #16]
 8007914:	b94b      	cbnz	r3, 800792a <__swsetup_r+0x7a>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800791c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007920:	d003      	beq.n	800792a <__swsetup_r+0x7a>
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f001 fe35 	bl	8009594 <__smakebuf_r>
 800792a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792e:	f013 0201 	ands.w	r2, r3, #1
 8007932:	d00a      	beq.n	800794a <__swsetup_r+0x9a>
 8007934:	2200      	movs	r2, #0
 8007936:	60a2      	str	r2, [r4, #8]
 8007938:	6962      	ldr	r2, [r4, #20]
 800793a:	4252      	negs	r2, r2
 800793c:	61a2      	str	r2, [r4, #24]
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	b942      	cbnz	r2, 8007954 <__swsetup_r+0xa4>
 8007942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007946:	d1c5      	bne.n	80078d4 <__swsetup_r+0x24>
 8007948:	bd38      	pop	{r3, r4, r5, pc}
 800794a:	0799      	lsls	r1, r3, #30
 800794c:	bf58      	it	pl
 800794e:	6962      	ldrpl	r2, [r4, #20]
 8007950:	60a2      	str	r2, [r4, #8]
 8007952:	e7f4      	b.n	800793e <__swsetup_r+0x8e>
 8007954:	2000      	movs	r0, #0
 8007956:	e7f7      	b.n	8007948 <__swsetup_r+0x98>
 8007958:	20000020 	.word	0x20000020

0800795c <memset>:
 800795c:	4402      	add	r2, r0
 800795e:	4603      	mov	r3, r0
 8007960:	4293      	cmp	r3, r2
 8007962:	d100      	bne.n	8007966 <memset+0xa>
 8007964:	4770      	bx	lr
 8007966:	f803 1b01 	strb.w	r1, [r3], #1
 800796a:	e7f9      	b.n	8007960 <memset+0x4>

0800796c <_localeconv_r>:
 800796c:	4800      	ldr	r0, [pc, #0]	@ (8007970 <_localeconv_r+0x4>)
 800796e:	4770      	bx	lr
 8007970:	20000160 	.word	0x20000160

08007974 <_close_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d06      	ldr	r5, [pc, #24]	@ (8007990 <_close_r+0x1c>)
 8007978:	2300      	movs	r3, #0
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	f7fb fee3 	bl	800374a <_close>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_close_r+0x1a>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_close_r+0x1a>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	20000934 	.word	0x20000934

08007994 <_lseek_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d07      	ldr	r5, [pc, #28]	@ (80079b4 <_lseek_r+0x20>)
 8007998:	4604      	mov	r4, r0
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	602a      	str	r2, [r5, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f7fb fef8 	bl	8003798 <_lseek>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_lseek_r+0x1e>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_lseek_r+0x1e>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	20000934 	.word	0x20000934

080079b8 <_read_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d07      	ldr	r5, [pc, #28]	@ (80079d8 <_read_r+0x20>)
 80079bc:	4604      	mov	r4, r0
 80079be:	4608      	mov	r0, r1
 80079c0:	4611      	mov	r1, r2
 80079c2:	2200      	movs	r2, #0
 80079c4:	602a      	str	r2, [r5, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	f7fb fea2 	bl	8003710 <_read>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_read_r+0x1e>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_read_r+0x1e>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	20000934 	.word	0x20000934

080079dc <_write_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d07      	ldr	r5, [pc, #28]	@ (80079fc <_write_r+0x20>)
 80079e0:	4604      	mov	r4, r0
 80079e2:	4608      	mov	r0, r1
 80079e4:	4611      	mov	r1, r2
 80079e6:	2200      	movs	r2, #0
 80079e8:	602a      	str	r2, [r5, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f7fb fa14 	bl	8002e18 <_write>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_write_r+0x1e>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_write_r+0x1e>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	20000934 	.word	0x20000934

08007a00 <__errno>:
 8007a00:	4b01      	ldr	r3, [pc, #4]	@ (8007a08 <__errno+0x8>)
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	20000020 	.word	0x20000020

08007a0c <__libc_init_array>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a44 <__libc_init_array+0x38>)
 8007a10:	4c0d      	ldr	r4, [pc, #52]	@ (8007a48 <__libc_init_array+0x3c>)
 8007a12:	1b64      	subs	r4, r4, r5
 8007a14:	10a4      	asrs	r4, r4, #2
 8007a16:	2600      	movs	r6, #0
 8007a18:	42a6      	cmp	r6, r4
 8007a1a:	d109      	bne.n	8007a30 <__libc_init_array+0x24>
 8007a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a4c <__libc_init_array+0x40>)
 8007a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a50 <__libc_init_array+0x44>)
 8007a20:	f001 ff26 	bl	8009870 <_init>
 8007a24:	1b64      	subs	r4, r4, r5
 8007a26:	10a4      	asrs	r4, r4, #2
 8007a28:	2600      	movs	r6, #0
 8007a2a:	42a6      	cmp	r6, r4
 8007a2c:	d105      	bne.n	8007a3a <__libc_init_array+0x2e>
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a34:	4798      	blx	r3
 8007a36:	3601      	adds	r6, #1
 8007a38:	e7ee      	b.n	8007a18 <__libc_init_array+0xc>
 8007a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3e:	4798      	blx	r3
 8007a40:	3601      	adds	r6, #1
 8007a42:	e7f2      	b.n	8007a2a <__libc_init_array+0x1e>
 8007a44:	0800a4b8 	.word	0x0800a4b8
 8007a48:	0800a4b8 	.word	0x0800a4b8
 8007a4c:	0800a4b8 	.word	0x0800a4b8
 8007a50:	0800a4bc 	.word	0x0800a4bc

08007a54 <__retarget_lock_init_recursive>:
 8007a54:	4770      	bx	lr

08007a56 <__retarget_lock_acquire_recursive>:
 8007a56:	4770      	bx	lr

08007a58 <__retarget_lock_release_recursive>:
 8007a58:	4770      	bx	lr

08007a5a <memcpy>:
 8007a5a:	440a      	add	r2, r1
 8007a5c:	4291      	cmp	r1, r2
 8007a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a62:	d100      	bne.n	8007a66 <memcpy+0xc>
 8007a64:	4770      	bx	lr
 8007a66:	b510      	push	{r4, lr}
 8007a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a70:	4291      	cmp	r1, r2
 8007a72:	d1f9      	bne.n	8007a68 <memcpy+0xe>
 8007a74:	bd10      	pop	{r4, pc}

08007a76 <quorem>:
 8007a76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	6903      	ldr	r3, [r0, #16]
 8007a7c:	690c      	ldr	r4, [r1, #16]
 8007a7e:	42a3      	cmp	r3, r4
 8007a80:	4607      	mov	r7, r0
 8007a82:	db7e      	blt.n	8007b82 <quorem+0x10c>
 8007a84:	3c01      	subs	r4, #1
 8007a86:	f101 0814 	add.w	r8, r1, #20
 8007a8a:	00a3      	lsls	r3, r4, #2
 8007a8c:	f100 0514 	add.w	r5, r0, #20
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007aa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007aac:	d32e      	bcc.n	8007b0c <quorem+0x96>
 8007aae:	f04f 0a00 	mov.w	sl, #0
 8007ab2:	46c4      	mov	ip, r8
 8007ab4:	46ae      	mov	lr, r5
 8007ab6:	46d3      	mov	fp, sl
 8007ab8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007abc:	b298      	uxth	r0, r3
 8007abe:	fb06 a000 	mla	r0, r6, r0, sl
 8007ac2:	0c02      	lsrs	r2, r0, #16
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	fb06 2303 	mla	r3, r6, r3, r2
 8007aca:	f8de 2000 	ldr.w	r2, [lr]
 8007ace:	b280      	uxth	r0, r0
 8007ad0:	b292      	uxth	r2, r2
 8007ad2:	1a12      	subs	r2, r2, r0
 8007ad4:	445a      	add	r2, fp
 8007ad6:	f8de 0000 	ldr.w	r0, [lr]
 8007ada:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ae4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ae8:	b292      	uxth	r2, r2
 8007aea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007aee:	45e1      	cmp	r9, ip
 8007af0:	f84e 2b04 	str.w	r2, [lr], #4
 8007af4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007af8:	d2de      	bcs.n	8007ab8 <quorem+0x42>
 8007afa:	9b00      	ldr	r3, [sp, #0]
 8007afc:	58eb      	ldr	r3, [r5, r3]
 8007afe:	b92b      	cbnz	r3, 8007b0c <quorem+0x96>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	3b04      	subs	r3, #4
 8007b04:	429d      	cmp	r5, r3
 8007b06:	461a      	mov	r2, r3
 8007b08:	d32f      	bcc.n	8007b6a <quorem+0xf4>
 8007b0a:	613c      	str	r4, [r7, #16]
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f001 f979 	bl	8008e04 <__mcmp>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	db25      	blt.n	8007b62 <quorem+0xec>
 8007b16:	4629      	mov	r1, r5
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b1e:	f8d1 c000 	ldr.w	ip, [r1]
 8007b22:	fa1f fe82 	uxth.w	lr, r2
 8007b26:	fa1f f38c 	uxth.w	r3, ip
 8007b2a:	eba3 030e 	sub.w	r3, r3, lr
 8007b2e:	4403      	add	r3, r0
 8007b30:	0c12      	lsrs	r2, r2, #16
 8007b32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b40:	45c1      	cmp	r9, r8
 8007b42:	f841 3b04 	str.w	r3, [r1], #4
 8007b46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b4a:	d2e6      	bcs.n	8007b1a <quorem+0xa4>
 8007b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b54:	b922      	cbnz	r2, 8007b60 <quorem+0xea>
 8007b56:	3b04      	subs	r3, #4
 8007b58:	429d      	cmp	r5, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	d30b      	bcc.n	8007b76 <quorem+0x100>
 8007b5e:	613c      	str	r4, [r7, #16]
 8007b60:	3601      	adds	r6, #1
 8007b62:	4630      	mov	r0, r6
 8007b64:	b003      	add	sp, #12
 8007b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6a:	6812      	ldr	r2, [r2, #0]
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	d1cb      	bne.n	8007b0a <quorem+0x94>
 8007b72:	3c01      	subs	r4, #1
 8007b74:	e7c6      	b.n	8007b04 <quorem+0x8e>
 8007b76:	6812      	ldr	r2, [r2, #0]
 8007b78:	3b04      	subs	r3, #4
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	d1ef      	bne.n	8007b5e <quorem+0xe8>
 8007b7e:	3c01      	subs	r4, #1
 8007b80:	e7ea      	b.n	8007b58 <quorem+0xe2>
 8007b82:	2000      	movs	r0, #0
 8007b84:	e7ee      	b.n	8007b64 <quorem+0xee>
	...

08007b88 <_dtoa_r>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	69c7      	ldr	r7, [r0, #28]
 8007b8e:	b099      	sub	sp, #100	@ 0x64
 8007b90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b94:	ec55 4b10 	vmov	r4, r5, d0
 8007b98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007b9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b9c:	4683      	mov	fp, r0
 8007b9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ba0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ba2:	b97f      	cbnz	r7, 8007bc4 <_dtoa_r+0x3c>
 8007ba4:	2010      	movs	r0, #16
 8007ba6:	f000 fdfd 	bl	80087a4 <malloc>
 8007baa:	4602      	mov	r2, r0
 8007bac:	f8cb 001c 	str.w	r0, [fp, #28]
 8007bb0:	b920      	cbnz	r0, 8007bbc <_dtoa_r+0x34>
 8007bb2:	4ba7      	ldr	r3, [pc, #668]	@ (8007e50 <_dtoa_r+0x2c8>)
 8007bb4:	21ef      	movs	r1, #239	@ 0xef
 8007bb6:	48a7      	ldr	r0, [pc, #668]	@ (8007e54 <_dtoa_r+0x2cc>)
 8007bb8:	f001 fd74 	bl	80096a4 <__assert_func>
 8007bbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bc0:	6007      	str	r7, [r0, #0]
 8007bc2:	60c7      	str	r7, [r0, #12]
 8007bc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bc8:	6819      	ldr	r1, [r3, #0]
 8007bca:	b159      	cbz	r1, 8007be4 <_dtoa_r+0x5c>
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	604a      	str	r2, [r1, #4]
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4093      	lsls	r3, r2
 8007bd4:	608b      	str	r3, [r1, #8]
 8007bd6:	4658      	mov	r0, fp
 8007bd8:	f000 feda 	bl	8008990 <_Bfree>
 8007bdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	1e2b      	subs	r3, r5, #0
 8007be6:	bfb9      	ittee	lt
 8007be8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bec:	9303      	strlt	r3, [sp, #12]
 8007bee:	2300      	movge	r3, #0
 8007bf0:	6033      	strge	r3, [r6, #0]
 8007bf2:	9f03      	ldr	r7, [sp, #12]
 8007bf4:	4b98      	ldr	r3, [pc, #608]	@ (8007e58 <_dtoa_r+0x2d0>)
 8007bf6:	bfbc      	itt	lt
 8007bf8:	2201      	movlt	r2, #1
 8007bfa:	6032      	strlt	r2, [r6, #0]
 8007bfc:	43bb      	bics	r3, r7
 8007bfe:	d112      	bne.n	8007c26 <_dtoa_r+0x9e>
 8007c00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c0c:	4323      	orrs	r3, r4
 8007c0e:	f000 854d 	beq.w	80086ac <_dtoa_r+0xb24>
 8007c12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e6c <_dtoa_r+0x2e4>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 854f 	beq.w	80086bc <_dtoa_r+0xb34>
 8007c1e:	f10a 0303 	add.w	r3, sl, #3
 8007c22:	f000 bd49 	b.w	80086b8 <_dtoa_r+0xb30>
 8007c26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	ec51 0b17 	vmov	r0, r1, d7
 8007c30:	2300      	movs	r3, #0
 8007c32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c36:	f7f8 ff4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c3a:	4680      	mov	r8, r0
 8007c3c:	b158      	cbz	r0, 8007c56 <_dtoa_r+0xce>
 8007c3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c40:	2301      	movs	r3, #1
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c46:	b113      	cbz	r3, 8007c4e <_dtoa_r+0xc6>
 8007c48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c4a:	4b84      	ldr	r3, [pc, #528]	@ (8007e5c <_dtoa_r+0x2d4>)
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007e70 <_dtoa_r+0x2e8>
 8007c52:	f000 bd33 	b.w	80086bc <_dtoa_r+0xb34>
 8007c56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c5a:	aa16      	add	r2, sp, #88	@ 0x58
 8007c5c:	a917      	add	r1, sp, #92	@ 0x5c
 8007c5e:	4658      	mov	r0, fp
 8007c60:	f001 f980 	bl	8008f64 <__d2b>
 8007c64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c68:	4681      	mov	r9, r0
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	d077      	beq.n	8007d5e <_dtoa_r+0x1d6>
 8007c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c88:	4619      	mov	r1, r3
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4b74      	ldr	r3, [pc, #464]	@ (8007e60 <_dtoa_r+0x2d8>)
 8007c8e:	f7f8 fb03 	bl	8000298 <__aeabi_dsub>
 8007c92:	a369      	add	r3, pc, #420	@ (adr r3, 8007e38 <_dtoa_r+0x2b0>)
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f7f8 fcb6 	bl	8000608 <__aeabi_dmul>
 8007c9c:	a368      	add	r3, pc, #416	@ (adr r3, 8007e40 <_dtoa_r+0x2b8>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f7f8 fafb 	bl	800029c <__adddf3>
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	460d      	mov	r5, r1
 8007cac:	f7f8 fc42 	bl	8000534 <__aeabi_i2d>
 8007cb0:	a365      	add	r3, pc, #404	@ (adr r3, 8007e48 <_dtoa_r+0x2c0>)
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f7f8 fca7 	bl	8000608 <__aeabi_dmul>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7f8 faeb 	bl	800029c <__adddf3>
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	460d      	mov	r5, r1
 8007cca:	f7f8 ff4d 	bl	8000b68 <__aeabi_d2iz>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 ff08 	bl	8000aec <__aeabi_dcmplt>
 8007cdc:	b140      	cbz	r0, 8007cf0 <_dtoa_r+0x168>
 8007cde:	4638      	mov	r0, r7
 8007ce0:	f7f8 fc28 	bl	8000534 <__aeabi_i2d>
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	f7f8 fef6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cec:	b900      	cbnz	r0, 8007cf0 <_dtoa_r+0x168>
 8007cee:	3f01      	subs	r7, #1
 8007cf0:	2f16      	cmp	r7, #22
 8007cf2:	d851      	bhi.n	8007d98 <_dtoa_r+0x210>
 8007cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8007e64 <_dtoa_r+0x2dc>)
 8007cf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d02:	f7f8 fef3 	bl	8000aec <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d048      	beq.n	8007d9c <_dtoa_r+0x214>
 8007d0a:	3f01      	subs	r7, #1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d12:	1b9b      	subs	r3, r3, r6
 8007d14:	1e5a      	subs	r2, r3, #1
 8007d16:	bf44      	itt	mi
 8007d18:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d1c:	2300      	movmi	r3, #0
 8007d1e:	9208      	str	r2, [sp, #32]
 8007d20:	bf54      	ite	pl
 8007d22:	f04f 0800 	movpl.w	r8, #0
 8007d26:	9308      	strmi	r3, [sp, #32]
 8007d28:	2f00      	cmp	r7, #0
 8007d2a:	db39      	blt.n	8007da0 <_dtoa_r+0x218>
 8007d2c:	9b08      	ldr	r3, [sp, #32]
 8007d2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d30:	443b      	add	r3, r7
 8007d32:	9308      	str	r3, [sp, #32]
 8007d34:	2300      	movs	r3, #0
 8007d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d3a:	2b09      	cmp	r3, #9
 8007d3c:	d864      	bhi.n	8007e08 <_dtoa_r+0x280>
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	bfc4      	itt	gt
 8007d42:	3b04      	subgt	r3, #4
 8007d44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d48:	f1a3 0302 	sub.w	r3, r3, #2
 8007d4c:	bfcc      	ite	gt
 8007d4e:	2400      	movgt	r4, #0
 8007d50:	2401      	movle	r4, #1
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d863      	bhi.n	8007e1e <_dtoa_r+0x296>
 8007d56:	e8df f003 	tbb	[pc, r3]
 8007d5a:	372a      	.short	0x372a
 8007d5c:	5535      	.short	0x5535
 8007d5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d62:	441e      	add	r6, r3
 8007d64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	bfc1      	itttt	gt
 8007d6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d70:	409f      	lslgt	r7, r3
 8007d72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d7a:	bfd6      	itet	le
 8007d7c:	f1c3 0320 	rsble	r3, r3, #32
 8007d80:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d84:	fa04 f003 	lslle.w	r0, r4, r3
 8007d88:	f7f8 fbc4 	bl	8000514 <__aeabi_ui2d>
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d92:	3e01      	subs	r6, #1
 8007d94:	9214      	str	r2, [sp, #80]	@ 0x50
 8007d96:	e777      	b.n	8007c88 <_dtoa_r+0x100>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e7b8      	b.n	8007d0e <_dtoa_r+0x186>
 8007d9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007d9e:	e7b7      	b.n	8007d10 <_dtoa_r+0x188>
 8007da0:	427b      	negs	r3, r7
 8007da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da4:	2300      	movs	r3, #0
 8007da6:	eba8 0807 	sub.w	r8, r8, r7
 8007daa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007dac:	e7c4      	b.n	8007d38 <_dtoa_r+0x1b0>
 8007dae:	2300      	movs	r3, #0
 8007db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007db2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dc35      	bgt.n	8007e24 <_dtoa_r+0x29c>
 8007db8:	2301      	movs	r3, #1
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	9307      	str	r3, [sp, #28]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dc2:	e00b      	b.n	8007ddc <_dtoa_r+0x254>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e7f3      	b.n	8007db0 <_dtoa_r+0x228>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	9307      	str	r3, [sp, #28]
 8007dd8:	bfb8      	it	lt
 8007dda:	2301      	movlt	r3, #1
 8007ddc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007de0:	2100      	movs	r1, #0
 8007de2:	2204      	movs	r2, #4
 8007de4:	f102 0514 	add.w	r5, r2, #20
 8007de8:	429d      	cmp	r5, r3
 8007dea:	d91f      	bls.n	8007e2c <_dtoa_r+0x2a4>
 8007dec:	6041      	str	r1, [r0, #4]
 8007dee:	4658      	mov	r0, fp
 8007df0:	f000 fd8e 	bl	8008910 <_Balloc>
 8007df4:	4682      	mov	sl, r0
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d13c      	bne.n	8007e74 <_dtoa_r+0x2ec>
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8007e68 <_dtoa_r+0x2e0>)
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e02:	e6d8      	b.n	8007bb6 <_dtoa_r+0x2e>
 8007e04:	2301      	movs	r3, #1
 8007e06:	e7e0      	b.n	8007dca <_dtoa_r+0x242>
 8007e08:	2401      	movs	r4, #1
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e10:	f04f 33ff 	mov.w	r3, #4294967295
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	9307      	str	r3, [sp, #28]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2312      	movs	r3, #18
 8007e1c:	e7d0      	b.n	8007dc0 <_dtoa_r+0x238>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e22:	e7f5      	b.n	8007e10 <_dtoa_r+0x288>
 8007e24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	9307      	str	r3, [sp, #28]
 8007e2a:	e7d7      	b.n	8007ddc <_dtoa_r+0x254>
 8007e2c:	3101      	adds	r1, #1
 8007e2e:	0052      	lsls	r2, r2, #1
 8007e30:	e7d8      	b.n	8007de4 <_dtoa_r+0x25c>
 8007e32:	bf00      	nop
 8007e34:	f3af 8000 	nop.w
 8007e38:	636f4361 	.word	0x636f4361
 8007e3c:	3fd287a7 	.word	0x3fd287a7
 8007e40:	8b60c8b3 	.word	0x8b60c8b3
 8007e44:	3fc68a28 	.word	0x3fc68a28
 8007e48:	509f79fb 	.word	0x509f79fb
 8007e4c:	3fd34413 	.word	0x3fd34413
 8007e50:	0800a17d 	.word	0x0800a17d
 8007e54:	0800a194 	.word	0x0800a194
 8007e58:	7ff00000 	.word	0x7ff00000
 8007e5c:	0800a14d 	.word	0x0800a14d
 8007e60:	3ff80000 	.word	0x3ff80000
 8007e64:	0800a290 	.word	0x0800a290
 8007e68:	0800a1ec 	.word	0x0800a1ec
 8007e6c:	0800a179 	.word	0x0800a179
 8007e70:	0800a14c 	.word	0x0800a14c
 8007e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e78:	6018      	str	r0, [r3, #0]
 8007e7a:	9b07      	ldr	r3, [sp, #28]
 8007e7c:	2b0e      	cmp	r3, #14
 8007e7e:	f200 80a4 	bhi.w	8007fca <_dtoa_r+0x442>
 8007e82:	2c00      	cmp	r4, #0
 8007e84:	f000 80a1 	beq.w	8007fca <_dtoa_r+0x442>
 8007e88:	2f00      	cmp	r7, #0
 8007e8a:	dd33      	ble.n	8007ef4 <_dtoa_r+0x36c>
 8007e8c:	4bad      	ldr	r3, [pc, #692]	@ (8008144 <_dtoa_r+0x5bc>)
 8007e8e:	f007 020f 	and.w	r2, r7, #15
 8007e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e96:	ed93 7b00 	vldr	d7, [r3]
 8007e9a:	05f8      	lsls	r0, r7, #23
 8007e9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ea0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ea4:	d516      	bpl.n	8007ed4 <_dtoa_r+0x34c>
 8007ea6:	4ba8      	ldr	r3, [pc, #672]	@ (8008148 <_dtoa_r+0x5c0>)
 8007ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eb0:	f7f8 fcd4 	bl	800085c <__aeabi_ddiv>
 8007eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb8:	f004 040f 	and.w	r4, r4, #15
 8007ebc:	2603      	movs	r6, #3
 8007ebe:	4da2      	ldr	r5, [pc, #648]	@ (8008148 <_dtoa_r+0x5c0>)
 8007ec0:	b954      	cbnz	r4, 8007ed8 <_dtoa_r+0x350>
 8007ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eca:	f7f8 fcc7 	bl	800085c <__aeabi_ddiv>
 8007ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed2:	e028      	b.n	8007f26 <_dtoa_r+0x39e>
 8007ed4:	2602      	movs	r6, #2
 8007ed6:	e7f2      	b.n	8007ebe <_dtoa_r+0x336>
 8007ed8:	07e1      	lsls	r1, r4, #31
 8007eda:	d508      	bpl.n	8007eee <_dtoa_r+0x366>
 8007edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ee4:	f7f8 fb90 	bl	8000608 <__aeabi_dmul>
 8007ee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eec:	3601      	adds	r6, #1
 8007eee:	1064      	asrs	r4, r4, #1
 8007ef0:	3508      	adds	r5, #8
 8007ef2:	e7e5      	b.n	8007ec0 <_dtoa_r+0x338>
 8007ef4:	f000 80d2 	beq.w	800809c <_dtoa_r+0x514>
 8007ef8:	427c      	negs	r4, r7
 8007efa:	4b92      	ldr	r3, [pc, #584]	@ (8008144 <_dtoa_r+0x5bc>)
 8007efc:	4d92      	ldr	r5, [pc, #584]	@ (8008148 <_dtoa_r+0x5c0>)
 8007efe:	f004 020f 	and.w	r2, r4, #15
 8007f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f0e:	f7f8 fb7b 	bl	8000608 <__aeabi_dmul>
 8007f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f16:	1124      	asrs	r4, r4, #4
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2602      	movs	r6, #2
 8007f1c:	2c00      	cmp	r4, #0
 8007f1e:	f040 80b2 	bne.w	8008086 <_dtoa_r+0x4fe>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1d3      	bne.n	8007ece <_dtoa_r+0x346>
 8007f26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 80b7 	beq.w	80080a0 <_dtoa_r+0x518>
 8007f32:	4b86      	ldr	r3, [pc, #536]	@ (800814c <_dtoa_r+0x5c4>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 fdd7 	bl	8000aec <__aeabi_dcmplt>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f000 80ae 	beq.w	80080a0 <_dtoa_r+0x518>
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80aa 	beq.w	80080a0 <_dtoa_r+0x518>
 8007f4c:	9b00      	ldr	r3, [sp, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dd37      	ble.n	8007fc2 <_dtoa_r+0x43a>
 8007f52:	1e7b      	subs	r3, r7, #1
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	4620      	mov	r0, r4
 8007f58:	4b7d      	ldr	r3, [pc, #500]	@ (8008150 <_dtoa_r+0x5c8>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 fb53 	bl	8000608 <__aeabi_dmul>
 8007f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f66:	9c00      	ldr	r4, [sp, #0]
 8007f68:	3601      	adds	r6, #1
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7f8 fae2 	bl	8000534 <__aeabi_i2d>
 8007f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f74:	f7f8 fb48 	bl	8000608 <__aeabi_dmul>
 8007f78:	4b76      	ldr	r3, [pc, #472]	@ (8008154 <_dtoa_r+0x5cc>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f7f8 f98e 	bl	800029c <__adddf3>
 8007f80:	4605      	mov	r5, r0
 8007f82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f86:	2c00      	cmp	r4, #0
 8007f88:	f040 808d 	bne.w	80080a6 <_dtoa_r+0x51e>
 8007f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f90:	4b71      	ldr	r3, [pc, #452]	@ (8008158 <_dtoa_r+0x5d0>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	f7f8 f980 	bl	8000298 <__aeabi_dsub>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4633      	mov	r3, r6
 8007fa4:	f7f8 fdc0 	bl	8000b28 <__aeabi_dcmpgt>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	f040 828b 	bne.w	80084c4 <_dtoa_r+0x93c>
 8007fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fb8:	f7f8 fd98 	bl	8000aec <__aeabi_dcmplt>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	f040 8128 	bne.w	8008212 <_dtoa_r+0x68a>
 8007fc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007fc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007fca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f2c0 815a 	blt.w	8008286 <_dtoa_r+0x6fe>
 8007fd2:	2f0e      	cmp	r7, #14
 8007fd4:	f300 8157 	bgt.w	8008286 <_dtoa_r+0x6fe>
 8007fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8008144 <_dtoa_r+0x5bc>)
 8007fda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fde:	ed93 7b00 	vldr	d7, [r3]
 8007fe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	ed8d 7b00 	vstr	d7, [sp]
 8007fea:	da03      	bge.n	8007ff4 <_dtoa_r+0x46c>
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f340 8101 	ble.w	80081f6 <_dtoa_r+0x66e>
 8007ff4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ff8:	4656      	mov	r6, sl
 8007ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	f7f8 fc2b 	bl	800085c <__aeabi_ddiv>
 8008006:	f7f8 fdaf 	bl	8000b68 <__aeabi_d2iz>
 800800a:	4680      	mov	r8, r0
 800800c:	f7f8 fa92 	bl	8000534 <__aeabi_i2d>
 8008010:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008014:	f7f8 faf8 	bl	8000608 <__aeabi_dmul>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008024:	f7f8 f938 	bl	8000298 <__aeabi_dsub>
 8008028:	f806 4b01 	strb.w	r4, [r6], #1
 800802c:	9d07      	ldr	r5, [sp, #28]
 800802e:	eba6 040a 	sub.w	r4, r6, sl
 8008032:	42a5      	cmp	r5, r4
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	f040 8117 	bne.w	800826a <_dtoa_r+0x6e2>
 800803c:	f7f8 f92e 	bl	800029c <__adddf3>
 8008040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008044:	4604      	mov	r4, r0
 8008046:	460d      	mov	r5, r1
 8008048:	f7f8 fd6e 	bl	8000b28 <__aeabi_dcmpgt>
 800804c:	2800      	cmp	r0, #0
 800804e:	f040 80f9 	bne.w	8008244 <_dtoa_r+0x6bc>
 8008052:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fd3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800805e:	b118      	cbz	r0, 8008068 <_dtoa_r+0x4e0>
 8008060:	f018 0f01 	tst.w	r8, #1
 8008064:	f040 80ee 	bne.w	8008244 <_dtoa_r+0x6bc>
 8008068:	4649      	mov	r1, r9
 800806a:	4658      	mov	r0, fp
 800806c:	f000 fc90 	bl	8008990 <_Bfree>
 8008070:	2300      	movs	r3, #0
 8008072:	7033      	strb	r3, [r6, #0]
 8008074:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008076:	3701      	adds	r7, #1
 8008078:	601f      	str	r7, [r3, #0]
 800807a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 831d 	beq.w	80086bc <_dtoa_r+0xb34>
 8008082:	601e      	str	r6, [r3, #0]
 8008084:	e31a      	b.n	80086bc <_dtoa_r+0xb34>
 8008086:	07e2      	lsls	r2, r4, #31
 8008088:	d505      	bpl.n	8008096 <_dtoa_r+0x50e>
 800808a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800808e:	f7f8 fabb 	bl	8000608 <__aeabi_dmul>
 8008092:	3601      	adds	r6, #1
 8008094:	2301      	movs	r3, #1
 8008096:	1064      	asrs	r4, r4, #1
 8008098:	3508      	adds	r5, #8
 800809a:	e73f      	b.n	8007f1c <_dtoa_r+0x394>
 800809c:	2602      	movs	r6, #2
 800809e:	e742      	b.n	8007f26 <_dtoa_r+0x39e>
 80080a0:	9c07      	ldr	r4, [sp, #28]
 80080a2:	9704      	str	r7, [sp, #16]
 80080a4:	e761      	b.n	8007f6a <_dtoa_r+0x3e2>
 80080a6:	4b27      	ldr	r3, [pc, #156]	@ (8008144 <_dtoa_r+0x5bc>)
 80080a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080b2:	4454      	add	r4, sl
 80080b4:	2900      	cmp	r1, #0
 80080b6:	d053      	beq.n	8008160 <_dtoa_r+0x5d8>
 80080b8:	4928      	ldr	r1, [pc, #160]	@ (800815c <_dtoa_r+0x5d4>)
 80080ba:	2000      	movs	r0, #0
 80080bc:	f7f8 fbce 	bl	800085c <__aeabi_ddiv>
 80080c0:	4633      	mov	r3, r6
 80080c2:	462a      	mov	r2, r5
 80080c4:	f7f8 f8e8 	bl	8000298 <__aeabi_dsub>
 80080c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080cc:	4656      	mov	r6, sl
 80080ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d2:	f7f8 fd49 	bl	8000b68 <__aeabi_d2iz>
 80080d6:	4605      	mov	r5, r0
 80080d8:	f7f8 fa2c 	bl	8000534 <__aeabi_i2d>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e4:	f7f8 f8d8 	bl	8000298 <__aeabi_dsub>
 80080e8:	3530      	adds	r5, #48	@ 0x30
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080f2:	f806 5b01 	strb.w	r5, [r6], #1
 80080f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080fa:	f7f8 fcf7 	bl	8000aec <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d171      	bne.n	80081e6 <_dtoa_r+0x65e>
 8008102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008106:	4911      	ldr	r1, [pc, #68]	@ (800814c <_dtoa_r+0x5c4>)
 8008108:	2000      	movs	r0, #0
 800810a:	f7f8 f8c5 	bl	8000298 <__aeabi_dsub>
 800810e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008112:	f7f8 fceb 	bl	8000aec <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	f040 8095 	bne.w	8008246 <_dtoa_r+0x6be>
 800811c:	42a6      	cmp	r6, r4
 800811e:	f43f af50 	beq.w	8007fc2 <_dtoa_r+0x43a>
 8008122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008126:	4b0a      	ldr	r3, [pc, #40]	@ (8008150 <_dtoa_r+0x5c8>)
 8008128:	2200      	movs	r2, #0
 800812a:	f7f8 fa6d 	bl	8000608 <__aeabi_dmul>
 800812e:	4b08      	ldr	r3, [pc, #32]	@ (8008150 <_dtoa_r+0x5c8>)
 8008130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008134:	2200      	movs	r2, #0
 8008136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800813a:	f7f8 fa65 	bl	8000608 <__aeabi_dmul>
 800813e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008142:	e7c4      	b.n	80080ce <_dtoa_r+0x546>
 8008144:	0800a290 	.word	0x0800a290
 8008148:	0800a268 	.word	0x0800a268
 800814c:	3ff00000 	.word	0x3ff00000
 8008150:	40240000 	.word	0x40240000
 8008154:	401c0000 	.word	0x401c0000
 8008158:	40140000 	.word	0x40140000
 800815c:	3fe00000 	.word	0x3fe00000
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	f7f8 fa50 	bl	8000608 <__aeabi_dmul>
 8008168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800816c:	9415      	str	r4, [sp, #84]	@ 0x54
 800816e:	4656      	mov	r6, sl
 8008170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008174:	f7f8 fcf8 	bl	8000b68 <__aeabi_d2iz>
 8008178:	4605      	mov	r5, r0
 800817a:	f7f8 f9db 	bl	8000534 <__aeabi_i2d>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008186:	f7f8 f887 	bl	8000298 <__aeabi_dsub>
 800818a:	3530      	adds	r5, #48	@ 0x30
 800818c:	f806 5b01 	strb.w	r5, [r6], #1
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	42a6      	cmp	r6, r4
 8008196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	d124      	bne.n	80081ea <_dtoa_r+0x662>
 80081a0:	4bac      	ldr	r3, [pc, #688]	@ (8008454 <_dtoa_r+0x8cc>)
 80081a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081a6:	f7f8 f879 	bl	800029c <__adddf3>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b2:	f7f8 fcb9 	bl	8000b28 <__aeabi_dcmpgt>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d145      	bne.n	8008246 <_dtoa_r+0x6be>
 80081ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081be:	49a5      	ldr	r1, [pc, #660]	@ (8008454 <_dtoa_r+0x8cc>)
 80081c0:	2000      	movs	r0, #0
 80081c2:	f7f8 f869 	bl	8000298 <__aeabi_dsub>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ce:	f7f8 fc8d 	bl	8000aec <__aeabi_dcmplt>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f43f aef5 	beq.w	8007fc2 <_dtoa_r+0x43a>
 80081d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80081da:	1e73      	subs	r3, r6, #1
 80081dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80081de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081e2:	2b30      	cmp	r3, #48	@ 0x30
 80081e4:	d0f8      	beq.n	80081d8 <_dtoa_r+0x650>
 80081e6:	9f04      	ldr	r7, [sp, #16]
 80081e8:	e73e      	b.n	8008068 <_dtoa_r+0x4e0>
 80081ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008458 <_dtoa_r+0x8d0>)
 80081ec:	f7f8 fa0c 	bl	8000608 <__aeabi_dmul>
 80081f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f4:	e7bc      	b.n	8008170 <_dtoa_r+0x5e8>
 80081f6:	d10c      	bne.n	8008212 <_dtoa_r+0x68a>
 80081f8:	4b98      	ldr	r3, [pc, #608]	@ (800845c <_dtoa_r+0x8d4>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008200:	f7f8 fa02 	bl	8000608 <__aeabi_dmul>
 8008204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008208:	f7f8 fc84 	bl	8000b14 <__aeabi_dcmpge>
 800820c:	2800      	cmp	r0, #0
 800820e:	f000 8157 	beq.w	80084c0 <_dtoa_r+0x938>
 8008212:	2400      	movs	r4, #0
 8008214:	4625      	mov	r5, r4
 8008216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008218:	43db      	mvns	r3, r3
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	4656      	mov	r6, sl
 800821e:	2700      	movs	r7, #0
 8008220:	4621      	mov	r1, r4
 8008222:	4658      	mov	r0, fp
 8008224:	f000 fbb4 	bl	8008990 <_Bfree>
 8008228:	2d00      	cmp	r5, #0
 800822a:	d0dc      	beq.n	80081e6 <_dtoa_r+0x65e>
 800822c:	b12f      	cbz	r7, 800823a <_dtoa_r+0x6b2>
 800822e:	42af      	cmp	r7, r5
 8008230:	d003      	beq.n	800823a <_dtoa_r+0x6b2>
 8008232:	4639      	mov	r1, r7
 8008234:	4658      	mov	r0, fp
 8008236:	f000 fbab 	bl	8008990 <_Bfree>
 800823a:	4629      	mov	r1, r5
 800823c:	4658      	mov	r0, fp
 800823e:	f000 fba7 	bl	8008990 <_Bfree>
 8008242:	e7d0      	b.n	80081e6 <_dtoa_r+0x65e>
 8008244:	9704      	str	r7, [sp, #16]
 8008246:	4633      	mov	r3, r6
 8008248:	461e      	mov	r6, r3
 800824a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800824e:	2a39      	cmp	r2, #57	@ 0x39
 8008250:	d107      	bne.n	8008262 <_dtoa_r+0x6da>
 8008252:	459a      	cmp	sl, r3
 8008254:	d1f8      	bne.n	8008248 <_dtoa_r+0x6c0>
 8008256:	9a04      	ldr	r2, [sp, #16]
 8008258:	3201      	adds	r2, #1
 800825a:	9204      	str	r2, [sp, #16]
 800825c:	2230      	movs	r2, #48	@ 0x30
 800825e:	f88a 2000 	strb.w	r2, [sl]
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	3201      	adds	r2, #1
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	e7bd      	b.n	80081e6 <_dtoa_r+0x65e>
 800826a:	4b7b      	ldr	r3, [pc, #492]	@ (8008458 <_dtoa_r+0x8d0>)
 800826c:	2200      	movs	r2, #0
 800826e:	f7f8 f9cb 	bl	8000608 <__aeabi_dmul>
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	460d      	mov	r5, r1
 800827a:	f7f8 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800827e:	2800      	cmp	r0, #0
 8008280:	f43f aebb 	beq.w	8007ffa <_dtoa_r+0x472>
 8008284:	e6f0      	b.n	8008068 <_dtoa_r+0x4e0>
 8008286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008288:	2a00      	cmp	r2, #0
 800828a:	f000 80db 	beq.w	8008444 <_dtoa_r+0x8bc>
 800828e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008290:	2a01      	cmp	r2, #1
 8008292:	f300 80bf 	bgt.w	8008414 <_dtoa_r+0x88c>
 8008296:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008298:	2a00      	cmp	r2, #0
 800829a:	f000 80b7 	beq.w	800840c <_dtoa_r+0x884>
 800829e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082a4:	4646      	mov	r6, r8
 80082a6:	9a08      	ldr	r2, [sp, #32]
 80082a8:	2101      	movs	r1, #1
 80082aa:	441a      	add	r2, r3
 80082ac:	4658      	mov	r0, fp
 80082ae:	4498      	add	r8, r3
 80082b0:	9208      	str	r2, [sp, #32]
 80082b2:	f000 fc21 	bl	8008af8 <__i2b>
 80082b6:	4605      	mov	r5, r0
 80082b8:	b15e      	cbz	r6, 80082d2 <_dtoa_r+0x74a>
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dd08      	ble.n	80082d2 <_dtoa_r+0x74a>
 80082c0:	42b3      	cmp	r3, r6
 80082c2:	9a08      	ldr	r2, [sp, #32]
 80082c4:	bfa8      	it	ge
 80082c6:	4633      	movge	r3, r6
 80082c8:	eba8 0803 	sub.w	r8, r8, r3
 80082cc:	1af6      	subs	r6, r6, r3
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	9308      	str	r3, [sp, #32]
 80082d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082d4:	b1f3      	cbz	r3, 8008314 <_dtoa_r+0x78c>
 80082d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 80b7 	beq.w	800844c <_dtoa_r+0x8c4>
 80082de:	b18c      	cbz	r4, 8008304 <_dtoa_r+0x77c>
 80082e0:	4629      	mov	r1, r5
 80082e2:	4622      	mov	r2, r4
 80082e4:	4658      	mov	r0, fp
 80082e6:	f000 fcc7 	bl	8008c78 <__pow5mult>
 80082ea:	464a      	mov	r2, r9
 80082ec:	4601      	mov	r1, r0
 80082ee:	4605      	mov	r5, r0
 80082f0:	4658      	mov	r0, fp
 80082f2:	f000 fc17 	bl	8008b24 <__multiply>
 80082f6:	4649      	mov	r1, r9
 80082f8:	9004      	str	r0, [sp, #16]
 80082fa:	4658      	mov	r0, fp
 80082fc:	f000 fb48 	bl	8008990 <_Bfree>
 8008300:	9b04      	ldr	r3, [sp, #16]
 8008302:	4699      	mov	r9, r3
 8008304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008306:	1b1a      	subs	r2, r3, r4
 8008308:	d004      	beq.n	8008314 <_dtoa_r+0x78c>
 800830a:	4649      	mov	r1, r9
 800830c:	4658      	mov	r0, fp
 800830e:	f000 fcb3 	bl	8008c78 <__pow5mult>
 8008312:	4681      	mov	r9, r0
 8008314:	2101      	movs	r1, #1
 8008316:	4658      	mov	r0, fp
 8008318:	f000 fbee 	bl	8008af8 <__i2b>
 800831c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800831e:	4604      	mov	r4, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 81cf 	beq.w	80086c4 <_dtoa_r+0xb3c>
 8008326:	461a      	mov	r2, r3
 8008328:	4601      	mov	r1, r0
 800832a:	4658      	mov	r0, fp
 800832c:	f000 fca4 	bl	8008c78 <__pow5mult>
 8008330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008332:	2b01      	cmp	r3, #1
 8008334:	4604      	mov	r4, r0
 8008336:	f300 8095 	bgt.w	8008464 <_dtoa_r+0x8dc>
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 8087 	bne.w	8008450 <_dtoa_r+0x8c8>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008348:	2b00      	cmp	r3, #0
 800834a:	f040 8089 	bne.w	8008460 <_dtoa_r+0x8d8>
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008354:	0d1b      	lsrs	r3, r3, #20
 8008356:	051b      	lsls	r3, r3, #20
 8008358:	b12b      	cbz	r3, 8008366 <_dtoa_r+0x7de>
 800835a:	9b08      	ldr	r3, [sp, #32]
 800835c:	3301      	adds	r3, #1
 800835e:	9308      	str	r3, [sp, #32]
 8008360:	f108 0801 	add.w	r8, r8, #1
 8008364:	2301      	movs	r3, #1
 8008366:	930a      	str	r3, [sp, #40]	@ 0x28
 8008368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 81b0 	beq.w	80086d0 <_dtoa_r+0xb48>
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008376:	6918      	ldr	r0, [r3, #16]
 8008378:	f000 fb72 	bl	8008a60 <__hi0bits>
 800837c:	f1c0 0020 	rsb	r0, r0, #32
 8008380:	9b08      	ldr	r3, [sp, #32]
 8008382:	4418      	add	r0, r3
 8008384:	f010 001f 	ands.w	r0, r0, #31
 8008388:	d077      	beq.n	800847a <_dtoa_r+0x8f2>
 800838a:	f1c0 0320 	rsb	r3, r0, #32
 800838e:	2b04      	cmp	r3, #4
 8008390:	dd6b      	ble.n	800846a <_dtoa_r+0x8e2>
 8008392:	9b08      	ldr	r3, [sp, #32]
 8008394:	f1c0 001c 	rsb	r0, r0, #28
 8008398:	4403      	add	r3, r0
 800839a:	4480      	add	r8, r0
 800839c:	4406      	add	r6, r0
 800839e:	9308      	str	r3, [sp, #32]
 80083a0:	f1b8 0f00 	cmp.w	r8, #0
 80083a4:	dd05      	ble.n	80083b2 <_dtoa_r+0x82a>
 80083a6:	4649      	mov	r1, r9
 80083a8:	4642      	mov	r2, r8
 80083aa:	4658      	mov	r0, fp
 80083ac:	f000 fcbe 	bl	8008d2c <__lshift>
 80083b0:	4681      	mov	r9, r0
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd05      	ble.n	80083c4 <_dtoa_r+0x83c>
 80083b8:	4621      	mov	r1, r4
 80083ba:	461a      	mov	r2, r3
 80083bc:	4658      	mov	r0, fp
 80083be:	f000 fcb5 	bl	8008d2c <__lshift>
 80083c2:	4604      	mov	r4, r0
 80083c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d059      	beq.n	800847e <_dtoa_r+0x8f6>
 80083ca:	4621      	mov	r1, r4
 80083cc:	4648      	mov	r0, r9
 80083ce:	f000 fd19 	bl	8008e04 <__mcmp>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	da53      	bge.n	800847e <_dtoa_r+0x8f6>
 80083d6:	1e7b      	subs	r3, r7, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	4649      	mov	r1, r9
 80083dc:	2300      	movs	r3, #0
 80083de:	220a      	movs	r2, #10
 80083e0:	4658      	mov	r0, fp
 80083e2:	f000 faf7 	bl	80089d4 <__multadd>
 80083e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083e8:	4681      	mov	r9, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8172 	beq.w	80086d4 <_dtoa_r+0xb4c>
 80083f0:	2300      	movs	r3, #0
 80083f2:	4629      	mov	r1, r5
 80083f4:	220a      	movs	r2, #10
 80083f6:	4658      	mov	r0, fp
 80083f8:	f000 faec 	bl	80089d4 <__multadd>
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	4605      	mov	r5, r0
 8008402:	dc67      	bgt.n	80084d4 <_dtoa_r+0x94c>
 8008404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008406:	2b02      	cmp	r3, #2
 8008408:	dc41      	bgt.n	800848e <_dtoa_r+0x906>
 800840a:	e063      	b.n	80084d4 <_dtoa_r+0x94c>
 800840c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800840e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008412:	e746      	b.n	80082a2 <_dtoa_r+0x71a>
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	1e5c      	subs	r4, r3, #1
 8008418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800841a:	42a3      	cmp	r3, r4
 800841c:	bfbf      	itttt	lt
 800841e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008420:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008422:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008424:	1ae3      	sublt	r3, r4, r3
 8008426:	bfb4      	ite	lt
 8008428:	18d2      	addlt	r2, r2, r3
 800842a:	1b1c      	subge	r4, r3, r4
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	bfbc      	itt	lt
 8008430:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008432:	2400      	movlt	r4, #0
 8008434:	2b00      	cmp	r3, #0
 8008436:	bfb5      	itete	lt
 8008438:	eba8 0603 	sublt.w	r6, r8, r3
 800843c:	9b07      	ldrge	r3, [sp, #28]
 800843e:	2300      	movlt	r3, #0
 8008440:	4646      	movge	r6, r8
 8008442:	e730      	b.n	80082a6 <_dtoa_r+0x71e>
 8008444:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008446:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008448:	4646      	mov	r6, r8
 800844a:	e735      	b.n	80082b8 <_dtoa_r+0x730>
 800844c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800844e:	e75c      	b.n	800830a <_dtoa_r+0x782>
 8008450:	2300      	movs	r3, #0
 8008452:	e788      	b.n	8008366 <_dtoa_r+0x7de>
 8008454:	3fe00000 	.word	0x3fe00000
 8008458:	40240000 	.word	0x40240000
 800845c:	40140000 	.word	0x40140000
 8008460:	9b02      	ldr	r3, [sp, #8]
 8008462:	e780      	b.n	8008366 <_dtoa_r+0x7de>
 8008464:	2300      	movs	r3, #0
 8008466:	930a      	str	r3, [sp, #40]	@ 0x28
 8008468:	e782      	b.n	8008370 <_dtoa_r+0x7e8>
 800846a:	d099      	beq.n	80083a0 <_dtoa_r+0x818>
 800846c:	9a08      	ldr	r2, [sp, #32]
 800846e:	331c      	adds	r3, #28
 8008470:	441a      	add	r2, r3
 8008472:	4498      	add	r8, r3
 8008474:	441e      	add	r6, r3
 8008476:	9208      	str	r2, [sp, #32]
 8008478:	e792      	b.n	80083a0 <_dtoa_r+0x818>
 800847a:	4603      	mov	r3, r0
 800847c:	e7f6      	b.n	800846c <_dtoa_r+0x8e4>
 800847e:	9b07      	ldr	r3, [sp, #28]
 8008480:	9704      	str	r7, [sp, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	dc20      	bgt.n	80084c8 <_dtoa_r+0x940>
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800848a:	2b02      	cmp	r3, #2
 800848c:	dd1e      	ble.n	80084cc <_dtoa_r+0x944>
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f47f aec0 	bne.w	8008216 <_dtoa_r+0x68e>
 8008496:	4621      	mov	r1, r4
 8008498:	2205      	movs	r2, #5
 800849a:	4658      	mov	r0, fp
 800849c:	f000 fa9a 	bl	80089d4 <__multadd>
 80084a0:	4601      	mov	r1, r0
 80084a2:	4604      	mov	r4, r0
 80084a4:	4648      	mov	r0, r9
 80084a6:	f000 fcad 	bl	8008e04 <__mcmp>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f77f aeb3 	ble.w	8008216 <_dtoa_r+0x68e>
 80084b0:	4656      	mov	r6, sl
 80084b2:	2331      	movs	r3, #49	@ 0x31
 80084b4:	f806 3b01 	strb.w	r3, [r6], #1
 80084b8:	9b04      	ldr	r3, [sp, #16]
 80084ba:	3301      	adds	r3, #1
 80084bc:	9304      	str	r3, [sp, #16]
 80084be:	e6ae      	b.n	800821e <_dtoa_r+0x696>
 80084c0:	9c07      	ldr	r4, [sp, #28]
 80084c2:	9704      	str	r7, [sp, #16]
 80084c4:	4625      	mov	r5, r4
 80084c6:	e7f3      	b.n	80084b0 <_dtoa_r+0x928>
 80084c8:	9b07      	ldr	r3, [sp, #28]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 8104 	beq.w	80086dc <_dtoa_r+0xb54>
 80084d4:	2e00      	cmp	r6, #0
 80084d6:	dd05      	ble.n	80084e4 <_dtoa_r+0x95c>
 80084d8:	4629      	mov	r1, r5
 80084da:	4632      	mov	r2, r6
 80084dc:	4658      	mov	r0, fp
 80084de:	f000 fc25 	bl	8008d2c <__lshift>
 80084e2:	4605      	mov	r5, r0
 80084e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d05a      	beq.n	80085a0 <_dtoa_r+0xa18>
 80084ea:	6869      	ldr	r1, [r5, #4]
 80084ec:	4658      	mov	r0, fp
 80084ee:	f000 fa0f 	bl	8008910 <_Balloc>
 80084f2:	4606      	mov	r6, r0
 80084f4:	b928      	cbnz	r0, 8008502 <_dtoa_r+0x97a>
 80084f6:	4b84      	ldr	r3, [pc, #528]	@ (8008708 <_dtoa_r+0xb80>)
 80084f8:	4602      	mov	r2, r0
 80084fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80084fe:	f7ff bb5a 	b.w	8007bb6 <_dtoa_r+0x2e>
 8008502:	692a      	ldr	r2, [r5, #16]
 8008504:	3202      	adds	r2, #2
 8008506:	0092      	lsls	r2, r2, #2
 8008508:	f105 010c 	add.w	r1, r5, #12
 800850c:	300c      	adds	r0, #12
 800850e:	f7ff faa4 	bl	8007a5a <memcpy>
 8008512:	2201      	movs	r2, #1
 8008514:	4631      	mov	r1, r6
 8008516:	4658      	mov	r0, fp
 8008518:	f000 fc08 	bl	8008d2c <__lshift>
 800851c:	f10a 0301 	add.w	r3, sl, #1
 8008520:	9307      	str	r3, [sp, #28]
 8008522:	9b00      	ldr	r3, [sp, #0]
 8008524:	4453      	add	r3, sl
 8008526:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008528:	9b02      	ldr	r3, [sp, #8]
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	462f      	mov	r7, r5
 8008530:	930a      	str	r3, [sp, #40]	@ 0x28
 8008532:	4605      	mov	r5, r0
 8008534:	9b07      	ldr	r3, [sp, #28]
 8008536:	4621      	mov	r1, r4
 8008538:	3b01      	subs	r3, #1
 800853a:	4648      	mov	r0, r9
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	f7ff fa9a 	bl	8007a76 <quorem>
 8008542:	4639      	mov	r1, r7
 8008544:	9002      	str	r0, [sp, #8]
 8008546:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800854a:	4648      	mov	r0, r9
 800854c:	f000 fc5a 	bl	8008e04 <__mcmp>
 8008550:	462a      	mov	r2, r5
 8008552:	9008      	str	r0, [sp, #32]
 8008554:	4621      	mov	r1, r4
 8008556:	4658      	mov	r0, fp
 8008558:	f000 fc70 	bl	8008e3c <__mdiff>
 800855c:	68c2      	ldr	r2, [r0, #12]
 800855e:	4606      	mov	r6, r0
 8008560:	bb02      	cbnz	r2, 80085a4 <_dtoa_r+0xa1c>
 8008562:	4601      	mov	r1, r0
 8008564:	4648      	mov	r0, r9
 8008566:	f000 fc4d 	bl	8008e04 <__mcmp>
 800856a:	4602      	mov	r2, r0
 800856c:	4631      	mov	r1, r6
 800856e:	4658      	mov	r0, fp
 8008570:	920e      	str	r2, [sp, #56]	@ 0x38
 8008572:	f000 fa0d 	bl	8008990 <_Bfree>
 8008576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008578:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800857a:	9e07      	ldr	r6, [sp, #28]
 800857c:	ea43 0102 	orr.w	r1, r3, r2
 8008580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008582:	4319      	orrs	r1, r3
 8008584:	d110      	bne.n	80085a8 <_dtoa_r+0xa20>
 8008586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800858a:	d029      	beq.n	80085e0 <_dtoa_r+0xa58>
 800858c:	9b08      	ldr	r3, [sp, #32]
 800858e:	2b00      	cmp	r3, #0
 8008590:	dd02      	ble.n	8008598 <_dtoa_r+0xa10>
 8008592:	9b02      	ldr	r3, [sp, #8]
 8008594:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008598:	9b00      	ldr	r3, [sp, #0]
 800859a:	f883 8000 	strb.w	r8, [r3]
 800859e:	e63f      	b.n	8008220 <_dtoa_r+0x698>
 80085a0:	4628      	mov	r0, r5
 80085a2:	e7bb      	b.n	800851c <_dtoa_r+0x994>
 80085a4:	2201      	movs	r2, #1
 80085a6:	e7e1      	b.n	800856c <_dtoa_r+0x9e4>
 80085a8:	9b08      	ldr	r3, [sp, #32]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	db04      	blt.n	80085b8 <_dtoa_r+0xa30>
 80085ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085b0:	430b      	orrs	r3, r1
 80085b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085b4:	430b      	orrs	r3, r1
 80085b6:	d120      	bne.n	80085fa <_dtoa_r+0xa72>
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	dded      	ble.n	8008598 <_dtoa_r+0xa10>
 80085bc:	4649      	mov	r1, r9
 80085be:	2201      	movs	r2, #1
 80085c0:	4658      	mov	r0, fp
 80085c2:	f000 fbb3 	bl	8008d2c <__lshift>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4681      	mov	r9, r0
 80085ca:	f000 fc1b 	bl	8008e04 <__mcmp>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	dc03      	bgt.n	80085da <_dtoa_r+0xa52>
 80085d2:	d1e1      	bne.n	8008598 <_dtoa_r+0xa10>
 80085d4:	f018 0f01 	tst.w	r8, #1
 80085d8:	d0de      	beq.n	8008598 <_dtoa_r+0xa10>
 80085da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085de:	d1d8      	bne.n	8008592 <_dtoa_r+0xa0a>
 80085e0:	9a00      	ldr	r2, [sp, #0]
 80085e2:	2339      	movs	r3, #57	@ 0x39
 80085e4:	7013      	strb	r3, [r2, #0]
 80085e6:	4633      	mov	r3, r6
 80085e8:	461e      	mov	r6, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80085f0:	2a39      	cmp	r2, #57	@ 0x39
 80085f2:	d052      	beq.n	800869a <_dtoa_r+0xb12>
 80085f4:	3201      	adds	r2, #1
 80085f6:	701a      	strb	r2, [r3, #0]
 80085f8:	e612      	b.n	8008220 <_dtoa_r+0x698>
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	dd07      	ble.n	800860e <_dtoa_r+0xa86>
 80085fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008602:	d0ed      	beq.n	80085e0 <_dtoa_r+0xa58>
 8008604:	9a00      	ldr	r2, [sp, #0]
 8008606:	f108 0301 	add.w	r3, r8, #1
 800860a:	7013      	strb	r3, [r2, #0]
 800860c:	e608      	b.n	8008220 <_dtoa_r+0x698>
 800860e:	9b07      	ldr	r3, [sp, #28]
 8008610:	9a07      	ldr	r2, [sp, #28]
 8008612:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008618:	4293      	cmp	r3, r2
 800861a:	d028      	beq.n	800866e <_dtoa_r+0xae6>
 800861c:	4649      	mov	r1, r9
 800861e:	2300      	movs	r3, #0
 8008620:	220a      	movs	r2, #10
 8008622:	4658      	mov	r0, fp
 8008624:	f000 f9d6 	bl	80089d4 <__multadd>
 8008628:	42af      	cmp	r7, r5
 800862a:	4681      	mov	r9, r0
 800862c:	f04f 0300 	mov.w	r3, #0
 8008630:	f04f 020a 	mov.w	r2, #10
 8008634:	4639      	mov	r1, r7
 8008636:	4658      	mov	r0, fp
 8008638:	d107      	bne.n	800864a <_dtoa_r+0xac2>
 800863a:	f000 f9cb 	bl	80089d4 <__multadd>
 800863e:	4607      	mov	r7, r0
 8008640:	4605      	mov	r5, r0
 8008642:	9b07      	ldr	r3, [sp, #28]
 8008644:	3301      	adds	r3, #1
 8008646:	9307      	str	r3, [sp, #28]
 8008648:	e774      	b.n	8008534 <_dtoa_r+0x9ac>
 800864a:	f000 f9c3 	bl	80089d4 <__multadd>
 800864e:	4629      	mov	r1, r5
 8008650:	4607      	mov	r7, r0
 8008652:	2300      	movs	r3, #0
 8008654:	220a      	movs	r2, #10
 8008656:	4658      	mov	r0, fp
 8008658:	f000 f9bc 	bl	80089d4 <__multadd>
 800865c:	4605      	mov	r5, r0
 800865e:	e7f0      	b.n	8008642 <_dtoa_r+0xaba>
 8008660:	9b00      	ldr	r3, [sp, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	bfcc      	ite	gt
 8008666:	461e      	movgt	r6, r3
 8008668:	2601      	movle	r6, #1
 800866a:	4456      	add	r6, sl
 800866c:	2700      	movs	r7, #0
 800866e:	4649      	mov	r1, r9
 8008670:	2201      	movs	r2, #1
 8008672:	4658      	mov	r0, fp
 8008674:	f000 fb5a 	bl	8008d2c <__lshift>
 8008678:	4621      	mov	r1, r4
 800867a:	4681      	mov	r9, r0
 800867c:	f000 fbc2 	bl	8008e04 <__mcmp>
 8008680:	2800      	cmp	r0, #0
 8008682:	dcb0      	bgt.n	80085e6 <_dtoa_r+0xa5e>
 8008684:	d102      	bne.n	800868c <_dtoa_r+0xb04>
 8008686:	f018 0f01 	tst.w	r8, #1
 800868a:	d1ac      	bne.n	80085e6 <_dtoa_r+0xa5e>
 800868c:	4633      	mov	r3, r6
 800868e:	461e      	mov	r6, r3
 8008690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008694:	2a30      	cmp	r2, #48	@ 0x30
 8008696:	d0fa      	beq.n	800868e <_dtoa_r+0xb06>
 8008698:	e5c2      	b.n	8008220 <_dtoa_r+0x698>
 800869a:	459a      	cmp	sl, r3
 800869c:	d1a4      	bne.n	80085e8 <_dtoa_r+0xa60>
 800869e:	9b04      	ldr	r3, [sp, #16]
 80086a0:	3301      	adds	r3, #1
 80086a2:	9304      	str	r3, [sp, #16]
 80086a4:	2331      	movs	r3, #49	@ 0x31
 80086a6:	f88a 3000 	strb.w	r3, [sl]
 80086aa:	e5b9      	b.n	8008220 <_dtoa_r+0x698>
 80086ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800870c <_dtoa_r+0xb84>
 80086b2:	b11b      	cbz	r3, 80086bc <_dtoa_r+0xb34>
 80086b4:	f10a 0308 	add.w	r3, sl, #8
 80086b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	4650      	mov	r0, sl
 80086be:	b019      	add	sp, #100	@ 0x64
 80086c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	f77f ae37 	ble.w	800833a <_dtoa_r+0x7b2>
 80086cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d0:	2001      	movs	r0, #1
 80086d2:	e655      	b.n	8008380 <_dtoa_r+0x7f8>
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f77f aed6 	ble.w	8008488 <_dtoa_r+0x900>
 80086dc:	4656      	mov	r6, sl
 80086de:	4621      	mov	r1, r4
 80086e0:	4648      	mov	r0, r9
 80086e2:	f7ff f9c8 	bl	8007a76 <quorem>
 80086e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086ea:	f806 8b01 	strb.w	r8, [r6], #1
 80086ee:	9b00      	ldr	r3, [sp, #0]
 80086f0:	eba6 020a 	sub.w	r2, r6, sl
 80086f4:	4293      	cmp	r3, r2
 80086f6:	ddb3      	ble.n	8008660 <_dtoa_r+0xad8>
 80086f8:	4649      	mov	r1, r9
 80086fa:	2300      	movs	r3, #0
 80086fc:	220a      	movs	r2, #10
 80086fe:	4658      	mov	r0, fp
 8008700:	f000 f968 	bl	80089d4 <__multadd>
 8008704:	4681      	mov	r9, r0
 8008706:	e7ea      	b.n	80086de <_dtoa_r+0xb56>
 8008708:	0800a1ec 	.word	0x0800a1ec
 800870c:	0800a170 	.word	0x0800a170

08008710 <_free_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4605      	mov	r5, r0
 8008714:	2900      	cmp	r1, #0
 8008716:	d041      	beq.n	800879c <_free_r+0x8c>
 8008718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871c:	1f0c      	subs	r4, r1, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfb8      	it	lt
 8008722:	18e4      	addlt	r4, r4, r3
 8008724:	f000 f8e8 	bl	80088f8 <__malloc_lock>
 8008728:	4a1d      	ldr	r2, [pc, #116]	@ (80087a0 <_free_r+0x90>)
 800872a:	6813      	ldr	r3, [r2, #0]
 800872c:	b933      	cbnz	r3, 800873c <_free_r+0x2c>
 800872e:	6063      	str	r3, [r4, #4]
 8008730:	6014      	str	r4, [r2, #0]
 8008732:	4628      	mov	r0, r5
 8008734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008738:	f000 b8e4 	b.w	8008904 <__malloc_unlock>
 800873c:	42a3      	cmp	r3, r4
 800873e:	d908      	bls.n	8008752 <_free_r+0x42>
 8008740:	6820      	ldr	r0, [r4, #0]
 8008742:	1821      	adds	r1, r4, r0
 8008744:	428b      	cmp	r3, r1
 8008746:	bf01      	itttt	eq
 8008748:	6819      	ldreq	r1, [r3, #0]
 800874a:	685b      	ldreq	r3, [r3, #4]
 800874c:	1809      	addeq	r1, r1, r0
 800874e:	6021      	streq	r1, [r4, #0]
 8008750:	e7ed      	b.n	800872e <_free_r+0x1e>
 8008752:	461a      	mov	r2, r3
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	b10b      	cbz	r3, 800875c <_free_r+0x4c>
 8008758:	42a3      	cmp	r3, r4
 800875a:	d9fa      	bls.n	8008752 <_free_r+0x42>
 800875c:	6811      	ldr	r1, [r2, #0]
 800875e:	1850      	adds	r0, r2, r1
 8008760:	42a0      	cmp	r0, r4
 8008762:	d10b      	bne.n	800877c <_free_r+0x6c>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	4401      	add	r1, r0
 8008768:	1850      	adds	r0, r2, r1
 800876a:	4283      	cmp	r3, r0
 800876c:	6011      	str	r1, [r2, #0]
 800876e:	d1e0      	bne.n	8008732 <_free_r+0x22>
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	6053      	str	r3, [r2, #4]
 8008776:	4408      	add	r0, r1
 8008778:	6010      	str	r0, [r2, #0]
 800877a:	e7da      	b.n	8008732 <_free_r+0x22>
 800877c:	d902      	bls.n	8008784 <_free_r+0x74>
 800877e:	230c      	movs	r3, #12
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	e7d6      	b.n	8008732 <_free_r+0x22>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	1821      	adds	r1, r4, r0
 8008788:	428b      	cmp	r3, r1
 800878a:	bf04      	itt	eq
 800878c:	6819      	ldreq	r1, [r3, #0]
 800878e:	685b      	ldreq	r3, [r3, #4]
 8008790:	6063      	str	r3, [r4, #4]
 8008792:	bf04      	itt	eq
 8008794:	1809      	addeq	r1, r1, r0
 8008796:	6021      	streq	r1, [r4, #0]
 8008798:	6054      	str	r4, [r2, #4]
 800879a:	e7ca      	b.n	8008732 <_free_r+0x22>
 800879c:	bd38      	pop	{r3, r4, r5, pc}
 800879e:	bf00      	nop
 80087a0:	20000940 	.word	0x20000940

080087a4 <malloc>:
 80087a4:	4b02      	ldr	r3, [pc, #8]	@ (80087b0 <malloc+0xc>)
 80087a6:	4601      	mov	r1, r0
 80087a8:	6818      	ldr	r0, [r3, #0]
 80087aa:	f000 b825 	b.w	80087f8 <_malloc_r>
 80087ae:	bf00      	nop
 80087b0:	20000020 	.word	0x20000020

080087b4 <sbrk_aligned>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	4e0f      	ldr	r6, [pc, #60]	@ (80087f4 <sbrk_aligned+0x40>)
 80087b8:	460c      	mov	r4, r1
 80087ba:	6831      	ldr	r1, [r6, #0]
 80087bc:	4605      	mov	r5, r0
 80087be:	b911      	cbnz	r1, 80087c6 <sbrk_aligned+0x12>
 80087c0:	f000 ff60 	bl	8009684 <_sbrk_r>
 80087c4:	6030      	str	r0, [r6, #0]
 80087c6:	4621      	mov	r1, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f000 ff5b 	bl	8009684 <_sbrk_r>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	d103      	bne.n	80087da <sbrk_aligned+0x26>
 80087d2:	f04f 34ff 	mov.w	r4, #4294967295
 80087d6:	4620      	mov	r0, r4
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	1cc4      	adds	r4, r0, #3
 80087dc:	f024 0403 	bic.w	r4, r4, #3
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	d0f8      	beq.n	80087d6 <sbrk_aligned+0x22>
 80087e4:	1a21      	subs	r1, r4, r0
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 ff4c 	bl	8009684 <_sbrk_r>
 80087ec:	3001      	adds	r0, #1
 80087ee:	d1f2      	bne.n	80087d6 <sbrk_aligned+0x22>
 80087f0:	e7ef      	b.n	80087d2 <sbrk_aligned+0x1e>
 80087f2:	bf00      	nop
 80087f4:	2000093c 	.word	0x2000093c

080087f8 <_malloc_r>:
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	1ccd      	adds	r5, r1, #3
 80087fe:	f025 0503 	bic.w	r5, r5, #3
 8008802:	3508      	adds	r5, #8
 8008804:	2d0c      	cmp	r5, #12
 8008806:	bf38      	it	cc
 8008808:	250c      	movcc	r5, #12
 800880a:	2d00      	cmp	r5, #0
 800880c:	4606      	mov	r6, r0
 800880e:	db01      	blt.n	8008814 <_malloc_r+0x1c>
 8008810:	42a9      	cmp	r1, r5
 8008812:	d904      	bls.n	800881e <_malloc_r+0x26>
 8008814:	230c      	movs	r3, #12
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	2000      	movs	r0, #0
 800881a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088f4 <_malloc_r+0xfc>
 8008822:	f000 f869 	bl	80088f8 <__malloc_lock>
 8008826:	f8d8 3000 	ldr.w	r3, [r8]
 800882a:	461c      	mov	r4, r3
 800882c:	bb44      	cbnz	r4, 8008880 <_malloc_r+0x88>
 800882e:	4629      	mov	r1, r5
 8008830:	4630      	mov	r0, r6
 8008832:	f7ff ffbf 	bl	80087b4 <sbrk_aligned>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	4604      	mov	r4, r0
 800883a:	d158      	bne.n	80088ee <_malloc_r+0xf6>
 800883c:	f8d8 4000 	ldr.w	r4, [r8]
 8008840:	4627      	mov	r7, r4
 8008842:	2f00      	cmp	r7, #0
 8008844:	d143      	bne.n	80088ce <_malloc_r+0xd6>
 8008846:	2c00      	cmp	r4, #0
 8008848:	d04b      	beq.n	80088e2 <_malloc_r+0xea>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	4639      	mov	r1, r7
 800884e:	4630      	mov	r0, r6
 8008850:	eb04 0903 	add.w	r9, r4, r3
 8008854:	f000 ff16 	bl	8009684 <_sbrk_r>
 8008858:	4581      	cmp	r9, r0
 800885a:	d142      	bne.n	80088e2 <_malloc_r+0xea>
 800885c:	6821      	ldr	r1, [r4, #0]
 800885e:	1a6d      	subs	r5, r5, r1
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f7ff ffa6 	bl	80087b4 <sbrk_aligned>
 8008868:	3001      	adds	r0, #1
 800886a:	d03a      	beq.n	80088e2 <_malloc_r+0xea>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	442b      	add	r3, r5
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	f8d8 3000 	ldr.w	r3, [r8]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	bb62      	cbnz	r2, 80088d4 <_malloc_r+0xdc>
 800887a:	f8c8 7000 	str.w	r7, [r8]
 800887e:	e00f      	b.n	80088a0 <_malloc_r+0xa8>
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	1b52      	subs	r2, r2, r5
 8008884:	d420      	bmi.n	80088c8 <_malloc_r+0xd0>
 8008886:	2a0b      	cmp	r2, #11
 8008888:	d917      	bls.n	80088ba <_malloc_r+0xc2>
 800888a:	1961      	adds	r1, r4, r5
 800888c:	42a3      	cmp	r3, r4
 800888e:	6025      	str	r5, [r4, #0]
 8008890:	bf18      	it	ne
 8008892:	6059      	strne	r1, [r3, #4]
 8008894:	6863      	ldr	r3, [r4, #4]
 8008896:	bf08      	it	eq
 8008898:	f8c8 1000 	streq.w	r1, [r8]
 800889c:	5162      	str	r2, [r4, r5]
 800889e:	604b      	str	r3, [r1, #4]
 80088a0:	4630      	mov	r0, r6
 80088a2:	f000 f82f 	bl	8008904 <__malloc_unlock>
 80088a6:	f104 000b 	add.w	r0, r4, #11
 80088aa:	1d23      	adds	r3, r4, #4
 80088ac:	f020 0007 	bic.w	r0, r0, #7
 80088b0:	1ac2      	subs	r2, r0, r3
 80088b2:	bf1c      	itt	ne
 80088b4:	1a1b      	subne	r3, r3, r0
 80088b6:	50a3      	strne	r3, [r4, r2]
 80088b8:	e7af      	b.n	800881a <_malloc_r+0x22>
 80088ba:	6862      	ldr	r2, [r4, #4]
 80088bc:	42a3      	cmp	r3, r4
 80088be:	bf0c      	ite	eq
 80088c0:	f8c8 2000 	streq.w	r2, [r8]
 80088c4:	605a      	strne	r2, [r3, #4]
 80088c6:	e7eb      	b.n	80088a0 <_malloc_r+0xa8>
 80088c8:	4623      	mov	r3, r4
 80088ca:	6864      	ldr	r4, [r4, #4]
 80088cc:	e7ae      	b.n	800882c <_malloc_r+0x34>
 80088ce:	463c      	mov	r4, r7
 80088d0:	687f      	ldr	r7, [r7, #4]
 80088d2:	e7b6      	b.n	8008842 <_malloc_r+0x4a>
 80088d4:	461a      	mov	r2, r3
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d1fb      	bne.n	80088d4 <_malloc_r+0xdc>
 80088dc:	2300      	movs	r3, #0
 80088de:	6053      	str	r3, [r2, #4]
 80088e0:	e7de      	b.n	80088a0 <_malloc_r+0xa8>
 80088e2:	230c      	movs	r3, #12
 80088e4:	6033      	str	r3, [r6, #0]
 80088e6:	4630      	mov	r0, r6
 80088e8:	f000 f80c 	bl	8008904 <__malloc_unlock>
 80088ec:	e794      	b.n	8008818 <_malloc_r+0x20>
 80088ee:	6005      	str	r5, [r0, #0]
 80088f0:	e7d6      	b.n	80088a0 <_malloc_r+0xa8>
 80088f2:	bf00      	nop
 80088f4:	20000940 	.word	0x20000940

080088f8 <__malloc_lock>:
 80088f8:	4801      	ldr	r0, [pc, #4]	@ (8008900 <__malloc_lock+0x8>)
 80088fa:	f7ff b8ac 	b.w	8007a56 <__retarget_lock_acquire_recursive>
 80088fe:	bf00      	nop
 8008900:	20000938 	.word	0x20000938

08008904 <__malloc_unlock>:
 8008904:	4801      	ldr	r0, [pc, #4]	@ (800890c <__malloc_unlock+0x8>)
 8008906:	f7ff b8a7 	b.w	8007a58 <__retarget_lock_release_recursive>
 800890a:	bf00      	nop
 800890c:	20000938 	.word	0x20000938

08008910 <_Balloc>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	69c6      	ldr	r6, [r0, #28]
 8008914:	4604      	mov	r4, r0
 8008916:	460d      	mov	r5, r1
 8008918:	b976      	cbnz	r6, 8008938 <_Balloc+0x28>
 800891a:	2010      	movs	r0, #16
 800891c:	f7ff ff42 	bl	80087a4 <malloc>
 8008920:	4602      	mov	r2, r0
 8008922:	61e0      	str	r0, [r4, #28]
 8008924:	b920      	cbnz	r0, 8008930 <_Balloc+0x20>
 8008926:	4b18      	ldr	r3, [pc, #96]	@ (8008988 <_Balloc+0x78>)
 8008928:	4818      	ldr	r0, [pc, #96]	@ (800898c <_Balloc+0x7c>)
 800892a:	216b      	movs	r1, #107	@ 0x6b
 800892c:	f000 feba 	bl	80096a4 <__assert_func>
 8008930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008934:	6006      	str	r6, [r0, #0]
 8008936:	60c6      	str	r6, [r0, #12]
 8008938:	69e6      	ldr	r6, [r4, #28]
 800893a:	68f3      	ldr	r3, [r6, #12]
 800893c:	b183      	cbz	r3, 8008960 <_Balloc+0x50>
 800893e:	69e3      	ldr	r3, [r4, #28]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008946:	b9b8      	cbnz	r0, 8008978 <_Balloc+0x68>
 8008948:	2101      	movs	r1, #1
 800894a:	fa01 f605 	lsl.w	r6, r1, r5
 800894e:	1d72      	adds	r2, r6, #5
 8008950:	0092      	lsls	r2, r2, #2
 8008952:	4620      	mov	r0, r4
 8008954:	f000 fec4 	bl	80096e0 <_calloc_r>
 8008958:	b160      	cbz	r0, 8008974 <_Balloc+0x64>
 800895a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800895e:	e00e      	b.n	800897e <_Balloc+0x6e>
 8008960:	2221      	movs	r2, #33	@ 0x21
 8008962:	2104      	movs	r1, #4
 8008964:	4620      	mov	r0, r4
 8008966:	f000 febb 	bl	80096e0 <_calloc_r>
 800896a:	69e3      	ldr	r3, [r4, #28]
 800896c:	60f0      	str	r0, [r6, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e4      	bne.n	800893e <_Balloc+0x2e>
 8008974:	2000      	movs	r0, #0
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	6802      	ldr	r2, [r0, #0]
 800897a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800897e:	2300      	movs	r3, #0
 8008980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008984:	e7f7      	b.n	8008976 <_Balloc+0x66>
 8008986:	bf00      	nop
 8008988:	0800a17d 	.word	0x0800a17d
 800898c:	0800a1fd 	.word	0x0800a1fd

08008990 <_Bfree>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	69c6      	ldr	r6, [r0, #28]
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	b976      	cbnz	r6, 80089b8 <_Bfree+0x28>
 800899a:	2010      	movs	r0, #16
 800899c:	f7ff ff02 	bl	80087a4 <malloc>
 80089a0:	4602      	mov	r2, r0
 80089a2:	61e8      	str	r0, [r5, #28]
 80089a4:	b920      	cbnz	r0, 80089b0 <_Bfree+0x20>
 80089a6:	4b09      	ldr	r3, [pc, #36]	@ (80089cc <_Bfree+0x3c>)
 80089a8:	4809      	ldr	r0, [pc, #36]	@ (80089d0 <_Bfree+0x40>)
 80089aa:	218f      	movs	r1, #143	@ 0x8f
 80089ac:	f000 fe7a 	bl	80096a4 <__assert_func>
 80089b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089b4:	6006      	str	r6, [r0, #0]
 80089b6:	60c6      	str	r6, [r0, #12]
 80089b8:	b13c      	cbz	r4, 80089ca <_Bfree+0x3a>
 80089ba:	69eb      	ldr	r3, [r5, #28]
 80089bc:	6862      	ldr	r2, [r4, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089c4:	6021      	str	r1, [r4, #0]
 80089c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	0800a17d 	.word	0x0800a17d
 80089d0:	0800a1fd 	.word	0x0800a1fd

080089d4 <__multadd>:
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d8:	690d      	ldr	r5, [r1, #16]
 80089da:	4607      	mov	r7, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	461e      	mov	r6, r3
 80089e0:	f101 0c14 	add.w	ip, r1, #20
 80089e4:	2000      	movs	r0, #0
 80089e6:	f8dc 3000 	ldr.w	r3, [ip]
 80089ea:	b299      	uxth	r1, r3
 80089ec:	fb02 6101 	mla	r1, r2, r1, r6
 80089f0:	0c1e      	lsrs	r6, r3, #16
 80089f2:	0c0b      	lsrs	r3, r1, #16
 80089f4:	fb02 3306 	mla	r3, r2, r6, r3
 80089f8:	b289      	uxth	r1, r1
 80089fa:	3001      	adds	r0, #1
 80089fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a00:	4285      	cmp	r5, r0
 8008a02:	f84c 1b04 	str.w	r1, [ip], #4
 8008a06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a0a:	dcec      	bgt.n	80089e6 <__multadd+0x12>
 8008a0c:	b30e      	cbz	r6, 8008a52 <__multadd+0x7e>
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	dc19      	bgt.n	8008a48 <__multadd+0x74>
 8008a14:	6861      	ldr	r1, [r4, #4]
 8008a16:	4638      	mov	r0, r7
 8008a18:	3101      	adds	r1, #1
 8008a1a:	f7ff ff79 	bl	8008910 <_Balloc>
 8008a1e:	4680      	mov	r8, r0
 8008a20:	b928      	cbnz	r0, 8008a2e <__multadd+0x5a>
 8008a22:	4602      	mov	r2, r0
 8008a24:	4b0c      	ldr	r3, [pc, #48]	@ (8008a58 <__multadd+0x84>)
 8008a26:	480d      	ldr	r0, [pc, #52]	@ (8008a5c <__multadd+0x88>)
 8008a28:	21ba      	movs	r1, #186	@ 0xba
 8008a2a:	f000 fe3b 	bl	80096a4 <__assert_func>
 8008a2e:	6922      	ldr	r2, [r4, #16]
 8008a30:	3202      	adds	r2, #2
 8008a32:	f104 010c 	add.w	r1, r4, #12
 8008a36:	0092      	lsls	r2, r2, #2
 8008a38:	300c      	adds	r0, #12
 8008a3a:	f7ff f80e 	bl	8007a5a <memcpy>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7ff ffa5 	bl	8008990 <_Bfree>
 8008a46:	4644      	mov	r4, r8
 8008a48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	615e      	str	r6, [r3, #20]
 8008a50:	6125      	str	r5, [r4, #16]
 8008a52:	4620      	mov	r0, r4
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	0800a1ec 	.word	0x0800a1ec
 8008a5c:	0800a1fd 	.word	0x0800a1fd

08008a60 <__hi0bits>:
 8008a60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a64:	4603      	mov	r3, r0
 8008a66:	bf36      	itet	cc
 8008a68:	0403      	lslcc	r3, r0, #16
 8008a6a:	2000      	movcs	r0, #0
 8008a6c:	2010      	movcc	r0, #16
 8008a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a72:	bf3c      	itt	cc
 8008a74:	021b      	lslcc	r3, r3, #8
 8008a76:	3008      	addcc	r0, #8
 8008a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a7c:	bf3c      	itt	cc
 8008a7e:	011b      	lslcc	r3, r3, #4
 8008a80:	3004      	addcc	r0, #4
 8008a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a86:	bf3c      	itt	cc
 8008a88:	009b      	lslcc	r3, r3, #2
 8008a8a:	3002      	addcc	r0, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	db05      	blt.n	8008a9c <__hi0bits+0x3c>
 8008a90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a94:	f100 0001 	add.w	r0, r0, #1
 8008a98:	bf08      	it	eq
 8008a9a:	2020      	moveq	r0, #32
 8008a9c:	4770      	bx	lr

08008a9e <__lo0bits>:
 8008a9e:	6803      	ldr	r3, [r0, #0]
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	f013 0007 	ands.w	r0, r3, #7
 8008aa6:	d00b      	beq.n	8008ac0 <__lo0bits+0x22>
 8008aa8:	07d9      	lsls	r1, r3, #31
 8008aaa:	d421      	bmi.n	8008af0 <__lo0bits+0x52>
 8008aac:	0798      	lsls	r0, r3, #30
 8008aae:	bf49      	itett	mi
 8008ab0:	085b      	lsrmi	r3, r3, #1
 8008ab2:	089b      	lsrpl	r3, r3, #2
 8008ab4:	2001      	movmi	r0, #1
 8008ab6:	6013      	strmi	r3, [r2, #0]
 8008ab8:	bf5c      	itt	pl
 8008aba:	6013      	strpl	r3, [r2, #0]
 8008abc:	2002      	movpl	r0, #2
 8008abe:	4770      	bx	lr
 8008ac0:	b299      	uxth	r1, r3
 8008ac2:	b909      	cbnz	r1, 8008ac8 <__lo0bits+0x2a>
 8008ac4:	0c1b      	lsrs	r3, r3, #16
 8008ac6:	2010      	movs	r0, #16
 8008ac8:	b2d9      	uxtb	r1, r3
 8008aca:	b909      	cbnz	r1, 8008ad0 <__lo0bits+0x32>
 8008acc:	3008      	adds	r0, #8
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	0719      	lsls	r1, r3, #28
 8008ad2:	bf04      	itt	eq
 8008ad4:	091b      	lsreq	r3, r3, #4
 8008ad6:	3004      	addeq	r0, #4
 8008ad8:	0799      	lsls	r1, r3, #30
 8008ada:	bf04      	itt	eq
 8008adc:	089b      	lsreq	r3, r3, #2
 8008ade:	3002      	addeq	r0, #2
 8008ae0:	07d9      	lsls	r1, r3, #31
 8008ae2:	d403      	bmi.n	8008aec <__lo0bits+0x4e>
 8008ae4:	085b      	lsrs	r3, r3, #1
 8008ae6:	f100 0001 	add.w	r0, r0, #1
 8008aea:	d003      	beq.n	8008af4 <__lo0bits+0x56>
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	4770      	bx	lr
 8008af0:	2000      	movs	r0, #0
 8008af2:	4770      	bx	lr
 8008af4:	2020      	movs	r0, #32
 8008af6:	4770      	bx	lr

08008af8 <__i2b>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	460c      	mov	r4, r1
 8008afc:	2101      	movs	r1, #1
 8008afe:	f7ff ff07 	bl	8008910 <_Balloc>
 8008b02:	4602      	mov	r2, r0
 8008b04:	b928      	cbnz	r0, 8008b12 <__i2b+0x1a>
 8008b06:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <__i2b+0x24>)
 8008b08:	4805      	ldr	r0, [pc, #20]	@ (8008b20 <__i2b+0x28>)
 8008b0a:	f240 1145 	movw	r1, #325	@ 0x145
 8008b0e:	f000 fdc9 	bl	80096a4 <__assert_func>
 8008b12:	2301      	movs	r3, #1
 8008b14:	6144      	str	r4, [r0, #20]
 8008b16:	6103      	str	r3, [r0, #16]
 8008b18:	bd10      	pop	{r4, pc}
 8008b1a:	bf00      	nop
 8008b1c:	0800a1ec 	.word	0x0800a1ec
 8008b20:	0800a1fd 	.word	0x0800a1fd

08008b24 <__multiply>:
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	4614      	mov	r4, r2
 8008b2a:	690a      	ldr	r2, [r1, #16]
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	bfa8      	it	ge
 8008b32:	4623      	movge	r3, r4
 8008b34:	460f      	mov	r7, r1
 8008b36:	bfa4      	itt	ge
 8008b38:	460c      	movge	r4, r1
 8008b3a:	461f      	movge	r7, r3
 8008b3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b44:	68a3      	ldr	r3, [r4, #8]
 8008b46:	6861      	ldr	r1, [r4, #4]
 8008b48:	eb0a 0609 	add.w	r6, sl, r9
 8008b4c:	42b3      	cmp	r3, r6
 8008b4e:	b085      	sub	sp, #20
 8008b50:	bfb8      	it	lt
 8008b52:	3101      	addlt	r1, #1
 8008b54:	f7ff fedc 	bl	8008910 <_Balloc>
 8008b58:	b930      	cbnz	r0, 8008b68 <__multiply+0x44>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	4b44      	ldr	r3, [pc, #272]	@ (8008c70 <__multiply+0x14c>)
 8008b5e:	4845      	ldr	r0, [pc, #276]	@ (8008c74 <__multiply+0x150>)
 8008b60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b64:	f000 fd9e 	bl	80096a4 <__assert_func>
 8008b68:	f100 0514 	add.w	r5, r0, #20
 8008b6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b70:	462b      	mov	r3, r5
 8008b72:	2200      	movs	r2, #0
 8008b74:	4543      	cmp	r3, r8
 8008b76:	d321      	bcc.n	8008bbc <__multiply+0x98>
 8008b78:	f107 0114 	add.w	r1, r7, #20
 8008b7c:	f104 0214 	add.w	r2, r4, #20
 8008b80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b88:	9302      	str	r3, [sp, #8]
 8008b8a:	1b13      	subs	r3, r2, r4
 8008b8c:	3b15      	subs	r3, #21
 8008b8e:	f023 0303 	bic.w	r3, r3, #3
 8008b92:	3304      	adds	r3, #4
 8008b94:	f104 0715 	add.w	r7, r4, #21
 8008b98:	42ba      	cmp	r2, r7
 8008b9a:	bf38      	it	cc
 8008b9c:	2304      	movcc	r3, #4
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	9b02      	ldr	r3, [sp, #8]
 8008ba2:	9103      	str	r1, [sp, #12]
 8008ba4:	428b      	cmp	r3, r1
 8008ba6:	d80c      	bhi.n	8008bc2 <__multiply+0x9e>
 8008ba8:	2e00      	cmp	r6, #0
 8008baa:	dd03      	ble.n	8008bb4 <__multiply+0x90>
 8008bac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d05b      	beq.n	8008c6c <__multiply+0x148>
 8008bb4:	6106      	str	r6, [r0, #16]
 8008bb6:	b005      	add	sp, #20
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbc:	f843 2b04 	str.w	r2, [r3], #4
 8008bc0:	e7d8      	b.n	8008b74 <__multiply+0x50>
 8008bc2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bc6:	f1ba 0f00 	cmp.w	sl, #0
 8008bca:	d024      	beq.n	8008c16 <__multiply+0xf2>
 8008bcc:	f104 0e14 	add.w	lr, r4, #20
 8008bd0:	46a9      	mov	r9, r5
 8008bd2:	f04f 0c00 	mov.w	ip, #0
 8008bd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bda:	f8d9 3000 	ldr.w	r3, [r9]
 8008bde:	fa1f fb87 	uxth.w	fp, r7
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008be8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008bec:	f8d9 7000 	ldr.w	r7, [r9]
 8008bf0:	4463      	add	r3, ip
 8008bf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bf6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008bfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c04:	4572      	cmp	r2, lr
 8008c06:	f849 3b04 	str.w	r3, [r9], #4
 8008c0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c0e:	d8e2      	bhi.n	8008bd6 <__multiply+0xb2>
 8008c10:	9b01      	ldr	r3, [sp, #4]
 8008c12:	f845 c003 	str.w	ip, [r5, r3]
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c1c:	3104      	adds	r1, #4
 8008c1e:	f1b9 0f00 	cmp.w	r9, #0
 8008c22:	d021      	beq.n	8008c68 <__multiply+0x144>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	f104 0c14 	add.w	ip, r4, #20
 8008c2a:	46ae      	mov	lr, r5
 8008c2c:	f04f 0a00 	mov.w	sl, #0
 8008c30:	f8bc b000 	ldrh.w	fp, [ip]
 8008c34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c38:	fb09 770b 	mla	r7, r9, fp, r7
 8008c3c:	4457      	add	r7, sl
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c44:	f84e 3b04 	str.w	r3, [lr], #4
 8008c48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c50:	f8be 3000 	ldrh.w	r3, [lr]
 8008c54:	fb09 330a 	mla	r3, r9, sl, r3
 8008c58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c5c:	4562      	cmp	r2, ip
 8008c5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c62:	d8e5      	bhi.n	8008c30 <__multiply+0x10c>
 8008c64:	9f01      	ldr	r7, [sp, #4]
 8008c66:	51eb      	str	r3, [r5, r7]
 8008c68:	3504      	adds	r5, #4
 8008c6a:	e799      	b.n	8008ba0 <__multiply+0x7c>
 8008c6c:	3e01      	subs	r6, #1
 8008c6e:	e79b      	b.n	8008ba8 <__multiply+0x84>
 8008c70:	0800a1ec 	.word	0x0800a1ec
 8008c74:	0800a1fd 	.word	0x0800a1fd

08008c78 <__pow5mult>:
 8008c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	4615      	mov	r5, r2
 8008c7e:	f012 0203 	ands.w	r2, r2, #3
 8008c82:	4607      	mov	r7, r0
 8008c84:	460e      	mov	r6, r1
 8008c86:	d007      	beq.n	8008c98 <__pow5mult+0x20>
 8008c88:	4c25      	ldr	r4, [pc, #148]	@ (8008d20 <__pow5mult+0xa8>)
 8008c8a:	3a01      	subs	r2, #1
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c92:	f7ff fe9f 	bl	80089d4 <__multadd>
 8008c96:	4606      	mov	r6, r0
 8008c98:	10ad      	asrs	r5, r5, #2
 8008c9a:	d03d      	beq.n	8008d18 <__pow5mult+0xa0>
 8008c9c:	69fc      	ldr	r4, [r7, #28]
 8008c9e:	b97c      	cbnz	r4, 8008cc0 <__pow5mult+0x48>
 8008ca0:	2010      	movs	r0, #16
 8008ca2:	f7ff fd7f 	bl	80087a4 <malloc>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	61f8      	str	r0, [r7, #28]
 8008caa:	b928      	cbnz	r0, 8008cb8 <__pow5mult+0x40>
 8008cac:	4b1d      	ldr	r3, [pc, #116]	@ (8008d24 <__pow5mult+0xac>)
 8008cae:	481e      	ldr	r0, [pc, #120]	@ (8008d28 <__pow5mult+0xb0>)
 8008cb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008cb4:	f000 fcf6 	bl	80096a4 <__assert_func>
 8008cb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cbc:	6004      	str	r4, [r0, #0]
 8008cbe:	60c4      	str	r4, [r0, #12]
 8008cc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cc8:	b94c      	cbnz	r4, 8008cde <__pow5mult+0x66>
 8008cca:	f240 2171 	movw	r1, #625	@ 0x271
 8008cce:	4638      	mov	r0, r7
 8008cd0:	f7ff ff12 	bl	8008af8 <__i2b>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cda:	4604      	mov	r4, r0
 8008cdc:	6003      	str	r3, [r0, #0]
 8008cde:	f04f 0900 	mov.w	r9, #0
 8008ce2:	07eb      	lsls	r3, r5, #31
 8008ce4:	d50a      	bpl.n	8008cfc <__pow5mult+0x84>
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4622      	mov	r2, r4
 8008cea:	4638      	mov	r0, r7
 8008cec:	f7ff ff1a 	bl	8008b24 <__multiply>
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	f7ff fe4b 	bl	8008990 <_Bfree>
 8008cfa:	4646      	mov	r6, r8
 8008cfc:	106d      	asrs	r5, r5, #1
 8008cfe:	d00b      	beq.n	8008d18 <__pow5mult+0xa0>
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	b938      	cbnz	r0, 8008d14 <__pow5mult+0x9c>
 8008d04:	4622      	mov	r2, r4
 8008d06:	4621      	mov	r1, r4
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff ff0b 	bl	8008b24 <__multiply>
 8008d0e:	6020      	str	r0, [r4, #0]
 8008d10:	f8c0 9000 	str.w	r9, [r0]
 8008d14:	4604      	mov	r4, r0
 8008d16:	e7e4      	b.n	8008ce2 <__pow5mult+0x6a>
 8008d18:	4630      	mov	r0, r6
 8008d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1e:	bf00      	nop
 8008d20:	0800a258 	.word	0x0800a258
 8008d24:	0800a17d 	.word	0x0800a17d
 8008d28:	0800a1fd 	.word	0x0800a1fd

08008d2c <__lshift>:
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	460c      	mov	r4, r1
 8008d32:	6849      	ldr	r1, [r1, #4]
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d3a:	68a3      	ldr	r3, [r4, #8]
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	4691      	mov	r9, r2
 8008d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d44:	f108 0601 	add.w	r6, r8, #1
 8008d48:	42b3      	cmp	r3, r6
 8008d4a:	db0b      	blt.n	8008d64 <__lshift+0x38>
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f7ff fddf 	bl	8008910 <_Balloc>
 8008d52:	4605      	mov	r5, r0
 8008d54:	b948      	cbnz	r0, 8008d6a <__lshift+0x3e>
 8008d56:	4602      	mov	r2, r0
 8008d58:	4b28      	ldr	r3, [pc, #160]	@ (8008dfc <__lshift+0xd0>)
 8008d5a:	4829      	ldr	r0, [pc, #164]	@ (8008e00 <__lshift+0xd4>)
 8008d5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d60:	f000 fca0 	bl	80096a4 <__assert_func>
 8008d64:	3101      	adds	r1, #1
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	e7ee      	b.n	8008d48 <__lshift+0x1c>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f100 0114 	add.w	r1, r0, #20
 8008d70:	f100 0210 	add.w	r2, r0, #16
 8008d74:	4618      	mov	r0, r3
 8008d76:	4553      	cmp	r3, sl
 8008d78:	db33      	blt.n	8008de2 <__lshift+0xb6>
 8008d7a:	6920      	ldr	r0, [r4, #16]
 8008d7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d80:	f104 0314 	add.w	r3, r4, #20
 8008d84:	f019 091f 	ands.w	r9, r9, #31
 8008d88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d90:	d02b      	beq.n	8008dea <__lshift+0xbe>
 8008d92:	f1c9 0e20 	rsb	lr, r9, #32
 8008d96:	468a      	mov	sl, r1
 8008d98:	2200      	movs	r2, #0
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	fa00 f009 	lsl.w	r0, r0, r9
 8008da0:	4310      	orrs	r0, r2
 8008da2:	f84a 0b04 	str.w	r0, [sl], #4
 8008da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008daa:	459c      	cmp	ip, r3
 8008dac:	fa22 f20e 	lsr.w	r2, r2, lr
 8008db0:	d8f3      	bhi.n	8008d9a <__lshift+0x6e>
 8008db2:	ebac 0304 	sub.w	r3, ip, r4
 8008db6:	3b15      	subs	r3, #21
 8008db8:	f023 0303 	bic.w	r3, r3, #3
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	f104 0015 	add.w	r0, r4, #21
 8008dc2:	4584      	cmp	ip, r0
 8008dc4:	bf38      	it	cc
 8008dc6:	2304      	movcc	r3, #4
 8008dc8:	50ca      	str	r2, [r1, r3]
 8008dca:	b10a      	cbz	r2, 8008dd0 <__lshift+0xa4>
 8008dcc:	f108 0602 	add.w	r6, r8, #2
 8008dd0:	3e01      	subs	r6, #1
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	612e      	str	r6, [r5, #16]
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	f7ff fdda 	bl	8008990 <_Bfree>
 8008ddc:	4628      	mov	r0, r5
 8008dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008de6:	3301      	adds	r3, #1
 8008de8:	e7c5      	b.n	8008d76 <__lshift+0x4a>
 8008dea:	3904      	subs	r1, #4
 8008dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008df4:	459c      	cmp	ip, r3
 8008df6:	d8f9      	bhi.n	8008dec <__lshift+0xc0>
 8008df8:	e7ea      	b.n	8008dd0 <__lshift+0xa4>
 8008dfa:	bf00      	nop
 8008dfc:	0800a1ec 	.word	0x0800a1ec
 8008e00:	0800a1fd 	.word	0x0800a1fd

08008e04 <__mcmp>:
 8008e04:	690a      	ldr	r2, [r1, #16]
 8008e06:	4603      	mov	r3, r0
 8008e08:	6900      	ldr	r0, [r0, #16]
 8008e0a:	1a80      	subs	r0, r0, r2
 8008e0c:	b530      	push	{r4, r5, lr}
 8008e0e:	d10e      	bne.n	8008e2e <__mcmp+0x2a>
 8008e10:	3314      	adds	r3, #20
 8008e12:	3114      	adds	r1, #20
 8008e14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e24:	4295      	cmp	r5, r2
 8008e26:	d003      	beq.n	8008e30 <__mcmp+0x2c>
 8008e28:	d205      	bcs.n	8008e36 <__mcmp+0x32>
 8008e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2e:	bd30      	pop	{r4, r5, pc}
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	d3f3      	bcc.n	8008e1c <__mcmp+0x18>
 8008e34:	e7fb      	b.n	8008e2e <__mcmp+0x2a>
 8008e36:	2001      	movs	r0, #1
 8008e38:	e7f9      	b.n	8008e2e <__mcmp+0x2a>
	...

08008e3c <__mdiff>:
 8008e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	4689      	mov	r9, r1
 8008e42:	4606      	mov	r6, r0
 8008e44:	4611      	mov	r1, r2
 8008e46:	4648      	mov	r0, r9
 8008e48:	4614      	mov	r4, r2
 8008e4a:	f7ff ffdb 	bl	8008e04 <__mcmp>
 8008e4e:	1e05      	subs	r5, r0, #0
 8008e50:	d112      	bne.n	8008e78 <__mdiff+0x3c>
 8008e52:	4629      	mov	r1, r5
 8008e54:	4630      	mov	r0, r6
 8008e56:	f7ff fd5b 	bl	8008910 <_Balloc>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	b928      	cbnz	r0, 8008e6a <__mdiff+0x2e>
 8008e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f5c <__mdiff+0x120>)
 8008e60:	f240 2137 	movw	r1, #567	@ 0x237
 8008e64:	483e      	ldr	r0, [pc, #248]	@ (8008f60 <__mdiff+0x124>)
 8008e66:	f000 fc1d 	bl	80096a4 <__assert_func>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e70:	4610      	mov	r0, r2
 8008e72:	b003      	add	sp, #12
 8008e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e78:	bfbc      	itt	lt
 8008e7a:	464b      	movlt	r3, r9
 8008e7c:	46a1      	movlt	r9, r4
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e84:	bfba      	itte	lt
 8008e86:	461c      	movlt	r4, r3
 8008e88:	2501      	movlt	r5, #1
 8008e8a:	2500      	movge	r5, #0
 8008e8c:	f7ff fd40 	bl	8008910 <_Balloc>
 8008e90:	4602      	mov	r2, r0
 8008e92:	b918      	cbnz	r0, 8008e9c <__mdiff+0x60>
 8008e94:	4b31      	ldr	r3, [pc, #196]	@ (8008f5c <__mdiff+0x120>)
 8008e96:	f240 2145 	movw	r1, #581	@ 0x245
 8008e9a:	e7e3      	b.n	8008e64 <__mdiff+0x28>
 8008e9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ea0:	6926      	ldr	r6, [r4, #16]
 8008ea2:	60c5      	str	r5, [r0, #12]
 8008ea4:	f109 0310 	add.w	r3, r9, #16
 8008ea8:	f109 0514 	add.w	r5, r9, #20
 8008eac:	f104 0e14 	add.w	lr, r4, #20
 8008eb0:	f100 0b14 	add.w	fp, r0, #20
 8008eb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008eb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	46d9      	mov	r9, fp
 8008ec0:	f04f 0c00 	mov.w	ip, #0
 8008ec4:	9b01      	ldr	r3, [sp, #4]
 8008ec6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008eca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	fa1f f38a 	uxth.w	r3, sl
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	b283      	uxth	r3, r0
 8008ed8:	1acb      	subs	r3, r1, r3
 8008eda:	0c00      	lsrs	r0, r0, #16
 8008edc:	4463      	add	r3, ip
 8008ede:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ee2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008eec:	4576      	cmp	r6, lr
 8008eee:	f849 3b04 	str.w	r3, [r9], #4
 8008ef2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ef6:	d8e5      	bhi.n	8008ec4 <__mdiff+0x88>
 8008ef8:	1b33      	subs	r3, r6, r4
 8008efa:	3b15      	subs	r3, #21
 8008efc:	f023 0303 	bic.w	r3, r3, #3
 8008f00:	3415      	adds	r4, #21
 8008f02:	3304      	adds	r3, #4
 8008f04:	42a6      	cmp	r6, r4
 8008f06:	bf38      	it	cc
 8008f08:	2304      	movcc	r3, #4
 8008f0a:	441d      	add	r5, r3
 8008f0c:	445b      	add	r3, fp
 8008f0e:	461e      	mov	r6, r3
 8008f10:	462c      	mov	r4, r5
 8008f12:	4544      	cmp	r4, r8
 8008f14:	d30e      	bcc.n	8008f34 <__mdiff+0xf8>
 8008f16:	f108 0103 	add.w	r1, r8, #3
 8008f1a:	1b49      	subs	r1, r1, r5
 8008f1c:	f021 0103 	bic.w	r1, r1, #3
 8008f20:	3d03      	subs	r5, #3
 8008f22:	45a8      	cmp	r8, r5
 8008f24:	bf38      	it	cc
 8008f26:	2100      	movcc	r1, #0
 8008f28:	440b      	add	r3, r1
 8008f2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f2e:	b191      	cbz	r1, 8008f56 <__mdiff+0x11a>
 8008f30:	6117      	str	r7, [r2, #16]
 8008f32:	e79d      	b.n	8008e70 <__mdiff+0x34>
 8008f34:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f38:	46e6      	mov	lr, ip
 8008f3a:	0c08      	lsrs	r0, r1, #16
 8008f3c:	fa1c fc81 	uxtah	ip, ip, r1
 8008f40:	4471      	add	r1, lr
 8008f42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f46:	b289      	uxth	r1, r1
 8008f48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f4c:	f846 1b04 	str.w	r1, [r6], #4
 8008f50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f54:	e7dd      	b.n	8008f12 <__mdiff+0xd6>
 8008f56:	3f01      	subs	r7, #1
 8008f58:	e7e7      	b.n	8008f2a <__mdiff+0xee>
 8008f5a:	bf00      	nop
 8008f5c:	0800a1ec 	.word	0x0800a1ec
 8008f60:	0800a1fd 	.word	0x0800a1fd

08008f64 <__d2b>:
 8008f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	460f      	mov	r7, r1
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	ec59 8b10 	vmov	r8, r9, d0
 8008f70:	4616      	mov	r6, r2
 8008f72:	f7ff fccd 	bl	8008910 <_Balloc>
 8008f76:	4604      	mov	r4, r0
 8008f78:	b930      	cbnz	r0, 8008f88 <__d2b+0x24>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b23      	ldr	r3, [pc, #140]	@ (800900c <__d2b+0xa8>)
 8008f7e:	4824      	ldr	r0, [pc, #144]	@ (8009010 <__d2b+0xac>)
 8008f80:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f84:	f000 fb8e 	bl	80096a4 <__assert_func>
 8008f88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f90:	b10d      	cbz	r5, 8008f96 <__d2b+0x32>
 8008f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	f1b8 0300 	subs.w	r3, r8, #0
 8008f9c:	d023      	beq.n	8008fe6 <__d2b+0x82>
 8008f9e:	4668      	mov	r0, sp
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	f7ff fd7c 	bl	8008a9e <__lo0bits>
 8008fa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008faa:	b1d0      	cbz	r0, 8008fe2 <__d2b+0x7e>
 8008fac:	f1c0 0320 	rsb	r3, r0, #32
 8008fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb4:	430b      	orrs	r3, r1
 8008fb6:	40c2      	lsrs	r2, r0
 8008fb8:	6163      	str	r3, [r4, #20]
 8008fba:	9201      	str	r2, [sp, #4]
 8008fbc:	9b01      	ldr	r3, [sp, #4]
 8008fbe:	61a3      	str	r3, [r4, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bf0c      	ite	eq
 8008fc4:	2201      	moveq	r2, #1
 8008fc6:	2202      	movne	r2, #2
 8008fc8:	6122      	str	r2, [r4, #16]
 8008fca:	b1a5      	cbz	r5, 8008ff6 <__d2b+0x92>
 8008fcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fd0:	4405      	add	r5, r0
 8008fd2:	603d      	str	r5, [r7, #0]
 8008fd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fd8:	6030      	str	r0, [r6, #0]
 8008fda:	4620      	mov	r0, r4
 8008fdc:	b003      	add	sp, #12
 8008fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fe2:	6161      	str	r1, [r4, #20]
 8008fe4:	e7ea      	b.n	8008fbc <__d2b+0x58>
 8008fe6:	a801      	add	r0, sp, #4
 8008fe8:	f7ff fd59 	bl	8008a9e <__lo0bits>
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	6163      	str	r3, [r4, #20]
 8008ff0:	3020      	adds	r0, #32
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	e7e8      	b.n	8008fc8 <__d2b+0x64>
 8008ff6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ffa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ffe:	6038      	str	r0, [r7, #0]
 8009000:	6918      	ldr	r0, [r3, #16]
 8009002:	f7ff fd2d 	bl	8008a60 <__hi0bits>
 8009006:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800900a:	e7e5      	b.n	8008fd8 <__d2b+0x74>
 800900c:	0800a1ec 	.word	0x0800a1ec
 8009010:	0800a1fd 	.word	0x0800a1fd

08009014 <__ssputs_r>:
 8009014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	688e      	ldr	r6, [r1, #8]
 800901a:	461f      	mov	r7, r3
 800901c:	42be      	cmp	r6, r7
 800901e:	680b      	ldr	r3, [r1, #0]
 8009020:	4682      	mov	sl, r0
 8009022:	460c      	mov	r4, r1
 8009024:	4690      	mov	r8, r2
 8009026:	d82d      	bhi.n	8009084 <__ssputs_r+0x70>
 8009028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800902c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009030:	d026      	beq.n	8009080 <__ssputs_r+0x6c>
 8009032:	6965      	ldr	r5, [r4, #20]
 8009034:	6909      	ldr	r1, [r1, #16]
 8009036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800903a:	eba3 0901 	sub.w	r9, r3, r1
 800903e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009042:	1c7b      	adds	r3, r7, #1
 8009044:	444b      	add	r3, r9
 8009046:	106d      	asrs	r5, r5, #1
 8009048:	429d      	cmp	r5, r3
 800904a:	bf38      	it	cc
 800904c:	461d      	movcc	r5, r3
 800904e:	0553      	lsls	r3, r2, #21
 8009050:	d527      	bpl.n	80090a2 <__ssputs_r+0x8e>
 8009052:	4629      	mov	r1, r5
 8009054:	f7ff fbd0 	bl	80087f8 <_malloc_r>
 8009058:	4606      	mov	r6, r0
 800905a:	b360      	cbz	r0, 80090b6 <__ssputs_r+0xa2>
 800905c:	6921      	ldr	r1, [r4, #16]
 800905e:	464a      	mov	r2, r9
 8009060:	f7fe fcfb 	bl	8007a5a <memcpy>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800906a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	6126      	str	r6, [r4, #16]
 8009072:	6165      	str	r5, [r4, #20]
 8009074:	444e      	add	r6, r9
 8009076:	eba5 0509 	sub.w	r5, r5, r9
 800907a:	6026      	str	r6, [r4, #0]
 800907c:	60a5      	str	r5, [r4, #8]
 800907e:	463e      	mov	r6, r7
 8009080:	42be      	cmp	r6, r7
 8009082:	d900      	bls.n	8009086 <__ssputs_r+0x72>
 8009084:	463e      	mov	r6, r7
 8009086:	6820      	ldr	r0, [r4, #0]
 8009088:	4632      	mov	r2, r6
 800908a:	4641      	mov	r1, r8
 800908c:	f000 fabe 	bl	800960c <memmove>
 8009090:	68a3      	ldr	r3, [r4, #8]
 8009092:	1b9b      	subs	r3, r3, r6
 8009094:	60a3      	str	r3, [r4, #8]
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	4433      	add	r3, r6
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	2000      	movs	r0, #0
 800909e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a2:	462a      	mov	r2, r5
 80090a4:	f000 fb42 	bl	800972c <_realloc_r>
 80090a8:	4606      	mov	r6, r0
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d1e0      	bne.n	8009070 <__ssputs_r+0x5c>
 80090ae:	6921      	ldr	r1, [r4, #16]
 80090b0:	4650      	mov	r0, sl
 80090b2:	f7ff fb2d 	bl	8008710 <_free_r>
 80090b6:	230c      	movs	r3, #12
 80090b8:	f8ca 3000 	str.w	r3, [sl]
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090c2:	81a3      	strh	r3, [r4, #12]
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295
 80090c8:	e7e9      	b.n	800909e <__ssputs_r+0x8a>
	...

080090cc <_svfiprintf_r>:
 80090cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	4698      	mov	r8, r3
 80090d2:	898b      	ldrh	r3, [r1, #12]
 80090d4:	061b      	lsls	r3, r3, #24
 80090d6:	b09d      	sub	sp, #116	@ 0x74
 80090d8:	4607      	mov	r7, r0
 80090da:	460d      	mov	r5, r1
 80090dc:	4614      	mov	r4, r2
 80090de:	d510      	bpl.n	8009102 <_svfiprintf_r+0x36>
 80090e0:	690b      	ldr	r3, [r1, #16]
 80090e2:	b973      	cbnz	r3, 8009102 <_svfiprintf_r+0x36>
 80090e4:	2140      	movs	r1, #64	@ 0x40
 80090e6:	f7ff fb87 	bl	80087f8 <_malloc_r>
 80090ea:	6028      	str	r0, [r5, #0]
 80090ec:	6128      	str	r0, [r5, #16]
 80090ee:	b930      	cbnz	r0, 80090fe <_svfiprintf_r+0x32>
 80090f0:	230c      	movs	r3, #12
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	b01d      	add	sp, #116	@ 0x74
 80090fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fe:	2340      	movs	r3, #64	@ 0x40
 8009100:	616b      	str	r3, [r5, #20]
 8009102:	2300      	movs	r3, #0
 8009104:	9309      	str	r3, [sp, #36]	@ 0x24
 8009106:	2320      	movs	r3, #32
 8009108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800910c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009110:	2330      	movs	r3, #48	@ 0x30
 8009112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092b0 <_svfiprintf_r+0x1e4>
 8009116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800911a:	f04f 0901 	mov.w	r9, #1
 800911e:	4623      	mov	r3, r4
 8009120:	469a      	mov	sl, r3
 8009122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009126:	b10a      	cbz	r2, 800912c <_svfiprintf_r+0x60>
 8009128:	2a25      	cmp	r2, #37	@ 0x25
 800912a:	d1f9      	bne.n	8009120 <_svfiprintf_r+0x54>
 800912c:	ebba 0b04 	subs.w	fp, sl, r4
 8009130:	d00b      	beq.n	800914a <_svfiprintf_r+0x7e>
 8009132:	465b      	mov	r3, fp
 8009134:	4622      	mov	r2, r4
 8009136:	4629      	mov	r1, r5
 8009138:	4638      	mov	r0, r7
 800913a:	f7ff ff6b 	bl	8009014 <__ssputs_r>
 800913e:	3001      	adds	r0, #1
 8009140:	f000 80a7 	beq.w	8009292 <_svfiprintf_r+0x1c6>
 8009144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009146:	445a      	add	r2, fp
 8009148:	9209      	str	r2, [sp, #36]	@ 0x24
 800914a:	f89a 3000 	ldrb.w	r3, [sl]
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 809f 	beq.w	8009292 <_svfiprintf_r+0x1c6>
 8009154:	2300      	movs	r3, #0
 8009156:	f04f 32ff 	mov.w	r2, #4294967295
 800915a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800915e:	f10a 0a01 	add.w	sl, sl, #1
 8009162:	9304      	str	r3, [sp, #16]
 8009164:	9307      	str	r3, [sp, #28]
 8009166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800916a:	931a      	str	r3, [sp, #104]	@ 0x68
 800916c:	4654      	mov	r4, sl
 800916e:	2205      	movs	r2, #5
 8009170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009174:	484e      	ldr	r0, [pc, #312]	@ (80092b0 <_svfiprintf_r+0x1e4>)
 8009176:	f7f7 f833 	bl	80001e0 <memchr>
 800917a:	9a04      	ldr	r2, [sp, #16]
 800917c:	b9d8      	cbnz	r0, 80091b6 <_svfiprintf_r+0xea>
 800917e:	06d0      	lsls	r0, r2, #27
 8009180:	bf44      	itt	mi
 8009182:	2320      	movmi	r3, #32
 8009184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009188:	0711      	lsls	r1, r2, #28
 800918a:	bf44      	itt	mi
 800918c:	232b      	movmi	r3, #43	@ 0x2b
 800918e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009192:	f89a 3000 	ldrb.w	r3, [sl]
 8009196:	2b2a      	cmp	r3, #42	@ 0x2a
 8009198:	d015      	beq.n	80091c6 <_svfiprintf_r+0xfa>
 800919a:	9a07      	ldr	r2, [sp, #28]
 800919c:	4654      	mov	r4, sl
 800919e:	2000      	movs	r0, #0
 80091a0:	f04f 0c0a 	mov.w	ip, #10
 80091a4:	4621      	mov	r1, r4
 80091a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091aa:	3b30      	subs	r3, #48	@ 0x30
 80091ac:	2b09      	cmp	r3, #9
 80091ae:	d94b      	bls.n	8009248 <_svfiprintf_r+0x17c>
 80091b0:	b1b0      	cbz	r0, 80091e0 <_svfiprintf_r+0x114>
 80091b2:	9207      	str	r2, [sp, #28]
 80091b4:	e014      	b.n	80091e0 <_svfiprintf_r+0x114>
 80091b6:	eba0 0308 	sub.w	r3, r0, r8
 80091ba:	fa09 f303 	lsl.w	r3, r9, r3
 80091be:	4313      	orrs	r3, r2
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	46a2      	mov	sl, r4
 80091c4:	e7d2      	b.n	800916c <_svfiprintf_r+0xa0>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	1d19      	adds	r1, r3, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	9103      	str	r1, [sp, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfbb      	ittet	lt
 80091d2:	425b      	neglt	r3, r3
 80091d4:	f042 0202 	orrlt.w	r2, r2, #2
 80091d8:	9307      	strge	r3, [sp, #28]
 80091da:	9307      	strlt	r3, [sp, #28]
 80091dc:	bfb8      	it	lt
 80091de:	9204      	strlt	r2, [sp, #16]
 80091e0:	7823      	ldrb	r3, [r4, #0]
 80091e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80091e4:	d10a      	bne.n	80091fc <_svfiprintf_r+0x130>
 80091e6:	7863      	ldrb	r3, [r4, #1]
 80091e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ea:	d132      	bne.n	8009252 <_svfiprintf_r+0x186>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	1d1a      	adds	r2, r3, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	9203      	str	r2, [sp, #12]
 80091f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091f8:	3402      	adds	r4, #2
 80091fa:	9305      	str	r3, [sp, #20]
 80091fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092c0 <_svfiprintf_r+0x1f4>
 8009200:	7821      	ldrb	r1, [r4, #0]
 8009202:	2203      	movs	r2, #3
 8009204:	4650      	mov	r0, sl
 8009206:	f7f6 ffeb 	bl	80001e0 <memchr>
 800920a:	b138      	cbz	r0, 800921c <_svfiprintf_r+0x150>
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	eba0 000a 	sub.w	r0, r0, sl
 8009212:	2240      	movs	r2, #64	@ 0x40
 8009214:	4082      	lsls	r2, r0
 8009216:	4313      	orrs	r3, r2
 8009218:	3401      	adds	r4, #1
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009220:	4824      	ldr	r0, [pc, #144]	@ (80092b4 <_svfiprintf_r+0x1e8>)
 8009222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009226:	2206      	movs	r2, #6
 8009228:	f7f6 ffda 	bl	80001e0 <memchr>
 800922c:	2800      	cmp	r0, #0
 800922e:	d036      	beq.n	800929e <_svfiprintf_r+0x1d2>
 8009230:	4b21      	ldr	r3, [pc, #132]	@ (80092b8 <_svfiprintf_r+0x1ec>)
 8009232:	bb1b      	cbnz	r3, 800927c <_svfiprintf_r+0x1b0>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	3307      	adds	r3, #7
 8009238:	f023 0307 	bic.w	r3, r3, #7
 800923c:	3308      	adds	r3, #8
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009242:	4433      	add	r3, r6
 8009244:	9309      	str	r3, [sp, #36]	@ 0x24
 8009246:	e76a      	b.n	800911e <_svfiprintf_r+0x52>
 8009248:	fb0c 3202 	mla	r2, ip, r2, r3
 800924c:	460c      	mov	r4, r1
 800924e:	2001      	movs	r0, #1
 8009250:	e7a8      	b.n	80091a4 <_svfiprintf_r+0xd8>
 8009252:	2300      	movs	r3, #0
 8009254:	3401      	adds	r4, #1
 8009256:	9305      	str	r3, [sp, #20]
 8009258:	4619      	mov	r1, r3
 800925a:	f04f 0c0a 	mov.w	ip, #10
 800925e:	4620      	mov	r0, r4
 8009260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009264:	3a30      	subs	r2, #48	@ 0x30
 8009266:	2a09      	cmp	r2, #9
 8009268:	d903      	bls.n	8009272 <_svfiprintf_r+0x1a6>
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0c6      	beq.n	80091fc <_svfiprintf_r+0x130>
 800926e:	9105      	str	r1, [sp, #20]
 8009270:	e7c4      	b.n	80091fc <_svfiprintf_r+0x130>
 8009272:	fb0c 2101 	mla	r1, ip, r1, r2
 8009276:	4604      	mov	r4, r0
 8009278:	2301      	movs	r3, #1
 800927a:	e7f0      	b.n	800925e <_svfiprintf_r+0x192>
 800927c:	ab03      	add	r3, sp, #12
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	462a      	mov	r2, r5
 8009282:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <_svfiprintf_r+0x1f0>)
 8009284:	a904      	add	r1, sp, #16
 8009286:	4638      	mov	r0, r7
 8009288:	f7fd fcc6 	bl	8006c18 <_printf_float>
 800928c:	1c42      	adds	r2, r0, #1
 800928e:	4606      	mov	r6, r0
 8009290:	d1d6      	bne.n	8009240 <_svfiprintf_r+0x174>
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	065b      	lsls	r3, r3, #25
 8009296:	f53f af2d 	bmi.w	80090f4 <_svfiprintf_r+0x28>
 800929a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800929c:	e72c      	b.n	80090f8 <_svfiprintf_r+0x2c>
 800929e:	ab03      	add	r3, sp, #12
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	462a      	mov	r2, r5
 80092a4:	4b05      	ldr	r3, [pc, #20]	@ (80092bc <_svfiprintf_r+0x1f0>)
 80092a6:	a904      	add	r1, sp, #16
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7fd ff4d 	bl	8007148 <_printf_i>
 80092ae:	e7ed      	b.n	800928c <_svfiprintf_r+0x1c0>
 80092b0:	0800a358 	.word	0x0800a358
 80092b4:	0800a362 	.word	0x0800a362
 80092b8:	08006c19 	.word	0x08006c19
 80092bc:	08009015 	.word	0x08009015
 80092c0:	0800a35e 	.word	0x0800a35e

080092c4 <__sfputc_r>:
 80092c4:	6893      	ldr	r3, [r2, #8]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	b410      	push	{r4}
 80092cc:	6093      	str	r3, [r2, #8]
 80092ce:	da08      	bge.n	80092e2 <__sfputc_r+0x1e>
 80092d0:	6994      	ldr	r4, [r2, #24]
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	db01      	blt.n	80092da <__sfputc_r+0x16>
 80092d6:	290a      	cmp	r1, #10
 80092d8:	d103      	bne.n	80092e2 <__sfputc_r+0x1e>
 80092da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092de:	f7fe baa8 	b.w	8007832 <__swbuf_r>
 80092e2:	6813      	ldr	r3, [r2, #0]
 80092e4:	1c58      	adds	r0, r3, #1
 80092e6:	6010      	str	r0, [r2, #0]
 80092e8:	7019      	strb	r1, [r3, #0]
 80092ea:	4608      	mov	r0, r1
 80092ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <__sfputs_r>:
 80092f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f4:	4606      	mov	r6, r0
 80092f6:	460f      	mov	r7, r1
 80092f8:	4614      	mov	r4, r2
 80092fa:	18d5      	adds	r5, r2, r3
 80092fc:	42ac      	cmp	r4, r5
 80092fe:	d101      	bne.n	8009304 <__sfputs_r+0x12>
 8009300:	2000      	movs	r0, #0
 8009302:	e007      	b.n	8009314 <__sfputs_r+0x22>
 8009304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009308:	463a      	mov	r2, r7
 800930a:	4630      	mov	r0, r6
 800930c:	f7ff ffda 	bl	80092c4 <__sfputc_r>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d1f3      	bne.n	80092fc <__sfputs_r+0xa>
 8009314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009318 <_vfiprintf_r>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	460d      	mov	r5, r1
 800931e:	b09d      	sub	sp, #116	@ 0x74
 8009320:	4614      	mov	r4, r2
 8009322:	4698      	mov	r8, r3
 8009324:	4606      	mov	r6, r0
 8009326:	b118      	cbz	r0, 8009330 <_vfiprintf_r+0x18>
 8009328:	6a03      	ldr	r3, [r0, #32]
 800932a:	b90b      	cbnz	r3, 8009330 <_vfiprintf_r+0x18>
 800932c:	f7fe f978 	bl	8007620 <__sinit>
 8009330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009332:	07d9      	lsls	r1, r3, #31
 8009334:	d405      	bmi.n	8009342 <_vfiprintf_r+0x2a>
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	059a      	lsls	r2, r3, #22
 800933a:	d402      	bmi.n	8009342 <_vfiprintf_r+0x2a>
 800933c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800933e:	f7fe fb8a 	bl	8007a56 <__retarget_lock_acquire_recursive>
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	071b      	lsls	r3, r3, #28
 8009346:	d501      	bpl.n	800934c <_vfiprintf_r+0x34>
 8009348:	692b      	ldr	r3, [r5, #16]
 800934a:	b99b      	cbnz	r3, 8009374 <_vfiprintf_r+0x5c>
 800934c:	4629      	mov	r1, r5
 800934e:	4630      	mov	r0, r6
 8009350:	f7fe faae 	bl	80078b0 <__swsetup_r>
 8009354:	b170      	cbz	r0, 8009374 <_vfiprintf_r+0x5c>
 8009356:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009358:	07dc      	lsls	r4, r3, #31
 800935a:	d504      	bpl.n	8009366 <_vfiprintf_r+0x4e>
 800935c:	f04f 30ff 	mov.w	r0, #4294967295
 8009360:	b01d      	add	sp, #116	@ 0x74
 8009362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	0598      	lsls	r0, r3, #22
 800936a:	d4f7      	bmi.n	800935c <_vfiprintf_r+0x44>
 800936c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800936e:	f7fe fb73 	bl	8007a58 <__retarget_lock_release_recursive>
 8009372:	e7f3      	b.n	800935c <_vfiprintf_r+0x44>
 8009374:	2300      	movs	r3, #0
 8009376:	9309      	str	r3, [sp, #36]	@ 0x24
 8009378:	2320      	movs	r3, #32
 800937a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800937e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009382:	2330      	movs	r3, #48	@ 0x30
 8009384:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009534 <_vfiprintf_r+0x21c>
 8009388:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800938c:	f04f 0901 	mov.w	r9, #1
 8009390:	4623      	mov	r3, r4
 8009392:	469a      	mov	sl, r3
 8009394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009398:	b10a      	cbz	r2, 800939e <_vfiprintf_r+0x86>
 800939a:	2a25      	cmp	r2, #37	@ 0x25
 800939c:	d1f9      	bne.n	8009392 <_vfiprintf_r+0x7a>
 800939e:	ebba 0b04 	subs.w	fp, sl, r4
 80093a2:	d00b      	beq.n	80093bc <_vfiprintf_r+0xa4>
 80093a4:	465b      	mov	r3, fp
 80093a6:	4622      	mov	r2, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7ff ffa1 	bl	80092f2 <__sfputs_r>
 80093b0:	3001      	adds	r0, #1
 80093b2:	f000 80a7 	beq.w	8009504 <_vfiprintf_r+0x1ec>
 80093b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093b8:	445a      	add	r2, fp
 80093ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80093bc:	f89a 3000 	ldrb.w	r3, [sl]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 809f 	beq.w	8009504 <_vfiprintf_r+0x1ec>
 80093c6:	2300      	movs	r3, #0
 80093c8:	f04f 32ff 	mov.w	r2, #4294967295
 80093cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093d0:	f10a 0a01 	add.w	sl, sl, #1
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	9307      	str	r3, [sp, #28]
 80093d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80093de:	4654      	mov	r4, sl
 80093e0:	2205      	movs	r2, #5
 80093e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e6:	4853      	ldr	r0, [pc, #332]	@ (8009534 <_vfiprintf_r+0x21c>)
 80093e8:	f7f6 fefa 	bl	80001e0 <memchr>
 80093ec:	9a04      	ldr	r2, [sp, #16]
 80093ee:	b9d8      	cbnz	r0, 8009428 <_vfiprintf_r+0x110>
 80093f0:	06d1      	lsls	r1, r2, #27
 80093f2:	bf44      	itt	mi
 80093f4:	2320      	movmi	r3, #32
 80093f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093fa:	0713      	lsls	r3, r2, #28
 80093fc:	bf44      	itt	mi
 80093fe:	232b      	movmi	r3, #43	@ 0x2b
 8009400:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009404:	f89a 3000 	ldrb.w	r3, [sl]
 8009408:	2b2a      	cmp	r3, #42	@ 0x2a
 800940a:	d015      	beq.n	8009438 <_vfiprintf_r+0x120>
 800940c:	9a07      	ldr	r2, [sp, #28]
 800940e:	4654      	mov	r4, sl
 8009410:	2000      	movs	r0, #0
 8009412:	f04f 0c0a 	mov.w	ip, #10
 8009416:	4621      	mov	r1, r4
 8009418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800941c:	3b30      	subs	r3, #48	@ 0x30
 800941e:	2b09      	cmp	r3, #9
 8009420:	d94b      	bls.n	80094ba <_vfiprintf_r+0x1a2>
 8009422:	b1b0      	cbz	r0, 8009452 <_vfiprintf_r+0x13a>
 8009424:	9207      	str	r2, [sp, #28]
 8009426:	e014      	b.n	8009452 <_vfiprintf_r+0x13a>
 8009428:	eba0 0308 	sub.w	r3, r0, r8
 800942c:	fa09 f303 	lsl.w	r3, r9, r3
 8009430:	4313      	orrs	r3, r2
 8009432:	9304      	str	r3, [sp, #16]
 8009434:	46a2      	mov	sl, r4
 8009436:	e7d2      	b.n	80093de <_vfiprintf_r+0xc6>
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	1d19      	adds	r1, r3, #4
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	9103      	str	r1, [sp, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	bfbb      	ittet	lt
 8009444:	425b      	neglt	r3, r3
 8009446:	f042 0202 	orrlt.w	r2, r2, #2
 800944a:	9307      	strge	r3, [sp, #28]
 800944c:	9307      	strlt	r3, [sp, #28]
 800944e:	bfb8      	it	lt
 8009450:	9204      	strlt	r2, [sp, #16]
 8009452:	7823      	ldrb	r3, [r4, #0]
 8009454:	2b2e      	cmp	r3, #46	@ 0x2e
 8009456:	d10a      	bne.n	800946e <_vfiprintf_r+0x156>
 8009458:	7863      	ldrb	r3, [r4, #1]
 800945a:	2b2a      	cmp	r3, #42	@ 0x2a
 800945c:	d132      	bne.n	80094c4 <_vfiprintf_r+0x1ac>
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	1d1a      	adds	r2, r3, #4
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	9203      	str	r2, [sp, #12]
 8009466:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800946a:	3402      	adds	r4, #2
 800946c:	9305      	str	r3, [sp, #20]
 800946e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009544 <_vfiprintf_r+0x22c>
 8009472:	7821      	ldrb	r1, [r4, #0]
 8009474:	2203      	movs	r2, #3
 8009476:	4650      	mov	r0, sl
 8009478:	f7f6 feb2 	bl	80001e0 <memchr>
 800947c:	b138      	cbz	r0, 800948e <_vfiprintf_r+0x176>
 800947e:	9b04      	ldr	r3, [sp, #16]
 8009480:	eba0 000a 	sub.w	r0, r0, sl
 8009484:	2240      	movs	r2, #64	@ 0x40
 8009486:	4082      	lsls	r2, r0
 8009488:	4313      	orrs	r3, r2
 800948a:	3401      	adds	r4, #1
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009492:	4829      	ldr	r0, [pc, #164]	@ (8009538 <_vfiprintf_r+0x220>)
 8009494:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009498:	2206      	movs	r2, #6
 800949a:	f7f6 fea1 	bl	80001e0 <memchr>
 800949e:	2800      	cmp	r0, #0
 80094a0:	d03f      	beq.n	8009522 <_vfiprintf_r+0x20a>
 80094a2:	4b26      	ldr	r3, [pc, #152]	@ (800953c <_vfiprintf_r+0x224>)
 80094a4:	bb1b      	cbnz	r3, 80094ee <_vfiprintf_r+0x1d6>
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	3307      	adds	r3, #7
 80094aa:	f023 0307 	bic.w	r3, r3, #7
 80094ae:	3308      	adds	r3, #8
 80094b0:	9303      	str	r3, [sp, #12]
 80094b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b4:	443b      	add	r3, r7
 80094b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80094b8:	e76a      	b.n	8009390 <_vfiprintf_r+0x78>
 80094ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80094be:	460c      	mov	r4, r1
 80094c0:	2001      	movs	r0, #1
 80094c2:	e7a8      	b.n	8009416 <_vfiprintf_r+0xfe>
 80094c4:	2300      	movs	r3, #0
 80094c6:	3401      	adds	r4, #1
 80094c8:	9305      	str	r3, [sp, #20]
 80094ca:	4619      	mov	r1, r3
 80094cc:	f04f 0c0a 	mov.w	ip, #10
 80094d0:	4620      	mov	r0, r4
 80094d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094d6:	3a30      	subs	r2, #48	@ 0x30
 80094d8:	2a09      	cmp	r2, #9
 80094da:	d903      	bls.n	80094e4 <_vfiprintf_r+0x1cc>
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d0c6      	beq.n	800946e <_vfiprintf_r+0x156>
 80094e0:	9105      	str	r1, [sp, #20]
 80094e2:	e7c4      	b.n	800946e <_vfiprintf_r+0x156>
 80094e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80094e8:	4604      	mov	r4, r0
 80094ea:	2301      	movs	r3, #1
 80094ec:	e7f0      	b.n	80094d0 <_vfiprintf_r+0x1b8>
 80094ee:	ab03      	add	r3, sp, #12
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	462a      	mov	r2, r5
 80094f4:	4b12      	ldr	r3, [pc, #72]	@ (8009540 <_vfiprintf_r+0x228>)
 80094f6:	a904      	add	r1, sp, #16
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7fd fb8d 	bl	8006c18 <_printf_float>
 80094fe:	4607      	mov	r7, r0
 8009500:	1c78      	adds	r0, r7, #1
 8009502:	d1d6      	bne.n	80094b2 <_vfiprintf_r+0x19a>
 8009504:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009506:	07d9      	lsls	r1, r3, #31
 8009508:	d405      	bmi.n	8009516 <_vfiprintf_r+0x1fe>
 800950a:	89ab      	ldrh	r3, [r5, #12]
 800950c:	059a      	lsls	r2, r3, #22
 800950e:	d402      	bmi.n	8009516 <_vfiprintf_r+0x1fe>
 8009510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009512:	f7fe faa1 	bl	8007a58 <__retarget_lock_release_recursive>
 8009516:	89ab      	ldrh	r3, [r5, #12]
 8009518:	065b      	lsls	r3, r3, #25
 800951a:	f53f af1f 	bmi.w	800935c <_vfiprintf_r+0x44>
 800951e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009520:	e71e      	b.n	8009360 <_vfiprintf_r+0x48>
 8009522:	ab03      	add	r3, sp, #12
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	462a      	mov	r2, r5
 8009528:	4b05      	ldr	r3, [pc, #20]	@ (8009540 <_vfiprintf_r+0x228>)
 800952a:	a904      	add	r1, sp, #16
 800952c:	4630      	mov	r0, r6
 800952e:	f7fd fe0b 	bl	8007148 <_printf_i>
 8009532:	e7e4      	b.n	80094fe <_vfiprintf_r+0x1e6>
 8009534:	0800a358 	.word	0x0800a358
 8009538:	0800a362 	.word	0x0800a362
 800953c:	08006c19 	.word	0x08006c19
 8009540:	080092f3 	.word	0x080092f3
 8009544:	0800a35e 	.word	0x0800a35e

08009548 <__swhatbuf_r>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	460c      	mov	r4, r1
 800954c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009550:	2900      	cmp	r1, #0
 8009552:	b096      	sub	sp, #88	@ 0x58
 8009554:	4615      	mov	r5, r2
 8009556:	461e      	mov	r6, r3
 8009558:	da0d      	bge.n	8009576 <__swhatbuf_r+0x2e>
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009560:	f04f 0100 	mov.w	r1, #0
 8009564:	bf14      	ite	ne
 8009566:	2340      	movne	r3, #64	@ 0x40
 8009568:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800956c:	2000      	movs	r0, #0
 800956e:	6031      	str	r1, [r6, #0]
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	b016      	add	sp, #88	@ 0x58
 8009574:	bd70      	pop	{r4, r5, r6, pc}
 8009576:	466a      	mov	r2, sp
 8009578:	f000 f862 	bl	8009640 <_fstat_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	dbec      	blt.n	800955a <__swhatbuf_r+0x12>
 8009580:	9901      	ldr	r1, [sp, #4]
 8009582:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009586:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800958a:	4259      	negs	r1, r3
 800958c:	4159      	adcs	r1, r3
 800958e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009592:	e7eb      	b.n	800956c <__swhatbuf_r+0x24>

08009594 <__smakebuf_r>:
 8009594:	898b      	ldrh	r3, [r1, #12]
 8009596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009598:	079d      	lsls	r5, r3, #30
 800959a:	4606      	mov	r6, r0
 800959c:	460c      	mov	r4, r1
 800959e:	d507      	bpl.n	80095b0 <__smakebuf_r+0x1c>
 80095a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	6123      	str	r3, [r4, #16]
 80095a8:	2301      	movs	r3, #1
 80095aa:	6163      	str	r3, [r4, #20]
 80095ac:	b003      	add	sp, #12
 80095ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b0:	ab01      	add	r3, sp, #4
 80095b2:	466a      	mov	r2, sp
 80095b4:	f7ff ffc8 	bl	8009548 <__swhatbuf_r>
 80095b8:	9f00      	ldr	r7, [sp, #0]
 80095ba:	4605      	mov	r5, r0
 80095bc:	4639      	mov	r1, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	f7ff f91a 	bl	80087f8 <_malloc_r>
 80095c4:	b948      	cbnz	r0, 80095da <__smakebuf_r+0x46>
 80095c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ca:	059a      	lsls	r2, r3, #22
 80095cc:	d4ee      	bmi.n	80095ac <__smakebuf_r+0x18>
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	f043 0302 	orr.w	r3, r3, #2
 80095d6:	81a3      	strh	r3, [r4, #12]
 80095d8:	e7e2      	b.n	80095a0 <__smakebuf_r+0xc>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	6020      	str	r0, [r4, #0]
 80095de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	9b01      	ldr	r3, [sp, #4]
 80095e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095ea:	b15b      	cbz	r3, 8009604 <__smakebuf_r+0x70>
 80095ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f0:	4630      	mov	r0, r6
 80095f2:	f000 f837 	bl	8009664 <_isatty_r>
 80095f6:	b128      	cbz	r0, 8009604 <__smakebuf_r+0x70>
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	f023 0303 	bic.w	r3, r3, #3
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	431d      	orrs	r5, r3
 8009608:	81a5      	strh	r5, [r4, #12]
 800960a:	e7cf      	b.n	80095ac <__smakebuf_r+0x18>

0800960c <memmove>:
 800960c:	4288      	cmp	r0, r1
 800960e:	b510      	push	{r4, lr}
 8009610:	eb01 0402 	add.w	r4, r1, r2
 8009614:	d902      	bls.n	800961c <memmove+0x10>
 8009616:	4284      	cmp	r4, r0
 8009618:	4623      	mov	r3, r4
 800961a:	d807      	bhi.n	800962c <memmove+0x20>
 800961c:	1e43      	subs	r3, r0, #1
 800961e:	42a1      	cmp	r1, r4
 8009620:	d008      	beq.n	8009634 <memmove+0x28>
 8009622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800962a:	e7f8      	b.n	800961e <memmove+0x12>
 800962c:	4402      	add	r2, r0
 800962e:	4601      	mov	r1, r0
 8009630:	428a      	cmp	r2, r1
 8009632:	d100      	bne.n	8009636 <memmove+0x2a>
 8009634:	bd10      	pop	{r4, pc}
 8009636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800963a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800963e:	e7f7      	b.n	8009630 <memmove+0x24>

08009640 <_fstat_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4d07      	ldr	r5, [pc, #28]	@ (8009660 <_fstat_r+0x20>)
 8009644:	2300      	movs	r3, #0
 8009646:	4604      	mov	r4, r0
 8009648:	4608      	mov	r0, r1
 800964a:	4611      	mov	r1, r2
 800964c:	602b      	str	r3, [r5, #0]
 800964e:	f7fa f888 	bl	8003762 <_fstat>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	d102      	bne.n	800965c <_fstat_r+0x1c>
 8009656:	682b      	ldr	r3, [r5, #0]
 8009658:	b103      	cbz	r3, 800965c <_fstat_r+0x1c>
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	bd38      	pop	{r3, r4, r5, pc}
 800965e:	bf00      	nop
 8009660:	20000934 	.word	0x20000934

08009664 <_isatty_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d06      	ldr	r5, [pc, #24]	@ (8009680 <_isatty_r+0x1c>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	602b      	str	r3, [r5, #0]
 8009670:	f7fa f887 	bl	8003782 <_isatty>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d102      	bne.n	800967e <_isatty_r+0x1a>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b103      	cbz	r3, 800967e <_isatty_r+0x1a>
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	20000934 	.word	0x20000934

08009684 <_sbrk_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d06      	ldr	r5, [pc, #24]	@ (80096a0 <_sbrk_r+0x1c>)
 8009688:	2300      	movs	r3, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	f7fa f890 	bl	80037b4 <_sbrk>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_sbrk_r+0x1a>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_sbrk_r+0x1a>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	20000934 	.word	0x20000934

080096a4 <__assert_func>:
 80096a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096a6:	4614      	mov	r4, r2
 80096a8:	461a      	mov	r2, r3
 80096aa:	4b09      	ldr	r3, [pc, #36]	@ (80096d0 <__assert_func+0x2c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4605      	mov	r5, r0
 80096b0:	68d8      	ldr	r0, [r3, #12]
 80096b2:	b954      	cbnz	r4, 80096ca <__assert_func+0x26>
 80096b4:	4b07      	ldr	r3, [pc, #28]	@ (80096d4 <__assert_func+0x30>)
 80096b6:	461c      	mov	r4, r3
 80096b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096bc:	9100      	str	r1, [sp, #0]
 80096be:	462b      	mov	r3, r5
 80096c0:	4905      	ldr	r1, [pc, #20]	@ (80096d8 <__assert_func+0x34>)
 80096c2:	f000 f86f 	bl	80097a4 <fiprintf>
 80096c6:	f000 f87f 	bl	80097c8 <abort>
 80096ca:	4b04      	ldr	r3, [pc, #16]	@ (80096dc <__assert_func+0x38>)
 80096cc:	e7f4      	b.n	80096b8 <__assert_func+0x14>
 80096ce:	bf00      	nop
 80096d0:	20000020 	.word	0x20000020
 80096d4:	0800a3ae 	.word	0x0800a3ae
 80096d8:	0800a380 	.word	0x0800a380
 80096dc:	0800a373 	.word	0x0800a373

080096e0 <_calloc_r>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	fba1 5402 	umull	r5, r4, r1, r2
 80096e6:	b93c      	cbnz	r4, 80096f8 <_calloc_r+0x18>
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7ff f885 	bl	80087f8 <_malloc_r>
 80096ee:	4606      	mov	r6, r0
 80096f0:	b928      	cbnz	r0, 80096fe <_calloc_r+0x1e>
 80096f2:	2600      	movs	r6, #0
 80096f4:	4630      	mov	r0, r6
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
 80096f8:	220c      	movs	r2, #12
 80096fa:	6002      	str	r2, [r0, #0]
 80096fc:	e7f9      	b.n	80096f2 <_calloc_r+0x12>
 80096fe:	462a      	mov	r2, r5
 8009700:	4621      	mov	r1, r4
 8009702:	f7fe f92b 	bl	800795c <memset>
 8009706:	e7f5      	b.n	80096f4 <_calloc_r+0x14>

08009708 <__ascii_mbtowc>:
 8009708:	b082      	sub	sp, #8
 800970a:	b901      	cbnz	r1, 800970e <__ascii_mbtowc+0x6>
 800970c:	a901      	add	r1, sp, #4
 800970e:	b142      	cbz	r2, 8009722 <__ascii_mbtowc+0x1a>
 8009710:	b14b      	cbz	r3, 8009726 <__ascii_mbtowc+0x1e>
 8009712:	7813      	ldrb	r3, [r2, #0]
 8009714:	600b      	str	r3, [r1, #0]
 8009716:	7812      	ldrb	r2, [r2, #0]
 8009718:	1e10      	subs	r0, r2, #0
 800971a:	bf18      	it	ne
 800971c:	2001      	movne	r0, #1
 800971e:	b002      	add	sp, #8
 8009720:	4770      	bx	lr
 8009722:	4610      	mov	r0, r2
 8009724:	e7fb      	b.n	800971e <__ascii_mbtowc+0x16>
 8009726:	f06f 0001 	mvn.w	r0, #1
 800972a:	e7f8      	b.n	800971e <__ascii_mbtowc+0x16>

0800972c <_realloc_r>:
 800972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009730:	4680      	mov	r8, r0
 8009732:	4615      	mov	r5, r2
 8009734:	460c      	mov	r4, r1
 8009736:	b921      	cbnz	r1, 8009742 <_realloc_r+0x16>
 8009738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	4611      	mov	r1, r2
 800973e:	f7ff b85b 	b.w	80087f8 <_malloc_r>
 8009742:	b92a      	cbnz	r2, 8009750 <_realloc_r+0x24>
 8009744:	f7fe ffe4 	bl	8008710 <_free_r>
 8009748:	2400      	movs	r4, #0
 800974a:	4620      	mov	r0, r4
 800974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009750:	f000 f841 	bl	80097d6 <_malloc_usable_size_r>
 8009754:	4285      	cmp	r5, r0
 8009756:	4606      	mov	r6, r0
 8009758:	d802      	bhi.n	8009760 <_realloc_r+0x34>
 800975a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800975e:	d8f4      	bhi.n	800974a <_realloc_r+0x1e>
 8009760:	4629      	mov	r1, r5
 8009762:	4640      	mov	r0, r8
 8009764:	f7ff f848 	bl	80087f8 <_malloc_r>
 8009768:	4607      	mov	r7, r0
 800976a:	2800      	cmp	r0, #0
 800976c:	d0ec      	beq.n	8009748 <_realloc_r+0x1c>
 800976e:	42b5      	cmp	r5, r6
 8009770:	462a      	mov	r2, r5
 8009772:	4621      	mov	r1, r4
 8009774:	bf28      	it	cs
 8009776:	4632      	movcs	r2, r6
 8009778:	f7fe f96f 	bl	8007a5a <memcpy>
 800977c:	4621      	mov	r1, r4
 800977e:	4640      	mov	r0, r8
 8009780:	f7fe ffc6 	bl	8008710 <_free_r>
 8009784:	463c      	mov	r4, r7
 8009786:	e7e0      	b.n	800974a <_realloc_r+0x1e>

08009788 <__ascii_wctomb>:
 8009788:	4603      	mov	r3, r0
 800978a:	4608      	mov	r0, r1
 800978c:	b141      	cbz	r1, 80097a0 <__ascii_wctomb+0x18>
 800978e:	2aff      	cmp	r2, #255	@ 0xff
 8009790:	d904      	bls.n	800979c <__ascii_wctomb+0x14>
 8009792:	228a      	movs	r2, #138	@ 0x8a
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	f04f 30ff 	mov.w	r0, #4294967295
 800979a:	4770      	bx	lr
 800979c:	700a      	strb	r2, [r1, #0]
 800979e:	2001      	movs	r0, #1
 80097a0:	4770      	bx	lr
	...

080097a4 <fiprintf>:
 80097a4:	b40e      	push	{r1, r2, r3}
 80097a6:	b503      	push	{r0, r1, lr}
 80097a8:	4601      	mov	r1, r0
 80097aa:	ab03      	add	r3, sp, #12
 80097ac:	4805      	ldr	r0, [pc, #20]	@ (80097c4 <fiprintf+0x20>)
 80097ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b2:	6800      	ldr	r0, [r0, #0]
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	f7ff fdaf 	bl	8009318 <_vfiprintf_r>
 80097ba:	b002      	add	sp, #8
 80097bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80097c0:	b003      	add	sp, #12
 80097c2:	4770      	bx	lr
 80097c4:	20000020 	.word	0x20000020

080097c8 <abort>:
 80097c8:	b508      	push	{r3, lr}
 80097ca:	2006      	movs	r0, #6
 80097cc:	f000 f834 	bl	8009838 <raise>
 80097d0:	2001      	movs	r0, #1
 80097d2:	f7f9 ff92 	bl	80036fa <_exit>

080097d6 <_malloc_usable_size_r>:
 80097d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097da:	1f18      	subs	r0, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bfbc      	itt	lt
 80097e0:	580b      	ldrlt	r3, [r1, r0]
 80097e2:	18c0      	addlt	r0, r0, r3
 80097e4:	4770      	bx	lr

080097e6 <_raise_r>:
 80097e6:	291f      	cmp	r1, #31
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4605      	mov	r5, r0
 80097ec:	460c      	mov	r4, r1
 80097ee:	d904      	bls.n	80097fa <_raise_r+0x14>
 80097f0:	2316      	movs	r3, #22
 80097f2:	6003      	str	r3, [r0, #0]
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097fc:	b112      	cbz	r2, 8009804 <_raise_r+0x1e>
 80097fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009802:	b94b      	cbnz	r3, 8009818 <_raise_r+0x32>
 8009804:	4628      	mov	r0, r5
 8009806:	f000 f831 	bl	800986c <_getpid_r>
 800980a:	4622      	mov	r2, r4
 800980c:	4601      	mov	r1, r0
 800980e:	4628      	mov	r0, r5
 8009810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009814:	f000 b818 	b.w	8009848 <_kill_r>
 8009818:	2b01      	cmp	r3, #1
 800981a:	d00a      	beq.n	8009832 <_raise_r+0x4c>
 800981c:	1c59      	adds	r1, r3, #1
 800981e:	d103      	bne.n	8009828 <_raise_r+0x42>
 8009820:	2316      	movs	r3, #22
 8009822:	6003      	str	r3, [r0, #0]
 8009824:	2001      	movs	r0, #1
 8009826:	e7e7      	b.n	80097f8 <_raise_r+0x12>
 8009828:	2100      	movs	r1, #0
 800982a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800982e:	4620      	mov	r0, r4
 8009830:	4798      	blx	r3
 8009832:	2000      	movs	r0, #0
 8009834:	e7e0      	b.n	80097f8 <_raise_r+0x12>
	...

08009838 <raise>:
 8009838:	4b02      	ldr	r3, [pc, #8]	@ (8009844 <raise+0xc>)
 800983a:	4601      	mov	r1, r0
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f7ff bfd2 	b.w	80097e6 <_raise_r>
 8009842:	bf00      	nop
 8009844:	20000020 	.word	0x20000020

08009848 <_kill_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d07      	ldr	r5, [pc, #28]	@ (8009868 <_kill_r+0x20>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	f7f9 ff40 	bl	80036da <_kill>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d102      	bne.n	8009864 <_kill_r+0x1c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b103      	cbz	r3, 8009864 <_kill_r+0x1c>
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	20000934 	.word	0x20000934

0800986c <_getpid_r>:
 800986c:	f7f9 bf2d 	b.w	80036ca <_getpid>

08009870 <_init>:
 8009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009872:	bf00      	nop
 8009874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009876:	bc08      	pop	{r3}
 8009878:	469e      	mov	lr, r3
 800987a:	4770      	bx	lr

0800987c <_fini>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	bf00      	nop
 8009880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009882:	bc08      	pop	{r3}
 8009884:	469e      	mov	lr, r3
 8009886:	4770      	bx	lr
