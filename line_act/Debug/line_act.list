
line_act.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08009d10  08009d10  0000ad10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1f0  0800a1f0  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1f0  0800a1f0  0000b1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1f8  0800a1f8  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1f8  0800a1f8  0000b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1fc  0800a1fc  0000b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a200  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  200001dc  0800a3dc  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800a3dc  0000c564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133c0  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002458  00000000  00000000  0001f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00021a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfe  00000000  00000000  00022bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019295  00000000  00000000  000239ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014731  00000000  00000000  0003cc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd3a  00000000  00000000  00051394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f10ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d4c  00000000  00000000  000f1114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f6e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009cf8 	.word	0x08009cf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009cf8 	.word	0x08009cf8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b0af      	sub	sp, #188	@ 0xbc
 8000eac:	af2a      	add	r7, sp, #168	@ 0xa8
 8000eae:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	799b      	ldrb	r3, [r3, #6]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000ec0:	687c      	ldr	r4, [r7, #4]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000ec6:	f107 030e 	add.w	r3, r7, #14
 8000eca:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000ed0:	4668      	mov	r0, sp
 8000ed2:	f104 0310 	add.w	r3, r4, #16
 8000ed6:	229c      	movs	r2, #156	@ 0x9c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f007 f9aa 	bl	8008232 <memcpy>
 8000ede:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ee2:	f001 fbb6 	bl	8002652 <bno055_read_regs>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <bno055_init+0x4c>
        return err;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	e0b6      	b.n	8001062 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ef8:	d001      	beq.n	8000efe <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000efa:	2306      	movs	r3, #6
 8000efc:	e0b1      	b.n	8001062 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f001 fa74 	bl	80023ee <bno055_set_opmode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <bno055_init+0x6c>
        return err;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	e0a6      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f002 fc43 	bl	80037a0 <HAL_Delay>
    bno055_reset(imu);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f001 fb53 	bl	80025c6 <bno055_reset>
    HAL_Delay(5000);
 8000f20:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f24:	f002 fc3c 	bl	80037a0 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 faee 	bl	800250c <bno055_set_pwr_mode>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <bno055_init+0x96>
        return err;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	e091      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f002 fc2e 	bl	80037a0 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000f44:	2100      	movs	r1, #0
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f001 fbe7 	bl	800271a <bno055_set_page>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <bno055_init+0xb2>
        return err;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	e083      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000f5a:	200c      	movs	r0, #12
 8000f5c:	f002 fc20 	bl	80037a0 <HAL_Delay>
    bno055_on(imu);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f001 fb53 	bl	800260c <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	791b      	ldrb	r3, [r3, #4]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 fa3e 	bl	80023ee <bno055_set_opmode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <bno055_init+0xd8>
        return err;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	e070      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8000f80:	2018      	movs	r0, #24
 8000f82:	f002 fc0d 	bl	80037a0 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a38      	ldr	r2, [pc, #224]	@ (800106c <bno055_init+0x1c4>)
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a38      	ldr	r2, [pc, #224]	@ (8001070 <bno055_init+0x1c8>)
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a37      	ldr	r2, [pc, #220]	@ (8001074 <bno055_init+0x1cc>)
 8000f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a37      	ldr	r2, [pc, #220]	@ (8001078 <bno055_init+0x1d0>)
 8000f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a36      	ldr	r2, [pc, #216]	@ (800107c <bno055_init+0x1d4>)
 8000fa2:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a36      	ldr	r2, [pc, #216]	@ (8001080 <bno055_init+0x1d8>)
 8000fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a35      	ldr	r2, [pc, #212]	@ (8001084 <bno055_init+0x1dc>)
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a35      	ldr	r2, [pc, #212]	@ (8001088 <bno055_init+0x1e0>)
 8000fb4:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a34      	ldr	r2, [pc, #208]	@ (800108c <bno055_init+0x1e4>)
 8000fba:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a34      	ldr	r2, [pc, #208]	@ (8001090 <bno055_init+0x1e8>)
 8000fc0:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a33      	ldr	r2, [pc, #204]	@ (8001094 <bno055_init+0x1ec>)
 8000fc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a33      	ldr	r2, [pc, #204]	@ (8001098 <bno055_init+0x1f0>)
 8000fcc:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a32      	ldr	r2, [pc, #200]	@ (800109c <bno055_init+0x1f4>)
 8000fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a32      	ldr	r2, [pc, #200]	@ (80010a0 <bno055_init+0x1f8>)
 8000fd8:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a31      	ldr	r2, [pc, #196]	@ (80010a4 <bno055_init+0x1fc>)
 8000fde:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <bno055_init+0x200>)
 8000fe4:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a30      	ldr	r2, [pc, #192]	@ (80010ac <bno055_init+0x204>)
 8000fea:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a30      	ldr	r2, [pc, #192]	@ (80010b0 <bno055_init+0x208>)
 8000ff0:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <bno055_init+0x20c>)
 8000ff6:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80010b8 <bno055_init+0x210>)
 8000ffc:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a2e      	ldr	r2, [pc, #184]	@ (80010bc <bno055_init+0x214>)
 8001002:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	@ (80010c0 <bno055_init+0x218>)
 8001008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a2d      	ldr	r2, [pc, #180]	@ (80010c4 <bno055_init+0x21c>)
 8001010:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a2c      	ldr	r2, [pc, #176]	@ (80010c8 <bno055_init+0x220>)
 8001016:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <bno055_init+0x224>)
 800101c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a2b      	ldr	r2, [pc, #172]	@ (80010d0 <bno055_init+0x228>)
 8001024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <bno055_init+0x22c>)
 800102c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <bno055_init+0x230>)
 8001034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <bno055_init+0x234>)
 800103c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <bno055_init+0x238>)
 8001044:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a26      	ldr	r2, [pc, #152]	@ (80010e4 <bno055_init+0x23c>)
 800104c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a25      	ldr	r2, [pc, #148]	@ (80010e8 <bno055_init+0x240>)
 8001054:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a24      	ldr	r2, [pc, #144]	@ (80010ec <bno055_init+0x244>)
 800105c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	080010f1 	.word	0x080010f1
 8001070:	08001159 	.word	0x08001159
 8001074:	080011d9 	.word	0x080011d9
 8001078:	08001259 	.word	0x08001259
 800107c:	080012d9 	.word	0x080012d9
 8001080:	080013a5 	.word	0x080013a5
 8001084:	08001425 	.word	0x08001425
 8001088:	080014a5 	.word	0x080014a5
 800108c:	08001525 	.word	0x08001525
 8001090:	080015f1 	.word	0x080015f1
 8001094:	08001671 	.word	0x08001671
 8001098:	080016f1 	.word	0x080016f1
 800109c:	08001771 	.word	0x08001771
 80010a0:	0800183d 	.word	0x0800183d
 80010a4:	080018a9 	.word	0x080018a9
 80010a8:	08001915 	.word	0x08001915
 80010ac:	08001981 	.word	0x08001981
 80010b0:	08001a35 	.word	0x08001a35
 80010b4:	08001ab9 	.word	0x08001ab9
 80010b8:	08001b3d 	.word	0x08001b3d
 80010bc:	08001bc1 	.word	0x08001bc1
 80010c0:	08001c8d 	.word	0x08001c8d
 80010c4:	08001d11 	.word	0x08001d11
 80010c8:	08001d95 	.word	0x08001d95
 80010cc:	08001e19 	.word	0x08001e19
 80010d0:	08001ee5 	.word	0x08001ee5
 80010d4:	08001f55 	.word	0x08001f55
 80010d8:	08001fc5 	.word	0x08001fc5
 80010dc:	08002035 	.word	0x08002035
 80010e0:	080020a5 	.word	0x080020a5
 80010e4:	08002181 	.word	0x08002181
 80010e8:	08002251 	.word	0x08002251
 80010ec:	0800231f 	.word	0x0800231f

080010f0 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b0af      	sub	sp, #188	@ 0xbc
 80010f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80010fe:	687c      	ldr	r4, [r7, #4]
 8001100:	2301      	movs	r3, #1
 8001102:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001104:	f107 030e 	add.w	r3, r7, #14
 8001108:	9328      	str	r3, [sp, #160]	@ 0xa0
 800110a:	2334      	movs	r3, #52	@ 0x34
 800110c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800110e:	4668      	mov	r0, sp
 8001110:	f104 0310 	add.w	r3, r4, #16
 8001114:	229c      	movs	r2, #156	@ 0x9c
 8001116:	4619      	mov	r1, r3
 8001118:	f007 f88b 	bl	8008232 <memcpy>
 800111c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001120:	f001 fa97 	bl	8002652 <bno055_read_regs>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <bno055_temperature+0x42>
        return err;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	e00d      	b.n	800114e <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7bdb      	ldrb	r3, [r3, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <bno055_temperature+0x54>
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	e001      	b.n	8001148 <bno055_temperature+0x58>
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
	...

08001158 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b0af      	sub	sp, #188	@ 0xbc
 800115c:	af2a      	add	r7, sp, #168	@ 0xa8
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001162:	687c      	ldr	r4, [r7, #4]
 8001164:	2302      	movs	r3, #2
 8001166:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800116e:	2308      	movs	r3, #8
 8001170:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001172:	4668      	mov	r0, sp
 8001174:	f104 0310 	add.w	r3, r4, #16
 8001178:	229c      	movs	r2, #156	@ 0x9c
 800117a:	4619      	mov	r1, r3
 800117c:	f007 f859 	bl	8008232 <memcpy>
 8001180:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001184:	f001 fa65 	bl	8002652 <bno055_read_regs>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <bno055_acc_x+0x3e>
        return err;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	e019      	b.n	80011ca <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7b3b      	ldrb	r3, [r7, #12]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <bno055_acc_x+0x62>
 80011b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011d4 <bno055_acc_x+0x7c>
 80011b8:	e001      	b.n	80011be <bno055_acc_x+0x66>
 80011ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80011be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011c8:	2300      	movs	r3, #0
};
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	42c80000 	.word	0x42c80000

080011d8 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0af      	sub	sp, #188	@ 0xbc
 80011dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80011e2:	687c      	ldr	r4, [r7, #4]
 80011e4:	2302      	movs	r3, #2
 80011e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80011ee:	230a      	movs	r3, #10
 80011f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80011f2:	4668      	mov	r0, sp
 80011f4:	f104 0310 	add.w	r3, r4, #16
 80011f8:	229c      	movs	r2, #156	@ 0x9c
 80011fa:	4619      	mov	r1, r3
 80011fc:	f007 f819 	bl	8008232 <memcpy>
 8001200:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001204:	f001 fa25 	bl	8002652 <bno055_read_regs>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <bno055_acc_y+0x3e>
        return err;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	e019      	b.n	800124a <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21b      	sxth	r3, r3
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <bno055_acc_y+0x62>
 8001234:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001254 <bno055_acc_y+0x7c>
 8001238:	e001      	b.n	800123e <bno055_acc_y+0x66>
 800123a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800123e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001248:	2300      	movs	r3, #0
};
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	bf00      	nop
 8001254:	42c80000 	.word	0x42c80000

08001258 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b0af      	sub	sp, #188	@ 0xbc
 800125c:	af2a      	add	r7, sp, #168	@ 0xa8
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001262:	687c      	ldr	r4, [r7, #4]
 8001264:	2302      	movs	r3, #2
 8001266:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800126e:	230c      	movs	r3, #12
 8001270:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001272:	4668      	mov	r0, sp
 8001274:	f104 0310 	add.w	r3, r4, #16
 8001278:	229c      	movs	r2, #156	@ 0x9c
 800127a:	4619      	mov	r1, r3
 800127c:	f006 ffd9 	bl	8008232 <memcpy>
 8001280:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001284:	f001 f9e5 	bl	8002652 <bno055_read_regs>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <bno055_acc_z+0x3e>
        return err;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	e019      	b.n	80012ca <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7b3b      	ldrb	r3, [r7, #12]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <bno055_acc_z+0x62>
 80012b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80012d4 <bno055_acc_z+0x7c>
 80012b8:	e001      	b.n	80012be <bno055_acc_z+0x66>
 80012ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80012be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012c8:	2300      	movs	r3, #0
};
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	42c80000 	.word	0x42c80000

080012d8 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b0b1      	sub	sp, #196	@ 0xc4
 80012dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80012e2:	687c      	ldr	r4, [r7, #4]
 80012e4:	2306      	movs	r3, #6
 80012e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80012ee:	2308      	movs	r3, #8
 80012f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80012f2:	4668      	mov	r0, sp
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	229c      	movs	r2, #156	@ 0x9c
 80012fa:	4619      	mov	r1, r3
 80012fc:	f006 ff99 	bl	8008232 <memcpy>
 8001300:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001304:	f001 f9a5 	bl	8002652 <bno055_read_regs>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <bno055_acc+0x3e>
        return err;
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	e03f      	b.n	8001396 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <bno055_acc+0x4a>
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <bno055_acc+0xc8>)
 8001320:	e001      	b.n	8001326 <bno055_acc+0x4e>
 8001322:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001326:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001328:	7a7b      	ldrb	r3, [r7, #9]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	7a3b      	ldrb	r3, [r7, #8]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800133e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21a      	sxth	r2, r3
 8001352:	7abb      	ldrb	r3, [r7, #10]
 8001354:	b21b      	sxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b21b      	sxth	r3, r3
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001362:	ed97 7a04 	vldr	s14, [r7, #16]
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a04 	vldr	s14, [r7, #16]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001394:	2300      	movs	r3, #0
};
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
 800139e:	bf00      	nop
 80013a0:	42c80000 	.word	0x42c80000

080013a4 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b0af      	sub	sp, #188	@ 0xbc
 80013a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80013ae:	687c      	ldr	r4, [r7, #4]
 80013b0:	2302      	movs	r3, #2
 80013b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80013ba:	2328      	movs	r3, #40	@ 0x28
 80013bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80013be:	4668      	mov	r0, sp
 80013c0:	f104 0310 	add.w	r3, r4, #16
 80013c4:	229c      	movs	r2, #156	@ 0x9c
 80013c6:	4619      	mov	r1, r3
 80013c8:	f006 ff33 	bl	8008232 <memcpy>
 80013cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013d0:	f001 f93f 	bl	8002652 <bno055_read_regs>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <bno055_linear_acc_x+0x3e>
        return err;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	e019      	b.n	8001416 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013e2:	7b7b      	ldrb	r3, [r7, #13]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7b3b      	ldrb	r3, [r7, #12]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <bno055_linear_acc_x+0x62>
 8001400:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001420 <bno055_linear_acc_x+0x7c>
 8001404:	e001      	b.n	800140a <bno055_linear_acc_x+0x66>
 8001406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800140a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001414:	2300      	movs	r3, #0
};
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	42c80000 	.word	0x42c80000

08001424 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b0af      	sub	sp, #188	@ 0xbc
 8001428:	af2a      	add	r7, sp, #168	@ 0xa8
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800142e:	687c      	ldr	r4, [r7, #4]
 8001430:	2302      	movs	r3, #2
 8001432:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	9328      	str	r3, [sp, #160]	@ 0xa0
 800143a:	232a      	movs	r3, #42	@ 0x2a
 800143c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800143e:	4668      	mov	r0, sp
 8001440:	f104 0310 	add.w	r3, r4, #16
 8001444:	229c      	movs	r2, #156	@ 0x9c
 8001446:	4619      	mov	r1, r3
 8001448:	f006 fef3 	bl	8008232 <memcpy>
 800144c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001450:	f001 f8ff 	bl	8002652 <bno055_read_regs>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <bno055_linear_acc_y+0x3e>
        return err;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	e019      	b.n	8001496 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <bno055_linear_acc_y+0x62>
 8001480:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80014a0 <bno055_linear_acc_y+0x7c>
 8001484:	e001      	b.n	800148a <bno055_linear_acc_y+0x66>
 8001486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001494:	2300      	movs	r3, #0
};
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	42c80000 	.word	0x42c80000

080014a4 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b0af      	sub	sp, #188	@ 0xbc
 80014a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80014ae:	687c      	ldr	r4, [r7, #4]
 80014b0:	2302      	movs	r3, #2
 80014b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80014ba:	232c      	movs	r3, #44	@ 0x2c
 80014bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80014be:	4668      	mov	r0, sp
 80014c0:	f104 0310 	add.w	r3, r4, #16
 80014c4:	229c      	movs	r2, #156	@ 0x9c
 80014c6:	4619      	mov	r1, r3
 80014c8:	f006 feb3 	bl	8008232 <memcpy>
 80014cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014d0:	f001 f8bf 	bl	8002652 <bno055_read_regs>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <bno055_linear_acc_z+0x3e>
        return err;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	e019      	b.n	8001516 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	7b3b      	ldrb	r3, [r7, #12]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <bno055_linear_acc_z+0x62>
 8001500:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001520 <bno055_linear_acc_z+0x7c>
 8001504:	e001      	b.n	800150a <bno055_linear_acc_z+0x66>
 8001506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800150a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001514:	2300      	movs	r3, #0
};
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	42c80000 	.word	0x42c80000

08001524 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b0b1      	sub	sp, #196	@ 0xc4
 8001528:	af2a      	add	r7, sp, #168	@ 0xa8
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 800152e:	687c      	ldr	r4, [r7, #4]
 8001530:	2306      	movs	r3, #6
 8001532:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	9328      	str	r3, [sp, #160]	@ 0xa0
 800153a:	2328      	movs	r3, #40	@ 0x28
 800153c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800153e:	4668      	mov	r0, sp
 8001540:	f104 0310 	add.w	r3, r4, #16
 8001544:	229c      	movs	r2, #156	@ 0x9c
 8001546:	4619      	mov	r1, r3
 8001548:	f006 fe73 	bl	8008232 <memcpy>
 800154c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001550:	f001 f87f 	bl	8002652 <bno055_read_regs>
 8001554:	4603      	mov	r3, r0
 8001556:	75fb      	strb	r3, [r7, #23]
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <bno055_linear_acc+0x3e>
        return err;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	e03f      	b.n	80015e2 <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <bno055_linear_acc+0x4a>
 800156a:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <bno055_linear_acc+0xc8>)
 800156c:	e001      	b.n	8001572 <bno055_linear_acc+0x4e>
 800156e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001572:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7a3b      	ldrb	r3, [r7, #8]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21b      	sxth	r3, r3
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800158a:	ed97 7a04 	vldr	s14, [r7, #16]
 800158e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7abb      	ldrb	r3, [r7, #10]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80015bc:	7b7b      	ldrb	r3, [r7, #13]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	7b3b      	ldrb	r3, [r7, #12]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80015e0:	2300      	movs	r3, #0
};
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	42c80000 	.word	0x42c80000

080015f0 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b0af      	sub	sp, #188	@ 0xbc
 80015f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80015fa:	687c      	ldr	r4, [r7, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001606:	2314      	movs	r3, #20
 8001608:	9327      	str	r3, [sp, #156]	@ 0x9c
 800160a:	4668      	mov	r0, sp
 800160c:	f104 0310 	add.w	r3, r4, #16
 8001610:	229c      	movs	r2, #156	@ 0x9c
 8001612:	4619      	mov	r1, r3
 8001614:	f006 fe0d 	bl	8008232 <memcpy>
 8001618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800161c:	f001 f819 	bl	8002652 <bno055_read_regs>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <bno055_gyro_x+0x3e>
        return err;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	e019      	b.n	8001662 <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	7b3b      	ldrb	r3, [r7, #12]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <bno055_gyro_x+0x62>
 800164c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001650:	e001      	b.n	8001656 <bno055_gyro_x+0x66>
 8001652:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800166c <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001660:	2300      	movs	r3, #0
};
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	44610000 	.word	0x44610000

08001670 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b0af      	sub	sp, #188	@ 0xbc
 8001674:	af2a      	add	r7, sp, #168	@ 0xa8
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800167a:	687c      	ldr	r4, [r7, #4]
 800167c:	2302      	movs	r3, #2
 800167e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001686:	2316      	movs	r3, #22
 8001688:	9327      	str	r3, [sp, #156]	@ 0x9c
 800168a:	4668      	mov	r0, sp
 800168c:	f104 0310 	add.w	r3, r4, #16
 8001690:	229c      	movs	r2, #156	@ 0x9c
 8001692:	4619      	mov	r1, r3
 8001694:	f006 fdcd 	bl	8008232 <memcpy>
 8001698:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800169c:	f000 ffd9 	bl	8002652 <bno055_read_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <bno055_gyro_y+0x3e>
        return err;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	e019      	b.n	80016e2 <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80016ae:	7b7b      	ldrb	r3, [r7, #13]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7b3b      	ldrb	r3, [r7, #12]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <bno055_gyro_y+0x62>
 80016cc:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80016d0:	e001      	b.n	80016d6 <bno055_gyro_y+0x66>
 80016d2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80016ec <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80016d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016e0:	2300      	movs	r3, #0
};
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	44610000 	.word	0x44610000

080016f0 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b0af      	sub	sp, #188	@ 0xbc
 80016f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80016fa:	687c      	ldr	r4, [r7, #4]
 80016fc:	2302      	movs	r3, #2
 80016fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001706:	2318      	movs	r3, #24
 8001708:	9327      	str	r3, [sp, #156]	@ 0x9c
 800170a:	4668      	mov	r0, sp
 800170c:	f104 0310 	add.w	r3, r4, #16
 8001710:	229c      	movs	r2, #156	@ 0x9c
 8001712:	4619      	mov	r1, r3
 8001714:	f006 fd8d 	bl	8008232 <memcpy>
 8001718:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800171c:	f000 ff99 	bl	8002652 <bno055_read_regs>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <bno055_gyro_z+0x3e>
        return err;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	e019      	b.n	8001762 <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <bno055_gyro_z+0x62>
 800174c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001750:	e001      	b.n	8001756 <bno055_gyro_z+0x66>
 8001752:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800176c <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001760:	2300      	movs	r3, #0
};
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	bf00      	nop
 800176c:	44610000 	.word	0x44610000

08001770 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b0b1      	sub	sp, #196	@ 0xc4
 8001774:	af2a      	add	r7, sp, #168	@ 0xa8
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 800177a:	687c      	ldr	r4, [r7, #4]
 800177c:	2306      	movs	r3, #6
 800177e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001786:	2314      	movs	r3, #20
 8001788:	9327      	str	r3, [sp, #156]	@ 0x9c
 800178a:	4668      	mov	r0, sp
 800178c:	f104 0310 	add.w	r3, r4, #16
 8001790:	229c      	movs	r2, #156	@ 0x9c
 8001792:	4619      	mov	r1, r3
 8001794:	f006 fd4d 	bl	8008232 <memcpy>
 8001798:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800179c:	f000 ff59 	bl	8002652 <bno055_read_regs>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <bno055_gyro+0x3e>
        return err;
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	e03f      	b.n	800182e <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <bno055_gyro+0x4c>
 80017b6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80017ba:	e000      	b.n	80017be <bno055_gyro+0x4e>
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017be:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80017c0:	7a7b      	ldrb	r3, [r7, #9]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	7a3b      	ldrb	r3, [r7, #8]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80017da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80017e4:	7afb      	ldrb	r3, [r7, #11]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	7abb      	ldrb	r3, [r7, #10]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80017fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	7b3b      	ldrb	r3, [r7, #12]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21b      	sxth	r3, r3
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	44610000 	.word	0x44610000

0800183c <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b0af      	sub	sp, #188	@ 0xbc
 8001840:	af2a      	add	r7, sp, #168	@ 0xa8
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001846:	687c      	ldr	r4, [r7, #4]
 8001848:	2302      	movs	r3, #2
 800184a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001852:	230e      	movs	r3, #14
 8001854:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001856:	4668      	mov	r0, sp
 8001858:	f104 0310 	add.w	r3, r4, #16
 800185c:	229c      	movs	r2, #156	@ 0x9c
 800185e:	4619      	mov	r1, r3
 8001860:	f006 fce7 	bl	8008232 <memcpy>
 8001864:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001868:	f000 fef3 	bl	8002652 <bno055_read_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <bno055_mag_x+0x3e>
        return err;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	e012      	b.n	80018a0 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800187a:	7b7b      	ldrb	r3, [r7, #13]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	7b3b      	ldrb	r3, [r7, #12]
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b21b      	sxth	r3, r3
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001890:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}

080018a8 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b0af      	sub	sp, #188	@ 0xbc
 80018ac:	af2a      	add	r7, sp, #168	@ 0xa8
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80018b2:	687c      	ldr	r4, [r7, #4]
 80018b4:	2302      	movs	r3, #2
 80018b6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80018be:	2310      	movs	r3, #16
 80018c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80018c2:	4668      	mov	r0, sp
 80018c4:	f104 0310 	add.w	r3, r4, #16
 80018c8:	229c      	movs	r2, #156	@ 0x9c
 80018ca:	4619      	mov	r1, r3
 80018cc:	f006 fcb1 	bl	8008232 <memcpy>
 80018d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018d4:	f000 febd 	bl	8002652 <bno055_read_regs>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <bno055_mag_y+0x3e>
        return err;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	e012      	b.n	800190c <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b0af      	sub	sp, #188	@ 0xbc
 8001918:	af2a      	add	r7, sp, #168	@ 0xa8
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800191e:	687c      	ldr	r4, [r7, #4]
 8001920:	2302      	movs	r3, #2
 8001922:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	9328      	str	r3, [sp, #160]	@ 0xa0
 800192a:	2312      	movs	r3, #18
 800192c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800192e:	4668      	mov	r0, sp
 8001930:	f104 0310 	add.w	r3, r4, #16
 8001934:	229c      	movs	r2, #156	@ 0x9c
 8001936:	4619      	mov	r1, r3
 8001938:	f006 fc7b 	bl	8008232 <memcpy>
 800193c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001940:	f000 fe87 	bl	8002652 <bno055_read_regs>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <bno055_mag_z+0x3e>
        return err;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	e012      	b.n	8001978 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001952:	7b7b      	ldrb	r3, [r7, #13]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b21a      	sxth	r2, r3
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	b21b      	sxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b21b      	sxth	r3, r3
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800196c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}

08001980 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b0af      	sub	sp, #188	@ 0xbc
 8001984:	af2a      	add	r7, sp, #168	@ 0xa8
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 800198a:	687c      	ldr	r4, [r7, #4]
 800198c:	2306      	movs	r3, #6
 800198e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001996:	230e      	movs	r3, #14
 8001998:	9327      	str	r3, [sp, #156]	@ 0x9c
 800199a:	4668      	mov	r0, sp
 800199c:	f104 0310 	add.w	r3, r4, #16
 80019a0:	229c      	movs	r2, #156	@ 0x9c
 80019a2:	4619      	mov	r1, r3
 80019a4:	f006 fc45 	bl	8008232 <memcpy>
 80019a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019ac:	f000 fe51 	bl	8002652 <bno055_read_regs>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <bno055_mag+0x3e>
        return err;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	e036      	b.n	8001a2c <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	7a3b      	ldrb	r3, [r7, #8]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001a06:	7b7b      	ldrb	r3, [r7, #13]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001a2a:	2300      	movs	r3, #0
};
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b0b1      	sub	sp, #196	@ 0xc4
 8001a38:	af2a      	add	r7, sp, #168	@ 0xa8
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001a3e:	687c      	ldr	r4, [r7, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001a4a:	232e      	movs	r3, #46	@ 0x2e
 8001a4c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001a4e:	4668      	mov	r0, sp
 8001a50:	f104 0310 	add.w	r3, r4, #16
 8001a54:	229c      	movs	r2, #156	@ 0x9c
 8001a56:	4619      	mov	r1, r3
 8001a58:	f006 fbeb 	bl	8008232 <memcpy>
 8001a5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a60:	f000 fdf7 	bl	8002652 <bno055_read_regs>
 8001a64:	4603      	mov	r3, r0
 8001a66:	75fb      	strb	r3, [r7, #23]
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <bno055_gravity_x+0x3e>
        return err;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	e01b      	b.n	8001aaa <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <bno055_gravity_x+0x4a>
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <bno055_gravity_x+0x80>)
 8001a7c:	e001      	b.n	8001a82 <bno055_gravity_x+0x4e>
 8001a7e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a82:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	7b3b      	ldrb	r3, [r7, #12]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	42c80000 	.word	0x42c80000

08001ab8 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b0b1      	sub	sp, #196	@ 0xc4
 8001abc:	af2a      	add	r7, sp, #168	@ 0xa8
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001ac2:	687c      	ldr	r4, [r7, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ace:	2330      	movs	r3, #48	@ 0x30
 8001ad0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ad2:	4668      	mov	r0, sp
 8001ad4:	f104 0310 	add.w	r3, r4, #16
 8001ad8:	229c      	movs	r2, #156	@ 0x9c
 8001ada:	4619      	mov	r1, r3
 8001adc:	f006 fba9 	bl	8008232 <memcpy>
 8001ae0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ae4:	f000 fdb5 	bl	8002652 <bno055_read_regs>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	75fb      	strb	r3, [r7, #23]
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <bno055_gravity_y+0x3e>
        return err;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	e01b      	b.n	8001b2e <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <bno055_gravity_y+0x4a>
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <bno055_gravity_y+0x80>)
 8001b00:	e001      	b.n	8001b06 <bno055_gravity_y+0x4e>
 8001b02:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b06:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7b3b      	ldrb	r3, [r7, #12]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	42c80000 	.word	0x42c80000

08001b3c <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b0b1      	sub	sp, #196	@ 0xc4
 8001b40:	af2a      	add	r7, sp, #168	@ 0xa8
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001b46:	687c      	ldr	r4, [r7, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001b52:	2332      	movs	r3, #50	@ 0x32
 8001b54:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001b56:	4668      	mov	r0, sp
 8001b58:	f104 0310 	add.w	r3, r4, #16
 8001b5c:	229c      	movs	r2, #156	@ 0x9c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f006 fb67 	bl	8008232 <memcpy>
 8001b64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b68:	f000 fd73 	bl	8002652 <bno055_read_regs>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	75fb      	strb	r3, [r7, #23]
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <bno055_gravity_z+0x3e>
        return err;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	e01b      	b.n	8001bb2 <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <bno055_gravity_z+0x4a>
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <bno055_gravity_z+0x80>)
 8001b84:	e001      	b.n	8001b8a <bno055_gravity_z+0x4e>
 8001b86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b8a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ba2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	42c80000 	.word	0x42c80000

08001bc0 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b0b1      	sub	sp, #196	@ 0xc4
 8001bc4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001bca:	687c      	ldr	r4, [r7, #4]
 8001bcc:	2306      	movs	r3, #6
 8001bce:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001bd6:	232e      	movs	r3, #46	@ 0x2e
 8001bd8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001bda:	4668      	mov	r0, sp
 8001bdc:	f104 0310 	add.w	r3, r4, #16
 8001be0:	229c      	movs	r2, #156	@ 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	f006 fb25 	bl	8008232 <memcpy>
 8001be8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bec:	f000 fd31 	bl	8002652 <bno055_read_regs>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <bno055_gravity+0x3e>
        return err;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	e03f      	b.n	8001c7e <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <bno055_gravity+0x4a>
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <bno055_gravity+0xc8>)
 8001c08:	e001      	b.n	8001c0e <bno055_gravity+0x4e>
 8001c0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c0e:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	7a3b      	ldrb	r3, [r7, #8]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c26:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	7abb      	ldrb	r3, [r7, #10]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001c58:	7b7b      	ldrb	r3, [r7, #13]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	7b3b      	ldrb	r3, [r7, #12]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	42c80000 	.word	0x42c80000

08001c8c <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b0b1      	sub	sp, #196	@ 0xc4
 8001c90:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001c96:	687c      	ldr	r4, [r7, #4]
 8001c98:	2302      	movs	r3, #2
 8001c9a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ca2:	231a      	movs	r3, #26
 8001ca4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ca6:	4668      	mov	r0, sp
 8001ca8:	f104 0310 	add.w	r3, r4, #16
 8001cac:	229c      	movs	r2, #156	@ 0x9c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f006 fabf 	bl	8008232 <memcpy>
 8001cb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cb8:	f000 fccb 	bl	8002652 <bno055_read_regs>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	75fb      	strb	r3, [r7, #23]
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	e01b      	b.n	8001d02 <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <bno055_euler_yaw+0x4c>
 8001cd2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001cd6:	e000      	b.n	8001cda <bno055_euler_yaw+0x4e>
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cda:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	7b3b      	ldrb	r3, [r7, #12]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cf2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	44610000 	.word	0x44610000

08001d10 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b0b1      	sub	sp, #196	@ 0xc4
 8001d14:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001d1a:	687c      	ldr	r4, [r7, #4]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001d26:	231c      	movs	r3, #28
 8001d28:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001d2a:	4668      	mov	r0, sp
 8001d2c:	f104 0310 	add.w	r3, r4, #16
 8001d30:	229c      	movs	r2, #156	@ 0x9c
 8001d32:	4619      	mov	r1, r3
 8001d34:	f006 fa7d 	bl	8008232 <memcpy>
 8001d38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d3c:	f000 fc89 	bl	8002652 <bno055_read_regs>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <bno055_euler_roll+0x3e>
        return err;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	e01b      	b.n	8001d86 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <bno055_euler_roll+0x4c>
 8001d56:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001d5a:	e000      	b.n	8001d5e <bno055_euler_roll+0x4e>
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d5e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	44610000 	.word	0x44610000

08001d94 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b0b1      	sub	sp, #196	@ 0xc4
 8001d98:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001d9e:	687c      	ldr	r4, [r7, #4]
 8001da0:	2302      	movs	r3, #2
 8001da2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001daa:	231e      	movs	r3, #30
 8001dac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001dae:	4668      	mov	r0, sp
 8001db0:	f104 0310 	add.w	r3, r4, #16
 8001db4:	229c      	movs	r2, #156	@ 0x9c
 8001db6:	4619      	mov	r1, r3
 8001db8:	f006 fa3b 	bl	8008232 <memcpy>
 8001dbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dc0:	f000 fc47 	bl	8002652 <bno055_read_regs>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	75fb      	strb	r3, [r7, #23]
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <bno055_euler_pitch+0x3e>
        return err;
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	e01b      	b.n	8001e0a <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <bno055_euler_pitch+0x4c>
 8001dda:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001dde:	e000      	b.n	8001de2 <bno055_euler_pitch+0x4e>
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001de2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001de4:	7b7b      	ldrb	r3, [r7, #13]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	7b3b      	ldrb	r3, [r7, #12]
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	44610000 	.word	0x44610000

08001e18 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b0b1      	sub	sp, #196	@ 0xc4
 8001e1c:	af2a      	add	r7, sp, #168	@ 0xa8
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001e22:	687c      	ldr	r4, [r7, #4]
 8001e24:	2306      	movs	r3, #6
 8001e26:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001e2e:	231a      	movs	r3, #26
 8001e30:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001e32:	4668      	mov	r0, sp
 8001e34:	f104 0310 	add.w	r3, r4, #16
 8001e38:	229c      	movs	r2, #156	@ 0x9c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f006 f9f9 	bl	8008232 <memcpy>
 8001e40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e44:	f000 fc05 	bl	8002652 <bno055_read_regs>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	e03f      	b.n	8001ed6 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <bno055_euler+0x4c>
 8001e5e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001e62:	e000      	b.n	8001e66 <bno055_euler+0x4e>
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e66:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001e68:	7a7b      	ldrb	r3, [r7, #9]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	7a3b      	ldrb	r3, [r7, #8]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	7abb      	ldrb	r3, [r7, #10]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ea2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001eb0:	7b7b      	ldrb	r3, [r7, #13]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ec6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	44610000 	.word	0x44610000

08001ee4 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b0af      	sub	sp, #188	@ 0xbc
 8001ee8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001eee:	687c      	ldr	r4, [r7, #4]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001efa:	2320      	movs	r3, #32
 8001efc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001efe:	4668      	mov	r0, sp
 8001f00:	f104 0310 	add.w	r3, r4, #16
 8001f04:	229c      	movs	r2, #156	@ 0x9c
 8001f06:	4619      	mov	r1, r3
 8001f08:	f006 f993 	bl	8008232 <memcpy>
 8001f0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f10:	f000 fb9f 	bl	8002652 <bno055_read_regs>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <bno055_quaternion_w+0x3e>
        return err;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	e012      	b.n	8001f48 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f22:	7b7b      	ldrb	r3, [r7, #13]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	7b3b      	ldrb	r3, [r7, #12]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f38:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001f50 <bno055_quaternion_w+0x6c>
 8001f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	46800000 	.word	0x46800000

08001f54 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b0af      	sub	sp, #188	@ 0xbc
 8001f58:	af2a      	add	r7, sp, #168	@ 0xa8
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001f5e:	687c      	ldr	r4, [r7, #4]
 8001f60:	2302      	movs	r3, #2
 8001f62:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f6a:	2322      	movs	r3, #34	@ 0x22
 8001f6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f6e:	4668      	mov	r0, sp
 8001f70:	f104 0310 	add.w	r3, r4, #16
 8001f74:	229c      	movs	r2, #156	@ 0x9c
 8001f76:	4619      	mov	r1, r3
 8001f78:	f006 f95b 	bl	8008232 <memcpy>
 8001f7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f80:	f000 fb67 	bl	8002652 <bno055_read_regs>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <bno055_quaternion_x+0x3e>
        return err;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	e012      	b.n	8001fb8 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f92:	7b7b      	ldrb	r3, [r7, #13]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	7b3b      	ldrb	r3, [r7, #12]
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa8:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001fc0 <bno055_quaternion_x+0x6c>
 8001fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	46800000 	.word	0x46800000

08001fc4 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b0af      	sub	sp, #188	@ 0xbc
 8001fc8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001fce:	687c      	ldr	r4, [r7, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001fda:	2324      	movs	r3, #36	@ 0x24
 8001fdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001fde:	4668      	mov	r0, sp
 8001fe0:	f104 0310 	add.w	r3, r4, #16
 8001fe4:	229c      	movs	r2, #156	@ 0x9c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f006 f923 	bl	8008232 <memcpy>
 8001fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ff0:	f000 fb2f 	bl	8002652 <bno055_read_regs>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <bno055_quaternion_y+0x3e>
        return err;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	e012      	b.n	8002028 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002002:	7b7b      	ldrb	r3, [r7, #13]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21b      	sxth	r3, r3
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002030 <bno055_quaternion_y+0x6c>
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	46800000 	.word	0x46800000

08002034 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b0af      	sub	sp, #188	@ 0xbc
 8002038:	af2a      	add	r7, sp, #168	@ 0xa8
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800203e:	687c      	ldr	r4, [r7, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	9328      	str	r3, [sp, #160]	@ 0xa0
 800204a:	2326      	movs	r3, #38	@ 0x26
 800204c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800204e:	4668      	mov	r0, sp
 8002050:	f104 0310 	add.w	r3, r4, #16
 8002054:	229c      	movs	r2, #156	@ 0x9c
 8002056:	4619      	mov	r1, r3
 8002058:	f006 f8eb 	bl	8008232 <memcpy>
 800205c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002060:	f000 faf7 	bl	8002652 <bno055_read_regs>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <bno055_quaternion_z+0x3e>
        return err;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	e012      	b.n	8002098 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7b3b      	ldrb	r3, [r7, #12]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002088:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80020a0 <bno055_quaternion_z+0x6c>
 800208c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	46800000 	.word	0x46800000

080020a4 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b0b1      	sub	sp, #196	@ 0xc4
 80020a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80020ae:	687c      	ldr	r4, [r7, #4]
 80020b0:	2308      	movs	r3, #8
 80020b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80020ba:	2320      	movs	r3, #32
 80020bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80020be:	4668      	mov	r0, sp
 80020c0:	f104 0310 	add.w	r3, r4, #16
 80020c4:	229c      	movs	r2, #156	@ 0x9c
 80020c6:	4619      	mov	r1, r3
 80020c8:	f006 f8b3 	bl	8008232 <memcpy>
 80020cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020d0:	f000 fabf 	bl	8002652 <bno055_read_regs>
 80020d4:	4603      	mov	r3, r0
 80020d6:	75fb      	strb	r3, [r7, #23]
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <bno055_quaternion+0x3e>
        return err;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	e048      	b.n	8002174 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80020e2:	7b7b      	ldrb	r3, [r7, #13]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800217c <bno055_quaternion+0xd8>
 80020fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21a      	sxth	r2, r3
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800217c <bno055_quaternion+0xd8>
 8002120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 800212a:	7c7b      	ldrb	r3, [r7, #17]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b21a      	sxth	r2, r3
 8002130:	7c3b      	ldrb	r3, [r7, #16]
 8002132:	b21b      	sxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b21b      	sxth	r3, r3
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002140:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800217c <bno055_quaternion+0xd8>
 8002144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800214e:	7cfb      	ldrb	r3, [r7, #19]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21a      	sxth	r2, r3
 8002154:	7cbb      	ldrb	r3, [r7, #18]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21b      	sxth	r3, r3
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002164:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800217c <bno055_quaternion+0xd8>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd90      	pop	{r4, r7, pc}
 800217c:	46800000 	.word	0x46800000

08002180 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b0af      	sub	sp, #188	@ 0xbc
 8002184:	af2a      	add	r7, sp, #168	@ 0xa8
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	70fb      	strb	r3, [r7, #3]
 8002192:	460b      	mov	r3, r1
 8002194:	70bb      	strb	r3, [r7, #2]
 8002196:	4613      	mov	r3, r2
 8002198:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800219a:	2101      	movs	r1, #1
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fabc 	bl	800271a <bno055_set_page>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <bno055_acc_conf+0x30>
        return err;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	e04b      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80021b0:	2100      	movs	r1, #0
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f91b 	bl	80023ee <bno055_set_opmode>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <bno055_acc_conf+0x46>
        return err;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	e040      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80021c6:	200c      	movs	r0, #12
 80021c8:	f001 faea 	bl	80037a0 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	78bb      	ldrb	r3, [r7, #2]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80021dc:	687c      	ldr	r4, [r7, #4]
 80021de:	2301      	movs	r3, #1
 80021e0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80021e2:	f107 030e 	add.w	r3, r7, #14
 80021e6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80021e8:	2308      	movs	r3, #8
 80021ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 80021ec:	4668      	mov	r0, sp
 80021ee:	f104 0310 	add.w	r3, r4, #16
 80021f2:	229c      	movs	r2, #156	@ 0x9c
 80021f4:	4619      	mov	r1, r3
 80021f6:	f006 f81c 	bl	8008232 <memcpy>
 80021fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021fe:	f000 fa5e 	bl	80026be <bno055_write_regs>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <bno055_acc_conf+0x90>
        return err;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	e01b      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8e9 	bl	80023ee <bno055_set_opmode>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <bno055_acc_conf+0xaa>
        return err;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	e00e      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800222a:	2018      	movs	r0, #24
 800222c:	f001 fab8 	bl	80037a0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa71 	bl	800271a <bno055_set_page>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <bno055_acc_conf+0xc6>
        return err;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	e000      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}

08002250 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b0af      	sub	sp, #188	@ 0xbc
 8002254:	af2a      	add	r7, sp, #168	@ 0xa8
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4603      	mov	r3, r0
 8002260:	70fb      	strb	r3, [r7, #3]
 8002262:	460b      	mov	r3, r1
 8002264:	70bb      	strb	r3, [r7, #2]
 8002266:	4613      	mov	r3, r2
 8002268:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800226a:	2101      	movs	r1, #1
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fa54 	bl	800271a <bno055_set_page>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <bno055_gyr_conf+0x30>
        return err;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	e04a      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002280:	2100      	movs	r1, #0
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8b3 	bl	80023ee <bno055_set_opmode>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <bno055_gyr_conf+0x46>
        return err;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	e03f      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002296:	200c      	movs	r0, #12
 8002298:	f001 fa82 	bl	80037a0 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	78bb      	ldrb	r3, [r7, #2]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	733b      	strb	r3, [r7, #12]
 80022a6:	787b      	ldrb	r3, [r7, #1]
 80022a8:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80022aa:	687c      	ldr	r4, [r7, #4]
 80022ac:	2302      	movs	r3, #2
 80022ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80022b6:	230a      	movs	r3, #10
 80022b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80022ba:	4668      	mov	r0, sp
 80022bc:	f104 0310 	add.w	r3, r4, #16
 80022c0:	229c      	movs	r2, #156	@ 0x9c
 80022c2:	4619      	mov	r1, r3
 80022c4:	f005 ffb5 	bl	8008232 <memcpy>
 80022c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022cc:	f000 f9f7 	bl	80026be <bno055_write_regs>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	e01b      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	791b      	ldrb	r3, [r3, #4]
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f882 	bl	80023ee <bno055_set_opmode>
 80022ea:	4603      	mov	r3, r0
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <bno055_gyr_conf+0xa8>
        return err;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	e00e      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80022f8:	2018      	movs	r0, #24
 80022fa:	f001 fa51 	bl	80037a0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80022fe:	2100      	movs	r1, #0
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fa0a 	bl	800271a <bno055_set_page>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <bno055_gyr_conf+0xc4>
        return err;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	e000      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}

0800231e <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 800231e:	b590      	push	{r4, r7, lr}
 8002320:	b0af      	sub	sp, #188	@ 0xbc
 8002322:	af2a      	add	r7, sp, #168	@ 0xa8
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	4608      	mov	r0, r1
 8002328:	4611      	mov	r1, r2
 800232a:	461a      	mov	r2, r3
 800232c:	4603      	mov	r3, r0
 800232e:	70fb      	strb	r3, [r7, #3]
 8002330:	460b      	mov	r3, r1
 8002332:	70bb      	strb	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002338:	2101      	movs	r1, #1
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f9ed 	bl	800271a <bno055_set_page>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <bno055_mag_conf+0x30>
        return err;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	e04b      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800234e:	2100      	movs	r1, #0
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f84c 	bl	80023ee <bno055_set_opmode>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <bno055_mag_conf+0x46>
        return err;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	e040      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002364:	200c      	movs	r0, #12
 8002366:	f001 fa1b 	bl	80037a0 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	78bb      	ldrb	r3, [r7, #2]
 800236e:	4313      	orrs	r3, r2
 8002370:	b2da      	uxtb	r2, r3
 8002372:	787b      	ldrb	r3, [r7, #1]
 8002374:	4313      	orrs	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800237a:	687c      	ldr	r4, [r7, #4]
 800237c:	2301      	movs	r3, #1
 800237e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002380:	f107 030e 	add.w	r3, r7, #14
 8002384:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002386:	2309      	movs	r3, #9
 8002388:	9327      	str	r3, [sp, #156]	@ 0x9c
 800238a:	4668      	mov	r0, sp
 800238c:	f104 0310 	add.w	r3, r4, #16
 8002390:	229c      	movs	r2, #156	@ 0x9c
 8002392:	4619      	mov	r1, r3
 8002394:	f005 ff4d 	bl	8008232 <memcpy>
 8002398:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800239c:	f000 f98f 	bl	80026be <bno055_write_regs>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <bno055_mag_conf+0x90>
        return err;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	e01b      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f81a 	bl	80023ee <bno055_set_opmode>
 80023ba:	4603      	mov	r3, r0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <bno055_mag_conf+0xaa>
        return err;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	e00e      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80023c8:	2018      	movs	r0, #24
 80023ca:	f001 f9e9 	bl	80037a0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f9a2 	bl	800271a <bno055_set_page>
 80023d6:	4603      	mov	r3, r0
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <bno055_mag_conf+0xc6>
        return err;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	e000      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}

080023ee <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80023ee:	b590      	push	{r4, r7, lr}
 80023f0:	b0af      	sub	sp, #188	@ 0xbc
 80023f2:	af2a      	add	r7, sp, #168	@ 0xa8
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80023fa:	687c      	ldr	r4, [r7, #4]
 80023fc:	2301      	movs	r3, #1
 80023fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002400:	1cfb      	adds	r3, r7, #3
 8002402:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002404:	233d      	movs	r3, #61	@ 0x3d
 8002406:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002408:	4668      	mov	r0, sp
 800240a:	f104 0310 	add.w	r3, r4, #16
 800240e:	229c      	movs	r2, #156	@ 0x9c
 8002410:	4619      	mov	r1, r3
 8002412:	f005 ff0e 	bl	8008232 <memcpy>
 8002416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800241a:	f000 f950 	bl	80026be <bno055_write_regs>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	e003      	b.n	8002434 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800242c:	2018      	movs	r0, #24
 800242e:	f001 f9b7 	bl	80037a0 <HAL_Delay>
    return BNO_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}

0800243c <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b0af      	sub	sp, #188	@ 0xbc
 8002440:	af2a      	add	r7, sp, #168	@ 0xa8
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	70fb      	strb	r3, [r7, #3]
 800244e:	460b      	mov	r3, r1
 8002450:	70bb      	strb	r3, [r7, #2]
 8002452:	4613      	mov	r3, r2
 8002454:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002456:	2100      	movs	r1, #0
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ffc8 	bl	80023ee <bno055_set_opmode>
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <bno055_set_unit+0x30>
        return err;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	e04b      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f953 	bl	800271a <bno055_set_page>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <bno055_set_unit+0x46>
        return err;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	e040      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	78bb      	ldrb	r3, [r7, #2]
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	787b      	ldrb	r3, [r7, #1]
 800248c:	4313      	orrs	r3, r2
 800248e:	b2da      	uxtb	r2, r3
 8002490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002494:	4313      	orrs	r3, r2
 8002496:	b2db      	uxtb	r3, r3
 8002498:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 800249a:	687c      	ldr	r4, [r7, #4]
 800249c:	2301      	movs	r3, #1
 800249e:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024a0:	f107 030e 	add.w	r3, r7, #14
 80024a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024a6:	233b      	movs	r3, #59	@ 0x3b
 80024a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024aa:	4668      	mov	r0, sp
 80024ac:	f104 0310 	add.w	r3, r4, #16
 80024b0:	229c      	movs	r2, #156	@ 0x9c
 80024b2:	4619      	mov	r1, r3
 80024b4:	f005 febd 	bl	8008232 <memcpy>
 80024b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024bc:	f000 f8ff 	bl	80026be <bno055_write_regs>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <bno055_set_unit+0x92>
        return err;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	e01a      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	78ba      	ldrb	r2, [r7, #2]
 80024d2:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	787a      	ldrb	r2, [r7, #1]
 80024d8:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024e0:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff7d 	bl	80023ee <bno055_set_opmode>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <bno055_set_unit+0xc6>
        return err;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	e000      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bd90      	pop	{r4, r7, pc}

0800250c <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b0af      	sub	sp, #188	@ 0xbc
 8002510:	af2a      	add	r7, sp, #168	@ 0xa8
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800251e:	2304      	movs	r3, #4
 8002520:	e04d      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002522:	2100      	movs	r1, #0
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff62 	bl	80023ee <bno055_set_opmode>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <bno055_set_pwr_mode+0x2c>
        return err;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	e042      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002538:	2100      	movs	r1, #0
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8ed 	bl	800271a <bno055_set_page>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <bno055_set_pwr_mode+0x42>
        return err;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	e037      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 800254e:	687c      	ldr	r4, [r7, #4]
 8002550:	2301      	movs	r3, #1
 8002552:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002554:	1cfb      	adds	r3, r7, #3
 8002556:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002558:	233e      	movs	r3, #62	@ 0x3e
 800255a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800255c:	4668      	mov	r0, sp
 800255e:	f104 0310 	add.w	r3, r4, #16
 8002562:	229c      	movs	r2, #156	@ 0x9c
 8002564:	4619      	mov	r1, r3
 8002566:	f005 fe64 	bl	8008232 <memcpy>
 800256a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800256e:	f000 f8a6 	bl	80026be <bno055_write_regs>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	e01e      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002586:	2100      	movs	r1, #0
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f8c6 	bl	800271a <bno055_set_page>
 800258e:	4603      	mov	r3, r0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <bno055_set_pwr_mode+0x90>
        return err;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	e010      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	791b      	ldrb	r3, [r3, #4]
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff23 	bl	80023ee <bno055_set_opmode>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <bno055_set_pwr_mode+0xaa>
        return err;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	e003      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 80025b6:	2002      	movs	r0, #2
 80025b8:	f001 f8f2 	bl	80037a0 <HAL_Delay>
    return BNO_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}

080025c6 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80025c6:	b590      	push	{r4, r7, lr}
 80025c8:	b0af      	sub	sp, #188	@ 0xbc
 80025ca:	af2a      	add	r7, sp, #168	@ 0xa8
 80025cc:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80025d2:	687c      	ldr	r4, [r7, #4]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80025d8:	f107 030f 	add.w	r3, r7, #15
 80025dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80025de:	233f      	movs	r3, #63	@ 0x3f
 80025e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80025e2:	4668      	mov	r0, sp
 80025e4:	f104 0310 	add.w	r3, r4, #16
 80025e8:	229c      	movs	r2, #156	@ 0x9c
 80025ea:	4619      	mov	r1, r3
 80025ec:	f005 fe21 	bl	8008232 <memcpy>
 80025f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025f4:	f000 f863 	bl	80026be <bno055_write_regs>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b0af      	sub	sp, #188	@ 0xbc
 8002610:	af2a      	add	r7, sp, #168	@ 0xa8
 8002612:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002618:	687c      	ldr	r4, [r7, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	9329      	str	r3, [sp, #164]	@ 0xa4
 800261e:	f107 030f 	add.w	r3, r7, #15
 8002622:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002624:	233f      	movs	r3, #63	@ 0x3f
 8002626:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002628:	4668      	mov	r0, sp
 800262a:	f104 0310 	add.w	r3, r4, #16
 800262e:	229c      	movs	r2, #156	@ 0x9c
 8002630:	4619      	mov	r1, r3
 8002632:	f005 fdfe 	bl	8008232 <memcpy>
 8002636:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800263a:	f000 f840 	bl	80026be <bno055_write_regs>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <bno055_on+0x3e>
    }
    return BNO_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}

08002652 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8002652:	b084      	sub	sp, #16
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af02      	add	r7, sp, #8
 800265a:	f107 0c10 	add.w	ip, r7, #16
 800265e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002662:	6938      	ldr	r0, [r7, #16]
 8002664:	7dbb      	ldrb	r3, [r7, #22]
 8002666:	4619      	mov	r1, r3
 8002668:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2301      	movs	r3, #1
 8002674:	f002 f872 	bl	800475c <HAL_I2C_Master_Transmit>
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002682:	2301      	movs	r3, #1
 8002684:	e014      	b.n	80026b0 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8002686:	6938      	ldr	r0, [r7, #16]
 8002688:	7dbb      	ldrb	r3, [r7, #22]
 800268a:	4619      	mov	r1, r3
 800268c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002690:	b29b      	uxth	r3, r3
 8002692:	f04f 32ff 	mov.w	r2, #4294967295
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800269c:	f002 f95c 	bl	8004958 <HAL_I2C_Master_Receive>
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026ba:	b004      	add	sp, #16
 80026bc:	4770      	bx	lr

080026be <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80026be:	b084      	sub	sp, #16
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af04      	add	r7, sp, #16
 80026c6:	f107 0418 	add.w	r4, r7, #24
 80026ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80026ce:	69b8      	ldr	r0, [r7, #24]
 80026d0:	7fbb      	ldrb	r3, [r7, #30]
 80026d2:	461d      	mov	r5, r3
 80026d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026de:	b299      	uxth	r1, r3
 80026e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f04f 34ff 	mov.w	r4, #4294967295
 80026ea:	9402      	str	r4, [sp, #8]
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	4629      	mov	r1, r5
 80026f8:	f002 fb60 	bl	8004dbc <HAL_I2C_Mem_Write>
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002716:	b004      	add	sp, #16
 8002718:	4770      	bx	lr

0800271a <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b0af      	sub	sp, #188	@ 0xbc
 800271e:	af2a      	add	r7, sp, #168	@ 0xa8
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7b5a      	ldrb	r2, [r3, #13]
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <bno055_set_page+0x1a>
        return BNO_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e024      	b.n	800277e <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d901      	bls.n	800273e <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800273a:	2302      	movs	r3, #2
 800273c:	e01f      	b.n	800277e <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 800273e:	687c      	ldr	r4, [r7, #4]
 8002740:	2301      	movs	r3, #1
 8002742:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002744:	1cfb      	adds	r3, r7, #3
 8002746:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002748:	2307      	movs	r3, #7
 800274a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800274c:	4668      	mov	r0, sp
 800274e:	f104 0310 	add.w	r3, r4, #16
 8002752:	229c      	movs	r2, #156	@ 0x9c
 8002754:	4619      	mov	r1, r3
 8002756:	f005 fd6c 	bl	8008232 <memcpy>
 800275a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800275e:	f7ff ffae 	bl	80026be <bno055_write_regs>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <bno055_set_page+0x56>
        return err;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	e006      	b.n	800277e <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002776:	2002      	movs	r0, #2
 8002778:	f001 f812 	bl	80037a0 <HAL_Delay>
    return BNO_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
	...

08002788 <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b06      	cmp	r3, #6
 8002796:	d81f      	bhi.n	80027d8 <bno055_err_str+0x50>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <bno055_err_str+0x18>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027bd 	.word	0x080027bd
 80027a4:	080027c1 	.word	0x080027c1
 80027a8:	080027c5 	.word	0x080027c5
 80027ac:	080027d1 	.word	0x080027d1
 80027b0:	080027c9 	.word	0x080027c9
 80027b4:	080027cd 	.word	0x080027cd
 80027b8:	080027d5 	.word	0x080027d5
        case BNO_OK:
            return "[BNO] Ok!";
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <bno055_err_str+0x60>)
 80027be:	e00c      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <bno055_err_str+0x64>)
 80027c2:	e00a      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <bno055_err_str+0x68>)
 80027c6:	e008      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 80027c8:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <bno055_err_str+0x6c>)
 80027ca:	e006      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <bno055_err_str+0x70>)
 80027ce:	e004      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <bno055_err_str+0x74>)
 80027d2:	e002      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 80027d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <bno055_err_str+0x78>)
 80027d6:	e000      	b.n	80027da <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <bno055_err_str+0x60>)
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	08009d10 	.word	0x08009d10
 80027ec:	08009d1c 	.word	0x08009d1c
 80027f0:	08009d30 	.word	0x08009d30
 80027f4:	08009d4c 	.word	0x08009d4c
 80027f8:	08009d70 	.word	0x08009d70
 80027fc:	08009d88 	.word	0x08009d88
 8002800:	08009d94 	.word	0x08009d94

08002804 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800280c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002810:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800281c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002820:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002824:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800282c:	e000      	b.n	8002830 <ITM_SendChar+0x2c>
    {
      __NOP();
 800282e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002830:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f9      	beq.n	800282e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800283a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <ADC_Select_CH0>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Select_CH0 (void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800285a:	463b      	mov	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_0;
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800286e:	2302      	movs	r3, #2
 8002870:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002872:	463b      	mov	r3, r7
 8002874:	4619      	mov	r1, r3
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <ADC_Select_CH0+0x3c>)
 8002878:	f001 f97a 	bl	8003b70 <HAL_ADC_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8002882:	f000 fca7 	bl	80031d4 <Error_Handler>
	  }
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200001f8 	.word	0x200001f8

08002894 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800289a:	463b      	mov	r3, r7
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80028ae:	2302      	movs	r3, #2
 80028b0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b2:	463b      	mov	r3, r7
 80028b4:	4619      	mov	r1, r3
 80028b6:	4806      	ldr	r0, [pc, #24]	@ (80028d0 <ADC_Select_CH1+0x3c>)
 80028b8:	f001 f95a 	bl	8003b70 <HAL_ADC_ConfigChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 80028c2:	f000 fc87 	bl	80031d4 <Error_Handler>
	  }
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200001f8 	.word	0x200001f8

080028d4 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80028da:	463b      	mov	r3, r7
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_4;
 80028e6:	2304      	movs	r3, #4
 80028e8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80028ee:	2302      	movs	r3, #2
 80028f0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028f2:	463b      	mov	r3, r7
 80028f4:	4619      	mov	r1, r3
 80028f6:	4806      	ldr	r0, [pc, #24]	@ (8002910 <ADC_Select_CH4+0x3c>)
 80028f8:	f001 f93a 	bl	8003b70 <HAL_ADC_ConfigChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <ADC_Select_CH4+0x32>
	  {
		Error_Handler();
 8002902:	f000 fc67 	bl	80031d4 <Error_Handler>
	  }
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200001f8 	.word	0x200001f8

08002914 <remap_val>:


float remap_val(float value, float in_min, float in_max, float out_min, float out_max)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	ed87 0a05 	vstr	s0, [r7, #20]
 800291e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002922:	ed87 1a03 	vstr	s2, [r7, #12]
 8002926:	edc7 1a02 	vstr	s3, [r7, #8]
 800292a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800292e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002932:	edd7 7a04 	vldr	s15, [r7, #16]
 8002936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800293a:	edd7 6a01 	vldr	s13, [r7, #4]
 800293e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002942:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002946:	ee67 6a27 	vmul.f32	s13, s14, s15
 800294a:	ed97 7a03 	vldr	s14, [r7, #12]
 800294e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800295a:	edd7 7a02 	vldr	s15, [r7, #8]
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002974:	b0b7      	sub	sp, #220	@ 0xdc
 8002976:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002978:	f000 fea0 	bl	80036bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800297c:	f000 fa2e 	bl	8002ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002980:	f000 fb9c 	bl	80030bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002984:	f000 fb70 	bl	8003068 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002988:	f000 fa90 	bl	8002eac <MX_ADC1_Init>
  MX_I2C1_Init();
 800298c:	f000 fac8 	bl	8002f20 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002990:	f000 faf4 	bl	8002f7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002994:	2104      	movs	r1, #4
 8002996:	48a2      	ldr	r0, [pc, #648]	@ (8002c20 <main+0x2b0>)
 8002998:	f003 fc66 	bl	8006268 <HAL_TIM_PWM_Start>



  bno = (bno055_t)
 800299c:	4ba1      	ldr	r3, [pc, #644]	@ (8002c24 <main+0x2b4>)
 800299e:	4618      	mov	r0, r3
 80029a0:	23ac      	movs	r3, #172	@ 0xac
 80029a2:	461a      	mov	r2, r3
 80029a4:	2100      	movs	r1, #0
 80029a6:	f005 fbc5 	bl	8008134 <memset>
 80029aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002c24 <main+0x2b4>)
 80029ac:	4a9e      	ldr	r2, [pc, #632]	@ (8002c28 <main+0x2b8>)
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	4b9c      	ldr	r3, [pc, #624]	@ (8002c24 <main+0x2b4>)
 80029b2:	2208      	movs	r2, #8
 80029b4:	711a      	strb	r2, [r3, #4]
 80029b6:	4b9b      	ldr	r3, [pc, #620]	@ (8002c24 <main+0x2b4>)
 80029b8:	2229      	movs	r2, #41	@ 0x29
 80029ba:	719a      	strb	r2, [r3, #6]
  {
	.i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU, ._temp_unit = 0,
	// .ptr = &bno,
  };
  HAL_Delay(1000);
 80029bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029c0:	f000 feee 	bl	80037a0 <HAL_Delay>

  if ((err = bno055_init(&bno)) == BNO_OK)
 80029c4:	4897      	ldr	r0, [pc, #604]	@ (8002c24 <main+0x2b4>)
 80029c6:	f7fe fa6f 	bl	8000ea8 <bno055_init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b97      	ldr	r3, [pc, #604]	@ (8002c2c <main+0x2bc>)
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	4b96      	ldr	r3, [pc, #600]	@ (8002c2c <main+0x2bc>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <main+0x78>
  {
  	  printf("[+] BNO055 init success\r\n");
 80029da:	4895      	ldr	r0, [pc, #596]	@ (8002c30 <main+0x2c0>)
 80029dc:	f005 faca 	bl	8007f74 <puts>
	  HAL_Delay(100);
 80029e0:	2064      	movs	r0, #100	@ 0x64
 80029e2:	f000 fedd 	bl	80037a0 <HAL_Delay>
 80029e6:	e00d      	b.n	8002a04 <main+0x94>
  }
  else
  {
	  printf("[!] BNO055 init failed\r\n");
 80029e8:	4892      	ldr	r0, [pc, #584]	@ (8002c34 <main+0x2c4>)
 80029ea:	f005 fac3 	bl	8007f74 <puts>
	  printf("%s\n", bno055_err_str(err));
 80029ee:	4b8f      	ldr	r3, [pc, #572]	@ (8002c2c <main+0x2bc>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fec8 	bl	8002788 <bno055_err_str>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f005 faba 	bl	8007f74 <puts>
	  Error_Handler();
 8002a00:	f000 fbe8 	bl	80031d4 <Error_Handler>
  }
	  HAL_Delay(100);
 8002a04:	2064      	movs	r0, #100	@ 0x64
 8002a06:	f000 fecb 	bl	80037a0 <HAL_Delay>
	  err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	4883      	ldr	r0, [pc, #524]	@ (8002c24 <main+0x2b4>)
 8002a16:	f7ff fd11 	bl	800243c <bno055_set_unit>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b83      	ldr	r3, [pc, #524]	@ (8002c2c <main+0x2bc>)
 8002a20:	701a      	strb	r2, [r3, #0]
  if (err != BNO_OK)
 8002a22:	4b82      	ldr	r3, [pc, #520]	@ (8002c2c <main+0x2bc>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <main+0xc8>
  {
	  printf("[BNO] Failed to set units. Err: %d\r\n", err);
 8002a2a:	4b80      	ldr	r3, [pc, #512]	@ (8002c2c <main+0x2bc>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4881      	ldr	r0, [pc, #516]	@ (8002c38 <main+0x2c8>)
 8002a32:	f005 fa37 	bl	8007ea4 <iprintf>
 8002a36:	e002      	b.n	8002a3e <main+0xce>
  }
  else
  {
	  printf("[BNO] Unit selection success\r\n");
 8002a38:	4880      	ldr	r0, [pc, #512]	@ (8002c3c <main+0x2cc>)
 8002a3a:	f005 fa9b 	bl	8007f74 <puts>
  }

  HAL_Delay(1000);
 8002a3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a42:	f000 fead 	bl	80037a0 <HAL_Delay>
  bno055_euler_t eul = {0, 0, 0};
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bno.euler(&bno, &eul);
 8002a58:	4b72      	ldr	r3, [pc, #456]	@ (8002c24 <main+0x2b4>)
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5e:	463a      	mov	r2, r7
 8002a60:	4611      	mov	r1, r2
 8002a62:	4870      	ldr	r0, [pc, #448]	@ (8002c24 <main+0x2b4>)
 8002a64:	4798      	blx	r3
	  new_yaw = (int)eul.yaw;
 8002a66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a6e:	ee17 2a90 	vmov	r2, s15
 8002a72:	4b73      	ldr	r3, [pc, #460]	@ (8002c40 <main+0x2d0>)
 8002a74:	601a      	str	r2, [r3, #0]
	  new_yaw = (new_yaw + 180) % 360;
 8002a76:	4b72      	ldr	r3, [pc, #456]	@ (8002c40 <main+0x2d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 8002a7e:	08d3      	lsrs	r3, r2, #3
 8002a80:	4970      	ldr	r1, [pc, #448]	@ (8002c44 <main+0x2d4>)
 8002a82:	fba1 1303 	umull	r1, r3, r1, r3
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	4a6b      	ldr	r2, [pc, #428]	@ (8002c40 <main+0x2d0>)
 8002a94:	6013      	str	r3, [r2, #0]

	  ADC_Select_CH0();
 8002a96:	f7ff fedd 	bl	8002854 <ADC_Select_CH0>
	  HAL_ADC_Start(&hadc1);
 8002a9a:	486b      	ldr	r0, [pc, #428]	@ (8002c48 <main+0x2d8>)
 8002a9c:	f000 fee8 	bl	8003870 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8002aa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002aa4:	4868      	ldr	r0, [pc, #416]	@ (8002c48 <main+0x2d8>)
 8002aa6:	f000 ffca 	bl	8003a3e <HAL_ADC_PollForConversion>
	  pot_one = HAL_ADC_GetValue(&hadc1);
 8002aaa:	4867      	ldr	r0, [pc, #412]	@ (8002c48 <main+0x2d8>)
 8002aac:	f001 f852 	bl	8003b54 <HAL_ADC_GetValue>
 8002ab0:	ee07 0a90 	vmov	s15, r0
 8002ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab8:	4b64      	ldr	r3, [pc, #400]	@ (8002c4c <main+0x2dc>)
 8002aba:	edc3 7a00 	vstr	s15, [r3]
	  kp = pot_one / 200;
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <main+0x2dc>)
 8002ac0:	ed93 7a00 	vldr	s14, [r3]
 8002ac4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002c50 <main+0x2e0>
 8002ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002acc:	4b61      	ldr	r3, [pc, #388]	@ (8002c54 <main+0x2e4>)
 8002ace:	edc3 7a00 	vstr	s15, [r3]
	  HAL_ADC_Stop(&hadc1);
 8002ad2:	485d      	ldr	r0, [pc, #372]	@ (8002c48 <main+0x2d8>)
 8002ad4:	f000 ff80 	bl	80039d8 <HAL_ADC_Stop>

	  ADC_Select_CH1();
 8002ad8:	f7ff fedc 	bl	8002894 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8002adc:	485a      	ldr	r0, [pc, #360]	@ (8002c48 <main+0x2d8>)
 8002ade:	f000 fec7 	bl	8003870 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8002ae2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ae6:	4858      	ldr	r0, [pc, #352]	@ (8002c48 <main+0x2d8>)
 8002ae8:	f000 ffa9 	bl	8003a3e <HAL_ADC_PollForConversion>
	  pot_two = HAL_ADC_GetValue(&hadc1);
 8002aec:	4856      	ldr	r0, [pc, #344]	@ (8002c48 <main+0x2d8>)
 8002aee:	f001 f831 	bl	8003b54 <HAL_ADC_GetValue>
 8002af2:	ee07 0a90 	vmov	s15, r0
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	4b57      	ldr	r3, [pc, #348]	@ (8002c58 <main+0x2e8>)
 8002afc:	edc3 7a00 	vstr	s15, [r3]
	  ki = pot_two / 800;
 8002b00:	4b55      	ldr	r3, [pc, #340]	@ (8002c58 <main+0x2e8>)
 8002b02:	ed93 7a00 	vldr	s14, [r3]
 8002b06:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8002c5c <main+0x2ec>
 8002b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b0e:	4b54      	ldr	r3, [pc, #336]	@ (8002c60 <main+0x2f0>)
 8002b10:	edc3 7a00 	vstr	s15, [r3]
	  HAL_ADC_Stop(&hadc1);
 8002b14:	484c      	ldr	r0, [pc, #304]	@ (8002c48 <main+0x2d8>)
 8002b16:	f000 ff5f 	bl	80039d8 <HAL_ADC_Stop>

	  ADC_Select_CH4();
 8002b1a:	f7ff fedb 	bl	80028d4 <ADC_Select_CH4>
	  HAL_ADC_Start(&hadc1);
 8002b1e:	484a      	ldr	r0, [pc, #296]	@ (8002c48 <main+0x2d8>)
 8002b20:	f000 fea6 	bl	8003870 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8002b24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b28:	4847      	ldr	r0, [pc, #284]	@ (8002c48 <main+0x2d8>)
 8002b2a:	f000 ff88 	bl	8003a3e <HAL_ADC_PollForConversion>
	  pot_three = HAL_ADC_GetValue(&hadc1);
 8002b2e:	4846      	ldr	r0, [pc, #280]	@ (8002c48 <main+0x2d8>)
 8002b30:	f001 f810 	bl	8003b54 <HAL_ADC_GetValue>
 8002b34:	ee07 0a90 	vmov	s15, r0
 8002b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3c:	4b49      	ldr	r3, [pc, #292]	@ (8002c64 <main+0x2f4>)
 8002b3e:	edc3 7a00 	vstr	s15, [r3]
	  kd = pot_three;
 8002b42:	4b48      	ldr	r3, [pc, #288]	@ (8002c64 <main+0x2f4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a48      	ldr	r2, [pc, #288]	@ (8002c68 <main+0x2f8>)
 8002b48:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8002b4a:	483f      	ldr	r0, [pc, #252]	@ (8002c48 <main+0x2d8>)
 8002b4c:	f000 ff44 	bl	80039d8 <HAL_ADC_Stop>


	  heading = new_yaw;
 8002b50:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <main+0x2d0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5c:	4b43      	ldr	r3, [pc, #268]	@ (8002c6c <main+0x2fc>)
 8002b5e:	edc3 7a00 	vstr	s15, [r3]
	  heading_error = heading_setpoint - heading;
 8002b62:	4b43      	ldr	r3, [pc, #268]	@ (8002c70 <main+0x300>)
 8002b64:	ed93 7a00 	vldr	s14, [r3]
 8002b68:	4b40      	ldr	r3, [pc, #256]	@ (8002c6c <main+0x2fc>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b72:	4b40      	ldr	r3, [pc, #256]	@ (8002c74 <main+0x304>)
 8002b74:	edc3 7a00 	vstr	s15, [r3]
	  PID_p = kp *heading_error;
 8002b78:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <main+0x2e4>)
 8002b7a:	ed93 7a00 	vldr	s14, [r3]
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c74 <main+0x304>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b88:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <main+0x308>)
 8002b8a:	edc3 7a00 	vstr	s15, [r3]

	  heading_difference = heading_error - heading_prev_error;
 8002b8e:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <main+0x304>)
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <main+0x30c>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9e:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <main+0x310>)
 8002ba0:	edc3 7a00 	vstr	s15, [r3]
	  PID_d = kd*((heading_error - heading_prev_error)/period);
 8002ba4:	4b33      	ldr	r3, [pc, #204]	@ (8002c74 <main+0x304>)
 8002ba6:	ed93 7a00 	vldr	s14, [r3]
 8002baa:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <main+0x30c>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bb4:	4b33      	ldr	r3, [pc, #204]	@ (8002c84 <main+0x314>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc4:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <main+0x2f8>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bce:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <main+0x318>)
 8002bd0:	edc3 7a00 	vstr	s15, [r3]

	  if(heading_error > -3 && heading_error < 3)
 8002bd4:	4b27      	ldr	r3, [pc, #156]	@ (8002c74 <main+0x304>)
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8002bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be6:	dd53      	ble.n	8002c90 <main+0x320>
 8002be8:	4b22      	ldr	r3, [pc, #136]	@ (8002c74 <main+0x304>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfa:	d549      	bpl.n	8002c90 <main+0x320>
	  {
		  PID_i = PID_i + (ki * heading_error);
 8002bfc:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <main+0x2f0>)
 8002bfe:	ed93 7a00 	vldr	s14, [r3]
 8002c02:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <main+0x304>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <main+0x31c>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c16:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <main+0x31c>)
 8002c18:	edc3 7a00 	vstr	s15, [r3]
 8002c1c:	e03c      	b.n	8002c98 <main+0x328>
 8002c1e:	bf00      	nop
 8002c20:	20000294 	.word	0x20000294
 8002c24:	20000324 	.word	0x20000324
 8002c28:	20000240 	.word	0x20000240
 8002c2c:	200003d0 	.word	0x200003d0
 8002c30:	08009dac 	.word	0x08009dac
 8002c34:	08009dc8 	.word	0x08009dc8
 8002c38:	08009de0 	.word	0x08009de0
 8002c3c:	08009e08 	.word	0x08009e08
 8002c40:	200003e0 	.word	0x200003e0
 8002c44:	16c16c17 	.word	0x16c16c17
 8002c48:	200001f8 	.word	0x200001f8
 8002c4c:	20000404 	.word	0x20000404
 8002c50:	43480000 	.word	0x43480000
 8002c54:	200003f8 	.word	0x200003f8
 8002c58:	20000408 	.word	0x20000408
 8002c5c:	44480000 	.word	0x44480000
 8002c60:	200003fc 	.word	0x200003fc
 8002c64:	2000040c 	.word	0x2000040c
 8002c68:	20000400 	.word	0x20000400
 8002c6c:	200003d4 	.word	0x200003d4
 8002c70:	20000000 	.word	0x20000000
 8002c74:	200003d8 	.word	0x200003d8
 8002c78:	200003e8 	.word	0x200003e8
 8002c7c:	200003dc 	.word	0x200003dc
 8002c80:	200003e4 	.word	0x200003e4
 8002c84:	20000004 	.word	0x20000004
 8002c88:	200003f0 	.word	0x200003f0
 8002c8c:	200003ec 	.word	0x200003ec
	  }
	  else
	  {
		  PID_i = 0;
 8002c90:	4b3f      	ldr	r3, [pc, #252]	@ (8002d90 <main+0x420>)
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
	  }

	  PID_total = PID_p + PID_i + PID_d;
 8002c98:	4b3e      	ldr	r3, [pc, #248]	@ (8002d94 <main+0x424>)
 8002c9a:	ed93 7a00 	vldr	s14, [r3]
 8002c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <main+0x420>)
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <main+0x428>)
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8002d9c <main+0x42c>)
 8002cb4:	edc3 7a00 	vstr	s15, [r3]

	  PID_total = remap_val(PID_total, -3000, 3000, 250, 1250);
 8002cb8:	4b38      	ldr	r3, [pc, #224]	@ (8002d9c <main+0x42c>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	ed9f 2a38 	vldr	s4, [pc, #224]	@ 8002da0 <main+0x430>
 8002cc2:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8002da4 <main+0x434>
 8002cc6:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8002da8 <main+0x438>
 8002cca:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8002dac <main+0x43c>
 8002cce:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd2:	f7ff fe1f 	bl	8002914 <remap_val>
 8002cd6:	eef0 7a40 	vmov.f32	s15, s0
 8002cda:	4b30      	ldr	r3, [pc, #192]	@ (8002d9c <main+0x42c>)
 8002cdc:	edc3 7a00 	vstr	s15, [r3]

	  if(PID_total < 138)
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d9c <main+0x42c>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002db0 <main+0x440>
 8002cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	d502      	bpl.n	8002cfa <main+0x38a>
	  {
		  PID_total = 138;
 8002cf4:	4b29      	ldr	r3, [pc, #164]	@ (8002d9c <main+0x42c>)
 8002cf6:	4a2f      	ldr	r2, [pc, #188]	@ (8002db4 <main+0x444>)
 8002cf8:	601a      	str	r2, [r3, #0]
	  }
	  if(PID_total > 1111)
 8002cfa:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <main+0x42c>)
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002db8 <main+0x448>
 8002d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0c:	dd02      	ble.n	8002d14 <main+0x3a4>
	  {
		  PID_total = 1111;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	@ (8002d9c <main+0x42c>)
 8002d10:	4a2a      	ldr	r2, [pc, #168]	@ (8002dbc <main+0x44c>)
 8002d12:	601a      	str	r2, [r3, #0]
	  }


	  printf("K_p: %3.0f K_i: %2.2f  K_d: %4.0f New_Yaw: %ld PID_tot: %4.2f\r\n", kp, ki, kd, new_yaw, PID_total);
 8002d14:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc0 <main+0x450>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc1d 	bl	8000558 <__aeabi_f2d>
 8002d1e:	4682      	mov	sl, r0
 8002d20:	468b      	mov	fp, r1
 8002d22:	4b28      	ldr	r3, [pc, #160]	@ (8002dc4 <main+0x454>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fc16 	bl	8000558 <__aeabi_f2d>
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	460d      	mov	r5, r1
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <main+0x458>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc0f 	bl	8000558 <__aeabi_f2d>
 8002d3a:	4680      	mov	r8, r0
 8002d3c:	4689      	mov	r9, r1
 8002d3e:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <main+0x45c>)
 8002d40:	681e      	ldr	r6, [r3, #0]
 8002d42:	4b16      	ldr	r3, [pc, #88]	@ (8002d9c <main+0x42c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fc06 	bl	8000558 <__aeabi_f2d>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002d54:	9604      	str	r6, [sp, #16]
 8002d56:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002d5a:	e9cd 4500 	strd	r4, r5, [sp]
 8002d5e:	4652      	mov	r2, sl
 8002d60:	465b      	mov	r3, fp
 8002d62:	481b      	ldr	r0, [pc, #108]	@ (8002dd0 <main+0x460>)
 8002d64:	f005 f89e 	bl	8007ea4 <iprintf>
	  fflush(stdout);
 8002d68:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <main+0x464>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 ffc2 	bl	8007cf8 <fflush>

	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PID_total);
 8002d74:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <main+0x42c>)
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <main+0x468>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d82:	ee17 2a90 	vmov	r2, s15
 8002d86:	639a      	str	r2, [r3, #56]	@ 0x38

	  HAL_Delay(10);
 8002d88:	200a      	movs	r0, #10
 8002d8a:	f000 fd09 	bl	80037a0 <HAL_Delay>
	  bno.euler(&bno, &eul);
 8002d8e:	e663      	b.n	8002a58 <main+0xe8>
 8002d90:	200003ec 	.word	0x200003ec
 8002d94:	200003e8 	.word	0x200003e8
 8002d98:	200003f0 	.word	0x200003f0
 8002d9c:	200003f4 	.word	0x200003f4
 8002da0:	449c4000 	.word	0x449c4000
 8002da4:	437a0000 	.word	0x437a0000
 8002da8:	453b8000 	.word	0x453b8000
 8002dac:	c53b8000 	.word	0xc53b8000
 8002db0:	430a0000 	.word	0x430a0000
 8002db4:	430a0000 	.word	0x430a0000
 8002db8:	448ae000 	.word	0x448ae000
 8002dbc:	448ae000 	.word	0x448ae000
 8002dc0:	200003f8 	.word	0x200003f8
 8002dc4:	200003fc 	.word	0x200003fc
 8002dc8:	20000400 	.word	0x20000400
 8002dcc:	200003e0 	.word	0x200003e0
 8002dd0:	08009e28 	.word	0x08009e28
 8002dd4:	20000020 	.word	0x20000020
 8002dd8:	20000294 	.word	0x20000294

08002ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b094      	sub	sp, #80	@ 0x50
 8002de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de2:	f107 0320 	add.w	r3, r7, #32
 8002de6:	2230      	movs	r2, #48	@ 0x30
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f005 f9a2 	bl	8008134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <SystemClock_Config+0xc8>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <SystemClock_Config+0xc8>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e10:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <SystemClock_Config+0xc8>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <SystemClock_Config+0xcc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a20      	ldr	r2, [pc, #128]	@ (8002ea8 <SystemClock_Config+0xcc>)
 8002e26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <SystemClock_Config+0xcc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e40:	2310      	movs	r3, #16
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e44:	2302      	movs	r3, #2
 8002e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002e50:	2354      	movs	r3, #84	@ 0x54
 8002e52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e54:	2302      	movs	r3, #2
 8002e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e58:	2304      	movs	r3, #4
 8002e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e5c:	f107 0320 	add.w	r3, r7, #32
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fcc1 	bl	80057e8 <HAL_RCC_OscConfig>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e6c:	f000 f9b2 	bl	80031d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e70:	230f      	movs	r3, #15
 8002e72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e74:	2302      	movs	r3, #2
 8002e76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e86:	f107 030c 	add.w	r3, r7, #12
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 ff23 	bl	8005cd8 <HAL_RCC_ClockConfig>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002e98:	f000 f99c 	bl	80031d4 <Error_Handler>
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3750      	adds	r7, #80	@ 0x50
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40007000 	.word	0x40007000

08002eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002eb2:	4a19      	ldr	r2, [pc, #100]	@ (8002f18 <MX_ADC1_Init+0x6c>)
 8002eb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002eb6:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002eb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ec4:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002eca:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ed0:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ede:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f1c <MX_ADC1_Init+0x70>)
 8002ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002eec:	2203      	movs	r2, #3
 8002eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002efe:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <MX_ADC1_Init+0x68>)
 8002f00:	f000 fc72 	bl	80037e8 <HAL_ADC_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8002f0a:	f000 f963 	bl	80031d4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200001f8 	.word	0x200001f8
 8002f18:	40012000 	.word	0x40012000
 8002f1c:	0f000001 	.word	0x0f000001

08002f20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f24:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f26:	4a13      	ldr	r2, [pc, #76]	@ (8002f74 <MX_I2C1_Init+0x54>)
 8002f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f2c:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <MX_I2C1_Init+0x58>)
 8002f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f4a:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f50:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f5c:	4804      	ldr	r0, [pc, #16]	@ (8002f70 <MX_I2C1_Init+0x50>)
 8002f5e:	f001 fab9 	bl	80044d4 <HAL_I2C_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f68:	f000 f934 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000240 	.word	0x20000240
 8002f74:	40005400 	.word	0x40005400
 8002f78:	000186a0 	.word	0x000186a0

08002f7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08e      	sub	sp, #56	@ 0x38
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f90:	f107 0320 	add.w	r3, r7, #32
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
 8002fa8:	615a      	str	r2, [r3, #20]
 8002faa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fac:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8002fae:	4a2d      	ldr	r2, [pc, #180]	@ (8003064 <MX_TIM3_Init+0xe8>)
 8002fb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8002fb4:	22b3      	movs	r2, #179	@ 0xb3
 8002fb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9333-1;
 8002fbe:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8002fc0:	f242 4274 	movw	r2, #9332	@ 0x2474
 8002fc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc6:	4b26      	ldr	r3, [pc, #152]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fcc:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fd2:	4823      	ldr	r0, [pc, #140]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8002fd4:	f003 f8a0 	bl	8006118 <HAL_TIM_Base_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002fde:	f000 f8f9 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fe8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fec:	4619      	mov	r1, r3
 8002fee:	481c      	ldr	r0, [pc, #112]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8002ff0:	f003 faac 	bl	800654c <HAL_TIM_ConfigClockSource>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002ffa:	f000 f8eb 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ffe:	4818      	ldr	r0, [pc, #96]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8003000:	f003 f8d9 	bl	80061b6 <HAL_TIM_PWM_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800300a:	f000 f8e3 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003016:	f107 0320 	add.w	r3, r7, #32
 800301a:	4619      	mov	r1, r3
 800301c:	4810      	ldr	r0, [pc, #64]	@ (8003060 <MX_TIM3_Init+0xe4>)
 800301e:	f003 fe35 	bl	8006c8c <HAL_TIMEx_MasterConfigSynchronization>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003028:	f000 f8d4 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800302c:	2360      	movs	r3, #96	@ 0x60
 800302e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	2204      	movs	r2, #4
 8003040:	4619      	mov	r1, r3
 8003042:	4807      	ldr	r0, [pc, #28]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8003044:	f003 f9c0 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800304e:	f000 f8c1 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003052:	4803      	ldr	r0, [pc, #12]	@ (8003060 <MX_TIM3_Init+0xe4>)
 8003054:	f000 f99a 	bl	800338c <HAL_TIM_MspPostInit>

}
 8003058:	bf00      	nop
 800305a:	3738      	adds	r7, #56	@ 0x38
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000294 	.word	0x20000294
 8003064:	40000400 	.word	0x40000400

08003068 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800306c:	4b11      	ldr	r3, [pc, #68]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 800306e:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <MX_USART2_UART_Init+0x50>)
 8003070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800307a:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003086:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 800308e:	220c      	movs	r2, #12
 8003090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003092:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800309e:	4805      	ldr	r0, [pc, #20]	@ (80030b4 <MX_USART2_UART_Init+0x4c>)
 80030a0:	f003 fe62 	bl	8006d68 <HAL_UART_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030aa:	f000 f893 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200002dc 	.word	0x200002dc
 80030b8:	40004400 	.word	0x40004400

080030bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	60da      	str	r2, [r3, #12]
 80030d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <MX_GPIO_Init+0xd4>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4a2d      	ldr	r2, [pc, #180]	@ (8003190 <MX_GPIO_Init+0xd4>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003190 <MX_GPIO_Init+0xd4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <MX_GPIO_Init+0xd4>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	4a26      	ldr	r2, [pc, #152]	@ (8003190 <MX_GPIO_Init+0xd4>)
 80030f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fe:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <MX_GPIO_Init+0xd4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <MX_GPIO_Init+0xd4>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a1f      	ldr	r2, [pc, #124]	@ (8003190 <MX_GPIO_Init+0xd4>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <MX_GPIO_Init+0xd4>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <MX_GPIO_Init+0xd4>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	4a18      	ldr	r2, [pc, #96]	@ (8003190 <MX_GPIO_Init+0xd4>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	@ 0x30
 8003136:	4b16      	ldr	r3, [pc, #88]	@ (8003190 <MX_GPIO_Init+0xd4>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8003142:	2200      	movs	r2, #0
 8003144:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003148:	4812      	ldr	r0, [pc, #72]	@ (8003194 <MX_GPIO_Init+0xd8>)
 800314a:	f001 f9a9 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800314e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003154:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4619      	mov	r1, r3
 8003164:	480c      	ldr	r0, [pc, #48]	@ (8003198 <MX_GPIO_Init+0xdc>)
 8003166:	f001 f817 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 800316a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	4804      	ldr	r0, [pc, #16]	@ (8003194 <MX_GPIO_Init+0xd8>)
 8003184:	f001 f808 	bl	8004198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003188:	bf00      	nop
 800318a:	3728      	adds	r7, #40	@ 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	40020000 	.word	0x40020000
 8003198:	40020800 	.word	0x40020800

0800319c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e009      	b.n	80031c2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	60ba      	str	r2, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fb24 	bl	8002804 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3301      	adds	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	dbf1      	blt.n	80031ae <_write+0x12>
  }
  return len;
 80031ca:	687b      	ldr	r3, [r7, #4]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <Error_Handler+0x8>

080031e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_MspInit+0x4c>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	4a0f      	ldr	r2, [pc, #60]	@ (800322c <HAL_MspInit+0x4c>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031f6:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <HAL_MspInit+0x4c>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4b09      	ldr	r3, [pc, #36]	@ (800322c <HAL_MspInit+0x4c>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	4a08      	ldr	r2, [pc, #32]	@ (800322c <HAL_MspInit+0x4c>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	@ 0x40
 8003212:	4b06      	ldr	r3, [pc, #24]	@ (800322c <HAL_MspInit+0x4c>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800321e:	2007      	movs	r0, #7
 8003220:	f000 ff86 	bl	8004130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40023800 	.word	0x40023800

08003230 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	@ 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a17      	ldr	r2, [pc, #92]	@ (80032ac <HAL_ADC_MspInit+0x7c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d127      	bne.n	80032a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <HAL_ADC_MspInit+0x80>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	4a15      	ldr	r2, [pc, #84]	@ (80032b0 <HAL_ADC_MspInit+0x80>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003260:	6453      	str	r3, [r2, #68]	@ 0x44
 8003262:	4b13      	ldr	r3, [pc, #76]	@ (80032b0 <HAL_ADC_MspInit+0x80>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <HAL_ADC_MspInit+0x80>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	4a0e      	ldr	r2, [pc, #56]	@ (80032b0 <HAL_ADC_MspInit+0x80>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6313      	str	r3, [r2, #48]	@ 0x30
 800327e:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <HAL_ADC_MspInit+0x80>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800328a:	2313      	movs	r3, #19
 800328c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800328e:	2303      	movs	r3, #3
 8003290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	4619      	mov	r1, r3
 800329c:	4805      	ldr	r0, [pc, #20]	@ (80032b4 <HAL_ADC_MspInit+0x84>)
 800329e:	f000 ff7b 	bl	8004198 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80032a2:	bf00      	nop
 80032a4:	3728      	adds	r7, #40	@ 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40012000 	.word	0x40012000
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40020000 	.word	0x40020000

080032b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	@ 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a19      	ldr	r2, [pc, #100]	@ (800333c <HAL_I2C_MspInit+0x84>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d12c      	bne.n	8003334 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <HAL_I2C_MspInit+0x88>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a17      	ldr	r2, [pc, #92]	@ (8003340 <HAL_I2C_MspInit+0x88>)
 80032e4:	f043 0302 	orr.w	r3, r3, #2
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <HAL_I2C_MspInit+0x88>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80032fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032fc:	2312      	movs	r3, #18
 80032fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003304:	2303      	movs	r3, #3
 8003306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003308:	2304      	movs	r3, #4
 800330a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4619      	mov	r1, r3
 8003312:	480c      	ldr	r0, [pc, #48]	@ (8003344 <HAL_I2C_MspInit+0x8c>)
 8003314:	f000 ff40 	bl	8004198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	4b08      	ldr	r3, [pc, #32]	@ (8003340 <HAL_I2C_MspInit+0x88>)
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <HAL_I2C_MspInit+0x88>)
 8003322:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003326:	6413      	str	r3, [r2, #64]	@ 0x40
 8003328:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_I2C_MspInit+0x88>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003334:	bf00      	nop
 8003336:	3728      	adds	r7, #40	@ 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40005400 	.word	0x40005400
 8003340:	40023800 	.word	0x40023800
 8003344:	40020400 	.word	0x40020400

08003348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0b      	ldr	r2, [pc, #44]	@ (8003384 <HAL_TIM_Base_MspInit+0x3c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10d      	bne.n	8003376 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_TIM_Base_MspInit+0x40>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	4a09      	ldr	r2, [pc, #36]	@ (8003388 <HAL_TIM_Base_MspInit+0x40>)
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	6413      	str	r3, [r2, #64]	@ 0x40
 800336a:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <HAL_TIM_Base_MspInit+0x40>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40000400 	.word	0x40000400
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 030c 	add.w	r3, r7, #12
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <HAL_TIM_MspPostInit+0x68>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d11d      	bne.n	80033ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_TIM_MspPostInit+0x6c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	4a10      	ldr	r2, [pc, #64]	@ (80033f8 <HAL_TIM_MspPostInit+0x6c>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <HAL_TIM_MspPostInit+0x6c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033ca:	2380      	movs	r3, #128	@ 0x80
 80033cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033da:	2302      	movs	r3, #2
 80033dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	4619      	mov	r1, r3
 80033e4:	4805      	ldr	r0, [pc, #20]	@ (80033fc <HAL_TIM_MspPostInit+0x70>)
 80033e6:	f000 fed7 	bl	8004198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033ea:	bf00      	nop
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40020000 	.word	0x40020000

08003400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	@ 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a19      	ldr	r2, [pc, #100]	@ (8003484 <HAL_UART_MspInit+0x84>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d12b      	bne.n	800347a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	4b18      	ldr	r3, [pc, #96]	@ (8003488 <HAL_UART_MspInit+0x88>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	4a17      	ldr	r2, [pc, #92]	@ (8003488 <HAL_UART_MspInit+0x88>)
 800342c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003430:	6413      	str	r3, [r2, #64]	@ 0x40
 8003432:	4b15      	ldr	r3, [pc, #84]	@ (8003488 <HAL_UART_MspInit+0x88>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_UART_MspInit+0x88>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	4a10      	ldr	r2, [pc, #64]	@ (8003488 <HAL_UART_MspInit+0x88>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6313      	str	r3, [r2, #48]	@ 0x30
 800344e:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <HAL_UART_MspInit+0x88>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800345a:	230c      	movs	r3, #12
 800345c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	2303      	movs	r3, #3
 8003468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800346a:	2307      	movs	r3, #7
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	4619      	mov	r1, r3
 8003474:	4805      	ldr	r0, [pc, #20]	@ (800348c <HAL_UART_MspInit+0x8c>)
 8003476:	f000 fe8f 	bl	8004198 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800347a:	bf00      	nop
 800347c:	3728      	adds	r7, #40	@ 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40004400 	.word	0x40004400
 8003488:	40023800 	.word	0x40023800
 800348c:	40020000 	.word	0x40020000

08003490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <NMI_Handler+0x4>

08003498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <HardFault_Handler+0x4>

080034a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <MemManage_Handler+0x4>

080034a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ac:	bf00      	nop
 80034ae:	e7fd      	b.n	80034ac <BusFault_Handler+0x4>

080034b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <UsageFault_Handler+0x4>

080034b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034e6:	f000 f93b 	bl	8003760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0
  return 1;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_kill>:

int _kill(int pid, int sig)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003508:	f004 fe66 	bl	80081d8 <__errno>
 800350c:	4603      	mov	r3, r0
 800350e:	2216      	movs	r2, #22
 8003510:	601a      	str	r2, [r3, #0]
  return -1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <_exit>:

void _exit (int status)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003526:	f04f 31ff 	mov.w	r1, #4294967295
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffe7 	bl	80034fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <_exit+0x12>

08003534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e00a      	b.n	800355c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003546:	f3af 8000 	nop.w
 800354a:	4601      	mov	r1, r0
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	60ba      	str	r2, [r7, #8]
 8003552:	b2ca      	uxtb	r2, r1
 8003554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	3301      	adds	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	dbf0      	blt.n	8003546 <_read+0x12>
  }

  return len;
 8003564:	687b      	ldr	r3, [r7, #4]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <_close>:
  }
  return len;
}

int _close(int file)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003596:	605a      	str	r2, [r3, #4]
  return 0;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <_isatty>:

int _isatty(int file)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035ae:	2301      	movs	r3, #1
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e0:	4a14      	ldr	r2, [pc, #80]	@ (8003634 <_sbrk+0x5c>)
 80035e2:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <_sbrk+0x60>)
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035ec:	4b13      	ldr	r3, [pc, #76]	@ (800363c <_sbrk+0x64>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f4:	4b11      	ldr	r3, [pc, #68]	@ (800363c <_sbrk+0x64>)
 80035f6:	4a12      	ldr	r2, [pc, #72]	@ (8003640 <_sbrk+0x68>)
 80035f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <_sbrk+0x64>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	429a      	cmp	r2, r3
 8003606:	d207      	bcs.n	8003618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003608:	f004 fde6 	bl	80081d8 <__errno>
 800360c:	4603      	mov	r3, r0
 800360e:	220c      	movs	r2, #12
 8003610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	e009      	b.n	800362c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003618:	4b08      	ldr	r3, [pc, #32]	@ (800363c <_sbrk+0x64>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <_sbrk+0x64>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	4a05      	ldr	r2, [pc, #20]	@ (800363c <_sbrk+0x64>)
 8003628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20020000 	.word	0x20020000
 8003638:	00000400 	.word	0x00000400
 800363c:	20000410 	.word	0x20000410
 8003640:	20000568 	.word	0x20000568

08003644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003648:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <SystemInit+0x20>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	4a05      	ldr	r2, [pc, #20]	@ (8003664 <SystemInit+0x20>)
 8003650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800366c:	f7ff ffea 	bl	8003644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003670:	480c      	ldr	r0, [pc, #48]	@ (80036a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003672:	490d      	ldr	r1, [pc, #52]	@ (80036a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003674:	4a0d      	ldr	r2, [pc, #52]	@ (80036ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003678:	e002      	b.n	8003680 <LoopCopyDataInit>

0800367a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800367a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800367c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367e:	3304      	adds	r3, #4

08003680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003684:	d3f9      	bcc.n	800367a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003686:	4a0a      	ldr	r2, [pc, #40]	@ (80036b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003688:	4c0a      	ldr	r4, [pc, #40]	@ (80036b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800368c:	e001      	b.n	8003692 <LoopFillZerobss>

0800368e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003690:	3204      	adds	r2, #4

08003692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003694:	d3fb      	bcc.n	800368e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003696:	f004 fda5 	bl	80081e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800369a:	f7ff f969 	bl	8002970 <main>
  bx  lr    
 800369e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80036ac:	0800a200 	.word	0x0800a200
  ldr r2, =_sbss
 80036b0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80036b4:	20000564 	.word	0x20000564

080036b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b8:	e7fe      	b.n	80036b8 <ADC_IRQHandler>
	...

080036bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c0:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_Init+0x40>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <HAL_Init+0x40>)
 80036c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_Init+0x40>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_Init+0x40>)
 80036d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d8:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a07      	ldr	r2, [pc, #28]	@ (80036fc <HAL_Init+0x40>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e4:	2003      	movs	r0, #3
 80036e6:	f000 fd23 	bl	8004130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f000 f808 	bl	8003700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f0:	f7ff fd76 	bl	80031e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023c00 	.word	0x40023c00

08003700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003708:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <HAL_InitTick+0x54>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_InitTick+0x58>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003716:	fbb3 f3f1 	udiv	r3, r3, r1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fd2d 	bl	800417e <HAL_SYSTICK_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e00e      	b.n	800374c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d80a      	bhi.n	800374a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003734:	2200      	movs	r2, #0
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f000 fd03 	bl	8004146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003740:	4a06      	ldr	r2, [pc, #24]	@ (800375c <HAL_InitTick+0x5c>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000008 	.word	0x20000008
 8003758:	20000010 	.word	0x20000010
 800375c:	2000000c 	.word	0x2000000c

08003760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003764:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <HAL_IncTick+0x20>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_IncTick+0x24>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4413      	add	r3, r2
 8003770:	4a04      	ldr	r2, [pc, #16]	@ (8003784 <HAL_IncTick+0x24>)
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000010 	.word	0x20000010
 8003784:	20000414 	.word	0x20000414

08003788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return uwTick;
 800378c:	4b03      	ldr	r3, [pc, #12]	@ (800379c <HAL_GetTick+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000414 	.word	0x20000414

080037a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7ff ffee 	bl	8003788 <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d005      	beq.n	80037c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ba:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <HAL_Delay+0x44>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037c6:	bf00      	nop
 80037c8:	f7ff ffde 	bl	8003788 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d8f7      	bhi.n	80037c8 <HAL_Delay+0x28>
  {
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000010 	.word	0x20000010

080037e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e033      	b.n	8003866 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fd12 	bl	8003230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800382e:	f023 0302 	bic.w	r3, r3, #2
 8003832:	f043 0202 	orr.w	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 faca 	bl	8003dd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	641a      	str	r2, [r3, #64]	@ 0x40
 8003856:	e001      	b.n	800385c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_ADC_Start+0x1a>
 8003886:	2302      	movs	r3, #2
 8003888:	e097      	b.n	80039ba <HAL_ADC_Start+0x14a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d018      	beq.n	80038d2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038b0:	4b45      	ldr	r3, [pc, #276]	@ (80039c8 <HAL_ADC_Start+0x158>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a45      	ldr	r2, [pc, #276]	@ (80039cc <HAL_ADC_Start+0x15c>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9a      	lsrs	r2, r3, #18
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80038c4:	e002      	b.n	80038cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f9      	bne.n	80038c6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d15f      	bne.n	80039a0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800390a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391e:	d106      	bne.n	800392e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003924:	f023 0206 	bic.w	r2, r3, #6
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	645a      	str	r2, [r3, #68]	@ 0x44
 800392c:	e002      	b.n	8003934 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800393c:	4b24      	ldr	r3, [pc, #144]	@ (80039d0 <HAL_ADC_Start+0x160>)
 800393e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003948:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d129      	bne.n	80039b8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	e020      	b.n	80039b8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a16      	ldr	r2, [pc, #88]	@ (80039d4 <HAL_ADC_Start+0x164>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d11b      	bne.n	80039b8 <HAL_ADC_Start+0x148>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d114      	bne.n	80039b8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	e00b      	b.n	80039b8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	f043 0210 	orr.w	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000008 	.word	0x20000008
 80039cc:	431bde83 	.word	0x431bde83
 80039d0:	40012300 	.word	0x40012300
 80039d4:	40012000 	.word	0x40012000

080039d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_Stop+0x16>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e021      	b.n	8003a32 <HAL_ADC_Stop+0x5a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f043 0201 	orr.w	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5a:	d113      	bne.n	8003a84 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a6a:	d10b      	bne.n	8003a84 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e063      	b.n	8003b4c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a84:	f7ff fe80 	bl	8003788 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a8a:	e021      	b.n	8003ad0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d01d      	beq.n	8003ad0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_ADC_PollForConversion+0x6c>
 8003a9a:	f7ff fe75 	bl	8003788 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d212      	bcs.n	8003ad0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	f043 0204 	orr.w	r2, r3, #4
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e03d      	b.n	8003b4c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d1d6      	bne.n	8003a8c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0212 	mvn.w	r2, #18
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d123      	bne.n	8003b4a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11f      	bne.n	8003b4a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d111      	bne.n	8003b4a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x1c>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e113      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x244>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b09      	cmp	r3, #9
 8003b9a:	d925      	bls.n	8003be8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68d9      	ldr	r1, [r3, #12]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	3b1e      	subs	r3, #30
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43da      	mvns	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4403      	add	r3, r0
 8003bda:	3b1e      	subs	r3, #30
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	e022      	b.n	8003c2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6919      	ldr	r1, [r3, #16]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43da      	mvns	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	400a      	ands	r2, r1
 8003c0a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6919      	ldr	r1, [r3, #16]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4403      	add	r3, r0
 8003c24:	409a      	lsls	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d824      	bhi.n	8003c80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	3b05      	subs	r3, #5
 8003c48:	221f      	movs	r2, #31
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	400a      	ands	r2, r1
 8003c56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	4618      	mov	r0, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	3b05      	subs	r3, #5
 8003c72:	fa00 f203 	lsl.w	r2, r0, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c7e:	e04c      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	d824      	bhi.n	8003cd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	3b23      	subs	r3, #35	@ 0x23
 8003c9a:	221f      	movs	r2, #31
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3b23      	subs	r3, #35	@ 0x23
 8003cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cd0:	e023      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3b41      	subs	r3, #65	@ 0x41
 8003ce4:	221f      	movs	r2, #31
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3b41      	subs	r3, #65	@ 0x41
 8003d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d1a:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <HAL_ADC_ConfigChannel+0x250>)
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a28      	ldr	r2, [pc, #160]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x254>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10f      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x1d8>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b12      	cmp	r3, #18
 8003d2e:	d10b      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x254>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d12b      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x23a>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc8 <HAL_ADC_ConfigChannel+0x258>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <HAL_ADC_ConfigChannel+0x1f4>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b11      	cmp	r3, #17
 8003d62:	d122      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a11      	ldr	r2, [pc, #68]	@ (8003dc8 <HAL_ADC_ConfigChannel+0x258>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d111      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d86:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <HAL_ADC_ConfigChannel+0x25c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a11      	ldr	r2, [pc, #68]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x260>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	0c9a      	lsrs	r2, r3, #18
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003d9c:	e002      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f9      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40012300 	.word	0x40012300
 8003dc4:	40012000 	.word	0x40012000
 8003dc8:	10000012 	.word	0x10000012
 8003dcc:	20000008 	.word	0x20000008
 8003dd0:	431bde83 	.word	0x431bde83

08003dd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ddc:	4b79      	ldr	r3, [pc, #484]	@ (8003fc4 <ADC_Init+0x1f0>)
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6899      	ldr	r1, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e66:	4a58      	ldr	r2, [pc, #352]	@ (8003fc8 <ADC_Init+0x1f4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d022      	beq.n	8003eb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6899      	ldr	r1, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6899      	ldr	r1, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	e00f      	b.n	8003ed2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ed0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0202 	bic.w	r2, r2, #2
 8003ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6899      	ldr	r1, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7e1b      	ldrb	r3, [r3, #24]
 8003eec:	005a      	lsls	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003f1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	035a      	lsls	r2, r3, #13
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	e007      	b.n	8003f48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	051a      	lsls	r2, r3, #20
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f8a:	025a      	lsls	r2, r3, #9
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6899      	ldr	r1, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	029a      	lsls	r2, r3, #10
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40012300 	.word	0x40012300
 8003fc8:	0f000001 	.word	0x0f000001

08003fcc <__NVIC_SetPriorityGrouping>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffe:	4a04      	ldr	r2, [pc, #16]	@ (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	60d3      	str	r3, [r2, #12]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <__NVIC_GetPriorityGrouping>:
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004018:	4b04      	ldr	r3, [pc, #16]	@ (800402c <__NVIC_GetPriorityGrouping+0x18>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 0307 	and.w	r3, r3, #7
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_SetPriority>:
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004040:	2b00      	cmp	r3, #0
 8004042:	db0a      	blt.n	800405a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	b2da      	uxtb	r2, r3
 8004048:	490c      	ldr	r1, [pc, #48]	@ (800407c <__NVIC_SetPriority+0x4c>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	0112      	lsls	r2, r2, #4
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	440b      	add	r3, r1
 8004054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004058:	e00a      	b.n	8004070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4908      	ldr	r1, [pc, #32]	@ (8004080 <__NVIC_SetPriority+0x50>)
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	3b04      	subs	r3, #4
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	440b      	add	r3, r1
 800406e:	761a      	strb	r2, [r3, #24]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000e100 	.word	0xe000e100
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <NVIC_EncodePriority>:
{
 8004084:	b480      	push	{r7}
 8004086:	b089      	sub	sp, #36	@ 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f1c3 0307 	rsb	r3, r3, #7
 800409e:	2b04      	cmp	r3, #4
 80040a0:	bf28      	it	cs
 80040a2:	2304      	movcs	r3, #4
 80040a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d902      	bls.n	80040b4 <NVIC_EncodePriority+0x30>
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3b03      	subs	r3, #3
 80040b2:	e000      	b.n	80040b6 <NVIC_EncodePriority+0x32>
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	401a      	ands	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040cc:	f04f 31ff 	mov.w	r1, #4294967295
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	43d9      	mvns	r1, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040dc:	4313      	orrs	r3, r2
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3724      	adds	r7, #36	@ 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <SysTick_Config>:
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040fc:	d301      	bcc.n	8004102 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80040fe:	2301      	movs	r3, #1
 8004100:	e00f      	b.n	8004122 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004102:	4a0a      	ldr	r2, [pc, #40]	@ (800412c <SysTick_Config+0x40>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800410a:	210f      	movs	r1, #15
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	f7ff ff8e 	bl	8004030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <SysTick_Config+0x40>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800411a:	4b04      	ldr	r3, [pc, #16]	@ (800412c <SysTick_Config+0x40>)
 800411c:	2207      	movs	r2, #7
 800411e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	e000e010 	.word	0xe000e010

08004130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff47 	bl	8003fcc <__NVIC_SetPriorityGrouping>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004158:	f7ff ff5c 	bl	8004014 <__NVIC_GetPriorityGrouping>
 800415c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	6978      	ldr	r0, [r7, #20]
 8004164:	f7ff ff8e 	bl	8004084 <NVIC_EncodePriority>
 8004168:	4602      	mov	r2, r0
 800416a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff5d 	bl	8004030 <__NVIC_SetPriority>
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff ffb0 	bl	80040ec <SysTick_Config>
 800418c:	4603      	mov	r3, r0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	@ 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e159      	b.n	8004468 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041b4:	2201      	movs	r2, #1
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	f040 8148 	bne.w	8004462 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d005      	beq.n	80041ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d130      	bne.n	800424c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2203      	movs	r2, #3
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004220:	2201      	movs	r2, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 0201 	and.w	r2, r3, #1
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b03      	cmp	r3, #3
 8004256:	d017      	beq.n	8004288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	2203      	movs	r2, #3
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d123      	bne.n	80042dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	08da      	lsrs	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3208      	adds	r2, #8
 800429c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	220f      	movs	r2, #15
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	08da      	lsrs	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3208      	adds	r2, #8
 80042d6:	69b9      	ldr	r1, [r7, #24]
 80042d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	2203      	movs	r2, #3
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0203 	and.w	r2, r3, #3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a2 	beq.w	8004462 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b57      	ldr	r3, [pc, #348]	@ (8004480 <HAL_GPIO_Init+0x2e8>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	4a56      	ldr	r2, [pc, #344]	@ (8004480 <HAL_GPIO_Init+0x2e8>)
 8004328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800432c:	6453      	str	r3, [r2, #68]	@ 0x44
 800432e:	4b54      	ldr	r3, [pc, #336]	@ (8004480 <HAL_GPIO_Init+0x2e8>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800433a:	4a52      	ldr	r2, [pc, #328]	@ (8004484 <HAL_GPIO_Init+0x2ec>)
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	3302      	adds	r3, #2
 8004342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	220f      	movs	r2, #15
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a49      	ldr	r2, [pc, #292]	@ (8004488 <HAL_GPIO_Init+0x2f0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d019      	beq.n	800439a <HAL_GPIO_Init+0x202>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a48      	ldr	r2, [pc, #288]	@ (800448c <HAL_GPIO_Init+0x2f4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_GPIO_Init+0x1fe>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a47      	ldr	r2, [pc, #284]	@ (8004490 <HAL_GPIO_Init+0x2f8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00d      	beq.n	8004392 <HAL_GPIO_Init+0x1fa>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a46      	ldr	r2, [pc, #280]	@ (8004494 <HAL_GPIO_Init+0x2fc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d007      	beq.n	800438e <HAL_GPIO_Init+0x1f6>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a45      	ldr	r2, [pc, #276]	@ (8004498 <HAL_GPIO_Init+0x300>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d101      	bne.n	800438a <HAL_GPIO_Init+0x1f2>
 8004386:	2304      	movs	r3, #4
 8004388:	e008      	b.n	800439c <HAL_GPIO_Init+0x204>
 800438a:	2307      	movs	r3, #7
 800438c:	e006      	b.n	800439c <HAL_GPIO_Init+0x204>
 800438e:	2303      	movs	r3, #3
 8004390:	e004      	b.n	800439c <HAL_GPIO_Init+0x204>
 8004392:	2302      	movs	r3, #2
 8004394:	e002      	b.n	800439c <HAL_GPIO_Init+0x204>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_GPIO_Init+0x204>
 800439a:	2300      	movs	r3, #0
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	f002 0203 	and.w	r2, r2, #3
 80043a2:	0092      	lsls	r2, r2, #2
 80043a4:	4093      	lsls	r3, r2
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ac:	4935      	ldr	r1, [pc, #212]	@ (8004484 <HAL_GPIO_Init+0x2ec>)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	3302      	adds	r3, #2
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ba:	4b38      	ldr	r3, [pc, #224]	@ (800449c <HAL_GPIO_Init+0x304>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043de:	4a2f      	ldr	r2, [pc, #188]	@ (800449c <HAL_GPIO_Init+0x304>)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043e4:	4b2d      	ldr	r3, [pc, #180]	@ (800449c <HAL_GPIO_Init+0x304>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004408:	4a24      	ldr	r2, [pc, #144]	@ (800449c <HAL_GPIO_Init+0x304>)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800440e:	4b23      	ldr	r3, [pc, #140]	@ (800449c <HAL_GPIO_Init+0x304>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004432:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <HAL_GPIO_Init+0x304>)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004438:	4b18      	ldr	r3, [pc, #96]	@ (800449c <HAL_GPIO_Init+0x304>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800445c:	4a0f      	ldr	r2, [pc, #60]	@ (800449c <HAL_GPIO_Init+0x304>)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3301      	adds	r3, #1
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	2b0f      	cmp	r3, #15
 800446c:	f67f aea2 	bls.w	80041b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3724      	adds	r7, #36	@ 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800
 8004484:	40013800 	.word	0x40013800
 8004488:	40020000 	.word	0x40020000
 800448c:	40020400 	.word	0x40020400
 8004490:	40020800 	.word	0x40020800
 8004494:	40020c00 	.word	0x40020c00
 8004498:	40021000 	.word	0x40021000
 800449c:	40013c00 	.word	0x40013c00

080044a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]
 80044ac:	4613      	mov	r3, r2
 80044ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b0:	787b      	ldrb	r3, [r7, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044bc:	e003      	b.n	80044c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	041a      	lsls	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	619a      	str	r2, [r3, #24]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e12b      	b.n	800473e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fe fedc 	bl	80032b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2224      	movs	r2, #36	@ 0x24
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004538:	f001 fdc6 	bl	80060c8 <HAL_RCC_GetPCLK1Freq>
 800453c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4a81      	ldr	r2, [pc, #516]	@ (8004748 <HAL_I2C_Init+0x274>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d807      	bhi.n	8004558 <HAL_I2C_Init+0x84>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a80      	ldr	r2, [pc, #512]	@ (800474c <HAL_I2C_Init+0x278>)
 800454c:	4293      	cmp	r3, r2
 800454e:	bf94      	ite	ls
 8004550:	2301      	movls	r3, #1
 8004552:	2300      	movhi	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e006      	b.n	8004566 <HAL_I2C_Init+0x92>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a7d      	ldr	r2, [pc, #500]	@ (8004750 <HAL_I2C_Init+0x27c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	bf94      	ite	ls
 8004560:	2301      	movls	r3, #1
 8004562:	2300      	movhi	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0e7      	b.n	800473e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a78      	ldr	r2, [pc, #480]	@ (8004754 <HAL_I2C_Init+0x280>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	0c9b      	lsrs	r3, r3, #18
 8004578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a6a      	ldr	r2, [pc, #424]	@ (8004748 <HAL_I2C_Init+0x274>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d802      	bhi.n	80045a8 <HAL_I2C_Init+0xd4>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	3301      	adds	r3, #1
 80045a6:	e009      	b.n	80045bc <HAL_I2C_Init+0xe8>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	4a69      	ldr	r2, [pc, #420]	@ (8004758 <HAL_I2C_Init+0x284>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	3301      	adds	r3, #1
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	495c      	ldr	r1, [pc, #368]	@ (8004748 <HAL_I2C_Init+0x274>)
 80045d8:	428b      	cmp	r3, r1
 80045da:	d819      	bhi.n	8004610 <HAL_I2C_Init+0x13c>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1e59      	subs	r1, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ea:	1c59      	adds	r1, r3, #1
 80045ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045f0:	400b      	ands	r3, r1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_I2C_Init+0x138>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1e59      	subs	r1, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fbb1 f3f3 	udiv	r3, r1, r3
 8004604:	3301      	adds	r3, #1
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	e051      	b.n	80046b0 <HAL_I2C_Init+0x1dc>
 800460c:	2304      	movs	r3, #4
 800460e:	e04f      	b.n	80046b0 <HAL_I2C_Init+0x1dc>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d111      	bne.n	800463c <HAL_I2C_Init+0x168>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1e58      	subs	r0, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	440b      	add	r3, r1
 8004626:	fbb0 f3f3 	udiv	r3, r0, r3
 800462a:	3301      	adds	r3, #1
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e012      	b.n	8004662 <HAL_I2C_Init+0x18e>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e58      	subs	r0, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	0099      	lsls	r1, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004652:	3301      	adds	r3, #1
 8004654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_I2C_Init+0x196>
 8004666:	2301      	movs	r3, #1
 8004668:	e022      	b.n	80046b0 <HAL_I2C_Init+0x1dc>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10e      	bne.n	8004690 <HAL_I2C_Init+0x1bc>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1e58      	subs	r0, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	440b      	add	r3, r1
 8004680:	fbb0 f3f3 	udiv	r3, r0, r3
 8004684:	3301      	adds	r3, #1
 8004686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800468e:	e00f      	b.n	80046b0 <HAL_I2C_Init+0x1dc>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e58      	subs	r0, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	0099      	lsls	r1, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a6:	3301      	adds	r3, #1
 80046a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	6809      	ldr	r1, [r1, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6911      	ldr	r1, [r2, #16]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68d2      	ldr	r2, [r2, #12]
 80046ea:	4311      	orrs	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	430b      	orrs	r3, r1
 80046f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	000186a0 	.word	0x000186a0
 800474c:	001e847f 	.word	0x001e847f
 8004750:	003d08ff 	.word	0x003d08ff
 8004754:	431bde83 	.word	0x431bde83
 8004758:	10624dd3 	.word	0x10624dd3

0800475c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	461a      	mov	r2, r3
 8004768:	460b      	mov	r3, r1
 800476a:	817b      	strh	r3, [r7, #10]
 800476c:	4613      	mov	r3, r2
 800476e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004770:	f7ff f80a 	bl	8003788 <HAL_GetTick>
 8004774:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b20      	cmp	r3, #32
 8004780:	f040 80e0 	bne.w	8004944 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2319      	movs	r3, #25
 800478a:	2201      	movs	r2, #1
 800478c:	4970      	ldr	r1, [pc, #448]	@ (8004950 <HAL_I2C_Master_Transmit+0x1f4>)
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fdf4 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
 800479c:	e0d3      	b.n	8004946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_I2C_Master_Transmit+0x50>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e0cc      	b.n	8004946 <HAL_I2C_Master_Transmit+0x1ea>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d007      	beq.n	80047d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2221      	movs	r2, #33	@ 0x21
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2210      	movs	r2, #16
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	893a      	ldrh	r2, [r7, #8]
 8004802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a50      	ldr	r2, [pc, #320]	@ (8004954 <HAL_I2C_Master_Transmit+0x1f8>)
 8004812:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004814:	8979      	ldrh	r1, [r7, #10]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	6a3a      	ldr	r2, [r7, #32]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fbc8 	bl	8004fb0 <I2C_MasterRequestWrite>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e08d      	b.n	8004946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004840:	e066      	b.n	8004910 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6a39      	ldr	r1, [r7, #32]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 feb2 	bl	80055b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	2b04      	cmp	r3, #4
 8004858:	d107      	bne.n	800486a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06b      	b.n	8004946 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d11b      	bne.n	80048e4 <HAL_I2C_Master_Transmit+0x188>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d017      	beq.n	80048e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	6a39      	ldr	r1, [r7, #32]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fea9 	bl	8005640 <I2C_WaitOnBTFFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00d      	beq.n	8004910 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d107      	bne.n	800490c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e01a      	b.n	8004946 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004914:	2b00      	cmp	r3, #0
 8004916:	d194      	bne.n	8004842 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	e000      	b.n	8004946 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	00100002 	.word	0x00100002
 8004954:	ffff0000 	.word	0xffff0000

08004958 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08c      	sub	sp, #48	@ 0x30
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	461a      	mov	r2, r3
 8004964:	460b      	mov	r3, r1
 8004966:	817b      	strh	r3, [r7, #10]
 8004968:	4613      	mov	r3, r2
 800496a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800496c:	f7fe ff0c 	bl	8003788 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	f040 8217 	bne.w	8004dae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	2319      	movs	r3, #25
 8004986:	2201      	movs	r2, #1
 8004988:	497c      	ldr	r1, [pc, #496]	@ (8004b7c <HAL_I2C_Master_Receive+0x224>)
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fcf6 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
 8004998:	e20a      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_I2C_Master_Receive+0x50>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e203      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d007      	beq.n	80049ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2222      	movs	r2, #34	@ 0x22
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2210      	movs	r2, #16
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	893a      	ldrh	r2, [r7, #8]
 80049fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4a5c      	ldr	r2, [pc, #368]	@ (8004b80 <HAL_I2C_Master_Receive+0x228>)
 8004a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a10:	8979      	ldrh	r1, [r7, #10]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fb4c 	bl	80050b4 <I2C_MasterRequestRead>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e1c4      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d113      	bne.n	8004a56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	623b      	str	r3, [r7, #32]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	623b      	str	r3, [r7, #32]
 8004a42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e198      	b.n	8004d88 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d11b      	bne.n	8004a96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	e178      	b.n	8004d88 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d11b      	bne.n	8004ad6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	e158      	b.n	8004d88 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004afc:	e144      	b.n	8004d88 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	f200 80f1 	bhi.w	8004cea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d123      	bne.n	8004b58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fddb 	bl	80056d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e145      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b56:	e117      	b.n	8004d88 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d14e      	bne.n	8004bfe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b66:	2200      	movs	r2, #0
 8004b68:	4906      	ldr	r1, [pc, #24]	@ (8004b84 <HAL_I2C_Master_Receive+0x22c>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fc06 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e11a      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
 8004b7a:	bf00      	nop
 8004b7c:	00100002 	.word	0x00100002
 8004b80:	ffff0000 	.word	0xffff0000
 8004b84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bfc:	e0c4      	b.n	8004d88 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	2200      	movs	r2, #0
 8004c06:	496c      	ldr	r1, [pc, #432]	@ (8004db8 <HAL_I2C_Master_Receive+0x460>)
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fbb7 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0cb      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	2200      	movs	r2, #0
 8004c62:	4955      	ldr	r1, [pc, #340]	@ (8004db8 <HAL_I2C_Master_Receive+0x460>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fb89 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e09d      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ce8:	e04e      	b.n	8004d88 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fcee 	bl	80056d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e058      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d124      	bne.n	8004d88 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d107      	bne.n	8004d56 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d54:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f aeb6 	bne.w	8004afe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3728      	adds	r7, #40	@ 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	00010004 	.word	0x00010004

08004dbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dd6:	f7fe fcd7 	bl	8003788 <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	f040 80d9 	bne.w	8004f9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2319      	movs	r3, #25
 8004df0:	2201      	movs	r2, #1
 8004df2:	496d      	ldr	r1, [pc, #436]	@ (8004fa8 <HAL_I2C_Mem_Write+0x1ec>)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fac1 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
 8004e02:	e0cc      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_Mem_Write+0x56>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0c5      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d007      	beq.n	8004e38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2221      	movs	r2, #33	@ 0x21
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2240      	movs	r2, #64	@ 0x40
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a4d      	ldr	r2, [pc, #308]	@ (8004fac <HAL_I2C_Mem_Write+0x1f0>)
 8004e78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e7a:	88f8      	ldrh	r0, [r7, #6]
 8004e7c:	893a      	ldrh	r2, [r7, #8]
 8004e7e:	8979      	ldrh	r1, [r7, #10]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f9e0 	bl	8005250 <I2C_RequestMemoryWrite>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d052      	beq.n	8004f3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e081      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fb86 	bl	80055b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00d      	beq.n	8004ec6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d107      	bne.n	8004ec2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e06b      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	781a      	ldrb	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11b      	bne.n	8004f3c <HAL_I2C_Mem_Write+0x180>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d017      	beq.n	8004f3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1aa      	bne.n	8004e9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fb79 	bl	8005640 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d107      	bne.n	8004f6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e016      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	00100002 	.word	0x00100002
 8004fac:	ffff0000 	.word	0xffff0000

08004fb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d006      	beq.n	8004fda <I2C_MasterRequestWrite+0x2a>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d003      	beq.n	8004fda <I2C_MasterRequestWrite+0x2a>
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fd8:	d108      	bne.n	8004fec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e00b      	b.n	8005004 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	2b12      	cmp	r3, #18
 8004ff2:	d107      	bne.n	8005004 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005002:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f9b3 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00d      	beq.n	8005038 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502a:	d103      	bne.n	8005034 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005032:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e035      	b.n	80050a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005040:	d108      	bne.n	8005054 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005050:	611a      	str	r2, [r3, #16]
 8005052:	e01b      	b.n	800508c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005054:	897b      	ldrh	r3, [r7, #10]
 8005056:	11db      	asrs	r3, r3, #7
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0306 	and.w	r3, r3, #6
 800505e:	b2db      	uxtb	r3, r3
 8005060:	f063 030f 	orn	r3, r3, #15
 8005064:	b2da      	uxtb	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	490e      	ldr	r1, [pc, #56]	@ (80050ac <I2C_MasterRequestWrite+0xfc>)
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f9fc 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e010      	b.n	80050a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005082:	897b      	ldrh	r3, [r7, #10]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4907      	ldr	r1, [pc, #28]	@ (80050b0 <I2C_MasterRequestWrite+0x100>)
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f9ec 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	00010008 	.word	0x00010008
 80050b0:	00010002 	.word	0x00010002

080050b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	460b      	mov	r3, r1
 80050c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d006      	beq.n	80050ee <I2C_MasterRequestRead+0x3a>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d003      	beq.n	80050ee <I2C_MasterRequestRead+0x3a>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050ec:	d108      	bne.n	8005100 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e00b      	b.n	8005118 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005104:	2b11      	cmp	r3, #17
 8005106:	d107      	bne.n	8005118 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f929 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513e:	d103      	bne.n	8005148 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005146:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e079      	b.n	8005240 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005154:	d108      	bne.n	8005168 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005156:	897b      	ldrh	r3, [r7, #10]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	611a      	str	r2, [r3, #16]
 8005166:	e05f      	b.n	8005228 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005168:	897b      	ldrh	r3, [r7, #10]
 800516a:	11db      	asrs	r3, r3, #7
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f003 0306 	and.w	r3, r3, #6
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f063 030f 	orn	r3, r3, #15
 8005178:	b2da      	uxtb	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4930      	ldr	r1, [pc, #192]	@ (8005248 <I2C_MasterRequestRead+0x194>)
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f972 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e054      	b.n	8005240 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005196:	897b      	ldrh	r3, [r7, #10]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4929      	ldr	r1, [pc, #164]	@ (800524c <I2C_MasterRequestRead+0x198>)
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f962 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e044      	b.n	8005240 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f8c7 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005202:	d103      	bne.n	800520c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800520a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e017      	b.n	8005240 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005210:	897b      	ldrh	r3, [r7, #10]
 8005212:	11db      	asrs	r3, r3, #7
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 0306 	and.w	r3, r3, #6
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f063 030e 	orn	r3, r3, #14
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4907      	ldr	r1, [pc, #28]	@ (800524c <I2C_MasterRequestRead+0x198>)
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f91e 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	00010008 	.word	0x00010008
 800524c:	00010002 	.word	0x00010002

08005250 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	461a      	mov	r2, r3
 800525e:	4603      	mov	r3, r0
 8005260:	817b      	strh	r3, [r7, #10]
 8005262:	460b      	mov	r3, r1
 8005264:	813b      	strh	r3, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	2200      	movs	r2, #0
 8005282:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f878 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00d      	beq.n	80052ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052a0:	d103      	bne.n	80052aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e05f      	b.n	800536e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ae:	897b      	ldrh	r3, [r7, #10]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	492d      	ldr	r1, [pc, #180]	@ (8005378 <I2C_RequestMemoryWrite+0x128>)
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f8d3 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e04c      	b.n	800536e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ec:	6a39      	ldr	r1, [r7, #32]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f95e 	bl	80055b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00d      	beq.n	8005316 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d107      	bne.n	8005312 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e02b      	b.n	800536e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800531c:	893b      	ldrh	r3, [r7, #8]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	611a      	str	r2, [r3, #16]
 8005326:	e021      	b.n	800536c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005328:	893b      	ldrh	r3, [r7, #8]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	b29b      	uxth	r3, r3
 800532e:	b2da      	uxtb	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005338:	6a39      	ldr	r1, [r7, #32]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f938 	bl	80055b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	2b04      	cmp	r3, #4
 800534c:	d107      	bne.n	800535e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800535c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e005      	b.n	800536e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005362:	893b      	ldrh	r3, [r7, #8]
 8005364:	b2da      	uxtb	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	00010002 	.word	0x00010002

0800537c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538c:	e048      	b.n	8005420 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d044      	beq.n	8005420 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fe f9f7 	bl	8003788 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d139      	bne.n	8005420 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	0c1b      	lsrs	r3, r3, #16
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10d      	bne.n	80053d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	43da      	mvns	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4013      	ands	r3, r2
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	e00c      	b.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	43da      	mvns	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d116      	bne.n	8005420 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	f043 0220 	orr.w	r2, r3, #32
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e023      	b.n	8005468 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	0c1b      	lsrs	r3, r3, #16
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10d      	bne.n	8005446 <I2C_WaitOnFlagUntilTimeout+0xca>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	43da      	mvns	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	e00c      	b.n	8005460 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	43da      	mvns	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4013      	ands	r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	429a      	cmp	r2, r3
 8005464:	d093      	beq.n	800538e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800547e:	e071      	b.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548e:	d123      	bne.n	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e067      	b.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d041      	beq.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e0:	f7fe f952 	bl	8003788 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d302      	bcc.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d136      	bne.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10c      	bne.n	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	43da      	mvns	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4013      	ands	r3, r2
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2301      	movne	r3, #1
 8005514:	2300      	moveq	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	e00b      	b.n	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	43da      	mvns	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d016      	beq.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e021      	b.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10c      	bne.n	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	43da      	mvns	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e00b      	b.n	80055a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f47f af6d 	bne.w	8005480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055bc:	e034      	b.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f8e3 	bl	800578a <I2C_IsAcknowledgeFailed>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e034      	b.n	8005638 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d028      	beq.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fe f8d7 	bl	8003788 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11d      	bne.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f6:	2b80      	cmp	r3, #128	@ 0x80
 80055f8:	d016      	beq.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e007      	b.n	8005638 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005632:	2b80      	cmp	r3, #128	@ 0x80
 8005634:	d1c3      	bne.n	80055be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800564c:	e034      	b.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f89b 	bl	800578a <I2C_IsAcknowledgeFailed>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e034      	b.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d028      	beq.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fe f88f 	bl	8003788 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11d      	bne.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b04      	cmp	r3, #4
 8005688:	d016      	beq.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	f043 0220 	orr.w	r2, r3, #32
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e007      	b.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d1c3      	bne.n	800564e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056dc:	e049      	b.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d119      	bne.n	8005720 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0210 	mvn.w	r2, #16
 80056f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e030      	b.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005720:	f7fe f832 	bl	8003788 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d11d      	bne.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b40      	cmp	r3, #64	@ 0x40
 8005742:	d016      	beq.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e007      	b.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d1ae      	bne.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800579c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a0:	d11b      	bne.n	80057da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e267      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d075      	beq.n	80058f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005806:	4b88      	ldr	r3, [pc, #544]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 030c 	and.w	r3, r3, #12
 800580e:	2b04      	cmp	r3, #4
 8005810:	d00c      	beq.n	800582c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005812:	4b85      	ldr	r3, [pc, #532]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800581a:	2b08      	cmp	r3, #8
 800581c:	d112      	bne.n	8005844 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800581e:	4b82      	ldr	r3, [pc, #520]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005826:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800582a:	d10b      	bne.n	8005844 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d05b      	beq.n	80058f0 <HAL_RCC_OscConfig+0x108>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d157      	bne.n	80058f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e242      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800584c:	d106      	bne.n	800585c <HAL_RCC_OscConfig+0x74>
 800584e:	4b76      	ldr	r3, [pc, #472]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a75      	ldr	r2, [pc, #468]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e01d      	b.n	8005898 <HAL_RCC_OscConfig+0xb0>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0x98>
 8005866:	4b70      	ldr	r3, [pc, #448]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a6f      	ldr	r2, [pc, #444]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 800586c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4b6d      	ldr	r3, [pc, #436]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a6c      	ldr	r2, [pc, #432]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0xb0>
 8005880:	4b69      	ldr	r3, [pc, #420]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a68      	ldr	r2, [pc, #416]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	4b66      	ldr	r3, [pc, #408]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a65      	ldr	r2, [pc, #404]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fd ff72 	bl	8003788 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fd ff6e 	bl	8003788 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	@ 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e207      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ba:	4b5b      	ldr	r3, [pc, #364]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0xc0>
 80058c6:	e014      	b.n	80058f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd ff5e 	bl	8003788 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fd ff5a 	bl	8003788 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	@ 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e1f3      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e2:	4b51      	ldr	r3, [pc, #324]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0xe8>
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d063      	beq.n	80059c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590a:	4b47      	ldr	r3, [pc, #284]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005912:	2b08      	cmp	r3, #8
 8005914:	d11c      	bne.n	8005950 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005916:	4b44      	ldr	r3, [pc, #272]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d116      	bne.n	8005950 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005922:	4b41      	ldr	r3, [pc, #260]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_RCC_OscConfig+0x152>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e1c7      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	4937      	ldr	r1, [pc, #220]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594e:	e03a      	b.n	80059c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d020      	beq.n	800599a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005958:	4b34      	ldr	r3, [pc, #208]	@ (8005a2c <HAL_RCC_OscConfig+0x244>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595e:	f7fd ff13 	bl	8003788 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005966:	f7fd ff0f 	bl	8003788 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e1a8      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005978:	4b2b      	ldr	r3, [pc, #172]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f0      	beq.n	8005966 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005984:	4b28      	ldr	r3, [pc, #160]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4925      	ldr	r1, [pc, #148]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 8005994:	4313      	orrs	r3, r2
 8005996:	600b      	str	r3, [r1, #0]
 8005998:	e015      	b.n	80059c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800599a:	4b24      	ldr	r3, [pc, #144]	@ (8005a2c <HAL_RCC_OscConfig+0x244>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fd fef2 	bl	8003788 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a8:	f7fd feee 	bl	8003788 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e187      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d036      	beq.n	8005a40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d016      	beq.n	8005a08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059da:	4b15      	ldr	r3, [pc, #84]	@ (8005a30 <HAL_RCC_OscConfig+0x248>)
 80059dc:	2201      	movs	r2, #1
 80059de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fd fed2 	bl	8003788 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e8:	f7fd fece 	bl	8003788 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e167      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005a28 <HAL_RCC_OscConfig+0x240>)
 80059fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x200>
 8005a06:	e01b      	b.n	8005a40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a08:	4b09      	ldr	r3, [pc, #36]	@ (8005a30 <HAL_RCC_OscConfig+0x248>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a0e:	f7fd febb 	bl	8003788 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a14:	e00e      	b.n	8005a34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a16:	f7fd feb7 	bl	8003788 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d907      	bls.n	8005a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e150      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	42470000 	.word	0x42470000
 8005a30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a34:	4b88      	ldr	r3, [pc, #544]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ea      	bne.n	8005a16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8097 	beq.w	8005b7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a52:	4b81      	ldr	r3, [pc, #516]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10f      	bne.n	8005a7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	4b7d      	ldr	r3, [pc, #500]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	4a7c      	ldr	r2, [pc, #496]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a6e:	4b7a      	ldr	r3, [pc, #488]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a76:	60bb      	str	r3, [r7, #8]
 8005a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7e:	4b77      	ldr	r3, [pc, #476]	@ (8005c5c <HAL_RCC_OscConfig+0x474>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d118      	bne.n	8005abc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a8a:	4b74      	ldr	r3, [pc, #464]	@ (8005c5c <HAL_RCC_OscConfig+0x474>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a73      	ldr	r2, [pc, #460]	@ (8005c5c <HAL_RCC_OscConfig+0x474>)
 8005a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a96:	f7fd fe77 	bl	8003788 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a9e:	f7fd fe73 	bl	8003788 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e10c      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8005c5c <HAL_RCC_OscConfig+0x474>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d106      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x2ea>
 8005ac4:	4b64      	ldr	r3, [pc, #400]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac8:	4a63      	ldr	r2, [pc, #396]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad0:	e01c      	b.n	8005b0c <HAL_RCC_OscConfig+0x324>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	d10c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x30c>
 8005ada:	4b5f      	ldr	r3, [pc, #380]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ade:	4a5e      	ldr	r2, [pc, #376]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005ae0:	f043 0304 	orr.w	r3, r3, #4
 8005ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aea:	4a5b      	ldr	r2, [pc, #364]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005aec:	f043 0301 	orr.w	r3, r3, #1
 8005af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005af2:	e00b      	b.n	8005b0c <HAL_RCC_OscConfig+0x324>
 8005af4:	4b58      	ldr	r3, [pc, #352]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af8:	4a57      	ldr	r2, [pc, #348]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b00:	4b55      	ldr	r3, [pc, #340]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b04:	4a54      	ldr	r2, [pc, #336]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005b06:	f023 0304 	bic.w	r3, r3, #4
 8005b0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d015      	beq.n	8005b40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b14:	f7fd fe38 	bl	8003788 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1a:	e00a      	b.n	8005b32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fd fe34 	bl	8003788 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e0cb      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b32:	4b49      	ldr	r3, [pc, #292]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0ee      	beq.n	8005b1c <HAL_RCC_OscConfig+0x334>
 8005b3e:	e014      	b.n	8005b6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b40:	f7fd fe22 	bl	8003788 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b46:	e00a      	b.n	8005b5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b48:	f7fd fe1e 	bl	8003788 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e0b5      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1ee      	bne.n	8005b48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d105      	bne.n	8005b7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b70:	4b39      	ldr	r3, [pc, #228]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b74:	4a38      	ldr	r2, [pc, #224]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80a1 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b86:	4b34      	ldr	r3, [pc, #208]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d05c      	beq.n	8005c4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d141      	bne.n	8005c1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9a:	4b31      	ldr	r3, [pc, #196]	@ (8005c60 <HAL_RCC_OscConfig+0x478>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba0:	f7fd fdf2 	bl	8003788 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fd fdee 	bl	8003788 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e087      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bba:	4b27      	ldr	r3, [pc, #156]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	3b01      	subs	r3, #1
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	061b      	lsls	r3, r3, #24
 8005bea:	491b      	ldr	r1, [pc, #108]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c60 <HAL_RCC_OscConfig+0x478>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf6:	f7fd fdc7 	bl	8003788 <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfe:	f7fd fdc3 	bl	8003788 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e05c      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c10:	4b11      	ldr	r3, [pc, #68]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0f0      	beq.n	8005bfe <HAL_RCC_OscConfig+0x416>
 8005c1c:	e054      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1e:	4b10      	ldr	r3, [pc, #64]	@ (8005c60 <HAL_RCC_OscConfig+0x478>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fd fdb0 	bl	8003788 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fd fdac 	bl	8003788 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e045      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3e:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <HAL_RCC_OscConfig+0x470>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x444>
 8005c4a:	e03d      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e038      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	40007000 	.word	0x40007000
 8005c60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c64:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd4 <HAL_RCC_OscConfig+0x4ec>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d028      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d121      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d11a      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c94:	4013      	ands	r3, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d111      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	3b01      	subs	r3, #1
 8005cae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40023800 	.word	0x40023800

08005cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0cc      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cec:	4b68      	ldr	r3, [pc, #416]	@ (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d90c      	bls.n	8005d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfa:	4b65      	ldr	r3, [pc, #404]	@ (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d02:	4b63      	ldr	r3, [pc, #396]	@ (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d001      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0b8      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d020      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d2c:	4b59      	ldr	r3, [pc, #356]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	4a58      	ldr	r2, [pc, #352]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d44:	4b53      	ldr	r3, [pc, #332]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a52      	ldr	r2, [pc, #328]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d50:	4b50      	ldr	r3, [pc, #320]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	494d      	ldr	r1, [pc, #308]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d044      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d107      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d76:	4b47      	ldr	r3, [pc, #284]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d119      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e07f      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d003      	beq.n	8005d96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d96:	4b3f      	ldr	r3, [pc, #252]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e06f      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da6:	4b3b      	ldr	r3, [pc, #236]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e067      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005db6:	4b37      	ldr	r3, [pc, #220]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 0203 	bic.w	r2, r3, #3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4934      	ldr	r1, [pc, #208]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dc8:	f7fd fcde 	bl	8003788 <HAL_GetTick>
 8005dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dce:	e00a      	b.n	8005de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd0:	f7fd fcda 	bl	8003788 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e04f      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de6:	4b2b      	ldr	r3, [pc, #172]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 020c 	and.w	r2, r3, #12
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d1eb      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005df8:	4b25      	ldr	r3, [pc, #148]	@ (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d20c      	bcs.n	8005e20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e06:	4b22      	ldr	r3, [pc, #136]	@ (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0e:	4b20      	ldr	r3, [pc, #128]	@ (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e032      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e2c:	4b19      	ldr	r3, [pc, #100]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4916      	ldr	r1, [pc, #88]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e4a:	4b12      	ldr	r3, [pc, #72]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	490e      	ldr	r1, [pc, #56]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e5e:	f000 f821 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4b0b      	ldr	r3, [pc, #44]	@ (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	490a      	ldr	r1, [pc, #40]	@ (8005e98 <HAL_RCC_ClockConfig+0x1c0>)
 8005e70:	5ccb      	ldrb	r3, [r1, r3]
 8005e72:	fa22 f303 	lsr.w	r3, r2, r3
 8005e76:	4a09      	ldr	r2, [pc, #36]	@ (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd fc3e 	bl	8003700 <HAL_InitTick>

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023c00 	.word	0x40023c00
 8005e94:	40023800 	.word	0x40023800
 8005e98:	08009e68 	.word	0x08009e68
 8005e9c:	20000008 	.word	0x20000008
 8005ea0:	2000000c 	.word	0x2000000c

08005ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea8:	b094      	sub	sp, #80	@ 0x50
 8005eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ebc:	4b79      	ldr	r3, [pc, #484]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 030c 	and.w	r3, r3, #12
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d00d      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	f200 80e1 	bhi.w	8006090 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d003      	beq.n	8005ede <HAL_RCC_GetSysClockFreq+0x3a>
 8005ed6:	e0db      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ed8:	4b73      	ldr	r3, [pc, #460]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005edc:	e0db      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ede:	4b73      	ldr	r3, [pc, #460]	@ (80060ac <HAL_RCC_GetSysClockFreq+0x208>)
 8005ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ee2:	e0d8      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eee:	4b6d      	ldr	r3, [pc, #436]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d063      	beq.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efa:	4b6a      	ldr	r3, [pc, #424]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	099b      	lsrs	r3, r3, #6
 8005f00:	2200      	movs	r2, #0
 8005f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f0e:	2300      	movs	r3, #0
 8005f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	f04f 0000 	mov.w	r0, #0
 8005f1e:	f04f 0100 	mov.w	r1, #0
 8005f22:	0159      	lsls	r1, r3, #5
 8005f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f28:	0150      	lsls	r0, r2, #5
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4621      	mov	r1, r4
 8005f30:	1a51      	subs	r1, r2, r1
 8005f32:	6139      	str	r1, [r7, #16]
 8005f34:	4629      	mov	r1, r5
 8005f36:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f48:	4659      	mov	r1, fp
 8005f4a:	018b      	lsls	r3, r1, #6
 8005f4c:	4651      	mov	r1, sl
 8005f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f52:	4651      	mov	r1, sl
 8005f54:	018a      	lsls	r2, r1, #6
 8005f56:	4651      	mov	r1, sl
 8005f58:	ebb2 0801 	subs.w	r8, r2, r1
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	eb63 0901 	sbc.w	r9, r3, r1
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f76:	4690      	mov	r8, r2
 8005f78:	4699      	mov	r9, r3
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	eb18 0303 	adds.w	r3, r8, r3
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	462b      	mov	r3, r5
 8005f84:	eb49 0303 	adc.w	r3, r9, r3
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f96:	4629      	mov	r1, r5
 8005f98:	024b      	lsls	r3, r1, #9
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	024a      	lsls	r2, r1, #9
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005faa:	2200      	movs	r2, #0
 8005fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fb4:	f7fa fe00 	bl	8000bb8 <__aeabi_uldivmod>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc0:	e058      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc2:	4b38      	ldr	r3, [pc, #224]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	099b      	lsrs	r3, r3, #6
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	4611      	mov	r1, r2
 8005fce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fd2:	623b      	str	r3, [r7, #32]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fdc:	4642      	mov	r2, r8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	f04f 0000 	mov.w	r0, #0
 8005fe4:	f04f 0100 	mov.w	r1, #0
 8005fe8:	0159      	lsls	r1, r3, #5
 8005fea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fee:	0150      	lsls	r0, r2, #5
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800600c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006010:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006014:	ebb2 040a 	subs.w	r4, r2, sl
 8006018:	eb63 050b 	sbc.w	r5, r3, fp
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	00eb      	lsls	r3, r5, #3
 8006026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800602a:	00e2      	lsls	r2, r4, #3
 800602c:	4614      	mov	r4, r2
 800602e:	461d      	mov	r5, r3
 8006030:	4643      	mov	r3, r8
 8006032:	18e3      	adds	r3, r4, r3
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	464b      	mov	r3, r9
 8006038:	eb45 0303 	adc.w	r3, r5, r3
 800603c:	607b      	str	r3, [r7, #4]
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800604a:	4629      	mov	r1, r5
 800604c:	028b      	lsls	r3, r1, #10
 800604e:	4621      	mov	r1, r4
 8006050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006054:	4621      	mov	r1, r4
 8006056:	028a      	lsls	r2, r1, #10
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800605e:	2200      	movs	r2, #0
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	61fa      	str	r2, [r7, #28]
 8006064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006068:	f7fa fda6 	bl	8000bb8 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4613      	mov	r3, r2
 8006072:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006074:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	0c1b      	lsrs	r3, r3, #16
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	3301      	adds	r3, #1
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006084:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800608e:	e002      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006092:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006098:	4618      	mov	r0, r3
 800609a:	3750      	adds	r7, #80	@ 0x50
 800609c:	46bd      	mov	sp, r7
 800609e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a2:	bf00      	nop
 80060a4:	40023800 	.word	0x40023800
 80060a8:	00f42400 	.word	0x00f42400
 80060ac:	007a1200 	.word	0x007a1200

080060b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b4:	4b03      	ldr	r3, [pc, #12]	@ (80060c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000008 	.word	0x20000008

080060c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060cc:	f7ff fff0 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	0a9b      	lsrs	r3, r3, #10
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4903      	ldr	r1, [pc, #12]	@ (80060ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80060de:	5ccb      	ldrb	r3, [r1, r3]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	08009e78 	.word	0x08009e78

080060f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060f4:	f7ff ffdc 	bl	80060b0 <HAL_RCC_GetHCLKFreq>
 80060f8:	4602      	mov	r2, r0
 80060fa:	4b05      	ldr	r3, [pc, #20]	@ (8006110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	0b5b      	lsrs	r3, r3, #13
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	4903      	ldr	r1, [pc, #12]	@ (8006114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006106:	5ccb      	ldrb	r3, [r1, r3]
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800610c:	4618      	mov	r0, r3
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40023800 	.word	0x40023800
 8006114:	08009e78 	.word	0x08009e78

08006118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e041      	b.n	80061ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fd f902 	bl	8003348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f000 fac0 	bl	80066dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e041      	b.n	800624c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f839 	bl	8006254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f000 fa71 	bl	80066dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_TIM_PWM_Start+0x24>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e022      	b.n	80062d2 <HAL_TIM_PWM_Start+0x6a>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b04      	cmp	r3, #4
 8006290:	d109      	bne.n	80062a6 <HAL_TIM_PWM_Start+0x3e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e015      	b.n	80062d2 <HAL_TIM_PWM_Start+0x6a>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d109      	bne.n	80062c0 <HAL_TIM_PWM_Start+0x58>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e008      	b.n	80062d2 <HAL_TIM_PWM_Start+0x6a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e068      	b.n	80063ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Start+0x82>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062e8:	e013      	b.n	8006312 <HAL_TIM_PWM_Start+0xaa>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_PWM_Start+0x92>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062f8:	e00b      	b.n	8006312 <HAL_TIM_PWM_Start+0xaa>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Start+0xa2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006308:	e003      	b.n	8006312 <HAL_TIM_PWM_Start+0xaa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2201      	movs	r2, #1
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fc90 	bl	8006c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a23      	ldr	r2, [pc, #140]	@ (80063b4 <HAL_TIM_PWM_Start+0x14c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d107      	bne.n	800633a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006338:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1d      	ldr	r2, [pc, #116]	@ (80063b4 <HAL_TIM_PWM_Start+0x14c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634c:	d013      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a19      	ldr	r2, [pc, #100]	@ (80063b8 <HAL_TIM_PWM_Start+0x150>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a17      	ldr	r2, [pc, #92]	@ (80063bc <HAL_TIM_PWM_Start+0x154>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a16      	ldr	r2, [pc, #88]	@ (80063c0 <HAL_TIM_PWM_Start+0x158>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a14      	ldr	r2, [pc, #80]	@ (80063c4 <HAL_TIM_PWM_Start+0x15c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d111      	bne.n	800639a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b06      	cmp	r3, #6
 8006386:	d010      	beq.n	80063aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006398:	e007      	b.n	80063aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40014000 	.word	0x40014000

080063c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e0ae      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b0c      	cmp	r3, #12
 80063f2:	f200 809f 	bhi.w	8006534 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063f6:	a201      	add	r2, pc, #4	@ (adr r2, 80063fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006431 	.word	0x08006431
 8006400:	08006535 	.word	0x08006535
 8006404:	08006535 	.word	0x08006535
 8006408:	08006535 	.word	0x08006535
 800640c:	08006471 	.word	0x08006471
 8006410:	08006535 	.word	0x08006535
 8006414:	08006535 	.word	0x08006535
 8006418:	08006535 	.word	0x08006535
 800641c:	080064b3 	.word	0x080064b3
 8006420:	08006535 	.word	0x08006535
 8006424:	08006535 	.word	0x08006535
 8006428:	08006535 	.word	0x08006535
 800642c:	080064f3 	.word	0x080064f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f9dc 	bl	80067f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0208 	orr.w	r2, r2, #8
 800644a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0204 	bic.w	r2, r2, #4
 800645a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6999      	ldr	r1, [r3, #24]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	619a      	str	r2, [r3, #24]
      break;
 800646e:	e064      	b.n	800653a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fa22 	bl	80068c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800648a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800649a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6999      	ldr	r1, [r3, #24]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	021a      	lsls	r2, r3, #8
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	619a      	str	r2, [r3, #24]
      break;
 80064b0:	e043      	b.n	800653a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fa6d 	bl	8006998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0208 	orr.w	r2, r2, #8
 80064cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0204 	bic.w	r2, r2, #4
 80064dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69d9      	ldr	r1, [r3, #28]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	61da      	str	r2, [r3, #28]
      break;
 80064f0:	e023      	b.n	800653a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fab7 	bl	8006a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800650c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800651c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69d9      	ldr	r1, [r3, #28]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	021a      	lsls	r2, r3, #8
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	61da      	str	r2, [r3, #28]
      break;
 8006532:	e002      	b.n	800653a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	75fb      	strb	r3, [r7, #23]
      break;
 8006538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006542:	7dfb      	ldrb	r3, [r7, #23]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_TIM_ConfigClockSource+0x1c>
 8006564:	2302      	movs	r3, #2
 8006566:	e0b4      	b.n	80066d2 <HAL_TIM_ConfigClockSource+0x186>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800658e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a0:	d03e      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0xd4>
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a6:	f200 8087 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ae:	f000 8086 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x172>
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b6:	d87f      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b70      	cmp	r3, #112	@ 0x70
 80065ba:	d01a      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0xa6>
 80065bc:	2b70      	cmp	r3, #112	@ 0x70
 80065be:	d87b      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c0:	2b60      	cmp	r3, #96	@ 0x60
 80065c2:	d050      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x11a>
 80065c4:	2b60      	cmp	r3, #96	@ 0x60
 80065c6:	d877      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c8:	2b50      	cmp	r3, #80	@ 0x50
 80065ca:	d03c      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0xfa>
 80065cc:	2b50      	cmp	r3, #80	@ 0x50
 80065ce:	d873      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b40      	cmp	r3, #64	@ 0x40
 80065d2:	d058      	beq.n	8006686 <HAL_TIM_ConfigClockSource+0x13a>
 80065d4:	2b40      	cmp	r3, #64	@ 0x40
 80065d6:	d86f      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b30      	cmp	r3, #48	@ 0x30
 80065da:	d064      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15a>
 80065dc:	2b30      	cmp	r3, #48	@ 0x30
 80065de:	d86b      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d060      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15a>
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d867      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d05c      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15a>
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d05a      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15a>
 80065f0:	e062      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006602:	f000 fafd 	bl	8006c00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	609a      	str	r2, [r3, #8]
      break;
 800661e:	e04f      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006630:	f000 fae6 	bl	8006c00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006642:	609a      	str	r2, [r3, #8]
      break;
 8006644:	e03c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	461a      	mov	r2, r3
 8006654:	f000 fa5a 	bl	8006b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2150      	movs	r1, #80	@ 0x50
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fab3 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 8006664:	e02c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006672:	461a      	mov	r2, r3
 8006674:	f000 fa79 	bl	8006b6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2160      	movs	r1, #96	@ 0x60
 800667e:	4618      	mov	r0, r3
 8006680:	f000 faa3 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 8006684:	e01c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	461a      	mov	r2, r3
 8006694:	f000 fa3a 	bl	8006b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2140      	movs	r1, #64	@ 0x40
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa93 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 80066a4:	e00c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f000 fa8a 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 80066b6:	e003      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
      break;
 80066bc:	e000      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a3a      	ldr	r2, [pc, #232]	@ (80067d8 <TIM_Base_SetConfig+0xfc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00f      	beq.n	8006714 <TIM_Base_SetConfig+0x38>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fa:	d00b      	beq.n	8006714 <TIM_Base_SetConfig+0x38>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a37      	ldr	r2, [pc, #220]	@ (80067dc <TIM_Base_SetConfig+0x100>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d007      	beq.n	8006714 <TIM_Base_SetConfig+0x38>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a36      	ldr	r2, [pc, #216]	@ (80067e0 <TIM_Base_SetConfig+0x104>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_Base_SetConfig+0x38>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a35      	ldr	r2, [pc, #212]	@ (80067e4 <TIM_Base_SetConfig+0x108>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d108      	bne.n	8006726 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a2b      	ldr	r2, [pc, #172]	@ (80067d8 <TIM_Base_SetConfig+0xfc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d01b      	beq.n	8006766 <TIM_Base_SetConfig+0x8a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006734:	d017      	beq.n	8006766 <TIM_Base_SetConfig+0x8a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a28      	ldr	r2, [pc, #160]	@ (80067dc <TIM_Base_SetConfig+0x100>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <TIM_Base_SetConfig+0x8a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a27      	ldr	r2, [pc, #156]	@ (80067e0 <TIM_Base_SetConfig+0x104>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00f      	beq.n	8006766 <TIM_Base_SetConfig+0x8a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a26      	ldr	r2, [pc, #152]	@ (80067e4 <TIM_Base_SetConfig+0x108>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00b      	beq.n	8006766 <TIM_Base_SetConfig+0x8a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a25      	ldr	r2, [pc, #148]	@ (80067e8 <TIM_Base_SetConfig+0x10c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d007      	beq.n	8006766 <TIM_Base_SetConfig+0x8a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a24      	ldr	r2, [pc, #144]	@ (80067ec <TIM_Base_SetConfig+0x110>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d003      	beq.n	8006766 <TIM_Base_SetConfig+0x8a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a23      	ldr	r2, [pc, #140]	@ (80067f0 <TIM_Base_SetConfig+0x114>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d108      	bne.n	8006778 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800676c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a0e      	ldr	r2, [pc, #56]	@ (80067d8 <TIM_Base_SetConfig+0xfc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d103      	bne.n	80067ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d105      	bne.n	80067ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f023 0201 	bic.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	611a      	str	r2, [r3, #16]
  }
}
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40014400 	.word	0x40014400
 80067f0:	40014800 	.word	0x40014800

080067f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f023 0201 	bic.w	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f023 0302 	bic.w	r3, r3, #2
 800683c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a1c      	ldr	r2, [pc, #112]	@ (80068bc <TIM_OC1_SetConfig+0xc8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10c      	bne.n	800686a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0308 	bic.w	r3, r3, #8
 8006856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f023 0304 	bic.w	r3, r3, #4
 8006868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a13      	ldr	r2, [pc, #76]	@ (80068bc <TIM_OC1_SetConfig+0xc8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d111      	bne.n	8006896 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	621a      	str	r2, [r3, #32]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40010000 	.word	0x40010000

080068c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f023 0210 	bic.w	r2, r3, #16
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f023 0320 	bic.w	r3, r3, #32
 800690a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1e      	ldr	r2, [pc, #120]	@ (8006994 <TIM_OC2_SetConfig+0xd4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10d      	bne.n	800693c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800693a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a15      	ldr	r2, [pc, #84]	@ (8006994 <TIM_OC2_SetConfig+0xd4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d113      	bne.n	800696c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800694a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40010000 	.word	0x40010000

08006998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a68 <TIM_OC3_SetConfig+0xd0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10d      	bne.n	8006a12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a14      	ldr	r2, [pc, #80]	@ (8006a68 <TIM_OC3_SetConfig+0xd0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d113      	bne.n	8006a42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	621a      	str	r2, [r3, #32]
}
 8006a5c:	bf00      	nop
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	40010000 	.word	0x40010000

08006a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	031b      	lsls	r3, r3, #12
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a10      	ldr	r2, [pc, #64]	@ (8006b08 <TIM_OC4_SetConfig+0x9c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d109      	bne.n	8006ae0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	019b      	lsls	r3, r3, #6
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40010000 	.word	0x40010000

08006b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f023 0201 	bic.w	r2, r3, #1
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f023 030a 	bic.w	r3, r3, #10
 8006b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b087      	sub	sp, #28
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f023 0210 	bic.w	r2, r3, #16
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	031b      	lsls	r3, r3, #12
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ba6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	621a      	str	r2, [r3, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f043 0307 	orr.w	r3, r3, #7
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	609a      	str	r2, [r3, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	021a      	lsls	r2, r3, #8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	609a      	str	r2, [r3, #8]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	2201      	movs	r2, #1
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1a      	ldr	r2, [r3, #32]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	401a      	ands	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1a      	ldr	r2, [r3, #32]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	fa01 f303 	lsl.w	r3, r1, r3
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e050      	b.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d018      	beq.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf0:	d013      	beq.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a18      	ldr	r2, [pc, #96]	@ (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00e      	beq.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a16      	ldr	r2, [pc, #88]	@ (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d009      	beq.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a15      	ldr	r2, [pc, #84]	@ (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a13      	ldr	r2, [pc, #76]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d10c      	bne.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00
 8006d64:	40014000 	.word	0x40014000

08006d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e042      	b.n	8006e00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fc fb36 	bl	8003400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2224      	movs	r2, #36	@ 0x24
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f82b 	bl	8006e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695a      	ldr	r2, [r3, #20]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e0c:	b0c0      	sub	sp, #256	@ 0x100
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e24:	68d9      	ldr	r1, [r3, #12]
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	ea40 0301 	orr.w	r3, r0, r1
 8006e30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e60:	f021 010c 	bic.w	r1, r1, #12
 8006e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e82:	6999      	ldr	r1, [r3, #24]
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	ea40 0301 	orr.w	r3, r0, r1
 8006e8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b8f      	ldr	r3, [pc, #572]	@ (80070d4 <UART_SetConfig+0x2cc>)
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d005      	beq.n	8006ea8 <UART_SetConfig+0xa0>
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b8d      	ldr	r3, [pc, #564]	@ (80070d8 <UART_SetConfig+0x2d0>)
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d104      	bne.n	8006eb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ea8:	f7ff f922 	bl	80060f0 <HAL_RCC_GetPCLK2Freq>
 8006eac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006eb0:	e003      	b.n	8006eba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006eb2:	f7ff f909 	bl	80060c8 <HAL_RCC_GetPCLK1Freq>
 8006eb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec4:	f040 810c 	bne.w	80070e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ed2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006ed6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006eda:	4622      	mov	r2, r4
 8006edc:	462b      	mov	r3, r5
 8006ede:	1891      	adds	r1, r2, r2
 8006ee0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ee2:	415b      	adcs	r3, r3
 8006ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ee6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006eea:	4621      	mov	r1, r4
 8006eec:	eb12 0801 	adds.w	r8, r2, r1
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	eb43 0901 	adc.w	r9, r3, r1
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f0a:	4690      	mov	r8, r2
 8006f0c:	4699      	mov	r9, r3
 8006f0e:	4623      	mov	r3, r4
 8006f10:	eb18 0303 	adds.w	r3, r8, r3
 8006f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f18:	462b      	mov	r3, r5
 8006f1a:	eb49 0303 	adc.w	r3, r9, r3
 8006f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f36:	460b      	mov	r3, r1
 8006f38:	18db      	adds	r3, r3, r3
 8006f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	eb42 0303 	adc.w	r3, r2, r3
 8006f42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f4c:	f7f9 fe34 	bl	8000bb8 <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4b61      	ldr	r3, [pc, #388]	@ (80070dc <UART_SetConfig+0x2d4>)
 8006f56:	fba3 2302 	umull	r2, r3, r3, r2
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	011c      	lsls	r4, r3, #4
 8006f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	1891      	adds	r1, r2, r2
 8006f76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f78:	415b      	adcs	r3, r3
 8006f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f80:	4641      	mov	r1, r8
 8006f82:	eb12 0a01 	adds.w	sl, r2, r1
 8006f86:	4649      	mov	r1, r9
 8006f88:	eb43 0b01 	adc.w	fp, r3, r1
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fa0:	4692      	mov	sl, r2
 8006fa2:	469b      	mov	fp, r3
 8006fa4:	4643      	mov	r3, r8
 8006fa6:	eb1a 0303 	adds.w	r3, sl, r3
 8006faa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fae:	464b      	mov	r3, r9
 8006fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8006fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006fc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	18db      	adds	r3, r3, r3
 8006fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	eb42 0303 	adc.w	r3, r2, r3
 8006fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006fde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006fe2:	f7f9 fde9 	bl	8000bb8 <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4611      	mov	r1, r2
 8006fec:	4b3b      	ldr	r3, [pc, #236]	@ (80070dc <UART_SetConfig+0x2d4>)
 8006fee:	fba3 2301 	umull	r2, r3, r3, r1
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	2264      	movs	r2, #100	@ 0x64
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
 8006ffa:	1acb      	subs	r3, r1, r3
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007002:	4b36      	ldr	r3, [pc, #216]	@ (80070dc <UART_SetConfig+0x2d4>)
 8007004:	fba3 2302 	umull	r2, r3, r3, r2
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007010:	441c      	add	r4, r3
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800701c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007020:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800702c:	415b      	adcs	r3, r3
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007030:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007034:	4641      	mov	r1, r8
 8007036:	1851      	adds	r1, r2, r1
 8007038:	6339      	str	r1, [r7, #48]	@ 0x30
 800703a:	4649      	mov	r1, r9
 800703c:	414b      	adcs	r3, r1
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800704c:	4659      	mov	r1, fp
 800704e:	00cb      	lsls	r3, r1, #3
 8007050:	4651      	mov	r1, sl
 8007052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007056:	4651      	mov	r1, sl
 8007058:	00ca      	lsls	r2, r1, #3
 800705a:	4610      	mov	r0, r2
 800705c:	4619      	mov	r1, r3
 800705e:	4603      	mov	r3, r0
 8007060:	4642      	mov	r2, r8
 8007062:	189b      	adds	r3, r3, r2
 8007064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007068:	464b      	mov	r3, r9
 800706a:	460a      	mov	r2, r1
 800706c:	eb42 0303 	adc.w	r3, r2, r3
 8007070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007080:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007088:	460b      	mov	r3, r1
 800708a:	18db      	adds	r3, r3, r3
 800708c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800708e:	4613      	mov	r3, r2
 8007090:	eb42 0303 	adc.w	r3, r2, r3
 8007094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007096:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800709a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800709e:	f7f9 fd8b 	bl	8000bb8 <__aeabi_uldivmod>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4b0d      	ldr	r3, [pc, #52]	@ (80070dc <UART_SetConfig+0x2d4>)
 80070a8:	fba3 1302 	umull	r1, r3, r3, r2
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	2164      	movs	r1, #100	@ 0x64
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	3332      	adds	r3, #50	@ 0x32
 80070ba:	4a08      	ldr	r2, [pc, #32]	@ (80070dc <UART_SetConfig+0x2d4>)
 80070bc:	fba2 2303 	umull	r2, r3, r2, r3
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	f003 0207 	and.w	r2, r3, #7
 80070c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4422      	add	r2, r4
 80070ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070d0:	e106      	b.n	80072e0 <UART_SetConfig+0x4d8>
 80070d2:	bf00      	nop
 80070d4:	40011000 	.word	0x40011000
 80070d8:	40011400 	.word	0x40011400
 80070dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80070ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80070f2:	4642      	mov	r2, r8
 80070f4:	464b      	mov	r3, r9
 80070f6:	1891      	adds	r1, r2, r2
 80070f8:	6239      	str	r1, [r7, #32]
 80070fa:	415b      	adcs	r3, r3
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80070fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007102:	4641      	mov	r1, r8
 8007104:	1854      	adds	r4, r2, r1
 8007106:	4649      	mov	r1, r9
 8007108:	eb43 0501 	adc.w	r5, r3, r1
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	00eb      	lsls	r3, r5, #3
 8007116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800711a:	00e2      	lsls	r2, r4, #3
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	4643      	mov	r3, r8
 8007122:	18e3      	adds	r3, r4, r3
 8007124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007128:	464b      	mov	r3, r9
 800712a:	eb45 0303 	adc.w	r3, r5, r3
 800712e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800713e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800714e:	4629      	mov	r1, r5
 8007150:	008b      	lsls	r3, r1, #2
 8007152:	4621      	mov	r1, r4
 8007154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007158:	4621      	mov	r1, r4
 800715a:	008a      	lsls	r2, r1, #2
 800715c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007160:	f7f9 fd2a 	bl	8000bb8 <__aeabi_uldivmod>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4b60      	ldr	r3, [pc, #384]	@ (80072ec <UART_SetConfig+0x4e4>)
 800716a:	fba3 2302 	umull	r2, r3, r3, r2
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	011c      	lsls	r4, r3, #4
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007176:	2200      	movs	r2, #0
 8007178:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800717c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007180:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007184:	4642      	mov	r2, r8
 8007186:	464b      	mov	r3, r9
 8007188:	1891      	adds	r1, r2, r2
 800718a:	61b9      	str	r1, [r7, #24]
 800718c:	415b      	adcs	r3, r3
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007194:	4641      	mov	r1, r8
 8007196:	1851      	adds	r1, r2, r1
 8007198:	6139      	str	r1, [r7, #16]
 800719a:	4649      	mov	r1, r9
 800719c:	414b      	adcs	r3, r1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071ac:	4659      	mov	r1, fp
 80071ae:	00cb      	lsls	r3, r1, #3
 80071b0:	4651      	mov	r1, sl
 80071b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b6:	4651      	mov	r1, sl
 80071b8:	00ca      	lsls	r2, r1, #3
 80071ba:	4610      	mov	r0, r2
 80071bc:	4619      	mov	r1, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	4642      	mov	r2, r8
 80071c2:	189b      	adds	r3, r3, r2
 80071c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071c8:	464b      	mov	r3, r9
 80071ca:	460a      	mov	r2, r1
 80071cc:	eb42 0303 	adc.w	r3, r2, r3
 80071d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80071ec:	4649      	mov	r1, r9
 80071ee:	008b      	lsls	r3, r1, #2
 80071f0:	4641      	mov	r1, r8
 80071f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f6:	4641      	mov	r1, r8
 80071f8:	008a      	lsls	r2, r1, #2
 80071fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80071fe:	f7f9 fcdb 	bl	8000bb8 <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4611      	mov	r1, r2
 8007208:	4b38      	ldr	r3, [pc, #224]	@ (80072ec <UART_SetConfig+0x4e4>)
 800720a:	fba3 2301 	umull	r2, r3, r3, r1
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	2264      	movs	r2, #100	@ 0x64
 8007212:	fb02 f303 	mul.w	r3, r2, r3
 8007216:	1acb      	subs	r3, r1, r3
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	3332      	adds	r3, #50	@ 0x32
 800721c:	4a33      	ldr	r2, [pc, #204]	@ (80072ec <UART_SetConfig+0x4e4>)
 800721e:	fba2 2303 	umull	r2, r3, r2, r3
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007228:	441c      	add	r4, r3
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722e:	2200      	movs	r2, #0
 8007230:	673b      	str	r3, [r7, #112]	@ 0x70
 8007232:	677a      	str	r2, [r7, #116]	@ 0x74
 8007234:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007238:	4642      	mov	r2, r8
 800723a:	464b      	mov	r3, r9
 800723c:	1891      	adds	r1, r2, r2
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	415b      	adcs	r3, r3
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007248:	4641      	mov	r1, r8
 800724a:	1851      	adds	r1, r2, r1
 800724c:	6039      	str	r1, [r7, #0]
 800724e:	4649      	mov	r1, r9
 8007250:	414b      	adcs	r3, r1
 8007252:	607b      	str	r3, [r7, #4]
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007260:	4659      	mov	r1, fp
 8007262:	00cb      	lsls	r3, r1, #3
 8007264:	4651      	mov	r1, sl
 8007266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726a:	4651      	mov	r1, sl
 800726c:	00ca      	lsls	r2, r1, #3
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	4603      	mov	r3, r0
 8007274:	4642      	mov	r2, r8
 8007276:	189b      	adds	r3, r3, r2
 8007278:	66bb      	str	r3, [r7, #104]	@ 0x68
 800727a:	464b      	mov	r3, r9
 800727c:	460a      	mov	r2, r1
 800727e:	eb42 0303 	adc.w	r3, r2, r3
 8007282:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	663b      	str	r3, [r7, #96]	@ 0x60
 800728e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800729c:	4649      	mov	r1, r9
 800729e:	008b      	lsls	r3, r1, #2
 80072a0:	4641      	mov	r1, r8
 80072a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072a6:	4641      	mov	r1, r8
 80072a8:	008a      	lsls	r2, r1, #2
 80072aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80072ae:	f7f9 fc83 	bl	8000bb8 <__aeabi_uldivmod>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4b0d      	ldr	r3, [pc, #52]	@ (80072ec <UART_SetConfig+0x4e4>)
 80072b8:	fba3 1302 	umull	r1, r3, r3, r2
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	2164      	movs	r1, #100	@ 0x64
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	3332      	adds	r3, #50	@ 0x32
 80072ca:	4a08      	ldr	r2, [pc, #32]	@ (80072ec <UART_SetConfig+0x4e4>)
 80072cc:	fba2 2303 	umull	r2, r3, r2, r3
 80072d0:	095b      	lsrs	r3, r3, #5
 80072d2:	f003 020f 	and.w	r2, r3, #15
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4422      	add	r2, r4
 80072de:	609a      	str	r2, [r3, #8]
}
 80072e0:	bf00      	nop
 80072e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80072e6:	46bd      	mov	sp, r7
 80072e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ec:	51eb851f 	.word	0x51eb851f

080072f0 <__cvt>:
 80072f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	ec57 6b10 	vmov	r6, r7, d0
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	460c      	mov	r4, r1
 80072fc:	4619      	mov	r1, r3
 80072fe:	463b      	mov	r3, r7
 8007300:	bfbb      	ittet	lt
 8007302:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007306:	461f      	movlt	r7, r3
 8007308:	2300      	movge	r3, #0
 800730a:	232d      	movlt	r3, #45	@ 0x2d
 800730c:	700b      	strb	r3, [r1, #0]
 800730e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007310:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007314:	4691      	mov	r9, r2
 8007316:	f023 0820 	bic.w	r8, r3, #32
 800731a:	bfbc      	itt	lt
 800731c:	4632      	movlt	r2, r6
 800731e:	4616      	movlt	r6, r2
 8007320:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007324:	d005      	beq.n	8007332 <__cvt+0x42>
 8007326:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800732a:	d100      	bne.n	800732e <__cvt+0x3e>
 800732c:	3401      	adds	r4, #1
 800732e:	2102      	movs	r1, #2
 8007330:	e000      	b.n	8007334 <__cvt+0x44>
 8007332:	2103      	movs	r1, #3
 8007334:	ab03      	add	r3, sp, #12
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	ab02      	add	r3, sp, #8
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	ec47 6b10 	vmov	d0, r6, r7
 8007340:	4653      	mov	r3, sl
 8007342:	4622      	mov	r2, r4
 8007344:	f001 f80c 	bl	8008360 <_dtoa_r>
 8007348:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800734c:	4605      	mov	r5, r0
 800734e:	d119      	bne.n	8007384 <__cvt+0x94>
 8007350:	f019 0f01 	tst.w	r9, #1
 8007354:	d00e      	beq.n	8007374 <__cvt+0x84>
 8007356:	eb00 0904 	add.w	r9, r0, r4
 800735a:	2200      	movs	r2, #0
 800735c:	2300      	movs	r3, #0
 800735e:	4630      	mov	r0, r6
 8007360:	4639      	mov	r1, r7
 8007362:	f7f9 fbb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007366:	b108      	cbz	r0, 800736c <__cvt+0x7c>
 8007368:	f8cd 900c 	str.w	r9, [sp, #12]
 800736c:	2230      	movs	r2, #48	@ 0x30
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	454b      	cmp	r3, r9
 8007372:	d31e      	bcc.n	80073b2 <__cvt+0xc2>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007378:	1b5b      	subs	r3, r3, r5
 800737a:	4628      	mov	r0, r5
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	b004      	add	sp, #16
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007388:	eb00 0904 	add.w	r9, r0, r4
 800738c:	d1e5      	bne.n	800735a <__cvt+0x6a>
 800738e:	7803      	ldrb	r3, [r0, #0]
 8007390:	2b30      	cmp	r3, #48	@ 0x30
 8007392:	d10a      	bne.n	80073aa <__cvt+0xba>
 8007394:	2200      	movs	r2, #0
 8007396:	2300      	movs	r3, #0
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f9 fb9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80073a0:	b918      	cbnz	r0, 80073aa <__cvt+0xba>
 80073a2:	f1c4 0401 	rsb	r4, r4, #1
 80073a6:	f8ca 4000 	str.w	r4, [sl]
 80073aa:	f8da 3000 	ldr.w	r3, [sl]
 80073ae:	4499      	add	r9, r3
 80073b0:	e7d3      	b.n	800735a <__cvt+0x6a>
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	9103      	str	r1, [sp, #12]
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e7d9      	b.n	800736e <__cvt+0x7e>

080073ba <__exponent>:
 80073ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073bc:	2900      	cmp	r1, #0
 80073be:	bfba      	itte	lt
 80073c0:	4249      	neglt	r1, r1
 80073c2:	232d      	movlt	r3, #45	@ 0x2d
 80073c4:	232b      	movge	r3, #43	@ 0x2b
 80073c6:	2909      	cmp	r1, #9
 80073c8:	7002      	strb	r2, [r0, #0]
 80073ca:	7043      	strb	r3, [r0, #1]
 80073cc:	dd29      	ble.n	8007422 <__exponent+0x68>
 80073ce:	f10d 0307 	add.w	r3, sp, #7
 80073d2:	461d      	mov	r5, r3
 80073d4:	270a      	movs	r7, #10
 80073d6:	461a      	mov	r2, r3
 80073d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80073dc:	fb07 1416 	mls	r4, r7, r6, r1
 80073e0:	3430      	adds	r4, #48	@ 0x30
 80073e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073e6:	460c      	mov	r4, r1
 80073e8:	2c63      	cmp	r4, #99	@ 0x63
 80073ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80073ee:	4631      	mov	r1, r6
 80073f0:	dcf1      	bgt.n	80073d6 <__exponent+0x1c>
 80073f2:	3130      	adds	r1, #48	@ 0x30
 80073f4:	1e94      	subs	r4, r2, #2
 80073f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073fa:	1c41      	adds	r1, r0, #1
 80073fc:	4623      	mov	r3, r4
 80073fe:	42ab      	cmp	r3, r5
 8007400:	d30a      	bcc.n	8007418 <__exponent+0x5e>
 8007402:	f10d 0309 	add.w	r3, sp, #9
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	42ac      	cmp	r4, r5
 800740a:	bf88      	it	hi
 800740c:	2300      	movhi	r3, #0
 800740e:	3302      	adds	r3, #2
 8007410:	4403      	add	r3, r0
 8007412:	1a18      	subs	r0, r3, r0
 8007414:	b003      	add	sp, #12
 8007416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007418:	f813 6b01 	ldrb.w	r6, [r3], #1
 800741c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007420:	e7ed      	b.n	80073fe <__exponent+0x44>
 8007422:	2330      	movs	r3, #48	@ 0x30
 8007424:	3130      	adds	r1, #48	@ 0x30
 8007426:	7083      	strb	r3, [r0, #2]
 8007428:	70c1      	strb	r1, [r0, #3]
 800742a:	1d03      	adds	r3, r0, #4
 800742c:	e7f1      	b.n	8007412 <__exponent+0x58>
	...

08007430 <_printf_float>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	b08d      	sub	sp, #52	@ 0x34
 8007436:	460c      	mov	r4, r1
 8007438:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800743c:	4616      	mov	r6, r2
 800743e:	461f      	mov	r7, r3
 8007440:	4605      	mov	r5, r0
 8007442:	f000 fe7f 	bl	8008144 <_localeconv_r>
 8007446:	6803      	ldr	r3, [r0, #0]
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	4618      	mov	r0, r3
 800744c:	f7f8 ff18 	bl	8000280 <strlen>
 8007450:	2300      	movs	r3, #0
 8007452:	930a      	str	r3, [sp, #40]	@ 0x28
 8007454:	f8d8 3000 	ldr.w	r3, [r8]
 8007458:	9005      	str	r0, [sp, #20]
 800745a:	3307      	adds	r3, #7
 800745c:	f023 0307 	bic.w	r3, r3, #7
 8007460:	f103 0208 	add.w	r2, r3, #8
 8007464:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007468:	f8d4 b000 	ldr.w	fp, [r4]
 800746c:	f8c8 2000 	str.w	r2, [r8]
 8007470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007474:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007478:	9307      	str	r3, [sp, #28]
 800747a:	f8cd 8018 	str.w	r8, [sp, #24]
 800747e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007486:	4b9c      	ldr	r3, [pc, #624]	@ (80076f8 <_printf_float+0x2c8>)
 8007488:	f04f 32ff 	mov.w	r2, #4294967295
 800748c:	f7f9 fb56 	bl	8000b3c <__aeabi_dcmpun>
 8007490:	bb70      	cbnz	r0, 80074f0 <_printf_float+0xc0>
 8007492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007496:	4b98      	ldr	r3, [pc, #608]	@ (80076f8 <_printf_float+0x2c8>)
 8007498:	f04f 32ff 	mov.w	r2, #4294967295
 800749c:	f7f9 fb30 	bl	8000b00 <__aeabi_dcmple>
 80074a0:	bb30      	cbnz	r0, 80074f0 <_printf_float+0xc0>
 80074a2:	2200      	movs	r2, #0
 80074a4:	2300      	movs	r3, #0
 80074a6:	4640      	mov	r0, r8
 80074a8:	4649      	mov	r1, r9
 80074aa:	f7f9 fb1f 	bl	8000aec <__aeabi_dcmplt>
 80074ae:	b110      	cbz	r0, 80074b6 <_printf_float+0x86>
 80074b0:	232d      	movs	r3, #45	@ 0x2d
 80074b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074b6:	4a91      	ldr	r2, [pc, #580]	@ (80076fc <_printf_float+0x2cc>)
 80074b8:	4b91      	ldr	r3, [pc, #580]	@ (8007700 <_printf_float+0x2d0>)
 80074ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074be:	bf94      	ite	ls
 80074c0:	4690      	movls	r8, r2
 80074c2:	4698      	movhi	r8, r3
 80074c4:	2303      	movs	r3, #3
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	f02b 0304 	bic.w	r3, fp, #4
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	f04f 0900 	mov.w	r9, #0
 80074d2:	9700      	str	r7, [sp, #0]
 80074d4:	4633      	mov	r3, r6
 80074d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074d8:	4621      	mov	r1, r4
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 f9d2 	bl	8007884 <_printf_common>
 80074e0:	3001      	adds	r0, #1
 80074e2:	f040 808d 	bne.w	8007600 <_printf_float+0x1d0>
 80074e6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ea:	b00d      	add	sp, #52	@ 0x34
 80074ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f0:	4642      	mov	r2, r8
 80074f2:	464b      	mov	r3, r9
 80074f4:	4640      	mov	r0, r8
 80074f6:	4649      	mov	r1, r9
 80074f8:	f7f9 fb20 	bl	8000b3c <__aeabi_dcmpun>
 80074fc:	b140      	cbz	r0, 8007510 <_printf_float+0xe0>
 80074fe:	464b      	mov	r3, r9
 8007500:	2b00      	cmp	r3, #0
 8007502:	bfbc      	itt	lt
 8007504:	232d      	movlt	r3, #45	@ 0x2d
 8007506:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800750a:	4a7e      	ldr	r2, [pc, #504]	@ (8007704 <_printf_float+0x2d4>)
 800750c:	4b7e      	ldr	r3, [pc, #504]	@ (8007708 <_printf_float+0x2d8>)
 800750e:	e7d4      	b.n	80074ba <_printf_float+0x8a>
 8007510:	6863      	ldr	r3, [r4, #4]
 8007512:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007516:	9206      	str	r2, [sp, #24]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	d13b      	bne.n	8007594 <_printf_float+0x164>
 800751c:	2306      	movs	r3, #6
 800751e:	6063      	str	r3, [r4, #4]
 8007520:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007524:	2300      	movs	r3, #0
 8007526:	6022      	str	r2, [r4, #0]
 8007528:	9303      	str	r3, [sp, #12]
 800752a:	ab0a      	add	r3, sp, #40	@ 0x28
 800752c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007530:	ab09      	add	r3, sp, #36	@ 0x24
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	6861      	ldr	r1, [r4, #4]
 8007536:	ec49 8b10 	vmov	d0, r8, r9
 800753a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800753e:	4628      	mov	r0, r5
 8007540:	f7ff fed6 	bl	80072f0 <__cvt>
 8007544:	9b06      	ldr	r3, [sp, #24]
 8007546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007548:	2b47      	cmp	r3, #71	@ 0x47
 800754a:	4680      	mov	r8, r0
 800754c:	d129      	bne.n	80075a2 <_printf_float+0x172>
 800754e:	1cc8      	adds	r0, r1, #3
 8007550:	db02      	blt.n	8007558 <_printf_float+0x128>
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	4299      	cmp	r1, r3
 8007556:	dd41      	ble.n	80075dc <_printf_float+0x1ac>
 8007558:	f1aa 0a02 	sub.w	sl, sl, #2
 800755c:	fa5f fa8a 	uxtb.w	sl, sl
 8007560:	3901      	subs	r1, #1
 8007562:	4652      	mov	r2, sl
 8007564:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007568:	9109      	str	r1, [sp, #36]	@ 0x24
 800756a:	f7ff ff26 	bl	80073ba <__exponent>
 800756e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007570:	1813      	adds	r3, r2, r0
 8007572:	2a01      	cmp	r2, #1
 8007574:	4681      	mov	r9, r0
 8007576:	6123      	str	r3, [r4, #16]
 8007578:	dc02      	bgt.n	8007580 <_printf_float+0x150>
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	07d2      	lsls	r2, r2, #31
 800757e:	d501      	bpl.n	8007584 <_printf_float+0x154>
 8007580:	3301      	adds	r3, #1
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0a2      	beq.n	80074d2 <_printf_float+0xa2>
 800758c:	232d      	movs	r3, #45	@ 0x2d
 800758e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007592:	e79e      	b.n	80074d2 <_printf_float+0xa2>
 8007594:	9a06      	ldr	r2, [sp, #24]
 8007596:	2a47      	cmp	r2, #71	@ 0x47
 8007598:	d1c2      	bne.n	8007520 <_printf_float+0xf0>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1c0      	bne.n	8007520 <_printf_float+0xf0>
 800759e:	2301      	movs	r3, #1
 80075a0:	e7bd      	b.n	800751e <_printf_float+0xee>
 80075a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075a6:	d9db      	bls.n	8007560 <_printf_float+0x130>
 80075a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075ac:	d118      	bne.n	80075e0 <_printf_float+0x1b0>
 80075ae:	2900      	cmp	r1, #0
 80075b0:	6863      	ldr	r3, [r4, #4]
 80075b2:	dd0b      	ble.n	80075cc <_printf_float+0x19c>
 80075b4:	6121      	str	r1, [r4, #16]
 80075b6:	b913      	cbnz	r3, 80075be <_printf_float+0x18e>
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	07d0      	lsls	r0, r2, #31
 80075bc:	d502      	bpl.n	80075c4 <_printf_float+0x194>
 80075be:	3301      	adds	r3, #1
 80075c0:	440b      	add	r3, r1
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075c6:	f04f 0900 	mov.w	r9, #0
 80075ca:	e7db      	b.n	8007584 <_printf_float+0x154>
 80075cc:	b913      	cbnz	r3, 80075d4 <_printf_float+0x1a4>
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	07d2      	lsls	r2, r2, #31
 80075d2:	d501      	bpl.n	80075d8 <_printf_float+0x1a8>
 80075d4:	3302      	adds	r3, #2
 80075d6:	e7f4      	b.n	80075c2 <_printf_float+0x192>
 80075d8:	2301      	movs	r3, #1
 80075da:	e7f2      	b.n	80075c2 <_printf_float+0x192>
 80075dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075e2:	4299      	cmp	r1, r3
 80075e4:	db05      	blt.n	80075f2 <_printf_float+0x1c2>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	6121      	str	r1, [r4, #16]
 80075ea:	07d8      	lsls	r0, r3, #31
 80075ec:	d5ea      	bpl.n	80075c4 <_printf_float+0x194>
 80075ee:	1c4b      	adds	r3, r1, #1
 80075f0:	e7e7      	b.n	80075c2 <_printf_float+0x192>
 80075f2:	2900      	cmp	r1, #0
 80075f4:	bfd4      	ite	le
 80075f6:	f1c1 0202 	rsble	r2, r1, #2
 80075fa:	2201      	movgt	r2, #1
 80075fc:	4413      	add	r3, r2
 80075fe:	e7e0      	b.n	80075c2 <_printf_float+0x192>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	055a      	lsls	r2, r3, #21
 8007604:	d407      	bmi.n	8007616 <_printf_float+0x1e6>
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	4642      	mov	r2, r8
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	d12b      	bne.n	800766c <_printf_float+0x23c>
 8007614:	e767      	b.n	80074e6 <_printf_float+0xb6>
 8007616:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800761a:	f240 80dd 	bls.w	80077d8 <_printf_float+0x3a8>
 800761e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007622:	2200      	movs	r2, #0
 8007624:	2300      	movs	r3, #0
 8007626:	f7f9 fa57 	bl	8000ad8 <__aeabi_dcmpeq>
 800762a:	2800      	cmp	r0, #0
 800762c:	d033      	beq.n	8007696 <_printf_float+0x266>
 800762e:	4a37      	ldr	r2, [pc, #220]	@ (800770c <_printf_float+0x2dc>)
 8007630:	2301      	movs	r3, #1
 8007632:	4631      	mov	r1, r6
 8007634:	4628      	mov	r0, r5
 8007636:	47b8      	blx	r7
 8007638:	3001      	adds	r0, #1
 800763a:	f43f af54 	beq.w	80074e6 <_printf_float+0xb6>
 800763e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007642:	4543      	cmp	r3, r8
 8007644:	db02      	blt.n	800764c <_printf_float+0x21c>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	07d8      	lsls	r0, r3, #31
 800764a:	d50f      	bpl.n	800766c <_printf_float+0x23c>
 800764c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007650:	4631      	mov	r1, r6
 8007652:	4628      	mov	r0, r5
 8007654:	47b8      	blx	r7
 8007656:	3001      	adds	r0, #1
 8007658:	f43f af45 	beq.w	80074e6 <_printf_float+0xb6>
 800765c:	f04f 0900 	mov.w	r9, #0
 8007660:	f108 38ff 	add.w	r8, r8, #4294967295
 8007664:	f104 0a1a 	add.w	sl, r4, #26
 8007668:	45c8      	cmp	r8, r9
 800766a:	dc09      	bgt.n	8007680 <_printf_float+0x250>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	079b      	lsls	r3, r3, #30
 8007670:	f100 8103 	bmi.w	800787a <_printf_float+0x44a>
 8007674:	68e0      	ldr	r0, [r4, #12]
 8007676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007678:	4298      	cmp	r0, r3
 800767a:	bfb8      	it	lt
 800767c:	4618      	movlt	r0, r3
 800767e:	e734      	b.n	80074ea <_printf_float+0xba>
 8007680:	2301      	movs	r3, #1
 8007682:	4652      	mov	r2, sl
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f af2b 	beq.w	80074e6 <_printf_float+0xb6>
 8007690:	f109 0901 	add.w	r9, r9, #1
 8007694:	e7e8      	b.n	8007668 <_printf_float+0x238>
 8007696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	dc39      	bgt.n	8007710 <_printf_float+0x2e0>
 800769c:	4a1b      	ldr	r2, [pc, #108]	@ (800770c <_printf_float+0x2dc>)
 800769e:	2301      	movs	r3, #1
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f af1d 	beq.w	80074e6 <_printf_float+0xb6>
 80076ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80076b0:	ea59 0303 	orrs.w	r3, r9, r3
 80076b4:	d102      	bne.n	80076bc <_printf_float+0x28c>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	07d9      	lsls	r1, r3, #31
 80076ba:	d5d7      	bpl.n	800766c <_printf_float+0x23c>
 80076bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	f43f af0d 	beq.w	80074e6 <_printf_float+0xb6>
 80076cc:	f04f 0a00 	mov.w	sl, #0
 80076d0:	f104 0b1a 	add.w	fp, r4, #26
 80076d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d6:	425b      	negs	r3, r3
 80076d8:	4553      	cmp	r3, sl
 80076da:	dc01      	bgt.n	80076e0 <_printf_float+0x2b0>
 80076dc:	464b      	mov	r3, r9
 80076de:	e793      	b.n	8007608 <_printf_float+0x1d8>
 80076e0:	2301      	movs	r3, #1
 80076e2:	465a      	mov	r2, fp
 80076e4:	4631      	mov	r1, r6
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b8      	blx	r7
 80076ea:	3001      	adds	r0, #1
 80076ec:	f43f aefb 	beq.w	80074e6 <_printf_float+0xb6>
 80076f0:	f10a 0a01 	add.w	sl, sl, #1
 80076f4:	e7ee      	b.n	80076d4 <_printf_float+0x2a4>
 80076f6:	bf00      	nop
 80076f8:	7fefffff 	.word	0x7fefffff
 80076fc:	08009e80 	.word	0x08009e80
 8007700:	08009e84 	.word	0x08009e84
 8007704:	08009e88 	.word	0x08009e88
 8007708:	08009e8c 	.word	0x08009e8c
 800770c:	08009e90 	.word	0x08009e90
 8007710:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007712:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007716:	4553      	cmp	r3, sl
 8007718:	bfa8      	it	ge
 800771a:	4653      	movge	r3, sl
 800771c:	2b00      	cmp	r3, #0
 800771e:	4699      	mov	r9, r3
 8007720:	dc36      	bgt.n	8007790 <_printf_float+0x360>
 8007722:	f04f 0b00 	mov.w	fp, #0
 8007726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800772a:	f104 021a 	add.w	r2, r4, #26
 800772e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007730:	9306      	str	r3, [sp, #24]
 8007732:	eba3 0309 	sub.w	r3, r3, r9
 8007736:	455b      	cmp	r3, fp
 8007738:	dc31      	bgt.n	800779e <_printf_float+0x36e>
 800773a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800773c:	459a      	cmp	sl, r3
 800773e:	dc3a      	bgt.n	80077b6 <_printf_float+0x386>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	07da      	lsls	r2, r3, #31
 8007744:	d437      	bmi.n	80077b6 <_printf_float+0x386>
 8007746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007748:	ebaa 0903 	sub.w	r9, sl, r3
 800774c:	9b06      	ldr	r3, [sp, #24]
 800774e:	ebaa 0303 	sub.w	r3, sl, r3
 8007752:	4599      	cmp	r9, r3
 8007754:	bfa8      	it	ge
 8007756:	4699      	movge	r9, r3
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	dc33      	bgt.n	80077c6 <_printf_float+0x396>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007766:	f104 0b1a 	add.w	fp, r4, #26
 800776a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800776c:	ebaa 0303 	sub.w	r3, sl, r3
 8007770:	eba3 0309 	sub.w	r3, r3, r9
 8007774:	4543      	cmp	r3, r8
 8007776:	f77f af79 	ble.w	800766c <_printf_float+0x23c>
 800777a:	2301      	movs	r3, #1
 800777c:	465a      	mov	r2, fp
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f aeae 	beq.w	80074e6 <_printf_float+0xb6>
 800778a:	f108 0801 	add.w	r8, r8, #1
 800778e:	e7ec      	b.n	800776a <_printf_float+0x33a>
 8007790:	4642      	mov	r2, r8
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	d1c2      	bne.n	8007722 <_printf_float+0x2f2>
 800779c:	e6a3      	b.n	80074e6 <_printf_float+0xb6>
 800779e:	2301      	movs	r3, #1
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	9206      	str	r2, [sp, #24]
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	f43f ae9c 	beq.w	80074e6 <_printf_float+0xb6>
 80077ae:	9a06      	ldr	r2, [sp, #24]
 80077b0:	f10b 0b01 	add.w	fp, fp, #1
 80077b4:	e7bb      	b.n	800772e <_printf_float+0x2fe>
 80077b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d1c0      	bne.n	8007746 <_printf_float+0x316>
 80077c4:	e68f      	b.n	80074e6 <_printf_float+0xb6>
 80077c6:	9a06      	ldr	r2, [sp, #24]
 80077c8:	464b      	mov	r3, r9
 80077ca:	4442      	add	r2, r8
 80077cc:	4631      	mov	r1, r6
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	d1c3      	bne.n	800775e <_printf_float+0x32e>
 80077d6:	e686      	b.n	80074e6 <_printf_float+0xb6>
 80077d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077dc:	f1ba 0f01 	cmp.w	sl, #1
 80077e0:	dc01      	bgt.n	80077e6 <_printf_float+0x3b6>
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d536      	bpl.n	8007854 <_printf_float+0x424>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4642      	mov	r2, r8
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f ae78 	beq.w	80074e6 <_printf_float+0xb6>
 80077f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae70 	beq.w	80074e6 <_printf_float+0xb6>
 8007806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007812:	f7f9 f961 	bl	8000ad8 <__aeabi_dcmpeq>
 8007816:	b9c0      	cbnz	r0, 800784a <_printf_float+0x41a>
 8007818:	4653      	mov	r3, sl
 800781a:	f108 0201 	add.w	r2, r8, #1
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	d10c      	bne.n	8007842 <_printf_float+0x412>
 8007828:	e65d      	b.n	80074e6 <_printf_float+0xb6>
 800782a:	2301      	movs	r3, #1
 800782c:	465a      	mov	r2, fp
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f ae56 	beq.w	80074e6 <_printf_float+0xb6>
 800783a:	f108 0801 	add.w	r8, r8, #1
 800783e:	45d0      	cmp	r8, sl
 8007840:	dbf3      	blt.n	800782a <_printf_float+0x3fa>
 8007842:	464b      	mov	r3, r9
 8007844:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007848:	e6df      	b.n	800760a <_printf_float+0x1da>
 800784a:	f04f 0800 	mov.w	r8, #0
 800784e:	f104 0b1a 	add.w	fp, r4, #26
 8007852:	e7f4      	b.n	800783e <_printf_float+0x40e>
 8007854:	2301      	movs	r3, #1
 8007856:	4642      	mov	r2, r8
 8007858:	e7e1      	b.n	800781e <_printf_float+0x3ee>
 800785a:	2301      	movs	r3, #1
 800785c:	464a      	mov	r2, r9
 800785e:	4631      	mov	r1, r6
 8007860:	4628      	mov	r0, r5
 8007862:	47b8      	blx	r7
 8007864:	3001      	adds	r0, #1
 8007866:	f43f ae3e 	beq.w	80074e6 <_printf_float+0xb6>
 800786a:	f108 0801 	add.w	r8, r8, #1
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007872:	1a5b      	subs	r3, r3, r1
 8007874:	4543      	cmp	r3, r8
 8007876:	dcf0      	bgt.n	800785a <_printf_float+0x42a>
 8007878:	e6fc      	b.n	8007674 <_printf_float+0x244>
 800787a:	f04f 0800 	mov.w	r8, #0
 800787e:	f104 0919 	add.w	r9, r4, #25
 8007882:	e7f4      	b.n	800786e <_printf_float+0x43e>

08007884 <_printf_common>:
 8007884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	4616      	mov	r6, r2
 800788a:	4698      	mov	r8, r3
 800788c:	688a      	ldr	r2, [r1, #8]
 800788e:	690b      	ldr	r3, [r1, #16]
 8007890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007894:	4293      	cmp	r3, r2
 8007896:	bfb8      	it	lt
 8007898:	4613      	movlt	r3, r2
 800789a:	6033      	str	r3, [r6, #0]
 800789c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078a0:	4607      	mov	r7, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	b10a      	cbz	r2, 80078aa <_printf_common+0x26>
 80078a6:	3301      	adds	r3, #1
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	0699      	lsls	r1, r3, #26
 80078ae:	bf42      	ittt	mi
 80078b0:	6833      	ldrmi	r3, [r6, #0]
 80078b2:	3302      	addmi	r3, #2
 80078b4:	6033      	strmi	r3, [r6, #0]
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	f015 0506 	ands.w	r5, r5, #6
 80078bc:	d106      	bne.n	80078cc <_printf_common+0x48>
 80078be:	f104 0a19 	add.w	sl, r4, #25
 80078c2:	68e3      	ldr	r3, [r4, #12]
 80078c4:	6832      	ldr	r2, [r6, #0]
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	dc26      	bgt.n	800791a <_printf_common+0x96>
 80078cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078d0:	6822      	ldr	r2, [r4, #0]
 80078d2:	3b00      	subs	r3, #0
 80078d4:	bf18      	it	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	0692      	lsls	r2, r2, #26
 80078da:	d42b      	bmi.n	8007934 <_printf_common+0xb0>
 80078dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078e0:	4641      	mov	r1, r8
 80078e2:	4638      	mov	r0, r7
 80078e4:	47c8      	blx	r9
 80078e6:	3001      	adds	r0, #1
 80078e8:	d01e      	beq.n	8007928 <_printf_common+0xa4>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	f003 0306 	and.w	r3, r3, #6
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	bf02      	ittt	eq
 80078f6:	68e5      	ldreq	r5, [r4, #12]
 80078f8:	6833      	ldreq	r3, [r6, #0]
 80078fa:	1aed      	subeq	r5, r5, r3
 80078fc:	68a3      	ldr	r3, [r4, #8]
 80078fe:	bf0c      	ite	eq
 8007900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007904:	2500      	movne	r5, #0
 8007906:	4293      	cmp	r3, r2
 8007908:	bfc4      	itt	gt
 800790a:	1a9b      	subgt	r3, r3, r2
 800790c:	18ed      	addgt	r5, r5, r3
 800790e:	2600      	movs	r6, #0
 8007910:	341a      	adds	r4, #26
 8007912:	42b5      	cmp	r5, r6
 8007914:	d11a      	bne.n	800794c <_printf_common+0xc8>
 8007916:	2000      	movs	r0, #0
 8007918:	e008      	b.n	800792c <_printf_common+0xa8>
 800791a:	2301      	movs	r3, #1
 800791c:	4652      	mov	r2, sl
 800791e:	4641      	mov	r1, r8
 8007920:	4638      	mov	r0, r7
 8007922:	47c8      	blx	r9
 8007924:	3001      	adds	r0, #1
 8007926:	d103      	bne.n	8007930 <_printf_common+0xac>
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007930:	3501      	adds	r5, #1
 8007932:	e7c6      	b.n	80078c2 <_printf_common+0x3e>
 8007934:	18e1      	adds	r1, r4, r3
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	2030      	movs	r0, #48	@ 0x30
 800793a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800793e:	4422      	add	r2, r4
 8007940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007948:	3302      	adds	r3, #2
 800794a:	e7c7      	b.n	80078dc <_printf_common+0x58>
 800794c:	2301      	movs	r3, #1
 800794e:	4622      	mov	r2, r4
 8007950:	4641      	mov	r1, r8
 8007952:	4638      	mov	r0, r7
 8007954:	47c8      	blx	r9
 8007956:	3001      	adds	r0, #1
 8007958:	d0e6      	beq.n	8007928 <_printf_common+0xa4>
 800795a:	3601      	adds	r6, #1
 800795c:	e7d9      	b.n	8007912 <_printf_common+0x8e>
	...

08007960 <_printf_i>:
 8007960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	7e0f      	ldrb	r7, [r1, #24]
 8007966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007968:	2f78      	cmp	r7, #120	@ 0x78
 800796a:	4691      	mov	r9, r2
 800796c:	4680      	mov	r8, r0
 800796e:	460c      	mov	r4, r1
 8007970:	469a      	mov	sl, r3
 8007972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007976:	d807      	bhi.n	8007988 <_printf_i+0x28>
 8007978:	2f62      	cmp	r7, #98	@ 0x62
 800797a:	d80a      	bhi.n	8007992 <_printf_i+0x32>
 800797c:	2f00      	cmp	r7, #0
 800797e:	f000 80d2 	beq.w	8007b26 <_printf_i+0x1c6>
 8007982:	2f58      	cmp	r7, #88	@ 0x58
 8007984:	f000 80b9 	beq.w	8007afa <_printf_i+0x19a>
 8007988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800798c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007990:	e03a      	b.n	8007a08 <_printf_i+0xa8>
 8007992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007996:	2b15      	cmp	r3, #21
 8007998:	d8f6      	bhi.n	8007988 <_printf_i+0x28>
 800799a:	a101      	add	r1, pc, #4	@ (adr r1, 80079a0 <_printf_i+0x40>)
 800799c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a0:	080079f9 	.word	0x080079f9
 80079a4:	08007a0d 	.word	0x08007a0d
 80079a8:	08007989 	.word	0x08007989
 80079ac:	08007989 	.word	0x08007989
 80079b0:	08007989 	.word	0x08007989
 80079b4:	08007989 	.word	0x08007989
 80079b8:	08007a0d 	.word	0x08007a0d
 80079bc:	08007989 	.word	0x08007989
 80079c0:	08007989 	.word	0x08007989
 80079c4:	08007989 	.word	0x08007989
 80079c8:	08007989 	.word	0x08007989
 80079cc:	08007b0d 	.word	0x08007b0d
 80079d0:	08007a37 	.word	0x08007a37
 80079d4:	08007ac7 	.word	0x08007ac7
 80079d8:	08007989 	.word	0x08007989
 80079dc:	08007989 	.word	0x08007989
 80079e0:	08007b2f 	.word	0x08007b2f
 80079e4:	08007989 	.word	0x08007989
 80079e8:	08007a37 	.word	0x08007a37
 80079ec:	08007989 	.word	0x08007989
 80079f0:	08007989 	.word	0x08007989
 80079f4:	08007acf 	.word	0x08007acf
 80079f8:	6833      	ldr	r3, [r6, #0]
 80079fa:	1d1a      	adds	r2, r3, #4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6032      	str	r2, [r6, #0]
 8007a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e09d      	b.n	8007b48 <_printf_i+0x1e8>
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	6820      	ldr	r0, [r4, #0]
 8007a10:	1d19      	adds	r1, r3, #4
 8007a12:	6031      	str	r1, [r6, #0]
 8007a14:	0606      	lsls	r6, r0, #24
 8007a16:	d501      	bpl.n	8007a1c <_printf_i+0xbc>
 8007a18:	681d      	ldr	r5, [r3, #0]
 8007a1a:	e003      	b.n	8007a24 <_printf_i+0xc4>
 8007a1c:	0645      	lsls	r5, r0, #25
 8007a1e:	d5fb      	bpl.n	8007a18 <_printf_i+0xb8>
 8007a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a24:	2d00      	cmp	r5, #0
 8007a26:	da03      	bge.n	8007a30 <_printf_i+0xd0>
 8007a28:	232d      	movs	r3, #45	@ 0x2d
 8007a2a:	426d      	negs	r5, r5
 8007a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a30:	4859      	ldr	r0, [pc, #356]	@ (8007b98 <_printf_i+0x238>)
 8007a32:	230a      	movs	r3, #10
 8007a34:	e011      	b.n	8007a5a <_printf_i+0xfa>
 8007a36:	6821      	ldr	r1, [r4, #0]
 8007a38:	6833      	ldr	r3, [r6, #0]
 8007a3a:	0608      	lsls	r0, r1, #24
 8007a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a40:	d402      	bmi.n	8007a48 <_printf_i+0xe8>
 8007a42:	0649      	lsls	r1, r1, #25
 8007a44:	bf48      	it	mi
 8007a46:	b2ad      	uxthmi	r5, r5
 8007a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a4a:	4853      	ldr	r0, [pc, #332]	@ (8007b98 <_printf_i+0x238>)
 8007a4c:	6033      	str	r3, [r6, #0]
 8007a4e:	bf14      	ite	ne
 8007a50:	230a      	movne	r3, #10
 8007a52:	2308      	moveq	r3, #8
 8007a54:	2100      	movs	r1, #0
 8007a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a5a:	6866      	ldr	r6, [r4, #4]
 8007a5c:	60a6      	str	r6, [r4, #8]
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	bfa2      	ittt	ge
 8007a62:	6821      	ldrge	r1, [r4, #0]
 8007a64:	f021 0104 	bicge.w	r1, r1, #4
 8007a68:	6021      	strge	r1, [r4, #0]
 8007a6a:	b90d      	cbnz	r5, 8007a70 <_printf_i+0x110>
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	d04b      	beq.n	8007b08 <_printf_i+0x1a8>
 8007a70:	4616      	mov	r6, r2
 8007a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a76:	fb03 5711 	mls	r7, r3, r1, r5
 8007a7a:	5dc7      	ldrb	r7, [r0, r7]
 8007a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a80:	462f      	mov	r7, r5
 8007a82:	42bb      	cmp	r3, r7
 8007a84:	460d      	mov	r5, r1
 8007a86:	d9f4      	bls.n	8007a72 <_printf_i+0x112>
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d10b      	bne.n	8007aa4 <_printf_i+0x144>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	07df      	lsls	r7, r3, #31
 8007a90:	d508      	bpl.n	8007aa4 <_printf_i+0x144>
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	6861      	ldr	r1, [r4, #4]
 8007a96:	4299      	cmp	r1, r3
 8007a98:	bfde      	ittt	le
 8007a9a:	2330      	movle	r3, #48	@ 0x30
 8007a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007aa4:	1b92      	subs	r2, r2, r6
 8007aa6:	6122      	str	r2, [r4, #16]
 8007aa8:	f8cd a000 	str.w	sl, [sp]
 8007aac:	464b      	mov	r3, r9
 8007aae:	aa03      	add	r2, sp, #12
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	f7ff fee6 	bl	8007884 <_printf_common>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d14a      	bne.n	8007b52 <_printf_i+0x1f2>
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	b004      	add	sp, #16
 8007ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f043 0320 	orr.w	r3, r3, #32
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	4833      	ldr	r0, [pc, #204]	@ (8007b9c <_printf_i+0x23c>)
 8007ad0:	2778      	movs	r7, #120	@ 0x78
 8007ad2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	6831      	ldr	r1, [r6, #0]
 8007ada:	061f      	lsls	r7, r3, #24
 8007adc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ae0:	d402      	bmi.n	8007ae8 <_printf_i+0x188>
 8007ae2:	065f      	lsls	r7, r3, #25
 8007ae4:	bf48      	it	mi
 8007ae6:	b2ad      	uxthmi	r5, r5
 8007ae8:	6031      	str	r1, [r6, #0]
 8007aea:	07d9      	lsls	r1, r3, #31
 8007aec:	bf44      	itt	mi
 8007aee:	f043 0320 	orrmi.w	r3, r3, #32
 8007af2:	6023      	strmi	r3, [r4, #0]
 8007af4:	b11d      	cbz	r5, 8007afe <_printf_i+0x19e>
 8007af6:	2310      	movs	r3, #16
 8007af8:	e7ac      	b.n	8007a54 <_printf_i+0xf4>
 8007afa:	4827      	ldr	r0, [pc, #156]	@ (8007b98 <_printf_i+0x238>)
 8007afc:	e7e9      	b.n	8007ad2 <_printf_i+0x172>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	f023 0320 	bic.w	r3, r3, #32
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	e7f6      	b.n	8007af6 <_printf_i+0x196>
 8007b08:	4616      	mov	r6, r2
 8007b0a:	e7bd      	b.n	8007a88 <_printf_i+0x128>
 8007b0c:	6833      	ldr	r3, [r6, #0]
 8007b0e:	6825      	ldr	r5, [r4, #0]
 8007b10:	6961      	ldr	r1, [r4, #20]
 8007b12:	1d18      	adds	r0, r3, #4
 8007b14:	6030      	str	r0, [r6, #0]
 8007b16:	062e      	lsls	r6, r5, #24
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	d501      	bpl.n	8007b20 <_printf_i+0x1c0>
 8007b1c:	6019      	str	r1, [r3, #0]
 8007b1e:	e002      	b.n	8007b26 <_printf_i+0x1c6>
 8007b20:	0668      	lsls	r0, r5, #25
 8007b22:	d5fb      	bpl.n	8007b1c <_printf_i+0x1bc>
 8007b24:	8019      	strh	r1, [r3, #0]
 8007b26:	2300      	movs	r3, #0
 8007b28:	6123      	str	r3, [r4, #16]
 8007b2a:	4616      	mov	r6, r2
 8007b2c:	e7bc      	b.n	8007aa8 <_printf_i+0x148>
 8007b2e:	6833      	ldr	r3, [r6, #0]
 8007b30:	1d1a      	adds	r2, r3, #4
 8007b32:	6032      	str	r2, [r6, #0]
 8007b34:	681e      	ldr	r6, [r3, #0]
 8007b36:	6862      	ldr	r2, [r4, #4]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7f8 fb50 	bl	80001e0 <memchr>
 8007b40:	b108      	cbz	r0, 8007b46 <_printf_i+0x1e6>
 8007b42:	1b80      	subs	r0, r0, r6
 8007b44:	6060      	str	r0, [r4, #4]
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b50:	e7aa      	b.n	8007aa8 <_printf_i+0x148>
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	4632      	mov	r2, r6
 8007b56:	4649      	mov	r1, r9
 8007b58:	4640      	mov	r0, r8
 8007b5a:	47d0      	blx	sl
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d0ad      	beq.n	8007abc <_printf_i+0x15c>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	079b      	lsls	r3, r3, #30
 8007b64:	d413      	bmi.n	8007b8e <_printf_i+0x22e>
 8007b66:	68e0      	ldr	r0, [r4, #12]
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	4298      	cmp	r0, r3
 8007b6c:	bfb8      	it	lt
 8007b6e:	4618      	movlt	r0, r3
 8007b70:	e7a6      	b.n	8007ac0 <_printf_i+0x160>
 8007b72:	2301      	movs	r3, #1
 8007b74:	4632      	mov	r2, r6
 8007b76:	4649      	mov	r1, r9
 8007b78:	4640      	mov	r0, r8
 8007b7a:	47d0      	blx	sl
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d09d      	beq.n	8007abc <_printf_i+0x15c>
 8007b80:	3501      	adds	r5, #1
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	9903      	ldr	r1, [sp, #12]
 8007b86:	1a5b      	subs	r3, r3, r1
 8007b88:	42ab      	cmp	r3, r5
 8007b8a:	dcf2      	bgt.n	8007b72 <_printf_i+0x212>
 8007b8c:	e7eb      	b.n	8007b66 <_printf_i+0x206>
 8007b8e:	2500      	movs	r5, #0
 8007b90:	f104 0619 	add.w	r6, r4, #25
 8007b94:	e7f5      	b.n	8007b82 <_printf_i+0x222>
 8007b96:	bf00      	nop
 8007b98:	08009e92 	.word	0x08009e92
 8007b9c:	08009ea3 	.word	0x08009ea3

08007ba0 <__sflush_r>:
 8007ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba8:	0716      	lsls	r6, r2, #28
 8007baa:	4605      	mov	r5, r0
 8007bac:	460c      	mov	r4, r1
 8007bae:	d454      	bmi.n	8007c5a <__sflush_r+0xba>
 8007bb0:	684b      	ldr	r3, [r1, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dc02      	bgt.n	8007bbc <__sflush_r+0x1c>
 8007bb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	dd48      	ble.n	8007c4e <__sflush_r+0xae>
 8007bbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d045      	beq.n	8007c4e <__sflush_r+0xae>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bc8:	682f      	ldr	r7, [r5, #0]
 8007bca:	6a21      	ldr	r1, [r4, #32]
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	d030      	beq.n	8007c32 <__sflush_r+0x92>
 8007bd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	0759      	lsls	r1, r3, #29
 8007bd6:	d505      	bpl.n	8007be4 <__sflush_r+0x44>
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bde:	b10b      	cbz	r3, 8007be4 <__sflush_r+0x44>
 8007be0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007be2:	1ad2      	subs	r2, r2, r3
 8007be4:	2300      	movs	r3, #0
 8007be6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007be8:	6a21      	ldr	r1, [r4, #32]
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b0      	blx	r6
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	d106      	bne.n	8007c02 <__sflush_r+0x62>
 8007bf4:	6829      	ldr	r1, [r5, #0]
 8007bf6:	291d      	cmp	r1, #29
 8007bf8:	d82b      	bhi.n	8007c52 <__sflush_r+0xb2>
 8007bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8007ca4 <__sflush_r+0x104>)
 8007bfc:	410a      	asrs	r2, r1
 8007bfe:	07d6      	lsls	r6, r2, #31
 8007c00:	d427      	bmi.n	8007c52 <__sflush_r+0xb2>
 8007c02:	2200      	movs	r2, #0
 8007c04:	6062      	str	r2, [r4, #4]
 8007c06:	04d9      	lsls	r1, r3, #19
 8007c08:	6922      	ldr	r2, [r4, #16]
 8007c0a:	6022      	str	r2, [r4, #0]
 8007c0c:	d504      	bpl.n	8007c18 <__sflush_r+0x78>
 8007c0e:	1c42      	adds	r2, r0, #1
 8007c10:	d101      	bne.n	8007c16 <__sflush_r+0x76>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	b903      	cbnz	r3, 8007c18 <__sflush_r+0x78>
 8007c16:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c1a:	602f      	str	r7, [r5, #0]
 8007c1c:	b1b9      	cbz	r1, 8007c4e <__sflush_r+0xae>
 8007c1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c22:	4299      	cmp	r1, r3
 8007c24:	d002      	beq.n	8007c2c <__sflush_r+0x8c>
 8007c26:	4628      	mov	r0, r5
 8007c28:	f001 f95e 	bl	8008ee8 <_free_r>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c30:	e00d      	b.n	8007c4e <__sflush_r+0xae>
 8007c32:	2301      	movs	r3, #1
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b0      	blx	r6
 8007c38:	4602      	mov	r2, r0
 8007c3a:	1c50      	adds	r0, r2, #1
 8007c3c:	d1c9      	bne.n	8007bd2 <__sflush_r+0x32>
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0c6      	beq.n	8007bd2 <__sflush_r+0x32>
 8007c44:	2b1d      	cmp	r3, #29
 8007c46:	d001      	beq.n	8007c4c <__sflush_r+0xac>
 8007c48:	2b16      	cmp	r3, #22
 8007c4a:	d11e      	bne.n	8007c8a <__sflush_r+0xea>
 8007c4c:	602f      	str	r7, [r5, #0]
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e022      	b.n	8007c98 <__sflush_r+0xf8>
 8007c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c56:	b21b      	sxth	r3, r3
 8007c58:	e01b      	b.n	8007c92 <__sflush_r+0xf2>
 8007c5a:	690f      	ldr	r7, [r1, #16]
 8007c5c:	2f00      	cmp	r7, #0
 8007c5e:	d0f6      	beq.n	8007c4e <__sflush_r+0xae>
 8007c60:	0793      	lsls	r3, r2, #30
 8007c62:	680e      	ldr	r6, [r1, #0]
 8007c64:	bf08      	it	eq
 8007c66:	694b      	ldreq	r3, [r1, #20]
 8007c68:	600f      	str	r7, [r1, #0]
 8007c6a:	bf18      	it	ne
 8007c6c:	2300      	movne	r3, #0
 8007c6e:	eba6 0807 	sub.w	r8, r6, r7
 8007c72:	608b      	str	r3, [r1, #8]
 8007c74:	f1b8 0f00 	cmp.w	r8, #0
 8007c78:	dde9      	ble.n	8007c4e <__sflush_r+0xae>
 8007c7a:	6a21      	ldr	r1, [r4, #32]
 8007c7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c7e:	4643      	mov	r3, r8
 8007c80:	463a      	mov	r2, r7
 8007c82:	4628      	mov	r0, r5
 8007c84:	47b0      	blx	r6
 8007c86:	2800      	cmp	r0, #0
 8007c88:	dc08      	bgt.n	8007c9c <__sflush_r+0xfc>
 8007c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c9c:	4407      	add	r7, r0
 8007c9e:	eba8 0800 	sub.w	r8, r8, r0
 8007ca2:	e7e7      	b.n	8007c74 <__sflush_r+0xd4>
 8007ca4:	dfbffffe 	.word	0xdfbffffe

08007ca8 <_fflush_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	690b      	ldr	r3, [r1, #16]
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	b913      	cbnz	r3, 8007cb8 <_fflush_r+0x10>
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	b118      	cbz	r0, 8007cc2 <_fflush_r+0x1a>
 8007cba:	6a03      	ldr	r3, [r0, #32]
 8007cbc:	b90b      	cbnz	r3, 8007cc2 <_fflush_r+0x1a>
 8007cbe:	f000 f8bb 	bl	8007e38 <__sinit>
 8007cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f3      	beq.n	8007cb2 <_fflush_r+0xa>
 8007cca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ccc:	07d0      	lsls	r0, r2, #31
 8007cce:	d404      	bmi.n	8007cda <_fflush_r+0x32>
 8007cd0:	0599      	lsls	r1, r3, #22
 8007cd2:	d402      	bmi.n	8007cda <_fflush_r+0x32>
 8007cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cd6:	f000 faaa 	bl	800822e <__retarget_lock_acquire_recursive>
 8007cda:	4628      	mov	r0, r5
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f7ff ff5f 	bl	8007ba0 <__sflush_r>
 8007ce2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ce4:	07da      	lsls	r2, r3, #31
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	d4e4      	bmi.n	8007cb4 <_fflush_r+0xc>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	059b      	lsls	r3, r3, #22
 8007cee:	d4e1      	bmi.n	8007cb4 <_fflush_r+0xc>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cf2:	f000 fa9d 	bl	8008230 <__retarget_lock_release_recursive>
 8007cf6:	e7dd      	b.n	8007cb4 <_fflush_r+0xc>

08007cf8 <fflush>:
 8007cf8:	4601      	mov	r1, r0
 8007cfa:	b920      	cbnz	r0, 8007d06 <fflush+0xe>
 8007cfc:	4a04      	ldr	r2, [pc, #16]	@ (8007d10 <fflush+0x18>)
 8007cfe:	4905      	ldr	r1, [pc, #20]	@ (8007d14 <fflush+0x1c>)
 8007d00:	4805      	ldr	r0, [pc, #20]	@ (8007d18 <fflush+0x20>)
 8007d02:	f000 b8b1 	b.w	8007e68 <_fwalk_sglue>
 8007d06:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <fflush+0x24>)
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	f7ff bfcd 	b.w	8007ca8 <_fflush_r>
 8007d0e:	bf00      	nop
 8007d10:	20000014 	.word	0x20000014
 8007d14:	08007ca9 	.word	0x08007ca9
 8007d18:	20000024 	.word	0x20000024
 8007d1c:	20000020 	.word	0x20000020

08007d20 <std>:
 8007d20:	2300      	movs	r3, #0
 8007d22:	b510      	push	{r4, lr}
 8007d24:	4604      	mov	r4, r0
 8007d26:	e9c0 3300 	strd	r3, r3, [r0]
 8007d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d2e:	6083      	str	r3, [r0, #8]
 8007d30:	8181      	strh	r1, [r0, #12]
 8007d32:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d34:	81c2      	strh	r2, [r0, #14]
 8007d36:	6183      	str	r3, [r0, #24]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	305c      	adds	r0, #92	@ 0x5c
 8007d3e:	f000 f9f9 	bl	8008134 <memset>
 8007d42:	4b0d      	ldr	r3, [pc, #52]	@ (8007d78 <std+0x58>)
 8007d44:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d46:	4b0d      	ldr	r3, [pc, #52]	@ (8007d7c <std+0x5c>)
 8007d48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d80 <std+0x60>)
 8007d4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <std+0x64>)
 8007d50:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d52:	4b0d      	ldr	r3, [pc, #52]	@ (8007d88 <std+0x68>)
 8007d54:	6224      	str	r4, [r4, #32]
 8007d56:	429c      	cmp	r4, r3
 8007d58:	d006      	beq.n	8007d68 <std+0x48>
 8007d5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d5e:	4294      	cmp	r4, r2
 8007d60:	d002      	beq.n	8007d68 <std+0x48>
 8007d62:	33d0      	adds	r3, #208	@ 0xd0
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d105      	bne.n	8007d74 <std+0x54>
 8007d68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d70:	f000 ba5c 	b.w	800822c <__retarget_lock_init_recursive>
 8007d74:	bd10      	pop	{r4, pc}
 8007d76:	bf00      	nop
 8007d78:	08007f85 	.word	0x08007f85
 8007d7c:	08007fa7 	.word	0x08007fa7
 8007d80:	08007fdf 	.word	0x08007fdf
 8007d84:	08008003 	.word	0x08008003
 8007d88:	20000418 	.word	0x20000418

08007d8c <stdio_exit_handler>:
 8007d8c:	4a02      	ldr	r2, [pc, #8]	@ (8007d98 <stdio_exit_handler+0xc>)
 8007d8e:	4903      	ldr	r1, [pc, #12]	@ (8007d9c <stdio_exit_handler+0x10>)
 8007d90:	4803      	ldr	r0, [pc, #12]	@ (8007da0 <stdio_exit_handler+0x14>)
 8007d92:	f000 b869 	b.w	8007e68 <_fwalk_sglue>
 8007d96:	bf00      	nop
 8007d98:	20000014 	.word	0x20000014
 8007d9c:	08007ca9 	.word	0x08007ca9
 8007da0:	20000024 	.word	0x20000024

08007da4 <cleanup_stdio>:
 8007da4:	6841      	ldr	r1, [r0, #4]
 8007da6:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd8 <cleanup_stdio+0x34>)
 8007da8:	4299      	cmp	r1, r3
 8007daa:	b510      	push	{r4, lr}
 8007dac:	4604      	mov	r4, r0
 8007dae:	d001      	beq.n	8007db4 <cleanup_stdio+0x10>
 8007db0:	f7ff ff7a 	bl	8007ca8 <_fflush_r>
 8007db4:	68a1      	ldr	r1, [r4, #8]
 8007db6:	4b09      	ldr	r3, [pc, #36]	@ (8007ddc <cleanup_stdio+0x38>)
 8007db8:	4299      	cmp	r1, r3
 8007dba:	d002      	beq.n	8007dc2 <cleanup_stdio+0x1e>
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f7ff ff73 	bl	8007ca8 <_fflush_r>
 8007dc2:	68e1      	ldr	r1, [r4, #12]
 8007dc4:	4b06      	ldr	r3, [pc, #24]	@ (8007de0 <cleanup_stdio+0x3c>)
 8007dc6:	4299      	cmp	r1, r3
 8007dc8:	d004      	beq.n	8007dd4 <cleanup_stdio+0x30>
 8007dca:	4620      	mov	r0, r4
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	f7ff bf6a 	b.w	8007ca8 <_fflush_r>
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000418 	.word	0x20000418
 8007ddc:	20000480 	.word	0x20000480
 8007de0:	200004e8 	.word	0x200004e8

08007de4 <global_stdio_init.part.0>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e14 <global_stdio_init.part.0+0x30>)
 8007de8:	4c0b      	ldr	r4, [pc, #44]	@ (8007e18 <global_stdio_init.part.0+0x34>)
 8007dea:	4a0c      	ldr	r2, [pc, #48]	@ (8007e1c <global_stdio_init.part.0+0x38>)
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	4620      	mov	r0, r4
 8007df0:	2200      	movs	r2, #0
 8007df2:	2104      	movs	r1, #4
 8007df4:	f7ff ff94 	bl	8007d20 <std>
 8007df8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	2109      	movs	r1, #9
 8007e00:	f7ff ff8e 	bl	8007d20 <std>
 8007e04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e08:	2202      	movs	r2, #2
 8007e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e0e:	2112      	movs	r1, #18
 8007e10:	f7ff bf86 	b.w	8007d20 <std>
 8007e14:	20000550 	.word	0x20000550
 8007e18:	20000418 	.word	0x20000418
 8007e1c:	08007d8d 	.word	0x08007d8d

08007e20 <__sfp_lock_acquire>:
 8007e20:	4801      	ldr	r0, [pc, #4]	@ (8007e28 <__sfp_lock_acquire+0x8>)
 8007e22:	f000 ba04 	b.w	800822e <__retarget_lock_acquire_recursive>
 8007e26:	bf00      	nop
 8007e28:	20000559 	.word	0x20000559

08007e2c <__sfp_lock_release>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	@ (8007e34 <__sfp_lock_release+0x8>)
 8007e2e:	f000 b9ff 	b.w	8008230 <__retarget_lock_release_recursive>
 8007e32:	bf00      	nop
 8007e34:	20000559 	.word	0x20000559

08007e38 <__sinit>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	f7ff fff0 	bl	8007e20 <__sfp_lock_acquire>
 8007e40:	6a23      	ldr	r3, [r4, #32]
 8007e42:	b11b      	cbz	r3, 8007e4c <__sinit+0x14>
 8007e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e48:	f7ff bff0 	b.w	8007e2c <__sfp_lock_release>
 8007e4c:	4b04      	ldr	r3, [pc, #16]	@ (8007e60 <__sinit+0x28>)
 8007e4e:	6223      	str	r3, [r4, #32]
 8007e50:	4b04      	ldr	r3, [pc, #16]	@ (8007e64 <__sinit+0x2c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f5      	bne.n	8007e44 <__sinit+0xc>
 8007e58:	f7ff ffc4 	bl	8007de4 <global_stdio_init.part.0>
 8007e5c:	e7f2      	b.n	8007e44 <__sinit+0xc>
 8007e5e:	bf00      	nop
 8007e60:	08007da5 	.word	0x08007da5
 8007e64:	20000550 	.word	0x20000550

08007e68 <_fwalk_sglue>:
 8007e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	4688      	mov	r8, r1
 8007e70:	4614      	mov	r4, r2
 8007e72:	2600      	movs	r6, #0
 8007e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e78:	f1b9 0901 	subs.w	r9, r9, #1
 8007e7c:	d505      	bpl.n	8007e8a <_fwalk_sglue+0x22>
 8007e7e:	6824      	ldr	r4, [r4, #0]
 8007e80:	2c00      	cmp	r4, #0
 8007e82:	d1f7      	bne.n	8007e74 <_fwalk_sglue+0xc>
 8007e84:	4630      	mov	r0, r6
 8007e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8a:	89ab      	ldrh	r3, [r5, #12]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d907      	bls.n	8007ea0 <_fwalk_sglue+0x38>
 8007e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e94:	3301      	adds	r3, #1
 8007e96:	d003      	beq.n	8007ea0 <_fwalk_sglue+0x38>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	47c0      	blx	r8
 8007e9e:	4306      	orrs	r6, r0
 8007ea0:	3568      	adds	r5, #104	@ 0x68
 8007ea2:	e7e9      	b.n	8007e78 <_fwalk_sglue+0x10>

08007ea4 <iprintf>:
 8007ea4:	b40f      	push	{r0, r1, r2, r3}
 8007ea6:	b507      	push	{r0, r1, r2, lr}
 8007ea8:	4906      	ldr	r1, [pc, #24]	@ (8007ec4 <iprintf+0x20>)
 8007eaa:	ab04      	add	r3, sp, #16
 8007eac:	6808      	ldr	r0, [r1, #0]
 8007eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb2:	6881      	ldr	r1, [r0, #8]
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	f001 fcc3 	bl	8009840 <_vfiprintf_r>
 8007eba:	b003      	add	sp, #12
 8007ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec0:	b004      	add	sp, #16
 8007ec2:	4770      	bx	lr
 8007ec4:	20000020 	.word	0x20000020

08007ec8 <_puts_r>:
 8007ec8:	6a03      	ldr	r3, [r0, #32]
 8007eca:	b570      	push	{r4, r5, r6, lr}
 8007ecc:	6884      	ldr	r4, [r0, #8]
 8007ece:	4605      	mov	r5, r0
 8007ed0:	460e      	mov	r6, r1
 8007ed2:	b90b      	cbnz	r3, 8007ed8 <_puts_r+0x10>
 8007ed4:	f7ff ffb0 	bl	8007e38 <__sinit>
 8007ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eda:	07db      	lsls	r3, r3, #31
 8007edc:	d405      	bmi.n	8007eea <_puts_r+0x22>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	0598      	lsls	r0, r3, #22
 8007ee2:	d402      	bmi.n	8007eea <_puts_r+0x22>
 8007ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ee6:	f000 f9a2 	bl	800822e <__retarget_lock_acquire_recursive>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	0719      	lsls	r1, r3, #28
 8007eee:	d502      	bpl.n	8007ef6 <_puts_r+0x2e>
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d135      	bne.n	8007f62 <_puts_r+0x9a>
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 f8c5 	bl	8008088 <__swsetup_r>
 8007efe:	b380      	cbz	r0, 8007f62 <_puts_r+0x9a>
 8007f00:	f04f 35ff 	mov.w	r5, #4294967295
 8007f04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f06:	07da      	lsls	r2, r3, #31
 8007f08:	d405      	bmi.n	8007f16 <_puts_r+0x4e>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	059b      	lsls	r3, r3, #22
 8007f0e:	d402      	bmi.n	8007f16 <_puts_r+0x4e>
 8007f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f12:	f000 f98d 	bl	8008230 <__retarget_lock_release_recursive>
 8007f16:	4628      	mov	r0, r5
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da04      	bge.n	8007f28 <_puts_r+0x60>
 8007f1e:	69a2      	ldr	r2, [r4, #24]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	dc17      	bgt.n	8007f54 <_puts_r+0x8c>
 8007f24:	290a      	cmp	r1, #10
 8007f26:	d015      	beq.n	8007f54 <_puts_r+0x8c>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	6022      	str	r2, [r4, #0]
 8007f2e:	7019      	strb	r1, [r3, #0]
 8007f30:	68a3      	ldr	r3, [r4, #8]
 8007f32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f36:	3b01      	subs	r3, #1
 8007f38:	60a3      	str	r3, [r4, #8]
 8007f3a:	2900      	cmp	r1, #0
 8007f3c:	d1ed      	bne.n	8007f1a <_puts_r+0x52>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da11      	bge.n	8007f66 <_puts_r+0x9e>
 8007f42:	4622      	mov	r2, r4
 8007f44:	210a      	movs	r1, #10
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 f85f 	bl	800800a <__swbuf_r>
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d0d7      	beq.n	8007f00 <_puts_r+0x38>
 8007f50:	250a      	movs	r5, #10
 8007f52:	e7d7      	b.n	8007f04 <_puts_r+0x3c>
 8007f54:	4622      	mov	r2, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f857 	bl	800800a <__swbuf_r>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d1e7      	bne.n	8007f30 <_puts_r+0x68>
 8007f60:	e7ce      	b.n	8007f00 <_puts_r+0x38>
 8007f62:	3e01      	subs	r6, #1
 8007f64:	e7e4      	b.n	8007f30 <_puts_r+0x68>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e7ee      	b.n	8007f50 <_puts_r+0x88>
	...

08007f74 <puts>:
 8007f74:	4b02      	ldr	r3, [pc, #8]	@ (8007f80 <puts+0xc>)
 8007f76:	4601      	mov	r1, r0
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	f7ff bfa5 	b.w	8007ec8 <_puts_r>
 8007f7e:	bf00      	nop
 8007f80:	20000020 	.word	0x20000020

08007f84 <__sread>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	460c      	mov	r4, r1
 8007f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8c:	f000 f900 	bl	8008190 <_read_r>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	bfab      	itete	ge
 8007f94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f96:	89a3      	ldrhlt	r3, [r4, #12]
 8007f98:	181b      	addge	r3, r3, r0
 8007f9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f9e:	bfac      	ite	ge
 8007fa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fa2:	81a3      	strhlt	r3, [r4, #12]
 8007fa4:	bd10      	pop	{r4, pc}

08007fa6 <__swrite>:
 8007fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007faa:	461f      	mov	r7, r3
 8007fac:	898b      	ldrh	r3, [r1, #12]
 8007fae:	05db      	lsls	r3, r3, #23
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	4616      	mov	r6, r2
 8007fb6:	d505      	bpl.n	8007fc4 <__swrite+0x1e>
 8007fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f000 f8d4 	bl	800816c <_lseek_r>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fda:	f000 b8eb 	b.w	80081b4 <_write_r>

08007fde <__sseek>:
 8007fde:	b510      	push	{r4, lr}
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe6:	f000 f8c1 	bl	800816c <_lseek_r>
 8007fea:	1c43      	adds	r3, r0, #1
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	bf15      	itete	ne
 8007ff0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ff2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ff6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ffa:	81a3      	strheq	r3, [r4, #12]
 8007ffc:	bf18      	it	ne
 8007ffe:	81a3      	strhne	r3, [r4, #12]
 8008000:	bd10      	pop	{r4, pc}

08008002 <__sclose>:
 8008002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008006:	f000 b8a1 	b.w	800814c <_close_r>

0800800a <__swbuf_r>:
 800800a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800c:	460e      	mov	r6, r1
 800800e:	4614      	mov	r4, r2
 8008010:	4605      	mov	r5, r0
 8008012:	b118      	cbz	r0, 800801c <__swbuf_r+0x12>
 8008014:	6a03      	ldr	r3, [r0, #32]
 8008016:	b90b      	cbnz	r3, 800801c <__swbuf_r+0x12>
 8008018:	f7ff ff0e 	bl	8007e38 <__sinit>
 800801c:	69a3      	ldr	r3, [r4, #24]
 800801e:	60a3      	str	r3, [r4, #8]
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	071a      	lsls	r2, r3, #28
 8008024:	d501      	bpl.n	800802a <__swbuf_r+0x20>
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	b943      	cbnz	r3, 800803c <__swbuf_r+0x32>
 800802a:	4621      	mov	r1, r4
 800802c:	4628      	mov	r0, r5
 800802e:	f000 f82b 	bl	8008088 <__swsetup_r>
 8008032:	b118      	cbz	r0, 800803c <__swbuf_r+0x32>
 8008034:	f04f 37ff 	mov.w	r7, #4294967295
 8008038:	4638      	mov	r0, r7
 800803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	6922      	ldr	r2, [r4, #16]
 8008040:	1a98      	subs	r0, r3, r2
 8008042:	6963      	ldr	r3, [r4, #20]
 8008044:	b2f6      	uxtb	r6, r6
 8008046:	4283      	cmp	r3, r0
 8008048:	4637      	mov	r7, r6
 800804a:	dc05      	bgt.n	8008058 <__swbuf_r+0x4e>
 800804c:	4621      	mov	r1, r4
 800804e:	4628      	mov	r0, r5
 8008050:	f7ff fe2a 	bl	8007ca8 <_fflush_r>
 8008054:	2800      	cmp	r0, #0
 8008056:	d1ed      	bne.n	8008034 <__swbuf_r+0x2a>
 8008058:	68a3      	ldr	r3, [r4, #8]
 800805a:	3b01      	subs	r3, #1
 800805c:	60a3      	str	r3, [r4, #8]
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	6022      	str	r2, [r4, #0]
 8008064:	701e      	strb	r6, [r3, #0]
 8008066:	6962      	ldr	r2, [r4, #20]
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	429a      	cmp	r2, r3
 800806c:	d004      	beq.n	8008078 <__swbuf_r+0x6e>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	07db      	lsls	r3, r3, #31
 8008072:	d5e1      	bpl.n	8008038 <__swbuf_r+0x2e>
 8008074:	2e0a      	cmp	r6, #10
 8008076:	d1df      	bne.n	8008038 <__swbuf_r+0x2e>
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f7ff fe14 	bl	8007ca8 <_fflush_r>
 8008080:	2800      	cmp	r0, #0
 8008082:	d0d9      	beq.n	8008038 <__swbuf_r+0x2e>
 8008084:	e7d6      	b.n	8008034 <__swbuf_r+0x2a>
	...

08008088 <__swsetup_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4b29      	ldr	r3, [pc, #164]	@ (8008130 <__swsetup_r+0xa8>)
 800808c:	4605      	mov	r5, r0
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	460c      	mov	r4, r1
 8008092:	b118      	cbz	r0, 800809c <__swsetup_r+0x14>
 8008094:	6a03      	ldr	r3, [r0, #32]
 8008096:	b90b      	cbnz	r3, 800809c <__swsetup_r+0x14>
 8008098:	f7ff fece 	bl	8007e38 <__sinit>
 800809c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a0:	0719      	lsls	r1, r3, #28
 80080a2:	d422      	bmi.n	80080ea <__swsetup_r+0x62>
 80080a4:	06da      	lsls	r2, r3, #27
 80080a6:	d407      	bmi.n	80080b8 <__swsetup_r+0x30>
 80080a8:	2209      	movs	r2, #9
 80080aa:	602a      	str	r2, [r5, #0]
 80080ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	f04f 30ff 	mov.w	r0, #4294967295
 80080b6:	e033      	b.n	8008120 <__swsetup_r+0x98>
 80080b8:	0758      	lsls	r0, r3, #29
 80080ba:	d512      	bpl.n	80080e2 <__swsetup_r+0x5a>
 80080bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080be:	b141      	cbz	r1, 80080d2 <__swsetup_r+0x4a>
 80080c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080c4:	4299      	cmp	r1, r3
 80080c6:	d002      	beq.n	80080ce <__swsetup_r+0x46>
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 ff0d 	bl	8008ee8 <_free_r>
 80080ce:	2300      	movs	r3, #0
 80080d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080d8:	81a3      	strh	r3, [r4, #12]
 80080da:	2300      	movs	r3, #0
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f043 0308 	orr.w	r3, r3, #8
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	b94b      	cbnz	r3, 8008102 <__swsetup_r+0x7a>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f8:	d003      	beq.n	8008102 <__swsetup_r+0x7a>
 80080fa:	4621      	mov	r1, r4
 80080fc:	4628      	mov	r0, r5
 80080fe:	f001 fcdd 	bl	8009abc <__smakebuf_r>
 8008102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008106:	f013 0201 	ands.w	r2, r3, #1
 800810a:	d00a      	beq.n	8008122 <__swsetup_r+0x9a>
 800810c:	2200      	movs	r2, #0
 800810e:	60a2      	str	r2, [r4, #8]
 8008110:	6962      	ldr	r2, [r4, #20]
 8008112:	4252      	negs	r2, r2
 8008114:	61a2      	str	r2, [r4, #24]
 8008116:	6922      	ldr	r2, [r4, #16]
 8008118:	b942      	cbnz	r2, 800812c <__swsetup_r+0xa4>
 800811a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800811e:	d1c5      	bne.n	80080ac <__swsetup_r+0x24>
 8008120:	bd38      	pop	{r3, r4, r5, pc}
 8008122:	0799      	lsls	r1, r3, #30
 8008124:	bf58      	it	pl
 8008126:	6962      	ldrpl	r2, [r4, #20]
 8008128:	60a2      	str	r2, [r4, #8]
 800812a:	e7f4      	b.n	8008116 <__swsetup_r+0x8e>
 800812c:	2000      	movs	r0, #0
 800812e:	e7f7      	b.n	8008120 <__swsetup_r+0x98>
 8008130:	20000020 	.word	0x20000020

08008134 <memset>:
 8008134:	4402      	add	r2, r0
 8008136:	4603      	mov	r3, r0
 8008138:	4293      	cmp	r3, r2
 800813a:	d100      	bne.n	800813e <memset+0xa>
 800813c:	4770      	bx	lr
 800813e:	f803 1b01 	strb.w	r1, [r3], #1
 8008142:	e7f9      	b.n	8008138 <memset+0x4>

08008144 <_localeconv_r>:
 8008144:	4800      	ldr	r0, [pc, #0]	@ (8008148 <_localeconv_r+0x4>)
 8008146:	4770      	bx	lr
 8008148:	20000160 	.word	0x20000160

0800814c <_close_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d06      	ldr	r5, [pc, #24]	@ (8008168 <_close_r+0x1c>)
 8008150:	2300      	movs	r3, #0
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7fb fa09 	bl	800356e <_close>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_close_r+0x1a>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_close_r+0x1a>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	20000554 	.word	0x20000554

0800816c <_lseek_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4d07      	ldr	r5, [pc, #28]	@ (800818c <_lseek_r+0x20>)
 8008170:	4604      	mov	r4, r0
 8008172:	4608      	mov	r0, r1
 8008174:	4611      	mov	r1, r2
 8008176:	2200      	movs	r2, #0
 8008178:	602a      	str	r2, [r5, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	f7fb fa1e 	bl	80035bc <_lseek>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_lseek_r+0x1e>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_lseek_r+0x1e>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20000554 	.word	0x20000554

08008190 <_read_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d07      	ldr	r5, [pc, #28]	@ (80081b0 <_read_r+0x20>)
 8008194:	4604      	mov	r4, r0
 8008196:	4608      	mov	r0, r1
 8008198:	4611      	mov	r1, r2
 800819a:	2200      	movs	r2, #0
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	f7fb f9c8 	bl	8003534 <_read>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_read_r+0x1e>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_read_r+0x1e>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	20000554 	.word	0x20000554

080081b4 <_write_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	@ (80081d4 <_write_r+0x20>)
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f7fa ffea 	bl	800319c <_write>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_write_r+0x1e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_write_r+0x1e>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20000554 	.word	0x20000554

080081d8 <__errno>:
 80081d8:	4b01      	ldr	r3, [pc, #4]	@ (80081e0 <__errno+0x8>)
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000020 	.word	0x20000020

080081e4 <__libc_init_array>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	4d0d      	ldr	r5, [pc, #52]	@ (800821c <__libc_init_array+0x38>)
 80081e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008220 <__libc_init_array+0x3c>)
 80081ea:	1b64      	subs	r4, r4, r5
 80081ec:	10a4      	asrs	r4, r4, #2
 80081ee:	2600      	movs	r6, #0
 80081f0:	42a6      	cmp	r6, r4
 80081f2:	d109      	bne.n	8008208 <__libc_init_array+0x24>
 80081f4:	4d0b      	ldr	r5, [pc, #44]	@ (8008224 <__libc_init_array+0x40>)
 80081f6:	4c0c      	ldr	r4, [pc, #48]	@ (8008228 <__libc_init_array+0x44>)
 80081f8:	f001 fd7e 	bl	8009cf8 <_init>
 80081fc:	1b64      	subs	r4, r4, r5
 80081fe:	10a4      	asrs	r4, r4, #2
 8008200:	2600      	movs	r6, #0
 8008202:	42a6      	cmp	r6, r4
 8008204:	d105      	bne.n	8008212 <__libc_init_array+0x2e>
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	f855 3b04 	ldr.w	r3, [r5], #4
 800820c:	4798      	blx	r3
 800820e:	3601      	adds	r6, #1
 8008210:	e7ee      	b.n	80081f0 <__libc_init_array+0xc>
 8008212:	f855 3b04 	ldr.w	r3, [r5], #4
 8008216:	4798      	blx	r3
 8008218:	3601      	adds	r6, #1
 800821a:	e7f2      	b.n	8008202 <__libc_init_array+0x1e>
 800821c:	0800a1f8 	.word	0x0800a1f8
 8008220:	0800a1f8 	.word	0x0800a1f8
 8008224:	0800a1f8 	.word	0x0800a1f8
 8008228:	0800a1fc 	.word	0x0800a1fc

0800822c <__retarget_lock_init_recursive>:
 800822c:	4770      	bx	lr

0800822e <__retarget_lock_acquire_recursive>:
 800822e:	4770      	bx	lr

08008230 <__retarget_lock_release_recursive>:
 8008230:	4770      	bx	lr

08008232 <memcpy>:
 8008232:	440a      	add	r2, r1
 8008234:	4291      	cmp	r1, r2
 8008236:	f100 33ff 	add.w	r3, r0, #4294967295
 800823a:	d100      	bne.n	800823e <memcpy+0xc>
 800823c:	4770      	bx	lr
 800823e:	b510      	push	{r4, lr}
 8008240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008248:	4291      	cmp	r1, r2
 800824a:	d1f9      	bne.n	8008240 <memcpy+0xe>
 800824c:	bd10      	pop	{r4, pc}

0800824e <quorem>:
 800824e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008252:	6903      	ldr	r3, [r0, #16]
 8008254:	690c      	ldr	r4, [r1, #16]
 8008256:	42a3      	cmp	r3, r4
 8008258:	4607      	mov	r7, r0
 800825a:	db7e      	blt.n	800835a <quorem+0x10c>
 800825c:	3c01      	subs	r4, #1
 800825e:	f101 0814 	add.w	r8, r1, #20
 8008262:	00a3      	lsls	r3, r4, #2
 8008264:	f100 0514 	add.w	r5, r0, #20
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008278:	3301      	adds	r3, #1
 800827a:	429a      	cmp	r2, r3
 800827c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008280:	fbb2 f6f3 	udiv	r6, r2, r3
 8008284:	d32e      	bcc.n	80082e4 <quorem+0x96>
 8008286:	f04f 0a00 	mov.w	sl, #0
 800828a:	46c4      	mov	ip, r8
 800828c:	46ae      	mov	lr, r5
 800828e:	46d3      	mov	fp, sl
 8008290:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008294:	b298      	uxth	r0, r3
 8008296:	fb06 a000 	mla	r0, r6, r0, sl
 800829a:	0c02      	lsrs	r2, r0, #16
 800829c:	0c1b      	lsrs	r3, r3, #16
 800829e:	fb06 2303 	mla	r3, r6, r3, r2
 80082a2:	f8de 2000 	ldr.w	r2, [lr]
 80082a6:	b280      	uxth	r0, r0
 80082a8:	b292      	uxth	r2, r2
 80082aa:	1a12      	subs	r2, r2, r0
 80082ac:	445a      	add	r2, fp
 80082ae:	f8de 0000 	ldr.w	r0, [lr]
 80082b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082c0:	b292      	uxth	r2, r2
 80082c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082c6:	45e1      	cmp	r9, ip
 80082c8:	f84e 2b04 	str.w	r2, [lr], #4
 80082cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082d0:	d2de      	bcs.n	8008290 <quorem+0x42>
 80082d2:	9b00      	ldr	r3, [sp, #0]
 80082d4:	58eb      	ldr	r3, [r5, r3]
 80082d6:	b92b      	cbnz	r3, 80082e4 <quorem+0x96>
 80082d8:	9b01      	ldr	r3, [sp, #4]
 80082da:	3b04      	subs	r3, #4
 80082dc:	429d      	cmp	r5, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	d32f      	bcc.n	8008342 <quorem+0xf4>
 80082e2:	613c      	str	r4, [r7, #16]
 80082e4:	4638      	mov	r0, r7
 80082e6:	f001 f979 	bl	80095dc <__mcmp>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	db25      	blt.n	800833a <quorem+0xec>
 80082ee:	4629      	mov	r1, r5
 80082f0:	2000      	movs	r0, #0
 80082f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80082f6:	f8d1 c000 	ldr.w	ip, [r1]
 80082fa:	fa1f fe82 	uxth.w	lr, r2
 80082fe:	fa1f f38c 	uxth.w	r3, ip
 8008302:	eba3 030e 	sub.w	r3, r3, lr
 8008306:	4403      	add	r3, r0
 8008308:	0c12      	lsrs	r2, r2, #16
 800830a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800830e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008312:	b29b      	uxth	r3, r3
 8008314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008318:	45c1      	cmp	r9, r8
 800831a:	f841 3b04 	str.w	r3, [r1], #4
 800831e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008322:	d2e6      	bcs.n	80082f2 <quorem+0xa4>
 8008324:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008328:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800832c:	b922      	cbnz	r2, 8008338 <quorem+0xea>
 800832e:	3b04      	subs	r3, #4
 8008330:	429d      	cmp	r5, r3
 8008332:	461a      	mov	r2, r3
 8008334:	d30b      	bcc.n	800834e <quorem+0x100>
 8008336:	613c      	str	r4, [r7, #16]
 8008338:	3601      	adds	r6, #1
 800833a:	4630      	mov	r0, r6
 800833c:	b003      	add	sp, #12
 800833e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008342:	6812      	ldr	r2, [r2, #0]
 8008344:	3b04      	subs	r3, #4
 8008346:	2a00      	cmp	r2, #0
 8008348:	d1cb      	bne.n	80082e2 <quorem+0x94>
 800834a:	3c01      	subs	r4, #1
 800834c:	e7c6      	b.n	80082dc <quorem+0x8e>
 800834e:	6812      	ldr	r2, [r2, #0]
 8008350:	3b04      	subs	r3, #4
 8008352:	2a00      	cmp	r2, #0
 8008354:	d1ef      	bne.n	8008336 <quorem+0xe8>
 8008356:	3c01      	subs	r4, #1
 8008358:	e7ea      	b.n	8008330 <quorem+0xe2>
 800835a:	2000      	movs	r0, #0
 800835c:	e7ee      	b.n	800833c <quorem+0xee>
	...

08008360 <_dtoa_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	69c7      	ldr	r7, [r0, #28]
 8008366:	b099      	sub	sp, #100	@ 0x64
 8008368:	ed8d 0b02 	vstr	d0, [sp, #8]
 800836c:	ec55 4b10 	vmov	r4, r5, d0
 8008370:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008372:	9109      	str	r1, [sp, #36]	@ 0x24
 8008374:	4683      	mov	fp, r0
 8008376:	920e      	str	r2, [sp, #56]	@ 0x38
 8008378:	9313      	str	r3, [sp, #76]	@ 0x4c
 800837a:	b97f      	cbnz	r7, 800839c <_dtoa_r+0x3c>
 800837c:	2010      	movs	r0, #16
 800837e:	f000 fdfd 	bl	8008f7c <malloc>
 8008382:	4602      	mov	r2, r0
 8008384:	f8cb 001c 	str.w	r0, [fp, #28]
 8008388:	b920      	cbnz	r0, 8008394 <_dtoa_r+0x34>
 800838a:	4ba7      	ldr	r3, [pc, #668]	@ (8008628 <_dtoa_r+0x2c8>)
 800838c:	21ef      	movs	r1, #239	@ 0xef
 800838e:	48a7      	ldr	r0, [pc, #668]	@ (800862c <_dtoa_r+0x2cc>)
 8008390:	f001 fc02 	bl	8009b98 <__assert_func>
 8008394:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008398:	6007      	str	r7, [r0, #0]
 800839a:	60c7      	str	r7, [r0, #12]
 800839c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083a0:	6819      	ldr	r1, [r3, #0]
 80083a2:	b159      	cbz	r1, 80083bc <_dtoa_r+0x5c>
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	604a      	str	r2, [r1, #4]
 80083a8:	2301      	movs	r3, #1
 80083aa:	4093      	lsls	r3, r2
 80083ac:	608b      	str	r3, [r1, #8]
 80083ae:	4658      	mov	r0, fp
 80083b0:	f000 feda 	bl	8009168 <_Bfree>
 80083b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	1e2b      	subs	r3, r5, #0
 80083be:	bfb9      	ittee	lt
 80083c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083c4:	9303      	strlt	r3, [sp, #12]
 80083c6:	2300      	movge	r3, #0
 80083c8:	6033      	strge	r3, [r6, #0]
 80083ca:	9f03      	ldr	r7, [sp, #12]
 80083cc:	4b98      	ldr	r3, [pc, #608]	@ (8008630 <_dtoa_r+0x2d0>)
 80083ce:	bfbc      	itt	lt
 80083d0:	2201      	movlt	r2, #1
 80083d2:	6032      	strlt	r2, [r6, #0]
 80083d4:	43bb      	bics	r3, r7
 80083d6:	d112      	bne.n	80083fe <_dtoa_r+0x9e>
 80083d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083e4:	4323      	orrs	r3, r4
 80083e6:	f000 854d 	beq.w	8008e84 <_dtoa_r+0xb24>
 80083ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008644 <_dtoa_r+0x2e4>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 854f 	beq.w	8008e94 <_dtoa_r+0xb34>
 80083f6:	f10a 0303 	add.w	r3, sl, #3
 80083fa:	f000 bd49 	b.w	8008e90 <_dtoa_r+0xb30>
 80083fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008402:	2200      	movs	r2, #0
 8008404:	ec51 0b17 	vmov	r0, r1, d7
 8008408:	2300      	movs	r3, #0
 800840a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800840e:	f7f8 fb63 	bl	8000ad8 <__aeabi_dcmpeq>
 8008412:	4680      	mov	r8, r0
 8008414:	b158      	cbz	r0, 800842e <_dtoa_r+0xce>
 8008416:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008418:	2301      	movs	r3, #1
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800841e:	b113      	cbz	r3, 8008426 <_dtoa_r+0xc6>
 8008420:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008422:	4b84      	ldr	r3, [pc, #528]	@ (8008634 <_dtoa_r+0x2d4>)
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008648 <_dtoa_r+0x2e8>
 800842a:	f000 bd33 	b.w	8008e94 <_dtoa_r+0xb34>
 800842e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008432:	aa16      	add	r2, sp, #88	@ 0x58
 8008434:	a917      	add	r1, sp, #92	@ 0x5c
 8008436:	4658      	mov	r0, fp
 8008438:	f001 f980 	bl	800973c <__d2b>
 800843c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008440:	4681      	mov	r9, r0
 8008442:	2e00      	cmp	r6, #0
 8008444:	d077      	beq.n	8008536 <_dtoa_r+0x1d6>
 8008446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008448:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800844c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008454:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008458:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800845c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008460:	4619      	mov	r1, r3
 8008462:	2200      	movs	r2, #0
 8008464:	4b74      	ldr	r3, [pc, #464]	@ (8008638 <_dtoa_r+0x2d8>)
 8008466:	f7f7 ff17 	bl	8000298 <__aeabi_dsub>
 800846a:	a369      	add	r3, pc, #420	@ (adr r3, 8008610 <_dtoa_r+0x2b0>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f8 f8ca 	bl	8000608 <__aeabi_dmul>
 8008474:	a368      	add	r3, pc, #416	@ (adr r3, 8008618 <_dtoa_r+0x2b8>)
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f7f7 ff0f 	bl	800029c <__adddf3>
 800847e:	4604      	mov	r4, r0
 8008480:	4630      	mov	r0, r6
 8008482:	460d      	mov	r5, r1
 8008484:	f7f8 f856 	bl	8000534 <__aeabi_i2d>
 8008488:	a365      	add	r3, pc, #404	@ (adr r3, 8008620 <_dtoa_r+0x2c0>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f8 f8bb 	bl	8000608 <__aeabi_dmul>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4620      	mov	r0, r4
 8008498:	4629      	mov	r1, r5
 800849a:	f7f7 feff 	bl	800029c <__adddf3>
 800849e:	4604      	mov	r4, r0
 80084a0:	460d      	mov	r5, r1
 80084a2:	f7f8 fb61 	bl	8000b68 <__aeabi_d2iz>
 80084a6:	2200      	movs	r2, #0
 80084a8:	4607      	mov	r7, r0
 80084aa:	2300      	movs	r3, #0
 80084ac:	4620      	mov	r0, r4
 80084ae:	4629      	mov	r1, r5
 80084b0:	f7f8 fb1c 	bl	8000aec <__aeabi_dcmplt>
 80084b4:	b140      	cbz	r0, 80084c8 <_dtoa_r+0x168>
 80084b6:	4638      	mov	r0, r7
 80084b8:	f7f8 f83c 	bl	8000534 <__aeabi_i2d>
 80084bc:	4622      	mov	r2, r4
 80084be:	462b      	mov	r3, r5
 80084c0:	f7f8 fb0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80084c4:	b900      	cbnz	r0, 80084c8 <_dtoa_r+0x168>
 80084c6:	3f01      	subs	r7, #1
 80084c8:	2f16      	cmp	r7, #22
 80084ca:	d851      	bhi.n	8008570 <_dtoa_r+0x210>
 80084cc:	4b5b      	ldr	r3, [pc, #364]	@ (800863c <_dtoa_r+0x2dc>)
 80084ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084da:	f7f8 fb07 	bl	8000aec <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d048      	beq.n	8008574 <_dtoa_r+0x214>
 80084e2:	3f01      	subs	r7, #1
 80084e4:	2300      	movs	r3, #0
 80084e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80084e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084ea:	1b9b      	subs	r3, r3, r6
 80084ec:	1e5a      	subs	r2, r3, #1
 80084ee:	bf44      	itt	mi
 80084f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80084f4:	2300      	movmi	r3, #0
 80084f6:	9208      	str	r2, [sp, #32]
 80084f8:	bf54      	ite	pl
 80084fa:	f04f 0800 	movpl.w	r8, #0
 80084fe:	9308      	strmi	r3, [sp, #32]
 8008500:	2f00      	cmp	r7, #0
 8008502:	db39      	blt.n	8008578 <_dtoa_r+0x218>
 8008504:	9b08      	ldr	r3, [sp, #32]
 8008506:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008508:	443b      	add	r3, r7
 800850a:	9308      	str	r3, [sp, #32]
 800850c:	2300      	movs	r3, #0
 800850e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008512:	2b09      	cmp	r3, #9
 8008514:	d864      	bhi.n	80085e0 <_dtoa_r+0x280>
 8008516:	2b05      	cmp	r3, #5
 8008518:	bfc4      	itt	gt
 800851a:	3b04      	subgt	r3, #4
 800851c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800851e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008520:	f1a3 0302 	sub.w	r3, r3, #2
 8008524:	bfcc      	ite	gt
 8008526:	2400      	movgt	r4, #0
 8008528:	2401      	movle	r4, #1
 800852a:	2b03      	cmp	r3, #3
 800852c:	d863      	bhi.n	80085f6 <_dtoa_r+0x296>
 800852e:	e8df f003 	tbb	[pc, r3]
 8008532:	372a      	.short	0x372a
 8008534:	5535      	.short	0x5535
 8008536:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800853a:	441e      	add	r6, r3
 800853c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008540:	2b20      	cmp	r3, #32
 8008542:	bfc1      	itttt	gt
 8008544:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008548:	409f      	lslgt	r7, r3
 800854a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800854e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008552:	bfd6      	itet	le
 8008554:	f1c3 0320 	rsble	r3, r3, #32
 8008558:	ea47 0003 	orrgt.w	r0, r7, r3
 800855c:	fa04 f003 	lslle.w	r0, r4, r3
 8008560:	f7f7 ffd8 	bl	8000514 <__aeabi_ui2d>
 8008564:	2201      	movs	r2, #1
 8008566:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800856a:	3e01      	subs	r6, #1
 800856c:	9214      	str	r2, [sp, #80]	@ 0x50
 800856e:	e777      	b.n	8008460 <_dtoa_r+0x100>
 8008570:	2301      	movs	r3, #1
 8008572:	e7b8      	b.n	80084e6 <_dtoa_r+0x186>
 8008574:	9012      	str	r0, [sp, #72]	@ 0x48
 8008576:	e7b7      	b.n	80084e8 <_dtoa_r+0x188>
 8008578:	427b      	negs	r3, r7
 800857a:	930a      	str	r3, [sp, #40]	@ 0x28
 800857c:	2300      	movs	r3, #0
 800857e:	eba8 0807 	sub.w	r8, r8, r7
 8008582:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008584:	e7c4      	b.n	8008510 <_dtoa_r+0x1b0>
 8008586:	2300      	movs	r3, #0
 8008588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800858a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800858c:	2b00      	cmp	r3, #0
 800858e:	dc35      	bgt.n	80085fc <_dtoa_r+0x29c>
 8008590:	2301      	movs	r3, #1
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	9307      	str	r3, [sp, #28]
 8008596:	461a      	mov	r2, r3
 8008598:	920e      	str	r2, [sp, #56]	@ 0x38
 800859a:	e00b      	b.n	80085b4 <_dtoa_r+0x254>
 800859c:	2301      	movs	r3, #1
 800859e:	e7f3      	b.n	8008588 <_dtoa_r+0x228>
 80085a0:	2300      	movs	r3, #0
 80085a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085a6:	18fb      	adds	r3, r7, r3
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	3301      	adds	r3, #1
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	9307      	str	r3, [sp, #28]
 80085b0:	bfb8      	it	lt
 80085b2:	2301      	movlt	r3, #1
 80085b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80085b8:	2100      	movs	r1, #0
 80085ba:	2204      	movs	r2, #4
 80085bc:	f102 0514 	add.w	r5, r2, #20
 80085c0:	429d      	cmp	r5, r3
 80085c2:	d91f      	bls.n	8008604 <_dtoa_r+0x2a4>
 80085c4:	6041      	str	r1, [r0, #4]
 80085c6:	4658      	mov	r0, fp
 80085c8:	f000 fd8e 	bl	80090e8 <_Balloc>
 80085cc:	4682      	mov	sl, r0
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d13c      	bne.n	800864c <_dtoa_r+0x2ec>
 80085d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008640 <_dtoa_r+0x2e0>)
 80085d4:	4602      	mov	r2, r0
 80085d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80085da:	e6d8      	b.n	800838e <_dtoa_r+0x2e>
 80085dc:	2301      	movs	r3, #1
 80085de:	e7e0      	b.n	80085a2 <_dtoa_r+0x242>
 80085e0:	2401      	movs	r4, #1
 80085e2:	2300      	movs	r3, #0
 80085e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085e8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	9307      	str	r3, [sp, #28]
 80085f0:	2200      	movs	r2, #0
 80085f2:	2312      	movs	r3, #18
 80085f4:	e7d0      	b.n	8008598 <_dtoa_r+0x238>
 80085f6:	2301      	movs	r3, #1
 80085f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085fa:	e7f5      	b.n	80085e8 <_dtoa_r+0x288>
 80085fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	9307      	str	r3, [sp, #28]
 8008602:	e7d7      	b.n	80085b4 <_dtoa_r+0x254>
 8008604:	3101      	adds	r1, #1
 8008606:	0052      	lsls	r2, r2, #1
 8008608:	e7d8      	b.n	80085bc <_dtoa_r+0x25c>
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w
 8008610:	636f4361 	.word	0x636f4361
 8008614:	3fd287a7 	.word	0x3fd287a7
 8008618:	8b60c8b3 	.word	0x8b60c8b3
 800861c:	3fc68a28 	.word	0x3fc68a28
 8008620:	509f79fb 	.word	0x509f79fb
 8008624:	3fd34413 	.word	0x3fd34413
 8008628:	08009ec1 	.word	0x08009ec1
 800862c:	08009ed8 	.word	0x08009ed8
 8008630:	7ff00000 	.word	0x7ff00000
 8008634:	08009e91 	.word	0x08009e91
 8008638:	3ff80000 	.word	0x3ff80000
 800863c:	08009fd0 	.word	0x08009fd0
 8008640:	08009f30 	.word	0x08009f30
 8008644:	08009ebd 	.word	0x08009ebd
 8008648:	08009e90 	.word	0x08009e90
 800864c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008650:	6018      	str	r0, [r3, #0]
 8008652:	9b07      	ldr	r3, [sp, #28]
 8008654:	2b0e      	cmp	r3, #14
 8008656:	f200 80a4 	bhi.w	80087a2 <_dtoa_r+0x442>
 800865a:	2c00      	cmp	r4, #0
 800865c:	f000 80a1 	beq.w	80087a2 <_dtoa_r+0x442>
 8008660:	2f00      	cmp	r7, #0
 8008662:	dd33      	ble.n	80086cc <_dtoa_r+0x36c>
 8008664:	4bad      	ldr	r3, [pc, #692]	@ (800891c <_dtoa_r+0x5bc>)
 8008666:	f007 020f 	and.w	r2, r7, #15
 800866a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800866e:	ed93 7b00 	vldr	d7, [r3]
 8008672:	05f8      	lsls	r0, r7, #23
 8008674:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008678:	ea4f 1427 	mov.w	r4, r7, asr #4
 800867c:	d516      	bpl.n	80086ac <_dtoa_r+0x34c>
 800867e:	4ba8      	ldr	r3, [pc, #672]	@ (8008920 <_dtoa_r+0x5c0>)
 8008680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008684:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008688:	f7f8 f8e8 	bl	800085c <__aeabi_ddiv>
 800868c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008690:	f004 040f 	and.w	r4, r4, #15
 8008694:	2603      	movs	r6, #3
 8008696:	4da2      	ldr	r5, [pc, #648]	@ (8008920 <_dtoa_r+0x5c0>)
 8008698:	b954      	cbnz	r4, 80086b0 <_dtoa_r+0x350>
 800869a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800869e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086a2:	f7f8 f8db 	bl	800085c <__aeabi_ddiv>
 80086a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086aa:	e028      	b.n	80086fe <_dtoa_r+0x39e>
 80086ac:	2602      	movs	r6, #2
 80086ae:	e7f2      	b.n	8008696 <_dtoa_r+0x336>
 80086b0:	07e1      	lsls	r1, r4, #31
 80086b2:	d508      	bpl.n	80086c6 <_dtoa_r+0x366>
 80086b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086bc:	f7f7 ffa4 	bl	8000608 <__aeabi_dmul>
 80086c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086c4:	3601      	adds	r6, #1
 80086c6:	1064      	asrs	r4, r4, #1
 80086c8:	3508      	adds	r5, #8
 80086ca:	e7e5      	b.n	8008698 <_dtoa_r+0x338>
 80086cc:	f000 80d2 	beq.w	8008874 <_dtoa_r+0x514>
 80086d0:	427c      	negs	r4, r7
 80086d2:	4b92      	ldr	r3, [pc, #584]	@ (800891c <_dtoa_r+0x5bc>)
 80086d4:	4d92      	ldr	r5, [pc, #584]	@ (8008920 <_dtoa_r+0x5c0>)
 80086d6:	f004 020f 	and.w	r2, r4, #15
 80086da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086e6:	f7f7 ff8f 	bl	8000608 <__aeabi_dmul>
 80086ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ee:	1124      	asrs	r4, r4, #4
 80086f0:	2300      	movs	r3, #0
 80086f2:	2602      	movs	r6, #2
 80086f4:	2c00      	cmp	r4, #0
 80086f6:	f040 80b2 	bne.w	800885e <_dtoa_r+0x4fe>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1d3      	bne.n	80086a6 <_dtoa_r+0x346>
 80086fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008700:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80b7 	beq.w	8008878 <_dtoa_r+0x518>
 800870a:	4b86      	ldr	r3, [pc, #536]	@ (8008924 <_dtoa_r+0x5c4>)
 800870c:	2200      	movs	r2, #0
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f8 f9eb 	bl	8000aec <__aeabi_dcmplt>
 8008716:	2800      	cmp	r0, #0
 8008718:	f000 80ae 	beq.w	8008878 <_dtoa_r+0x518>
 800871c:	9b07      	ldr	r3, [sp, #28]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80aa 	beq.w	8008878 <_dtoa_r+0x518>
 8008724:	9b00      	ldr	r3, [sp, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	dd37      	ble.n	800879a <_dtoa_r+0x43a>
 800872a:	1e7b      	subs	r3, r7, #1
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	4620      	mov	r0, r4
 8008730:	4b7d      	ldr	r3, [pc, #500]	@ (8008928 <_dtoa_r+0x5c8>)
 8008732:	2200      	movs	r2, #0
 8008734:	4629      	mov	r1, r5
 8008736:	f7f7 ff67 	bl	8000608 <__aeabi_dmul>
 800873a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800873e:	9c00      	ldr	r4, [sp, #0]
 8008740:	3601      	adds	r6, #1
 8008742:	4630      	mov	r0, r6
 8008744:	f7f7 fef6 	bl	8000534 <__aeabi_i2d>
 8008748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800874c:	f7f7 ff5c 	bl	8000608 <__aeabi_dmul>
 8008750:	4b76      	ldr	r3, [pc, #472]	@ (800892c <_dtoa_r+0x5cc>)
 8008752:	2200      	movs	r2, #0
 8008754:	f7f7 fda2 	bl	800029c <__adddf3>
 8008758:	4605      	mov	r5, r0
 800875a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800875e:	2c00      	cmp	r4, #0
 8008760:	f040 808d 	bne.w	800887e <_dtoa_r+0x51e>
 8008764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008768:	4b71      	ldr	r3, [pc, #452]	@ (8008930 <_dtoa_r+0x5d0>)
 800876a:	2200      	movs	r2, #0
 800876c:	f7f7 fd94 	bl	8000298 <__aeabi_dsub>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008778:	462a      	mov	r2, r5
 800877a:	4633      	mov	r3, r6
 800877c:	f7f8 f9d4 	bl	8000b28 <__aeabi_dcmpgt>
 8008780:	2800      	cmp	r0, #0
 8008782:	f040 828b 	bne.w	8008c9c <_dtoa_r+0x93c>
 8008786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800878a:	462a      	mov	r2, r5
 800878c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008790:	f7f8 f9ac 	bl	8000aec <__aeabi_dcmplt>
 8008794:	2800      	cmp	r0, #0
 8008796:	f040 8128 	bne.w	80089ea <_dtoa_r+0x68a>
 800879a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800879e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80087a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f2c0 815a 	blt.w	8008a5e <_dtoa_r+0x6fe>
 80087aa:	2f0e      	cmp	r7, #14
 80087ac:	f300 8157 	bgt.w	8008a5e <_dtoa_r+0x6fe>
 80087b0:	4b5a      	ldr	r3, [pc, #360]	@ (800891c <_dtoa_r+0x5bc>)
 80087b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087b6:	ed93 7b00 	vldr	d7, [r3]
 80087ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	ed8d 7b00 	vstr	d7, [sp]
 80087c2:	da03      	bge.n	80087cc <_dtoa_r+0x46c>
 80087c4:	9b07      	ldr	r3, [sp, #28]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f340 8101 	ble.w	80089ce <_dtoa_r+0x66e>
 80087cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087d0:	4656      	mov	r6, sl
 80087d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087d6:	4620      	mov	r0, r4
 80087d8:	4629      	mov	r1, r5
 80087da:	f7f8 f83f 	bl	800085c <__aeabi_ddiv>
 80087de:	f7f8 f9c3 	bl	8000b68 <__aeabi_d2iz>
 80087e2:	4680      	mov	r8, r0
 80087e4:	f7f7 fea6 	bl	8000534 <__aeabi_i2d>
 80087e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ec:	f7f7 ff0c 	bl	8000608 <__aeabi_dmul>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4620      	mov	r0, r4
 80087f6:	4629      	mov	r1, r5
 80087f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087fc:	f7f7 fd4c 	bl	8000298 <__aeabi_dsub>
 8008800:	f806 4b01 	strb.w	r4, [r6], #1
 8008804:	9d07      	ldr	r5, [sp, #28]
 8008806:	eba6 040a 	sub.w	r4, r6, sl
 800880a:	42a5      	cmp	r5, r4
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	f040 8117 	bne.w	8008a42 <_dtoa_r+0x6e2>
 8008814:	f7f7 fd42 	bl	800029c <__adddf3>
 8008818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800881c:	4604      	mov	r4, r0
 800881e:	460d      	mov	r5, r1
 8008820:	f7f8 f982 	bl	8000b28 <__aeabi_dcmpgt>
 8008824:	2800      	cmp	r0, #0
 8008826:	f040 80f9 	bne.w	8008a1c <_dtoa_r+0x6bc>
 800882a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800882e:	4620      	mov	r0, r4
 8008830:	4629      	mov	r1, r5
 8008832:	f7f8 f951 	bl	8000ad8 <__aeabi_dcmpeq>
 8008836:	b118      	cbz	r0, 8008840 <_dtoa_r+0x4e0>
 8008838:	f018 0f01 	tst.w	r8, #1
 800883c:	f040 80ee 	bne.w	8008a1c <_dtoa_r+0x6bc>
 8008840:	4649      	mov	r1, r9
 8008842:	4658      	mov	r0, fp
 8008844:	f000 fc90 	bl	8009168 <_Bfree>
 8008848:	2300      	movs	r3, #0
 800884a:	7033      	strb	r3, [r6, #0]
 800884c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800884e:	3701      	adds	r7, #1
 8008850:	601f      	str	r7, [r3, #0]
 8008852:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 831d 	beq.w	8008e94 <_dtoa_r+0xb34>
 800885a:	601e      	str	r6, [r3, #0]
 800885c:	e31a      	b.n	8008e94 <_dtoa_r+0xb34>
 800885e:	07e2      	lsls	r2, r4, #31
 8008860:	d505      	bpl.n	800886e <_dtoa_r+0x50e>
 8008862:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008866:	f7f7 fecf 	bl	8000608 <__aeabi_dmul>
 800886a:	3601      	adds	r6, #1
 800886c:	2301      	movs	r3, #1
 800886e:	1064      	asrs	r4, r4, #1
 8008870:	3508      	adds	r5, #8
 8008872:	e73f      	b.n	80086f4 <_dtoa_r+0x394>
 8008874:	2602      	movs	r6, #2
 8008876:	e742      	b.n	80086fe <_dtoa_r+0x39e>
 8008878:	9c07      	ldr	r4, [sp, #28]
 800887a:	9704      	str	r7, [sp, #16]
 800887c:	e761      	b.n	8008742 <_dtoa_r+0x3e2>
 800887e:	4b27      	ldr	r3, [pc, #156]	@ (800891c <_dtoa_r+0x5bc>)
 8008880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008886:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800888a:	4454      	add	r4, sl
 800888c:	2900      	cmp	r1, #0
 800888e:	d053      	beq.n	8008938 <_dtoa_r+0x5d8>
 8008890:	4928      	ldr	r1, [pc, #160]	@ (8008934 <_dtoa_r+0x5d4>)
 8008892:	2000      	movs	r0, #0
 8008894:	f7f7 ffe2 	bl	800085c <__aeabi_ddiv>
 8008898:	4633      	mov	r3, r6
 800889a:	462a      	mov	r2, r5
 800889c:	f7f7 fcfc 	bl	8000298 <__aeabi_dsub>
 80088a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088a4:	4656      	mov	r6, sl
 80088a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088aa:	f7f8 f95d 	bl	8000b68 <__aeabi_d2iz>
 80088ae:	4605      	mov	r5, r0
 80088b0:	f7f7 fe40 	bl	8000534 <__aeabi_i2d>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088bc:	f7f7 fcec 	bl	8000298 <__aeabi_dsub>
 80088c0:	3530      	adds	r5, #48	@ 0x30
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088ca:	f806 5b01 	strb.w	r5, [r6], #1
 80088ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088d2:	f7f8 f90b 	bl	8000aec <__aeabi_dcmplt>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d171      	bne.n	80089be <_dtoa_r+0x65e>
 80088da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088de:	4911      	ldr	r1, [pc, #68]	@ (8008924 <_dtoa_r+0x5c4>)
 80088e0:	2000      	movs	r0, #0
 80088e2:	f7f7 fcd9 	bl	8000298 <__aeabi_dsub>
 80088e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088ea:	f7f8 f8ff 	bl	8000aec <__aeabi_dcmplt>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f040 8095 	bne.w	8008a1e <_dtoa_r+0x6be>
 80088f4:	42a6      	cmp	r6, r4
 80088f6:	f43f af50 	beq.w	800879a <_dtoa_r+0x43a>
 80088fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008928 <_dtoa_r+0x5c8>)
 8008900:	2200      	movs	r2, #0
 8008902:	f7f7 fe81 	bl	8000608 <__aeabi_dmul>
 8008906:	4b08      	ldr	r3, [pc, #32]	@ (8008928 <_dtoa_r+0x5c8>)
 8008908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800890c:	2200      	movs	r2, #0
 800890e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008912:	f7f7 fe79 	bl	8000608 <__aeabi_dmul>
 8008916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800891a:	e7c4      	b.n	80088a6 <_dtoa_r+0x546>
 800891c:	08009fd0 	.word	0x08009fd0
 8008920:	08009fa8 	.word	0x08009fa8
 8008924:	3ff00000 	.word	0x3ff00000
 8008928:	40240000 	.word	0x40240000
 800892c:	401c0000 	.word	0x401c0000
 8008930:	40140000 	.word	0x40140000
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	4631      	mov	r1, r6
 800893a:	4628      	mov	r0, r5
 800893c:	f7f7 fe64 	bl	8000608 <__aeabi_dmul>
 8008940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008944:	9415      	str	r4, [sp, #84]	@ 0x54
 8008946:	4656      	mov	r6, sl
 8008948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800894c:	f7f8 f90c 	bl	8000b68 <__aeabi_d2iz>
 8008950:	4605      	mov	r5, r0
 8008952:	f7f7 fdef 	bl	8000534 <__aeabi_i2d>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800895e:	f7f7 fc9b 	bl	8000298 <__aeabi_dsub>
 8008962:	3530      	adds	r5, #48	@ 0x30
 8008964:	f806 5b01 	strb.w	r5, [r6], #1
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	42a6      	cmp	r6, r4
 800896e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	d124      	bne.n	80089c2 <_dtoa_r+0x662>
 8008978:	4bac      	ldr	r3, [pc, #688]	@ (8008c2c <_dtoa_r+0x8cc>)
 800897a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800897e:	f7f7 fc8d 	bl	800029c <__adddf3>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800898a:	f7f8 f8cd 	bl	8000b28 <__aeabi_dcmpgt>
 800898e:	2800      	cmp	r0, #0
 8008990:	d145      	bne.n	8008a1e <_dtoa_r+0x6be>
 8008992:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008996:	49a5      	ldr	r1, [pc, #660]	@ (8008c2c <_dtoa_r+0x8cc>)
 8008998:	2000      	movs	r0, #0
 800899a:	f7f7 fc7d 	bl	8000298 <__aeabi_dsub>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a6:	f7f8 f8a1 	bl	8000aec <__aeabi_dcmplt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f43f aef5 	beq.w	800879a <_dtoa_r+0x43a>
 80089b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80089b2:	1e73      	subs	r3, r6, #1
 80089b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80089b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089ba:	2b30      	cmp	r3, #48	@ 0x30
 80089bc:	d0f8      	beq.n	80089b0 <_dtoa_r+0x650>
 80089be:	9f04      	ldr	r7, [sp, #16]
 80089c0:	e73e      	b.n	8008840 <_dtoa_r+0x4e0>
 80089c2:	4b9b      	ldr	r3, [pc, #620]	@ (8008c30 <_dtoa_r+0x8d0>)
 80089c4:	f7f7 fe20 	bl	8000608 <__aeabi_dmul>
 80089c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089cc:	e7bc      	b.n	8008948 <_dtoa_r+0x5e8>
 80089ce:	d10c      	bne.n	80089ea <_dtoa_r+0x68a>
 80089d0:	4b98      	ldr	r3, [pc, #608]	@ (8008c34 <_dtoa_r+0x8d4>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089d8:	f7f7 fe16 	bl	8000608 <__aeabi_dmul>
 80089dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089e0:	f7f8 f898 	bl	8000b14 <__aeabi_dcmpge>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	f000 8157 	beq.w	8008c98 <_dtoa_r+0x938>
 80089ea:	2400      	movs	r4, #0
 80089ec:	4625      	mov	r5, r4
 80089ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089f0:	43db      	mvns	r3, r3
 80089f2:	9304      	str	r3, [sp, #16]
 80089f4:	4656      	mov	r6, sl
 80089f6:	2700      	movs	r7, #0
 80089f8:	4621      	mov	r1, r4
 80089fa:	4658      	mov	r0, fp
 80089fc:	f000 fbb4 	bl	8009168 <_Bfree>
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	d0dc      	beq.n	80089be <_dtoa_r+0x65e>
 8008a04:	b12f      	cbz	r7, 8008a12 <_dtoa_r+0x6b2>
 8008a06:	42af      	cmp	r7, r5
 8008a08:	d003      	beq.n	8008a12 <_dtoa_r+0x6b2>
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f000 fbab 	bl	8009168 <_Bfree>
 8008a12:	4629      	mov	r1, r5
 8008a14:	4658      	mov	r0, fp
 8008a16:	f000 fba7 	bl	8009168 <_Bfree>
 8008a1a:	e7d0      	b.n	80089be <_dtoa_r+0x65e>
 8008a1c:	9704      	str	r7, [sp, #16]
 8008a1e:	4633      	mov	r3, r6
 8008a20:	461e      	mov	r6, r3
 8008a22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a26:	2a39      	cmp	r2, #57	@ 0x39
 8008a28:	d107      	bne.n	8008a3a <_dtoa_r+0x6da>
 8008a2a:	459a      	cmp	sl, r3
 8008a2c:	d1f8      	bne.n	8008a20 <_dtoa_r+0x6c0>
 8008a2e:	9a04      	ldr	r2, [sp, #16]
 8008a30:	3201      	adds	r2, #1
 8008a32:	9204      	str	r2, [sp, #16]
 8008a34:	2230      	movs	r2, #48	@ 0x30
 8008a36:	f88a 2000 	strb.w	r2, [sl]
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	3201      	adds	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	e7bd      	b.n	80089be <_dtoa_r+0x65e>
 8008a42:	4b7b      	ldr	r3, [pc, #492]	@ (8008c30 <_dtoa_r+0x8d0>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	f7f7 fddf 	bl	8000608 <__aeabi_dmul>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	460d      	mov	r5, r1
 8008a52:	f7f8 f841 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	f43f aebb 	beq.w	80087d2 <_dtoa_r+0x472>
 8008a5c:	e6f0      	b.n	8008840 <_dtoa_r+0x4e0>
 8008a5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a60:	2a00      	cmp	r2, #0
 8008a62:	f000 80db 	beq.w	8008c1c <_dtoa_r+0x8bc>
 8008a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a68:	2a01      	cmp	r2, #1
 8008a6a:	f300 80bf 	bgt.w	8008bec <_dtoa_r+0x88c>
 8008a6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a70:	2a00      	cmp	r2, #0
 8008a72:	f000 80b7 	beq.w	8008be4 <_dtoa_r+0x884>
 8008a76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a7c:	4646      	mov	r6, r8
 8008a7e:	9a08      	ldr	r2, [sp, #32]
 8008a80:	2101      	movs	r1, #1
 8008a82:	441a      	add	r2, r3
 8008a84:	4658      	mov	r0, fp
 8008a86:	4498      	add	r8, r3
 8008a88:	9208      	str	r2, [sp, #32]
 8008a8a:	f000 fc21 	bl	80092d0 <__i2b>
 8008a8e:	4605      	mov	r5, r0
 8008a90:	b15e      	cbz	r6, 8008aaa <_dtoa_r+0x74a>
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dd08      	ble.n	8008aaa <_dtoa_r+0x74a>
 8008a98:	42b3      	cmp	r3, r6
 8008a9a:	9a08      	ldr	r2, [sp, #32]
 8008a9c:	bfa8      	it	ge
 8008a9e:	4633      	movge	r3, r6
 8008aa0:	eba8 0803 	sub.w	r8, r8, r3
 8008aa4:	1af6      	subs	r6, r6, r3
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	9308      	str	r3, [sp, #32]
 8008aaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aac:	b1f3      	cbz	r3, 8008aec <_dtoa_r+0x78c>
 8008aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 80b7 	beq.w	8008c24 <_dtoa_r+0x8c4>
 8008ab6:	b18c      	cbz	r4, 8008adc <_dtoa_r+0x77c>
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4622      	mov	r2, r4
 8008abc:	4658      	mov	r0, fp
 8008abe:	f000 fcc7 	bl	8009450 <__pow5mult>
 8008ac2:	464a      	mov	r2, r9
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	4658      	mov	r0, fp
 8008aca:	f000 fc17 	bl	80092fc <__multiply>
 8008ace:	4649      	mov	r1, r9
 8008ad0:	9004      	str	r0, [sp, #16]
 8008ad2:	4658      	mov	r0, fp
 8008ad4:	f000 fb48 	bl	8009168 <_Bfree>
 8008ad8:	9b04      	ldr	r3, [sp, #16]
 8008ada:	4699      	mov	r9, r3
 8008adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ade:	1b1a      	subs	r2, r3, r4
 8008ae0:	d004      	beq.n	8008aec <_dtoa_r+0x78c>
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f000 fcb3 	bl	8009450 <__pow5mult>
 8008aea:	4681      	mov	r9, r0
 8008aec:	2101      	movs	r1, #1
 8008aee:	4658      	mov	r0, fp
 8008af0:	f000 fbee 	bl	80092d0 <__i2b>
 8008af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008af6:	4604      	mov	r4, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 81cf 	beq.w	8008e9c <_dtoa_r+0xb3c>
 8008afe:	461a      	mov	r2, r3
 8008b00:	4601      	mov	r1, r0
 8008b02:	4658      	mov	r0, fp
 8008b04:	f000 fca4 	bl	8009450 <__pow5mult>
 8008b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	f300 8095 	bgt.w	8008c3c <_dtoa_r+0x8dc>
 8008b12:	9b02      	ldr	r3, [sp, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f040 8087 	bne.w	8008c28 <_dtoa_r+0x8c8>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f040 8089 	bne.w	8008c38 <_dtoa_r+0x8d8>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b2c:	0d1b      	lsrs	r3, r3, #20
 8008b2e:	051b      	lsls	r3, r3, #20
 8008b30:	b12b      	cbz	r3, 8008b3e <_dtoa_r+0x7de>
 8008b32:	9b08      	ldr	r3, [sp, #32]
 8008b34:	3301      	adds	r3, #1
 8008b36:	9308      	str	r3, [sp, #32]
 8008b38:	f108 0801 	add.w	r8, r8, #1
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 81b0 	beq.w	8008ea8 <_dtoa_r+0xb48>
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b4e:	6918      	ldr	r0, [r3, #16]
 8008b50:	f000 fb72 	bl	8009238 <__hi0bits>
 8008b54:	f1c0 0020 	rsb	r0, r0, #32
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	4418      	add	r0, r3
 8008b5c:	f010 001f 	ands.w	r0, r0, #31
 8008b60:	d077      	beq.n	8008c52 <_dtoa_r+0x8f2>
 8008b62:	f1c0 0320 	rsb	r3, r0, #32
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	dd6b      	ble.n	8008c42 <_dtoa_r+0x8e2>
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	f1c0 001c 	rsb	r0, r0, #28
 8008b70:	4403      	add	r3, r0
 8008b72:	4480      	add	r8, r0
 8008b74:	4406      	add	r6, r0
 8008b76:	9308      	str	r3, [sp, #32]
 8008b78:	f1b8 0f00 	cmp.w	r8, #0
 8008b7c:	dd05      	ble.n	8008b8a <_dtoa_r+0x82a>
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4642      	mov	r2, r8
 8008b82:	4658      	mov	r0, fp
 8008b84:	f000 fcbe 	bl	8009504 <__lshift>
 8008b88:	4681      	mov	r9, r0
 8008b8a:	9b08      	ldr	r3, [sp, #32]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dd05      	ble.n	8008b9c <_dtoa_r+0x83c>
 8008b90:	4621      	mov	r1, r4
 8008b92:	461a      	mov	r2, r3
 8008b94:	4658      	mov	r0, fp
 8008b96:	f000 fcb5 	bl	8009504 <__lshift>
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d059      	beq.n	8008c56 <_dtoa_r+0x8f6>
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	f000 fd19 	bl	80095dc <__mcmp>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	da53      	bge.n	8008c56 <_dtoa_r+0x8f6>
 8008bae:	1e7b      	subs	r3, r7, #1
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	220a      	movs	r2, #10
 8008bb8:	4658      	mov	r0, fp
 8008bba:	f000 faf7 	bl	80091ac <__multadd>
 8008bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bc0:	4681      	mov	r9, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 8172 	beq.w	8008eac <_dtoa_r+0xb4c>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4629      	mov	r1, r5
 8008bcc:	220a      	movs	r2, #10
 8008bce:	4658      	mov	r0, fp
 8008bd0:	f000 faec 	bl	80091ac <__multadd>
 8008bd4:	9b00      	ldr	r3, [sp, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	4605      	mov	r5, r0
 8008bda:	dc67      	bgt.n	8008cac <_dtoa_r+0x94c>
 8008bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	dc41      	bgt.n	8008c66 <_dtoa_r+0x906>
 8008be2:	e063      	b.n	8008cac <_dtoa_r+0x94c>
 8008be4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008be6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008bea:	e746      	b.n	8008a7a <_dtoa_r+0x71a>
 8008bec:	9b07      	ldr	r3, [sp, #28]
 8008bee:	1e5c      	subs	r4, r3, #1
 8008bf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	bfbf      	itttt	lt
 8008bf6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008bf8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008bfa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008bfc:	1ae3      	sublt	r3, r4, r3
 8008bfe:	bfb4      	ite	lt
 8008c00:	18d2      	addlt	r2, r2, r3
 8008c02:	1b1c      	subge	r4, r3, r4
 8008c04:	9b07      	ldr	r3, [sp, #28]
 8008c06:	bfbc      	itt	lt
 8008c08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008c0a:	2400      	movlt	r4, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfb5      	itete	lt
 8008c10:	eba8 0603 	sublt.w	r6, r8, r3
 8008c14:	9b07      	ldrge	r3, [sp, #28]
 8008c16:	2300      	movlt	r3, #0
 8008c18:	4646      	movge	r6, r8
 8008c1a:	e730      	b.n	8008a7e <_dtoa_r+0x71e>
 8008c1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c20:	4646      	mov	r6, r8
 8008c22:	e735      	b.n	8008a90 <_dtoa_r+0x730>
 8008c24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c26:	e75c      	b.n	8008ae2 <_dtoa_r+0x782>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e788      	b.n	8008b3e <_dtoa_r+0x7de>
 8008c2c:	3fe00000 	.word	0x3fe00000
 8008c30:	40240000 	.word	0x40240000
 8008c34:	40140000 	.word	0x40140000
 8008c38:	9b02      	ldr	r3, [sp, #8]
 8008c3a:	e780      	b.n	8008b3e <_dtoa_r+0x7de>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c40:	e782      	b.n	8008b48 <_dtoa_r+0x7e8>
 8008c42:	d099      	beq.n	8008b78 <_dtoa_r+0x818>
 8008c44:	9a08      	ldr	r2, [sp, #32]
 8008c46:	331c      	adds	r3, #28
 8008c48:	441a      	add	r2, r3
 8008c4a:	4498      	add	r8, r3
 8008c4c:	441e      	add	r6, r3
 8008c4e:	9208      	str	r2, [sp, #32]
 8008c50:	e792      	b.n	8008b78 <_dtoa_r+0x818>
 8008c52:	4603      	mov	r3, r0
 8008c54:	e7f6      	b.n	8008c44 <_dtoa_r+0x8e4>
 8008c56:	9b07      	ldr	r3, [sp, #28]
 8008c58:	9704      	str	r7, [sp, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dc20      	bgt.n	8008ca0 <_dtoa_r+0x940>
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	dd1e      	ble.n	8008ca4 <_dtoa_r+0x944>
 8008c66:	9b00      	ldr	r3, [sp, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f47f aec0 	bne.w	80089ee <_dtoa_r+0x68e>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	2205      	movs	r2, #5
 8008c72:	4658      	mov	r0, fp
 8008c74:	f000 fa9a 	bl	80091ac <__multadd>
 8008c78:	4601      	mov	r1, r0
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	4648      	mov	r0, r9
 8008c7e:	f000 fcad 	bl	80095dc <__mcmp>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	f77f aeb3 	ble.w	80089ee <_dtoa_r+0x68e>
 8008c88:	4656      	mov	r6, sl
 8008c8a:	2331      	movs	r3, #49	@ 0x31
 8008c8c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c90:	9b04      	ldr	r3, [sp, #16]
 8008c92:	3301      	adds	r3, #1
 8008c94:	9304      	str	r3, [sp, #16]
 8008c96:	e6ae      	b.n	80089f6 <_dtoa_r+0x696>
 8008c98:	9c07      	ldr	r4, [sp, #28]
 8008c9a:	9704      	str	r7, [sp, #16]
 8008c9c:	4625      	mov	r5, r4
 8008c9e:	e7f3      	b.n	8008c88 <_dtoa_r+0x928>
 8008ca0:	9b07      	ldr	r3, [sp, #28]
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8104 	beq.w	8008eb4 <_dtoa_r+0xb54>
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	dd05      	ble.n	8008cbc <_dtoa_r+0x95c>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4632      	mov	r2, r6
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f000 fc25 	bl	8009504 <__lshift>
 8008cba:	4605      	mov	r5, r0
 8008cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d05a      	beq.n	8008d78 <_dtoa_r+0xa18>
 8008cc2:	6869      	ldr	r1, [r5, #4]
 8008cc4:	4658      	mov	r0, fp
 8008cc6:	f000 fa0f 	bl	80090e8 <_Balloc>
 8008cca:	4606      	mov	r6, r0
 8008ccc:	b928      	cbnz	r0, 8008cda <_dtoa_r+0x97a>
 8008cce:	4b84      	ldr	r3, [pc, #528]	@ (8008ee0 <_dtoa_r+0xb80>)
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cd6:	f7ff bb5a 	b.w	800838e <_dtoa_r+0x2e>
 8008cda:	692a      	ldr	r2, [r5, #16]
 8008cdc:	3202      	adds	r2, #2
 8008cde:	0092      	lsls	r2, r2, #2
 8008ce0:	f105 010c 	add.w	r1, r5, #12
 8008ce4:	300c      	adds	r0, #12
 8008ce6:	f7ff faa4 	bl	8008232 <memcpy>
 8008cea:	2201      	movs	r2, #1
 8008cec:	4631      	mov	r1, r6
 8008cee:	4658      	mov	r0, fp
 8008cf0:	f000 fc08 	bl	8009504 <__lshift>
 8008cf4:	f10a 0301 	add.w	r3, sl, #1
 8008cf8:	9307      	str	r3, [sp, #28]
 8008cfa:	9b00      	ldr	r3, [sp, #0]
 8008cfc:	4453      	add	r3, sl
 8008cfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	462f      	mov	r7, r5
 8008d08:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	9b07      	ldr	r3, [sp, #28]
 8008d0e:	4621      	mov	r1, r4
 8008d10:	3b01      	subs	r3, #1
 8008d12:	4648      	mov	r0, r9
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	f7ff fa9a 	bl	800824e <quorem>
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	9002      	str	r0, [sp, #8]
 8008d1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d22:	4648      	mov	r0, r9
 8008d24:	f000 fc5a 	bl	80095dc <__mcmp>
 8008d28:	462a      	mov	r2, r5
 8008d2a:	9008      	str	r0, [sp, #32]
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4658      	mov	r0, fp
 8008d30:	f000 fc70 	bl	8009614 <__mdiff>
 8008d34:	68c2      	ldr	r2, [r0, #12]
 8008d36:	4606      	mov	r6, r0
 8008d38:	bb02      	cbnz	r2, 8008d7c <_dtoa_r+0xa1c>
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	4648      	mov	r0, r9
 8008d3e:	f000 fc4d 	bl	80095dc <__mcmp>
 8008d42:	4602      	mov	r2, r0
 8008d44:	4631      	mov	r1, r6
 8008d46:	4658      	mov	r0, fp
 8008d48:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d4a:	f000 fa0d 	bl	8009168 <_Bfree>
 8008d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d52:	9e07      	ldr	r6, [sp, #28]
 8008d54:	ea43 0102 	orr.w	r1, r3, r2
 8008d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d5a:	4319      	orrs	r1, r3
 8008d5c:	d110      	bne.n	8008d80 <_dtoa_r+0xa20>
 8008d5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d62:	d029      	beq.n	8008db8 <_dtoa_r+0xa58>
 8008d64:	9b08      	ldr	r3, [sp, #32]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dd02      	ble.n	8008d70 <_dtoa_r+0xa10>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	f883 8000 	strb.w	r8, [r3]
 8008d76:	e63f      	b.n	80089f8 <_dtoa_r+0x698>
 8008d78:	4628      	mov	r0, r5
 8008d7a:	e7bb      	b.n	8008cf4 <_dtoa_r+0x994>
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	e7e1      	b.n	8008d44 <_dtoa_r+0x9e4>
 8008d80:	9b08      	ldr	r3, [sp, #32]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	db04      	blt.n	8008d90 <_dtoa_r+0xa30>
 8008d86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	d120      	bne.n	8008dd2 <_dtoa_r+0xa72>
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	dded      	ble.n	8008d70 <_dtoa_r+0xa10>
 8008d94:	4649      	mov	r1, r9
 8008d96:	2201      	movs	r2, #1
 8008d98:	4658      	mov	r0, fp
 8008d9a:	f000 fbb3 	bl	8009504 <__lshift>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4681      	mov	r9, r0
 8008da2:	f000 fc1b 	bl	80095dc <__mcmp>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	dc03      	bgt.n	8008db2 <_dtoa_r+0xa52>
 8008daa:	d1e1      	bne.n	8008d70 <_dtoa_r+0xa10>
 8008dac:	f018 0f01 	tst.w	r8, #1
 8008db0:	d0de      	beq.n	8008d70 <_dtoa_r+0xa10>
 8008db2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008db6:	d1d8      	bne.n	8008d6a <_dtoa_r+0xa0a>
 8008db8:	9a00      	ldr	r2, [sp, #0]
 8008dba:	2339      	movs	r3, #57	@ 0x39
 8008dbc:	7013      	strb	r3, [r2, #0]
 8008dbe:	4633      	mov	r3, r6
 8008dc0:	461e      	mov	r6, r3
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008dc8:	2a39      	cmp	r2, #57	@ 0x39
 8008dca:	d052      	beq.n	8008e72 <_dtoa_r+0xb12>
 8008dcc:	3201      	adds	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
 8008dd0:	e612      	b.n	80089f8 <_dtoa_r+0x698>
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	dd07      	ble.n	8008de6 <_dtoa_r+0xa86>
 8008dd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dda:	d0ed      	beq.n	8008db8 <_dtoa_r+0xa58>
 8008ddc:	9a00      	ldr	r2, [sp, #0]
 8008dde:	f108 0301 	add.w	r3, r8, #1
 8008de2:	7013      	strb	r3, [r2, #0]
 8008de4:	e608      	b.n	80089f8 <_dtoa_r+0x698>
 8008de6:	9b07      	ldr	r3, [sp, #28]
 8008de8:	9a07      	ldr	r2, [sp, #28]
 8008dea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d028      	beq.n	8008e46 <_dtoa_r+0xae6>
 8008df4:	4649      	mov	r1, r9
 8008df6:	2300      	movs	r3, #0
 8008df8:	220a      	movs	r2, #10
 8008dfa:	4658      	mov	r0, fp
 8008dfc:	f000 f9d6 	bl	80091ac <__multadd>
 8008e00:	42af      	cmp	r7, r5
 8008e02:	4681      	mov	r9, r0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	f04f 020a 	mov.w	r2, #10
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4658      	mov	r0, fp
 8008e10:	d107      	bne.n	8008e22 <_dtoa_r+0xac2>
 8008e12:	f000 f9cb 	bl	80091ac <__multadd>
 8008e16:	4607      	mov	r7, r0
 8008e18:	4605      	mov	r5, r0
 8008e1a:	9b07      	ldr	r3, [sp, #28]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	9307      	str	r3, [sp, #28]
 8008e20:	e774      	b.n	8008d0c <_dtoa_r+0x9ac>
 8008e22:	f000 f9c3 	bl	80091ac <__multadd>
 8008e26:	4629      	mov	r1, r5
 8008e28:	4607      	mov	r7, r0
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	220a      	movs	r2, #10
 8008e2e:	4658      	mov	r0, fp
 8008e30:	f000 f9bc 	bl	80091ac <__multadd>
 8008e34:	4605      	mov	r5, r0
 8008e36:	e7f0      	b.n	8008e1a <_dtoa_r+0xaba>
 8008e38:	9b00      	ldr	r3, [sp, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfcc      	ite	gt
 8008e3e:	461e      	movgt	r6, r3
 8008e40:	2601      	movle	r6, #1
 8008e42:	4456      	add	r6, sl
 8008e44:	2700      	movs	r7, #0
 8008e46:	4649      	mov	r1, r9
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4658      	mov	r0, fp
 8008e4c:	f000 fb5a 	bl	8009504 <__lshift>
 8008e50:	4621      	mov	r1, r4
 8008e52:	4681      	mov	r9, r0
 8008e54:	f000 fbc2 	bl	80095dc <__mcmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dcb0      	bgt.n	8008dbe <_dtoa_r+0xa5e>
 8008e5c:	d102      	bne.n	8008e64 <_dtoa_r+0xb04>
 8008e5e:	f018 0f01 	tst.w	r8, #1
 8008e62:	d1ac      	bne.n	8008dbe <_dtoa_r+0xa5e>
 8008e64:	4633      	mov	r3, r6
 8008e66:	461e      	mov	r6, r3
 8008e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e6c:	2a30      	cmp	r2, #48	@ 0x30
 8008e6e:	d0fa      	beq.n	8008e66 <_dtoa_r+0xb06>
 8008e70:	e5c2      	b.n	80089f8 <_dtoa_r+0x698>
 8008e72:	459a      	cmp	sl, r3
 8008e74:	d1a4      	bne.n	8008dc0 <_dtoa_r+0xa60>
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	2331      	movs	r3, #49	@ 0x31
 8008e7e:	f88a 3000 	strb.w	r3, [sl]
 8008e82:	e5b9      	b.n	80089f8 <_dtoa_r+0x698>
 8008e84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008ee4 <_dtoa_r+0xb84>
 8008e8a:	b11b      	cbz	r3, 8008e94 <_dtoa_r+0xb34>
 8008e8c:	f10a 0308 	add.w	r3, sl, #8
 8008e90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	4650      	mov	r0, sl
 8008e96:	b019      	add	sp, #100	@ 0x64
 8008e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	f77f ae37 	ble.w	8008b12 <_dtoa_r+0x7b2>
 8008ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	e655      	b.n	8008b58 <_dtoa_r+0x7f8>
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f77f aed6 	ble.w	8008c60 <_dtoa_r+0x900>
 8008eb4:	4656      	mov	r6, sl
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4648      	mov	r0, r9
 8008eba:	f7ff f9c8 	bl	800824e <quorem>
 8008ebe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ec2:	f806 8b01 	strb.w	r8, [r6], #1
 8008ec6:	9b00      	ldr	r3, [sp, #0]
 8008ec8:	eba6 020a 	sub.w	r2, r6, sl
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	ddb3      	ble.n	8008e38 <_dtoa_r+0xad8>
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	220a      	movs	r2, #10
 8008ed6:	4658      	mov	r0, fp
 8008ed8:	f000 f968 	bl	80091ac <__multadd>
 8008edc:	4681      	mov	r9, r0
 8008ede:	e7ea      	b.n	8008eb6 <_dtoa_r+0xb56>
 8008ee0:	08009f30 	.word	0x08009f30
 8008ee4:	08009eb4 	.word	0x08009eb4

08008ee8 <_free_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4605      	mov	r5, r0
 8008eec:	2900      	cmp	r1, #0
 8008eee:	d041      	beq.n	8008f74 <_free_r+0x8c>
 8008ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef4:	1f0c      	subs	r4, r1, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bfb8      	it	lt
 8008efa:	18e4      	addlt	r4, r4, r3
 8008efc:	f000 f8e8 	bl	80090d0 <__malloc_lock>
 8008f00:	4a1d      	ldr	r2, [pc, #116]	@ (8008f78 <_free_r+0x90>)
 8008f02:	6813      	ldr	r3, [r2, #0]
 8008f04:	b933      	cbnz	r3, 8008f14 <_free_r+0x2c>
 8008f06:	6063      	str	r3, [r4, #4]
 8008f08:	6014      	str	r4, [r2, #0]
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f10:	f000 b8e4 	b.w	80090dc <__malloc_unlock>
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d908      	bls.n	8008f2a <_free_r+0x42>
 8008f18:	6820      	ldr	r0, [r4, #0]
 8008f1a:	1821      	adds	r1, r4, r0
 8008f1c:	428b      	cmp	r3, r1
 8008f1e:	bf01      	itttt	eq
 8008f20:	6819      	ldreq	r1, [r3, #0]
 8008f22:	685b      	ldreq	r3, [r3, #4]
 8008f24:	1809      	addeq	r1, r1, r0
 8008f26:	6021      	streq	r1, [r4, #0]
 8008f28:	e7ed      	b.n	8008f06 <_free_r+0x1e>
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	b10b      	cbz	r3, 8008f34 <_free_r+0x4c>
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	d9fa      	bls.n	8008f2a <_free_r+0x42>
 8008f34:	6811      	ldr	r1, [r2, #0]
 8008f36:	1850      	adds	r0, r2, r1
 8008f38:	42a0      	cmp	r0, r4
 8008f3a:	d10b      	bne.n	8008f54 <_free_r+0x6c>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	4401      	add	r1, r0
 8008f40:	1850      	adds	r0, r2, r1
 8008f42:	4283      	cmp	r3, r0
 8008f44:	6011      	str	r1, [r2, #0]
 8008f46:	d1e0      	bne.n	8008f0a <_free_r+0x22>
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	6053      	str	r3, [r2, #4]
 8008f4e:	4408      	add	r0, r1
 8008f50:	6010      	str	r0, [r2, #0]
 8008f52:	e7da      	b.n	8008f0a <_free_r+0x22>
 8008f54:	d902      	bls.n	8008f5c <_free_r+0x74>
 8008f56:	230c      	movs	r3, #12
 8008f58:	602b      	str	r3, [r5, #0]
 8008f5a:	e7d6      	b.n	8008f0a <_free_r+0x22>
 8008f5c:	6820      	ldr	r0, [r4, #0]
 8008f5e:	1821      	adds	r1, r4, r0
 8008f60:	428b      	cmp	r3, r1
 8008f62:	bf04      	itt	eq
 8008f64:	6819      	ldreq	r1, [r3, #0]
 8008f66:	685b      	ldreq	r3, [r3, #4]
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	bf04      	itt	eq
 8008f6c:	1809      	addeq	r1, r1, r0
 8008f6e:	6021      	streq	r1, [r4, #0]
 8008f70:	6054      	str	r4, [r2, #4]
 8008f72:	e7ca      	b.n	8008f0a <_free_r+0x22>
 8008f74:	bd38      	pop	{r3, r4, r5, pc}
 8008f76:	bf00      	nop
 8008f78:	20000560 	.word	0x20000560

08008f7c <malloc>:
 8008f7c:	4b02      	ldr	r3, [pc, #8]	@ (8008f88 <malloc+0xc>)
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f000 b825 	b.w	8008fd0 <_malloc_r>
 8008f86:	bf00      	nop
 8008f88:	20000020 	.word	0x20000020

08008f8c <sbrk_aligned>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8008fcc <sbrk_aligned+0x40>)
 8008f90:	460c      	mov	r4, r1
 8008f92:	6831      	ldr	r1, [r6, #0]
 8008f94:	4605      	mov	r5, r0
 8008f96:	b911      	cbnz	r1, 8008f9e <sbrk_aligned+0x12>
 8008f98:	f000 fdee 	bl	8009b78 <_sbrk_r>
 8008f9c:	6030      	str	r0, [r6, #0]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 fde9 	bl	8009b78 <_sbrk_r>
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	d103      	bne.n	8008fb2 <sbrk_aligned+0x26>
 8008faa:	f04f 34ff 	mov.w	r4, #4294967295
 8008fae:	4620      	mov	r0, r4
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	1cc4      	adds	r4, r0, #3
 8008fb4:	f024 0403 	bic.w	r4, r4, #3
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d0f8      	beq.n	8008fae <sbrk_aligned+0x22>
 8008fbc:	1a21      	subs	r1, r4, r0
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 fdda 	bl	8009b78 <_sbrk_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d1f2      	bne.n	8008fae <sbrk_aligned+0x22>
 8008fc8:	e7ef      	b.n	8008faa <sbrk_aligned+0x1e>
 8008fca:	bf00      	nop
 8008fcc:	2000055c 	.word	0x2000055c

08008fd0 <_malloc_r>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	1ccd      	adds	r5, r1, #3
 8008fd6:	f025 0503 	bic.w	r5, r5, #3
 8008fda:	3508      	adds	r5, #8
 8008fdc:	2d0c      	cmp	r5, #12
 8008fde:	bf38      	it	cc
 8008fe0:	250c      	movcc	r5, #12
 8008fe2:	2d00      	cmp	r5, #0
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	db01      	blt.n	8008fec <_malloc_r+0x1c>
 8008fe8:	42a9      	cmp	r1, r5
 8008fea:	d904      	bls.n	8008ff6 <_malloc_r+0x26>
 8008fec:	230c      	movs	r3, #12
 8008fee:	6033      	str	r3, [r6, #0]
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090cc <_malloc_r+0xfc>
 8008ffa:	f000 f869 	bl	80090d0 <__malloc_lock>
 8008ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8009002:	461c      	mov	r4, r3
 8009004:	bb44      	cbnz	r4, 8009058 <_malloc_r+0x88>
 8009006:	4629      	mov	r1, r5
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff ffbf 	bl	8008f8c <sbrk_aligned>
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	4604      	mov	r4, r0
 8009012:	d158      	bne.n	80090c6 <_malloc_r+0xf6>
 8009014:	f8d8 4000 	ldr.w	r4, [r8]
 8009018:	4627      	mov	r7, r4
 800901a:	2f00      	cmp	r7, #0
 800901c:	d143      	bne.n	80090a6 <_malloc_r+0xd6>
 800901e:	2c00      	cmp	r4, #0
 8009020:	d04b      	beq.n	80090ba <_malloc_r+0xea>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	4639      	mov	r1, r7
 8009026:	4630      	mov	r0, r6
 8009028:	eb04 0903 	add.w	r9, r4, r3
 800902c:	f000 fda4 	bl	8009b78 <_sbrk_r>
 8009030:	4581      	cmp	r9, r0
 8009032:	d142      	bne.n	80090ba <_malloc_r+0xea>
 8009034:	6821      	ldr	r1, [r4, #0]
 8009036:	1a6d      	subs	r5, r5, r1
 8009038:	4629      	mov	r1, r5
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ffa6 	bl	8008f8c <sbrk_aligned>
 8009040:	3001      	adds	r0, #1
 8009042:	d03a      	beq.n	80090ba <_malloc_r+0xea>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	442b      	add	r3, r5
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	f8d8 3000 	ldr.w	r3, [r8]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	bb62      	cbnz	r2, 80090ac <_malloc_r+0xdc>
 8009052:	f8c8 7000 	str.w	r7, [r8]
 8009056:	e00f      	b.n	8009078 <_malloc_r+0xa8>
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	1b52      	subs	r2, r2, r5
 800905c:	d420      	bmi.n	80090a0 <_malloc_r+0xd0>
 800905e:	2a0b      	cmp	r2, #11
 8009060:	d917      	bls.n	8009092 <_malloc_r+0xc2>
 8009062:	1961      	adds	r1, r4, r5
 8009064:	42a3      	cmp	r3, r4
 8009066:	6025      	str	r5, [r4, #0]
 8009068:	bf18      	it	ne
 800906a:	6059      	strne	r1, [r3, #4]
 800906c:	6863      	ldr	r3, [r4, #4]
 800906e:	bf08      	it	eq
 8009070:	f8c8 1000 	streq.w	r1, [r8]
 8009074:	5162      	str	r2, [r4, r5]
 8009076:	604b      	str	r3, [r1, #4]
 8009078:	4630      	mov	r0, r6
 800907a:	f000 f82f 	bl	80090dc <__malloc_unlock>
 800907e:	f104 000b 	add.w	r0, r4, #11
 8009082:	1d23      	adds	r3, r4, #4
 8009084:	f020 0007 	bic.w	r0, r0, #7
 8009088:	1ac2      	subs	r2, r0, r3
 800908a:	bf1c      	itt	ne
 800908c:	1a1b      	subne	r3, r3, r0
 800908e:	50a3      	strne	r3, [r4, r2]
 8009090:	e7af      	b.n	8008ff2 <_malloc_r+0x22>
 8009092:	6862      	ldr	r2, [r4, #4]
 8009094:	42a3      	cmp	r3, r4
 8009096:	bf0c      	ite	eq
 8009098:	f8c8 2000 	streq.w	r2, [r8]
 800909c:	605a      	strne	r2, [r3, #4]
 800909e:	e7eb      	b.n	8009078 <_malloc_r+0xa8>
 80090a0:	4623      	mov	r3, r4
 80090a2:	6864      	ldr	r4, [r4, #4]
 80090a4:	e7ae      	b.n	8009004 <_malloc_r+0x34>
 80090a6:	463c      	mov	r4, r7
 80090a8:	687f      	ldr	r7, [r7, #4]
 80090aa:	e7b6      	b.n	800901a <_malloc_r+0x4a>
 80090ac:	461a      	mov	r2, r3
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d1fb      	bne.n	80090ac <_malloc_r+0xdc>
 80090b4:	2300      	movs	r3, #0
 80090b6:	6053      	str	r3, [r2, #4]
 80090b8:	e7de      	b.n	8009078 <_malloc_r+0xa8>
 80090ba:	230c      	movs	r3, #12
 80090bc:	6033      	str	r3, [r6, #0]
 80090be:	4630      	mov	r0, r6
 80090c0:	f000 f80c 	bl	80090dc <__malloc_unlock>
 80090c4:	e794      	b.n	8008ff0 <_malloc_r+0x20>
 80090c6:	6005      	str	r5, [r0, #0]
 80090c8:	e7d6      	b.n	8009078 <_malloc_r+0xa8>
 80090ca:	bf00      	nop
 80090cc:	20000560 	.word	0x20000560

080090d0 <__malloc_lock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	@ (80090d8 <__malloc_lock+0x8>)
 80090d2:	f7ff b8ac 	b.w	800822e <__retarget_lock_acquire_recursive>
 80090d6:	bf00      	nop
 80090d8:	20000558 	.word	0x20000558

080090dc <__malloc_unlock>:
 80090dc:	4801      	ldr	r0, [pc, #4]	@ (80090e4 <__malloc_unlock+0x8>)
 80090de:	f7ff b8a7 	b.w	8008230 <__retarget_lock_release_recursive>
 80090e2:	bf00      	nop
 80090e4:	20000558 	.word	0x20000558

080090e8 <_Balloc>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	69c6      	ldr	r6, [r0, #28]
 80090ec:	4604      	mov	r4, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	b976      	cbnz	r6, 8009110 <_Balloc+0x28>
 80090f2:	2010      	movs	r0, #16
 80090f4:	f7ff ff42 	bl	8008f7c <malloc>
 80090f8:	4602      	mov	r2, r0
 80090fa:	61e0      	str	r0, [r4, #28]
 80090fc:	b920      	cbnz	r0, 8009108 <_Balloc+0x20>
 80090fe:	4b18      	ldr	r3, [pc, #96]	@ (8009160 <_Balloc+0x78>)
 8009100:	4818      	ldr	r0, [pc, #96]	@ (8009164 <_Balloc+0x7c>)
 8009102:	216b      	movs	r1, #107	@ 0x6b
 8009104:	f000 fd48 	bl	8009b98 <__assert_func>
 8009108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800910c:	6006      	str	r6, [r0, #0]
 800910e:	60c6      	str	r6, [r0, #12]
 8009110:	69e6      	ldr	r6, [r4, #28]
 8009112:	68f3      	ldr	r3, [r6, #12]
 8009114:	b183      	cbz	r3, 8009138 <_Balloc+0x50>
 8009116:	69e3      	ldr	r3, [r4, #28]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800911e:	b9b8      	cbnz	r0, 8009150 <_Balloc+0x68>
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f605 	lsl.w	r6, r1, r5
 8009126:	1d72      	adds	r2, r6, #5
 8009128:	0092      	lsls	r2, r2, #2
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fd52 	bl	8009bd4 <_calloc_r>
 8009130:	b160      	cbz	r0, 800914c <_Balloc+0x64>
 8009132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009136:	e00e      	b.n	8009156 <_Balloc+0x6e>
 8009138:	2221      	movs	r2, #33	@ 0x21
 800913a:	2104      	movs	r1, #4
 800913c:	4620      	mov	r0, r4
 800913e:	f000 fd49 	bl	8009bd4 <_calloc_r>
 8009142:	69e3      	ldr	r3, [r4, #28]
 8009144:	60f0      	str	r0, [r6, #12]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e4      	bne.n	8009116 <_Balloc+0x2e>
 800914c:	2000      	movs	r0, #0
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	6802      	ldr	r2, [r0, #0]
 8009152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009156:	2300      	movs	r3, #0
 8009158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800915c:	e7f7      	b.n	800914e <_Balloc+0x66>
 800915e:	bf00      	nop
 8009160:	08009ec1 	.word	0x08009ec1
 8009164:	08009f41 	.word	0x08009f41

08009168 <_Bfree>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	69c6      	ldr	r6, [r0, #28]
 800916c:	4605      	mov	r5, r0
 800916e:	460c      	mov	r4, r1
 8009170:	b976      	cbnz	r6, 8009190 <_Bfree+0x28>
 8009172:	2010      	movs	r0, #16
 8009174:	f7ff ff02 	bl	8008f7c <malloc>
 8009178:	4602      	mov	r2, r0
 800917a:	61e8      	str	r0, [r5, #28]
 800917c:	b920      	cbnz	r0, 8009188 <_Bfree+0x20>
 800917e:	4b09      	ldr	r3, [pc, #36]	@ (80091a4 <_Bfree+0x3c>)
 8009180:	4809      	ldr	r0, [pc, #36]	@ (80091a8 <_Bfree+0x40>)
 8009182:	218f      	movs	r1, #143	@ 0x8f
 8009184:	f000 fd08 	bl	8009b98 <__assert_func>
 8009188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800918c:	6006      	str	r6, [r0, #0]
 800918e:	60c6      	str	r6, [r0, #12]
 8009190:	b13c      	cbz	r4, 80091a2 <_Bfree+0x3a>
 8009192:	69eb      	ldr	r3, [r5, #28]
 8009194:	6862      	ldr	r2, [r4, #4]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800919c:	6021      	str	r1, [r4, #0]
 800919e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091a2:	bd70      	pop	{r4, r5, r6, pc}
 80091a4:	08009ec1 	.word	0x08009ec1
 80091a8:	08009f41 	.word	0x08009f41

080091ac <__multadd>:
 80091ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b0:	690d      	ldr	r5, [r1, #16]
 80091b2:	4607      	mov	r7, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	461e      	mov	r6, r3
 80091b8:	f101 0c14 	add.w	ip, r1, #20
 80091bc:	2000      	movs	r0, #0
 80091be:	f8dc 3000 	ldr.w	r3, [ip]
 80091c2:	b299      	uxth	r1, r3
 80091c4:	fb02 6101 	mla	r1, r2, r1, r6
 80091c8:	0c1e      	lsrs	r6, r3, #16
 80091ca:	0c0b      	lsrs	r3, r1, #16
 80091cc:	fb02 3306 	mla	r3, r2, r6, r3
 80091d0:	b289      	uxth	r1, r1
 80091d2:	3001      	adds	r0, #1
 80091d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091d8:	4285      	cmp	r5, r0
 80091da:	f84c 1b04 	str.w	r1, [ip], #4
 80091de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091e2:	dcec      	bgt.n	80091be <__multadd+0x12>
 80091e4:	b30e      	cbz	r6, 800922a <__multadd+0x7e>
 80091e6:	68a3      	ldr	r3, [r4, #8]
 80091e8:	42ab      	cmp	r3, r5
 80091ea:	dc19      	bgt.n	8009220 <__multadd+0x74>
 80091ec:	6861      	ldr	r1, [r4, #4]
 80091ee:	4638      	mov	r0, r7
 80091f0:	3101      	adds	r1, #1
 80091f2:	f7ff ff79 	bl	80090e8 <_Balloc>
 80091f6:	4680      	mov	r8, r0
 80091f8:	b928      	cbnz	r0, 8009206 <__multadd+0x5a>
 80091fa:	4602      	mov	r2, r0
 80091fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <__multadd+0x84>)
 80091fe:	480d      	ldr	r0, [pc, #52]	@ (8009234 <__multadd+0x88>)
 8009200:	21ba      	movs	r1, #186	@ 0xba
 8009202:	f000 fcc9 	bl	8009b98 <__assert_func>
 8009206:	6922      	ldr	r2, [r4, #16]
 8009208:	3202      	adds	r2, #2
 800920a:	f104 010c 	add.w	r1, r4, #12
 800920e:	0092      	lsls	r2, r2, #2
 8009210:	300c      	adds	r0, #12
 8009212:	f7ff f80e 	bl	8008232 <memcpy>
 8009216:	4621      	mov	r1, r4
 8009218:	4638      	mov	r0, r7
 800921a:	f7ff ffa5 	bl	8009168 <_Bfree>
 800921e:	4644      	mov	r4, r8
 8009220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009224:	3501      	adds	r5, #1
 8009226:	615e      	str	r6, [r3, #20]
 8009228:	6125      	str	r5, [r4, #16]
 800922a:	4620      	mov	r0, r4
 800922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009230:	08009f30 	.word	0x08009f30
 8009234:	08009f41 	.word	0x08009f41

08009238 <__hi0bits>:
 8009238:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800923c:	4603      	mov	r3, r0
 800923e:	bf36      	itet	cc
 8009240:	0403      	lslcc	r3, r0, #16
 8009242:	2000      	movcs	r0, #0
 8009244:	2010      	movcc	r0, #16
 8009246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800924a:	bf3c      	itt	cc
 800924c:	021b      	lslcc	r3, r3, #8
 800924e:	3008      	addcc	r0, #8
 8009250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009254:	bf3c      	itt	cc
 8009256:	011b      	lslcc	r3, r3, #4
 8009258:	3004      	addcc	r0, #4
 800925a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800925e:	bf3c      	itt	cc
 8009260:	009b      	lslcc	r3, r3, #2
 8009262:	3002      	addcc	r0, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	db05      	blt.n	8009274 <__hi0bits+0x3c>
 8009268:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800926c:	f100 0001 	add.w	r0, r0, #1
 8009270:	bf08      	it	eq
 8009272:	2020      	moveq	r0, #32
 8009274:	4770      	bx	lr

08009276 <__lo0bits>:
 8009276:	6803      	ldr	r3, [r0, #0]
 8009278:	4602      	mov	r2, r0
 800927a:	f013 0007 	ands.w	r0, r3, #7
 800927e:	d00b      	beq.n	8009298 <__lo0bits+0x22>
 8009280:	07d9      	lsls	r1, r3, #31
 8009282:	d421      	bmi.n	80092c8 <__lo0bits+0x52>
 8009284:	0798      	lsls	r0, r3, #30
 8009286:	bf49      	itett	mi
 8009288:	085b      	lsrmi	r3, r3, #1
 800928a:	089b      	lsrpl	r3, r3, #2
 800928c:	2001      	movmi	r0, #1
 800928e:	6013      	strmi	r3, [r2, #0]
 8009290:	bf5c      	itt	pl
 8009292:	6013      	strpl	r3, [r2, #0]
 8009294:	2002      	movpl	r0, #2
 8009296:	4770      	bx	lr
 8009298:	b299      	uxth	r1, r3
 800929a:	b909      	cbnz	r1, 80092a0 <__lo0bits+0x2a>
 800929c:	0c1b      	lsrs	r3, r3, #16
 800929e:	2010      	movs	r0, #16
 80092a0:	b2d9      	uxtb	r1, r3
 80092a2:	b909      	cbnz	r1, 80092a8 <__lo0bits+0x32>
 80092a4:	3008      	adds	r0, #8
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	0719      	lsls	r1, r3, #28
 80092aa:	bf04      	itt	eq
 80092ac:	091b      	lsreq	r3, r3, #4
 80092ae:	3004      	addeq	r0, #4
 80092b0:	0799      	lsls	r1, r3, #30
 80092b2:	bf04      	itt	eq
 80092b4:	089b      	lsreq	r3, r3, #2
 80092b6:	3002      	addeq	r0, #2
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	d403      	bmi.n	80092c4 <__lo0bits+0x4e>
 80092bc:	085b      	lsrs	r3, r3, #1
 80092be:	f100 0001 	add.w	r0, r0, #1
 80092c2:	d003      	beq.n	80092cc <__lo0bits+0x56>
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	4770      	bx	lr
 80092c8:	2000      	movs	r0, #0
 80092ca:	4770      	bx	lr
 80092cc:	2020      	movs	r0, #32
 80092ce:	4770      	bx	lr

080092d0 <__i2b>:
 80092d0:	b510      	push	{r4, lr}
 80092d2:	460c      	mov	r4, r1
 80092d4:	2101      	movs	r1, #1
 80092d6:	f7ff ff07 	bl	80090e8 <_Balloc>
 80092da:	4602      	mov	r2, r0
 80092dc:	b928      	cbnz	r0, 80092ea <__i2b+0x1a>
 80092de:	4b05      	ldr	r3, [pc, #20]	@ (80092f4 <__i2b+0x24>)
 80092e0:	4805      	ldr	r0, [pc, #20]	@ (80092f8 <__i2b+0x28>)
 80092e2:	f240 1145 	movw	r1, #325	@ 0x145
 80092e6:	f000 fc57 	bl	8009b98 <__assert_func>
 80092ea:	2301      	movs	r3, #1
 80092ec:	6144      	str	r4, [r0, #20]
 80092ee:	6103      	str	r3, [r0, #16]
 80092f0:	bd10      	pop	{r4, pc}
 80092f2:	bf00      	nop
 80092f4:	08009f30 	.word	0x08009f30
 80092f8:	08009f41 	.word	0x08009f41

080092fc <__multiply>:
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	4614      	mov	r4, r2
 8009302:	690a      	ldr	r2, [r1, #16]
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	429a      	cmp	r2, r3
 8009308:	bfa8      	it	ge
 800930a:	4623      	movge	r3, r4
 800930c:	460f      	mov	r7, r1
 800930e:	bfa4      	itt	ge
 8009310:	460c      	movge	r4, r1
 8009312:	461f      	movge	r7, r3
 8009314:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009318:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800931c:	68a3      	ldr	r3, [r4, #8]
 800931e:	6861      	ldr	r1, [r4, #4]
 8009320:	eb0a 0609 	add.w	r6, sl, r9
 8009324:	42b3      	cmp	r3, r6
 8009326:	b085      	sub	sp, #20
 8009328:	bfb8      	it	lt
 800932a:	3101      	addlt	r1, #1
 800932c:	f7ff fedc 	bl	80090e8 <_Balloc>
 8009330:	b930      	cbnz	r0, 8009340 <__multiply+0x44>
 8009332:	4602      	mov	r2, r0
 8009334:	4b44      	ldr	r3, [pc, #272]	@ (8009448 <__multiply+0x14c>)
 8009336:	4845      	ldr	r0, [pc, #276]	@ (800944c <__multiply+0x150>)
 8009338:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800933c:	f000 fc2c 	bl	8009b98 <__assert_func>
 8009340:	f100 0514 	add.w	r5, r0, #20
 8009344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009348:	462b      	mov	r3, r5
 800934a:	2200      	movs	r2, #0
 800934c:	4543      	cmp	r3, r8
 800934e:	d321      	bcc.n	8009394 <__multiply+0x98>
 8009350:	f107 0114 	add.w	r1, r7, #20
 8009354:	f104 0214 	add.w	r2, r4, #20
 8009358:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800935c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009360:	9302      	str	r3, [sp, #8]
 8009362:	1b13      	subs	r3, r2, r4
 8009364:	3b15      	subs	r3, #21
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	3304      	adds	r3, #4
 800936c:	f104 0715 	add.w	r7, r4, #21
 8009370:	42ba      	cmp	r2, r7
 8009372:	bf38      	it	cc
 8009374:	2304      	movcc	r3, #4
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	9b02      	ldr	r3, [sp, #8]
 800937a:	9103      	str	r1, [sp, #12]
 800937c:	428b      	cmp	r3, r1
 800937e:	d80c      	bhi.n	800939a <__multiply+0x9e>
 8009380:	2e00      	cmp	r6, #0
 8009382:	dd03      	ble.n	800938c <__multiply+0x90>
 8009384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009388:	2b00      	cmp	r3, #0
 800938a:	d05b      	beq.n	8009444 <__multiply+0x148>
 800938c:	6106      	str	r6, [r0, #16]
 800938e:	b005      	add	sp, #20
 8009390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009394:	f843 2b04 	str.w	r2, [r3], #4
 8009398:	e7d8      	b.n	800934c <__multiply+0x50>
 800939a:	f8b1 a000 	ldrh.w	sl, [r1]
 800939e:	f1ba 0f00 	cmp.w	sl, #0
 80093a2:	d024      	beq.n	80093ee <__multiply+0xf2>
 80093a4:	f104 0e14 	add.w	lr, r4, #20
 80093a8:	46a9      	mov	r9, r5
 80093aa:	f04f 0c00 	mov.w	ip, #0
 80093ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093b2:	f8d9 3000 	ldr.w	r3, [r9]
 80093b6:	fa1f fb87 	uxth.w	fp, r7
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80093c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80093c4:	f8d9 7000 	ldr.w	r7, [r9]
 80093c8:	4463      	add	r3, ip
 80093ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80093d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093dc:	4572      	cmp	r2, lr
 80093de:	f849 3b04 	str.w	r3, [r9], #4
 80093e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093e6:	d8e2      	bhi.n	80093ae <__multiply+0xb2>
 80093e8:	9b01      	ldr	r3, [sp, #4]
 80093ea:	f845 c003 	str.w	ip, [r5, r3]
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093f4:	3104      	adds	r1, #4
 80093f6:	f1b9 0f00 	cmp.w	r9, #0
 80093fa:	d021      	beq.n	8009440 <__multiply+0x144>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	f104 0c14 	add.w	ip, r4, #20
 8009402:	46ae      	mov	lr, r5
 8009404:	f04f 0a00 	mov.w	sl, #0
 8009408:	f8bc b000 	ldrh.w	fp, [ip]
 800940c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009410:	fb09 770b 	mla	r7, r9, fp, r7
 8009414:	4457      	add	r7, sl
 8009416:	b29b      	uxth	r3, r3
 8009418:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800941c:	f84e 3b04 	str.w	r3, [lr], #4
 8009420:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009424:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009428:	f8be 3000 	ldrh.w	r3, [lr]
 800942c:	fb09 330a 	mla	r3, r9, sl, r3
 8009430:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009434:	4562      	cmp	r2, ip
 8009436:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800943a:	d8e5      	bhi.n	8009408 <__multiply+0x10c>
 800943c:	9f01      	ldr	r7, [sp, #4]
 800943e:	51eb      	str	r3, [r5, r7]
 8009440:	3504      	adds	r5, #4
 8009442:	e799      	b.n	8009378 <__multiply+0x7c>
 8009444:	3e01      	subs	r6, #1
 8009446:	e79b      	b.n	8009380 <__multiply+0x84>
 8009448:	08009f30 	.word	0x08009f30
 800944c:	08009f41 	.word	0x08009f41

08009450 <__pow5mult>:
 8009450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009454:	4615      	mov	r5, r2
 8009456:	f012 0203 	ands.w	r2, r2, #3
 800945a:	4607      	mov	r7, r0
 800945c:	460e      	mov	r6, r1
 800945e:	d007      	beq.n	8009470 <__pow5mult+0x20>
 8009460:	4c25      	ldr	r4, [pc, #148]	@ (80094f8 <__pow5mult+0xa8>)
 8009462:	3a01      	subs	r2, #1
 8009464:	2300      	movs	r3, #0
 8009466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800946a:	f7ff fe9f 	bl	80091ac <__multadd>
 800946e:	4606      	mov	r6, r0
 8009470:	10ad      	asrs	r5, r5, #2
 8009472:	d03d      	beq.n	80094f0 <__pow5mult+0xa0>
 8009474:	69fc      	ldr	r4, [r7, #28]
 8009476:	b97c      	cbnz	r4, 8009498 <__pow5mult+0x48>
 8009478:	2010      	movs	r0, #16
 800947a:	f7ff fd7f 	bl	8008f7c <malloc>
 800947e:	4602      	mov	r2, r0
 8009480:	61f8      	str	r0, [r7, #28]
 8009482:	b928      	cbnz	r0, 8009490 <__pow5mult+0x40>
 8009484:	4b1d      	ldr	r3, [pc, #116]	@ (80094fc <__pow5mult+0xac>)
 8009486:	481e      	ldr	r0, [pc, #120]	@ (8009500 <__pow5mult+0xb0>)
 8009488:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800948c:	f000 fb84 	bl	8009b98 <__assert_func>
 8009490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009494:	6004      	str	r4, [r0, #0]
 8009496:	60c4      	str	r4, [r0, #12]
 8009498:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800949c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094a0:	b94c      	cbnz	r4, 80094b6 <__pow5mult+0x66>
 80094a2:	f240 2171 	movw	r1, #625	@ 0x271
 80094a6:	4638      	mov	r0, r7
 80094a8:	f7ff ff12 	bl	80092d0 <__i2b>
 80094ac:	2300      	movs	r3, #0
 80094ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80094b2:	4604      	mov	r4, r0
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	f04f 0900 	mov.w	r9, #0
 80094ba:	07eb      	lsls	r3, r5, #31
 80094bc:	d50a      	bpl.n	80094d4 <__pow5mult+0x84>
 80094be:	4631      	mov	r1, r6
 80094c0:	4622      	mov	r2, r4
 80094c2:	4638      	mov	r0, r7
 80094c4:	f7ff ff1a 	bl	80092fc <__multiply>
 80094c8:	4631      	mov	r1, r6
 80094ca:	4680      	mov	r8, r0
 80094cc:	4638      	mov	r0, r7
 80094ce:	f7ff fe4b 	bl	8009168 <_Bfree>
 80094d2:	4646      	mov	r6, r8
 80094d4:	106d      	asrs	r5, r5, #1
 80094d6:	d00b      	beq.n	80094f0 <__pow5mult+0xa0>
 80094d8:	6820      	ldr	r0, [r4, #0]
 80094da:	b938      	cbnz	r0, 80094ec <__pow5mult+0x9c>
 80094dc:	4622      	mov	r2, r4
 80094de:	4621      	mov	r1, r4
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff ff0b 	bl	80092fc <__multiply>
 80094e6:	6020      	str	r0, [r4, #0]
 80094e8:	f8c0 9000 	str.w	r9, [r0]
 80094ec:	4604      	mov	r4, r0
 80094ee:	e7e4      	b.n	80094ba <__pow5mult+0x6a>
 80094f0:	4630      	mov	r0, r6
 80094f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f6:	bf00      	nop
 80094f8:	08009f9c 	.word	0x08009f9c
 80094fc:	08009ec1 	.word	0x08009ec1
 8009500:	08009f41 	.word	0x08009f41

08009504 <__lshift>:
 8009504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009508:	460c      	mov	r4, r1
 800950a:	6849      	ldr	r1, [r1, #4]
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	4607      	mov	r7, r0
 8009516:	4691      	mov	r9, r2
 8009518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800951c:	f108 0601 	add.w	r6, r8, #1
 8009520:	42b3      	cmp	r3, r6
 8009522:	db0b      	blt.n	800953c <__lshift+0x38>
 8009524:	4638      	mov	r0, r7
 8009526:	f7ff fddf 	bl	80090e8 <_Balloc>
 800952a:	4605      	mov	r5, r0
 800952c:	b948      	cbnz	r0, 8009542 <__lshift+0x3e>
 800952e:	4602      	mov	r2, r0
 8009530:	4b28      	ldr	r3, [pc, #160]	@ (80095d4 <__lshift+0xd0>)
 8009532:	4829      	ldr	r0, [pc, #164]	@ (80095d8 <__lshift+0xd4>)
 8009534:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009538:	f000 fb2e 	bl	8009b98 <__assert_func>
 800953c:	3101      	adds	r1, #1
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	e7ee      	b.n	8009520 <__lshift+0x1c>
 8009542:	2300      	movs	r3, #0
 8009544:	f100 0114 	add.w	r1, r0, #20
 8009548:	f100 0210 	add.w	r2, r0, #16
 800954c:	4618      	mov	r0, r3
 800954e:	4553      	cmp	r3, sl
 8009550:	db33      	blt.n	80095ba <__lshift+0xb6>
 8009552:	6920      	ldr	r0, [r4, #16]
 8009554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009558:	f104 0314 	add.w	r3, r4, #20
 800955c:	f019 091f 	ands.w	r9, r9, #31
 8009560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009564:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009568:	d02b      	beq.n	80095c2 <__lshift+0xbe>
 800956a:	f1c9 0e20 	rsb	lr, r9, #32
 800956e:	468a      	mov	sl, r1
 8009570:	2200      	movs	r2, #0
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	fa00 f009 	lsl.w	r0, r0, r9
 8009578:	4310      	orrs	r0, r2
 800957a:	f84a 0b04 	str.w	r0, [sl], #4
 800957e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009582:	459c      	cmp	ip, r3
 8009584:	fa22 f20e 	lsr.w	r2, r2, lr
 8009588:	d8f3      	bhi.n	8009572 <__lshift+0x6e>
 800958a:	ebac 0304 	sub.w	r3, ip, r4
 800958e:	3b15      	subs	r3, #21
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	3304      	adds	r3, #4
 8009596:	f104 0015 	add.w	r0, r4, #21
 800959a:	4584      	cmp	ip, r0
 800959c:	bf38      	it	cc
 800959e:	2304      	movcc	r3, #4
 80095a0:	50ca      	str	r2, [r1, r3]
 80095a2:	b10a      	cbz	r2, 80095a8 <__lshift+0xa4>
 80095a4:	f108 0602 	add.w	r6, r8, #2
 80095a8:	3e01      	subs	r6, #1
 80095aa:	4638      	mov	r0, r7
 80095ac:	612e      	str	r6, [r5, #16]
 80095ae:	4621      	mov	r1, r4
 80095b0:	f7ff fdda 	bl	8009168 <_Bfree>
 80095b4:	4628      	mov	r0, r5
 80095b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80095be:	3301      	adds	r3, #1
 80095c0:	e7c5      	b.n	800954e <__lshift+0x4a>
 80095c2:	3904      	subs	r1, #4
 80095c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80095cc:	459c      	cmp	ip, r3
 80095ce:	d8f9      	bhi.n	80095c4 <__lshift+0xc0>
 80095d0:	e7ea      	b.n	80095a8 <__lshift+0xa4>
 80095d2:	bf00      	nop
 80095d4:	08009f30 	.word	0x08009f30
 80095d8:	08009f41 	.word	0x08009f41

080095dc <__mcmp>:
 80095dc:	690a      	ldr	r2, [r1, #16]
 80095de:	4603      	mov	r3, r0
 80095e0:	6900      	ldr	r0, [r0, #16]
 80095e2:	1a80      	subs	r0, r0, r2
 80095e4:	b530      	push	{r4, r5, lr}
 80095e6:	d10e      	bne.n	8009606 <__mcmp+0x2a>
 80095e8:	3314      	adds	r3, #20
 80095ea:	3114      	adds	r1, #20
 80095ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095fc:	4295      	cmp	r5, r2
 80095fe:	d003      	beq.n	8009608 <__mcmp+0x2c>
 8009600:	d205      	bcs.n	800960e <__mcmp+0x32>
 8009602:	f04f 30ff 	mov.w	r0, #4294967295
 8009606:	bd30      	pop	{r4, r5, pc}
 8009608:	42a3      	cmp	r3, r4
 800960a:	d3f3      	bcc.n	80095f4 <__mcmp+0x18>
 800960c:	e7fb      	b.n	8009606 <__mcmp+0x2a>
 800960e:	2001      	movs	r0, #1
 8009610:	e7f9      	b.n	8009606 <__mcmp+0x2a>
	...

08009614 <__mdiff>:
 8009614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	4689      	mov	r9, r1
 800961a:	4606      	mov	r6, r0
 800961c:	4611      	mov	r1, r2
 800961e:	4648      	mov	r0, r9
 8009620:	4614      	mov	r4, r2
 8009622:	f7ff ffdb 	bl	80095dc <__mcmp>
 8009626:	1e05      	subs	r5, r0, #0
 8009628:	d112      	bne.n	8009650 <__mdiff+0x3c>
 800962a:	4629      	mov	r1, r5
 800962c:	4630      	mov	r0, r6
 800962e:	f7ff fd5b 	bl	80090e8 <_Balloc>
 8009632:	4602      	mov	r2, r0
 8009634:	b928      	cbnz	r0, 8009642 <__mdiff+0x2e>
 8009636:	4b3f      	ldr	r3, [pc, #252]	@ (8009734 <__mdiff+0x120>)
 8009638:	f240 2137 	movw	r1, #567	@ 0x237
 800963c:	483e      	ldr	r0, [pc, #248]	@ (8009738 <__mdiff+0x124>)
 800963e:	f000 faab 	bl	8009b98 <__assert_func>
 8009642:	2301      	movs	r3, #1
 8009644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009648:	4610      	mov	r0, r2
 800964a:	b003      	add	sp, #12
 800964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009650:	bfbc      	itt	lt
 8009652:	464b      	movlt	r3, r9
 8009654:	46a1      	movlt	r9, r4
 8009656:	4630      	mov	r0, r6
 8009658:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800965c:	bfba      	itte	lt
 800965e:	461c      	movlt	r4, r3
 8009660:	2501      	movlt	r5, #1
 8009662:	2500      	movge	r5, #0
 8009664:	f7ff fd40 	bl	80090e8 <_Balloc>
 8009668:	4602      	mov	r2, r0
 800966a:	b918      	cbnz	r0, 8009674 <__mdiff+0x60>
 800966c:	4b31      	ldr	r3, [pc, #196]	@ (8009734 <__mdiff+0x120>)
 800966e:	f240 2145 	movw	r1, #581	@ 0x245
 8009672:	e7e3      	b.n	800963c <__mdiff+0x28>
 8009674:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009678:	6926      	ldr	r6, [r4, #16]
 800967a:	60c5      	str	r5, [r0, #12]
 800967c:	f109 0310 	add.w	r3, r9, #16
 8009680:	f109 0514 	add.w	r5, r9, #20
 8009684:	f104 0e14 	add.w	lr, r4, #20
 8009688:	f100 0b14 	add.w	fp, r0, #20
 800968c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009690:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	46d9      	mov	r9, fp
 8009698:	f04f 0c00 	mov.w	ip, #0
 800969c:	9b01      	ldr	r3, [sp, #4]
 800969e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	fa1f f38a 	uxth.w	r3, sl
 80096ac:	4619      	mov	r1, r3
 80096ae:	b283      	uxth	r3, r0
 80096b0:	1acb      	subs	r3, r1, r3
 80096b2:	0c00      	lsrs	r0, r0, #16
 80096b4:	4463      	add	r3, ip
 80096b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096be:	b29b      	uxth	r3, r3
 80096c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096c4:	4576      	cmp	r6, lr
 80096c6:	f849 3b04 	str.w	r3, [r9], #4
 80096ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096ce:	d8e5      	bhi.n	800969c <__mdiff+0x88>
 80096d0:	1b33      	subs	r3, r6, r4
 80096d2:	3b15      	subs	r3, #21
 80096d4:	f023 0303 	bic.w	r3, r3, #3
 80096d8:	3415      	adds	r4, #21
 80096da:	3304      	adds	r3, #4
 80096dc:	42a6      	cmp	r6, r4
 80096de:	bf38      	it	cc
 80096e0:	2304      	movcc	r3, #4
 80096e2:	441d      	add	r5, r3
 80096e4:	445b      	add	r3, fp
 80096e6:	461e      	mov	r6, r3
 80096e8:	462c      	mov	r4, r5
 80096ea:	4544      	cmp	r4, r8
 80096ec:	d30e      	bcc.n	800970c <__mdiff+0xf8>
 80096ee:	f108 0103 	add.w	r1, r8, #3
 80096f2:	1b49      	subs	r1, r1, r5
 80096f4:	f021 0103 	bic.w	r1, r1, #3
 80096f8:	3d03      	subs	r5, #3
 80096fa:	45a8      	cmp	r8, r5
 80096fc:	bf38      	it	cc
 80096fe:	2100      	movcc	r1, #0
 8009700:	440b      	add	r3, r1
 8009702:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009706:	b191      	cbz	r1, 800972e <__mdiff+0x11a>
 8009708:	6117      	str	r7, [r2, #16]
 800970a:	e79d      	b.n	8009648 <__mdiff+0x34>
 800970c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009710:	46e6      	mov	lr, ip
 8009712:	0c08      	lsrs	r0, r1, #16
 8009714:	fa1c fc81 	uxtah	ip, ip, r1
 8009718:	4471      	add	r1, lr
 800971a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800971e:	b289      	uxth	r1, r1
 8009720:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009724:	f846 1b04 	str.w	r1, [r6], #4
 8009728:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800972c:	e7dd      	b.n	80096ea <__mdiff+0xd6>
 800972e:	3f01      	subs	r7, #1
 8009730:	e7e7      	b.n	8009702 <__mdiff+0xee>
 8009732:	bf00      	nop
 8009734:	08009f30 	.word	0x08009f30
 8009738:	08009f41 	.word	0x08009f41

0800973c <__d2b>:
 800973c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009740:	460f      	mov	r7, r1
 8009742:	2101      	movs	r1, #1
 8009744:	ec59 8b10 	vmov	r8, r9, d0
 8009748:	4616      	mov	r6, r2
 800974a:	f7ff fccd 	bl	80090e8 <_Balloc>
 800974e:	4604      	mov	r4, r0
 8009750:	b930      	cbnz	r0, 8009760 <__d2b+0x24>
 8009752:	4602      	mov	r2, r0
 8009754:	4b23      	ldr	r3, [pc, #140]	@ (80097e4 <__d2b+0xa8>)
 8009756:	4824      	ldr	r0, [pc, #144]	@ (80097e8 <__d2b+0xac>)
 8009758:	f240 310f 	movw	r1, #783	@ 0x30f
 800975c:	f000 fa1c 	bl	8009b98 <__assert_func>
 8009760:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009764:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009768:	b10d      	cbz	r5, 800976e <__d2b+0x32>
 800976a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	f1b8 0300 	subs.w	r3, r8, #0
 8009774:	d023      	beq.n	80097be <__d2b+0x82>
 8009776:	4668      	mov	r0, sp
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	f7ff fd7c 	bl	8009276 <__lo0bits>
 800977e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009782:	b1d0      	cbz	r0, 80097ba <__d2b+0x7e>
 8009784:	f1c0 0320 	rsb	r3, r0, #32
 8009788:	fa02 f303 	lsl.w	r3, r2, r3
 800978c:	430b      	orrs	r3, r1
 800978e:	40c2      	lsrs	r2, r0
 8009790:	6163      	str	r3, [r4, #20]
 8009792:	9201      	str	r2, [sp, #4]
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	61a3      	str	r3, [r4, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	bf0c      	ite	eq
 800979c:	2201      	moveq	r2, #1
 800979e:	2202      	movne	r2, #2
 80097a0:	6122      	str	r2, [r4, #16]
 80097a2:	b1a5      	cbz	r5, 80097ce <__d2b+0x92>
 80097a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097a8:	4405      	add	r5, r0
 80097aa:	603d      	str	r5, [r7, #0]
 80097ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097b0:	6030      	str	r0, [r6, #0]
 80097b2:	4620      	mov	r0, r4
 80097b4:	b003      	add	sp, #12
 80097b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ba:	6161      	str	r1, [r4, #20]
 80097bc:	e7ea      	b.n	8009794 <__d2b+0x58>
 80097be:	a801      	add	r0, sp, #4
 80097c0:	f7ff fd59 	bl	8009276 <__lo0bits>
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	6163      	str	r3, [r4, #20]
 80097c8:	3020      	adds	r0, #32
 80097ca:	2201      	movs	r2, #1
 80097cc:	e7e8      	b.n	80097a0 <__d2b+0x64>
 80097ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097d6:	6038      	str	r0, [r7, #0]
 80097d8:	6918      	ldr	r0, [r3, #16]
 80097da:	f7ff fd2d 	bl	8009238 <__hi0bits>
 80097de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097e2:	e7e5      	b.n	80097b0 <__d2b+0x74>
 80097e4:	08009f30 	.word	0x08009f30
 80097e8:	08009f41 	.word	0x08009f41

080097ec <__sfputc_r>:
 80097ec:	6893      	ldr	r3, [r2, #8]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	b410      	push	{r4}
 80097f4:	6093      	str	r3, [r2, #8]
 80097f6:	da08      	bge.n	800980a <__sfputc_r+0x1e>
 80097f8:	6994      	ldr	r4, [r2, #24]
 80097fa:	42a3      	cmp	r3, r4
 80097fc:	db01      	blt.n	8009802 <__sfputc_r+0x16>
 80097fe:	290a      	cmp	r1, #10
 8009800:	d103      	bne.n	800980a <__sfputc_r+0x1e>
 8009802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009806:	f7fe bc00 	b.w	800800a <__swbuf_r>
 800980a:	6813      	ldr	r3, [r2, #0]
 800980c:	1c58      	adds	r0, r3, #1
 800980e:	6010      	str	r0, [r2, #0]
 8009810:	7019      	strb	r1, [r3, #0]
 8009812:	4608      	mov	r0, r1
 8009814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009818:	4770      	bx	lr

0800981a <__sfputs_r>:
 800981a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981c:	4606      	mov	r6, r0
 800981e:	460f      	mov	r7, r1
 8009820:	4614      	mov	r4, r2
 8009822:	18d5      	adds	r5, r2, r3
 8009824:	42ac      	cmp	r4, r5
 8009826:	d101      	bne.n	800982c <__sfputs_r+0x12>
 8009828:	2000      	movs	r0, #0
 800982a:	e007      	b.n	800983c <__sfputs_r+0x22>
 800982c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009830:	463a      	mov	r2, r7
 8009832:	4630      	mov	r0, r6
 8009834:	f7ff ffda 	bl	80097ec <__sfputc_r>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d1f3      	bne.n	8009824 <__sfputs_r+0xa>
 800983c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009840 <_vfiprintf_r>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	460d      	mov	r5, r1
 8009846:	b09d      	sub	sp, #116	@ 0x74
 8009848:	4614      	mov	r4, r2
 800984a:	4698      	mov	r8, r3
 800984c:	4606      	mov	r6, r0
 800984e:	b118      	cbz	r0, 8009858 <_vfiprintf_r+0x18>
 8009850:	6a03      	ldr	r3, [r0, #32]
 8009852:	b90b      	cbnz	r3, 8009858 <_vfiprintf_r+0x18>
 8009854:	f7fe faf0 	bl	8007e38 <__sinit>
 8009858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800985a:	07d9      	lsls	r1, r3, #31
 800985c:	d405      	bmi.n	800986a <_vfiprintf_r+0x2a>
 800985e:	89ab      	ldrh	r3, [r5, #12]
 8009860:	059a      	lsls	r2, r3, #22
 8009862:	d402      	bmi.n	800986a <_vfiprintf_r+0x2a>
 8009864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009866:	f7fe fce2 	bl	800822e <__retarget_lock_acquire_recursive>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	071b      	lsls	r3, r3, #28
 800986e:	d501      	bpl.n	8009874 <_vfiprintf_r+0x34>
 8009870:	692b      	ldr	r3, [r5, #16]
 8009872:	b99b      	cbnz	r3, 800989c <_vfiprintf_r+0x5c>
 8009874:	4629      	mov	r1, r5
 8009876:	4630      	mov	r0, r6
 8009878:	f7fe fc06 	bl	8008088 <__swsetup_r>
 800987c:	b170      	cbz	r0, 800989c <_vfiprintf_r+0x5c>
 800987e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009880:	07dc      	lsls	r4, r3, #31
 8009882:	d504      	bpl.n	800988e <_vfiprintf_r+0x4e>
 8009884:	f04f 30ff 	mov.w	r0, #4294967295
 8009888:	b01d      	add	sp, #116	@ 0x74
 800988a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988e:	89ab      	ldrh	r3, [r5, #12]
 8009890:	0598      	lsls	r0, r3, #22
 8009892:	d4f7      	bmi.n	8009884 <_vfiprintf_r+0x44>
 8009894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009896:	f7fe fccb 	bl	8008230 <__retarget_lock_release_recursive>
 800989a:	e7f3      	b.n	8009884 <_vfiprintf_r+0x44>
 800989c:	2300      	movs	r3, #0
 800989e:	9309      	str	r3, [sp, #36]	@ 0x24
 80098a0:	2320      	movs	r3, #32
 80098a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098aa:	2330      	movs	r3, #48	@ 0x30
 80098ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a5c <_vfiprintf_r+0x21c>
 80098b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098b4:	f04f 0901 	mov.w	r9, #1
 80098b8:	4623      	mov	r3, r4
 80098ba:	469a      	mov	sl, r3
 80098bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c0:	b10a      	cbz	r2, 80098c6 <_vfiprintf_r+0x86>
 80098c2:	2a25      	cmp	r2, #37	@ 0x25
 80098c4:	d1f9      	bne.n	80098ba <_vfiprintf_r+0x7a>
 80098c6:	ebba 0b04 	subs.w	fp, sl, r4
 80098ca:	d00b      	beq.n	80098e4 <_vfiprintf_r+0xa4>
 80098cc:	465b      	mov	r3, fp
 80098ce:	4622      	mov	r2, r4
 80098d0:	4629      	mov	r1, r5
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ffa1 	bl	800981a <__sfputs_r>
 80098d8:	3001      	adds	r0, #1
 80098da:	f000 80a7 	beq.w	8009a2c <_vfiprintf_r+0x1ec>
 80098de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098e0:	445a      	add	r2, fp
 80098e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80098e4:	f89a 3000 	ldrb.w	r3, [sl]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 809f 	beq.w	8009a2c <_vfiprintf_r+0x1ec>
 80098ee:	2300      	movs	r3, #0
 80098f0:	f04f 32ff 	mov.w	r2, #4294967295
 80098f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098f8:	f10a 0a01 	add.w	sl, sl, #1
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	9307      	str	r3, [sp, #28]
 8009900:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009904:	931a      	str	r3, [sp, #104]	@ 0x68
 8009906:	4654      	mov	r4, sl
 8009908:	2205      	movs	r2, #5
 800990a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990e:	4853      	ldr	r0, [pc, #332]	@ (8009a5c <_vfiprintf_r+0x21c>)
 8009910:	f7f6 fc66 	bl	80001e0 <memchr>
 8009914:	9a04      	ldr	r2, [sp, #16]
 8009916:	b9d8      	cbnz	r0, 8009950 <_vfiprintf_r+0x110>
 8009918:	06d1      	lsls	r1, r2, #27
 800991a:	bf44      	itt	mi
 800991c:	2320      	movmi	r3, #32
 800991e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009922:	0713      	lsls	r3, r2, #28
 8009924:	bf44      	itt	mi
 8009926:	232b      	movmi	r3, #43	@ 0x2b
 8009928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800992c:	f89a 3000 	ldrb.w	r3, [sl]
 8009930:	2b2a      	cmp	r3, #42	@ 0x2a
 8009932:	d015      	beq.n	8009960 <_vfiprintf_r+0x120>
 8009934:	9a07      	ldr	r2, [sp, #28]
 8009936:	4654      	mov	r4, sl
 8009938:	2000      	movs	r0, #0
 800993a:	f04f 0c0a 	mov.w	ip, #10
 800993e:	4621      	mov	r1, r4
 8009940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009944:	3b30      	subs	r3, #48	@ 0x30
 8009946:	2b09      	cmp	r3, #9
 8009948:	d94b      	bls.n	80099e2 <_vfiprintf_r+0x1a2>
 800994a:	b1b0      	cbz	r0, 800997a <_vfiprintf_r+0x13a>
 800994c:	9207      	str	r2, [sp, #28]
 800994e:	e014      	b.n	800997a <_vfiprintf_r+0x13a>
 8009950:	eba0 0308 	sub.w	r3, r0, r8
 8009954:	fa09 f303 	lsl.w	r3, r9, r3
 8009958:	4313      	orrs	r3, r2
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	46a2      	mov	sl, r4
 800995e:	e7d2      	b.n	8009906 <_vfiprintf_r+0xc6>
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	1d19      	adds	r1, r3, #4
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	9103      	str	r1, [sp, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	bfbb      	ittet	lt
 800996c:	425b      	neglt	r3, r3
 800996e:	f042 0202 	orrlt.w	r2, r2, #2
 8009972:	9307      	strge	r3, [sp, #28]
 8009974:	9307      	strlt	r3, [sp, #28]
 8009976:	bfb8      	it	lt
 8009978:	9204      	strlt	r2, [sp, #16]
 800997a:	7823      	ldrb	r3, [r4, #0]
 800997c:	2b2e      	cmp	r3, #46	@ 0x2e
 800997e:	d10a      	bne.n	8009996 <_vfiprintf_r+0x156>
 8009980:	7863      	ldrb	r3, [r4, #1]
 8009982:	2b2a      	cmp	r3, #42	@ 0x2a
 8009984:	d132      	bne.n	80099ec <_vfiprintf_r+0x1ac>
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	1d1a      	adds	r2, r3, #4
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	9203      	str	r2, [sp, #12]
 800998e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009992:	3402      	adds	r4, #2
 8009994:	9305      	str	r3, [sp, #20]
 8009996:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a6c <_vfiprintf_r+0x22c>
 800999a:	7821      	ldrb	r1, [r4, #0]
 800999c:	2203      	movs	r2, #3
 800999e:	4650      	mov	r0, sl
 80099a0:	f7f6 fc1e 	bl	80001e0 <memchr>
 80099a4:	b138      	cbz	r0, 80099b6 <_vfiprintf_r+0x176>
 80099a6:	9b04      	ldr	r3, [sp, #16]
 80099a8:	eba0 000a 	sub.w	r0, r0, sl
 80099ac:	2240      	movs	r2, #64	@ 0x40
 80099ae:	4082      	lsls	r2, r0
 80099b0:	4313      	orrs	r3, r2
 80099b2:	3401      	adds	r4, #1
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ba:	4829      	ldr	r0, [pc, #164]	@ (8009a60 <_vfiprintf_r+0x220>)
 80099bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099c0:	2206      	movs	r2, #6
 80099c2:	f7f6 fc0d 	bl	80001e0 <memchr>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d03f      	beq.n	8009a4a <_vfiprintf_r+0x20a>
 80099ca:	4b26      	ldr	r3, [pc, #152]	@ (8009a64 <_vfiprintf_r+0x224>)
 80099cc:	bb1b      	cbnz	r3, 8009a16 <_vfiprintf_r+0x1d6>
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	3307      	adds	r3, #7
 80099d2:	f023 0307 	bic.w	r3, r3, #7
 80099d6:	3308      	adds	r3, #8
 80099d8:	9303      	str	r3, [sp, #12]
 80099da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099dc:	443b      	add	r3, r7
 80099de:	9309      	str	r3, [sp, #36]	@ 0x24
 80099e0:	e76a      	b.n	80098b8 <_vfiprintf_r+0x78>
 80099e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80099e6:	460c      	mov	r4, r1
 80099e8:	2001      	movs	r0, #1
 80099ea:	e7a8      	b.n	800993e <_vfiprintf_r+0xfe>
 80099ec:	2300      	movs	r3, #0
 80099ee:	3401      	adds	r4, #1
 80099f0:	9305      	str	r3, [sp, #20]
 80099f2:	4619      	mov	r1, r3
 80099f4:	f04f 0c0a 	mov.w	ip, #10
 80099f8:	4620      	mov	r0, r4
 80099fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099fe:	3a30      	subs	r2, #48	@ 0x30
 8009a00:	2a09      	cmp	r2, #9
 8009a02:	d903      	bls.n	8009a0c <_vfiprintf_r+0x1cc>
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0c6      	beq.n	8009996 <_vfiprintf_r+0x156>
 8009a08:	9105      	str	r1, [sp, #20]
 8009a0a:	e7c4      	b.n	8009996 <_vfiprintf_r+0x156>
 8009a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a10:	4604      	mov	r4, r0
 8009a12:	2301      	movs	r3, #1
 8009a14:	e7f0      	b.n	80099f8 <_vfiprintf_r+0x1b8>
 8009a16:	ab03      	add	r3, sp, #12
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4b12      	ldr	r3, [pc, #72]	@ (8009a68 <_vfiprintf_r+0x228>)
 8009a1e:	a904      	add	r1, sp, #16
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7fd fd05 	bl	8007430 <_printf_float>
 8009a26:	4607      	mov	r7, r0
 8009a28:	1c78      	adds	r0, r7, #1
 8009a2a:	d1d6      	bne.n	80099da <_vfiprintf_r+0x19a>
 8009a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a2e:	07d9      	lsls	r1, r3, #31
 8009a30:	d405      	bmi.n	8009a3e <_vfiprintf_r+0x1fe>
 8009a32:	89ab      	ldrh	r3, [r5, #12]
 8009a34:	059a      	lsls	r2, r3, #22
 8009a36:	d402      	bmi.n	8009a3e <_vfiprintf_r+0x1fe>
 8009a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a3a:	f7fe fbf9 	bl	8008230 <__retarget_lock_release_recursive>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	065b      	lsls	r3, r3, #25
 8009a42:	f53f af1f 	bmi.w	8009884 <_vfiprintf_r+0x44>
 8009a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a48:	e71e      	b.n	8009888 <_vfiprintf_r+0x48>
 8009a4a:	ab03      	add	r3, sp, #12
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	462a      	mov	r2, r5
 8009a50:	4b05      	ldr	r3, [pc, #20]	@ (8009a68 <_vfiprintf_r+0x228>)
 8009a52:	a904      	add	r1, sp, #16
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7fd ff83 	bl	8007960 <_printf_i>
 8009a5a:	e7e4      	b.n	8009a26 <_vfiprintf_r+0x1e6>
 8009a5c:	0800a098 	.word	0x0800a098
 8009a60:	0800a0a2 	.word	0x0800a0a2
 8009a64:	08007431 	.word	0x08007431
 8009a68:	0800981b 	.word	0x0800981b
 8009a6c:	0800a09e 	.word	0x0800a09e

08009a70 <__swhatbuf_r>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	460c      	mov	r4, r1
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	b096      	sub	sp, #88	@ 0x58
 8009a7c:	4615      	mov	r5, r2
 8009a7e:	461e      	mov	r6, r3
 8009a80:	da0d      	bge.n	8009a9e <__swhatbuf_r+0x2e>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a88:	f04f 0100 	mov.w	r1, #0
 8009a8c:	bf14      	ite	ne
 8009a8e:	2340      	movne	r3, #64	@ 0x40
 8009a90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a94:	2000      	movs	r0, #0
 8009a96:	6031      	str	r1, [r6, #0]
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	b016      	add	sp, #88	@ 0x58
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	466a      	mov	r2, sp
 8009aa0:	f000 f848 	bl	8009b34 <_fstat_r>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	dbec      	blt.n	8009a82 <__swhatbuf_r+0x12>
 8009aa8:	9901      	ldr	r1, [sp, #4]
 8009aaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009aae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ab2:	4259      	negs	r1, r3
 8009ab4:	4159      	adcs	r1, r3
 8009ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aba:	e7eb      	b.n	8009a94 <__swhatbuf_r+0x24>

08009abc <__smakebuf_r>:
 8009abc:	898b      	ldrh	r3, [r1, #12]
 8009abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ac0:	079d      	lsls	r5, r3, #30
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	d507      	bpl.n	8009ad8 <__smakebuf_r+0x1c>
 8009ac8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	6163      	str	r3, [r4, #20]
 8009ad4:	b003      	add	sp, #12
 8009ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad8:	ab01      	add	r3, sp, #4
 8009ada:	466a      	mov	r2, sp
 8009adc:	f7ff ffc8 	bl	8009a70 <__swhatbuf_r>
 8009ae0:	9f00      	ldr	r7, [sp, #0]
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f7ff fa72 	bl	8008fd0 <_malloc_r>
 8009aec:	b948      	cbnz	r0, 8009b02 <__smakebuf_r+0x46>
 8009aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af2:	059a      	lsls	r2, r3, #22
 8009af4:	d4ee      	bmi.n	8009ad4 <__smakebuf_r+0x18>
 8009af6:	f023 0303 	bic.w	r3, r3, #3
 8009afa:	f043 0302 	orr.w	r3, r3, #2
 8009afe:	81a3      	strh	r3, [r4, #12]
 8009b00:	e7e2      	b.n	8009ac8 <__smakebuf_r+0xc>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	6020      	str	r0, [r4, #0]
 8009b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b12:	b15b      	cbz	r3, 8009b2c <__smakebuf_r+0x70>
 8009b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 f81d 	bl	8009b58 <_isatty_r>
 8009b1e:	b128      	cbz	r0, 8009b2c <__smakebuf_r+0x70>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	f023 0303 	bic.w	r3, r3, #3
 8009b26:	f043 0301 	orr.w	r3, r3, #1
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	431d      	orrs	r5, r3
 8009b30:	81a5      	strh	r5, [r4, #12]
 8009b32:	e7cf      	b.n	8009ad4 <__smakebuf_r+0x18>

08009b34 <_fstat_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	@ (8009b54 <_fstat_r+0x20>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	4611      	mov	r1, r2
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	f7f9 fd20 	bl	8003586 <_fstat>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	d102      	bne.n	8009b50 <_fstat_r+0x1c>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	b103      	cbz	r3, 8009b50 <_fstat_r+0x1c>
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	bd38      	pop	{r3, r4, r5, pc}
 8009b52:	bf00      	nop
 8009b54:	20000554 	.word	0x20000554

08009b58 <_isatty_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d06      	ldr	r5, [pc, #24]	@ (8009b74 <_isatty_r+0x1c>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	602b      	str	r3, [r5, #0]
 8009b64:	f7f9 fd1f 	bl	80035a6 <_isatty>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_isatty_r+0x1a>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_isatty_r+0x1a>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	20000554 	.word	0x20000554

08009b78 <_sbrk_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4d06      	ldr	r5, [pc, #24]	@ (8009b94 <_sbrk_r+0x1c>)
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4604      	mov	r4, r0
 8009b80:	4608      	mov	r0, r1
 8009b82:	602b      	str	r3, [r5, #0]
 8009b84:	f7f9 fd28 	bl	80035d8 <_sbrk>
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	d102      	bne.n	8009b92 <_sbrk_r+0x1a>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	b103      	cbz	r3, 8009b92 <_sbrk_r+0x1a>
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	20000554 	.word	0x20000554

08009b98 <__assert_func>:
 8009b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b9a:	4614      	mov	r4, r2
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4b09      	ldr	r3, [pc, #36]	@ (8009bc4 <__assert_func+0x2c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	68d8      	ldr	r0, [r3, #12]
 8009ba6:	b954      	cbnz	r4, 8009bbe <__assert_func+0x26>
 8009ba8:	4b07      	ldr	r3, [pc, #28]	@ (8009bc8 <__assert_func+0x30>)
 8009baa:	461c      	mov	r4, r3
 8009bac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bb0:	9100      	str	r1, [sp, #0]
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	4905      	ldr	r1, [pc, #20]	@ (8009bcc <__assert_func+0x34>)
 8009bb6:	f000 f841 	bl	8009c3c <fiprintf>
 8009bba:	f000 f851 	bl	8009c60 <abort>
 8009bbe:	4b04      	ldr	r3, [pc, #16]	@ (8009bd0 <__assert_func+0x38>)
 8009bc0:	e7f4      	b.n	8009bac <__assert_func+0x14>
 8009bc2:	bf00      	nop
 8009bc4:	20000020 	.word	0x20000020
 8009bc8:	0800a0ee 	.word	0x0800a0ee
 8009bcc:	0800a0c0 	.word	0x0800a0c0
 8009bd0:	0800a0b3 	.word	0x0800a0b3

08009bd4 <_calloc_r>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	fba1 5402 	umull	r5, r4, r1, r2
 8009bda:	b93c      	cbnz	r4, 8009bec <_calloc_r+0x18>
 8009bdc:	4629      	mov	r1, r5
 8009bde:	f7ff f9f7 	bl	8008fd0 <_malloc_r>
 8009be2:	4606      	mov	r6, r0
 8009be4:	b928      	cbnz	r0, 8009bf2 <_calloc_r+0x1e>
 8009be6:	2600      	movs	r6, #0
 8009be8:	4630      	mov	r0, r6
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	220c      	movs	r2, #12
 8009bee:	6002      	str	r2, [r0, #0]
 8009bf0:	e7f9      	b.n	8009be6 <_calloc_r+0x12>
 8009bf2:	462a      	mov	r2, r5
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f7fe fa9d 	bl	8008134 <memset>
 8009bfa:	e7f5      	b.n	8009be8 <_calloc_r+0x14>

08009bfc <__ascii_mbtowc>:
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	b901      	cbnz	r1, 8009c02 <__ascii_mbtowc+0x6>
 8009c00:	a901      	add	r1, sp, #4
 8009c02:	b142      	cbz	r2, 8009c16 <__ascii_mbtowc+0x1a>
 8009c04:	b14b      	cbz	r3, 8009c1a <__ascii_mbtowc+0x1e>
 8009c06:	7813      	ldrb	r3, [r2, #0]
 8009c08:	600b      	str	r3, [r1, #0]
 8009c0a:	7812      	ldrb	r2, [r2, #0]
 8009c0c:	1e10      	subs	r0, r2, #0
 8009c0e:	bf18      	it	ne
 8009c10:	2001      	movne	r0, #1
 8009c12:	b002      	add	sp, #8
 8009c14:	4770      	bx	lr
 8009c16:	4610      	mov	r0, r2
 8009c18:	e7fb      	b.n	8009c12 <__ascii_mbtowc+0x16>
 8009c1a:	f06f 0001 	mvn.w	r0, #1
 8009c1e:	e7f8      	b.n	8009c12 <__ascii_mbtowc+0x16>

08009c20 <__ascii_wctomb>:
 8009c20:	4603      	mov	r3, r0
 8009c22:	4608      	mov	r0, r1
 8009c24:	b141      	cbz	r1, 8009c38 <__ascii_wctomb+0x18>
 8009c26:	2aff      	cmp	r2, #255	@ 0xff
 8009c28:	d904      	bls.n	8009c34 <__ascii_wctomb+0x14>
 8009c2a:	228a      	movs	r2, #138	@ 0x8a
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c32:	4770      	bx	lr
 8009c34:	700a      	strb	r2, [r1, #0]
 8009c36:	2001      	movs	r0, #1
 8009c38:	4770      	bx	lr
	...

08009c3c <fiprintf>:
 8009c3c:	b40e      	push	{r1, r2, r3}
 8009c3e:	b503      	push	{r0, r1, lr}
 8009c40:	4601      	mov	r1, r0
 8009c42:	ab03      	add	r3, sp, #12
 8009c44:	4805      	ldr	r0, [pc, #20]	@ (8009c5c <fiprintf+0x20>)
 8009c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c4a:	6800      	ldr	r0, [r0, #0]
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	f7ff fdf7 	bl	8009840 <_vfiprintf_r>
 8009c52:	b002      	add	sp, #8
 8009c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c58:	b003      	add	sp, #12
 8009c5a:	4770      	bx	lr
 8009c5c:	20000020 	.word	0x20000020

08009c60 <abort>:
 8009c60:	b508      	push	{r3, lr}
 8009c62:	2006      	movs	r0, #6
 8009c64:	f000 f82c 	bl	8009cc0 <raise>
 8009c68:	2001      	movs	r0, #1
 8009c6a:	f7f9 fc58 	bl	800351e <_exit>

08009c6e <_raise_r>:
 8009c6e:	291f      	cmp	r1, #31
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4605      	mov	r5, r0
 8009c74:	460c      	mov	r4, r1
 8009c76:	d904      	bls.n	8009c82 <_raise_r+0x14>
 8009c78:	2316      	movs	r3, #22
 8009c7a:	6003      	str	r3, [r0, #0]
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c80:	bd38      	pop	{r3, r4, r5, pc}
 8009c82:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c84:	b112      	cbz	r2, 8009c8c <_raise_r+0x1e>
 8009c86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c8a:	b94b      	cbnz	r3, 8009ca0 <_raise_r+0x32>
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 f831 	bl	8009cf4 <_getpid_r>
 8009c92:	4622      	mov	r2, r4
 8009c94:	4601      	mov	r1, r0
 8009c96:	4628      	mov	r0, r5
 8009c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c9c:	f000 b818 	b.w	8009cd0 <_kill_r>
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d00a      	beq.n	8009cba <_raise_r+0x4c>
 8009ca4:	1c59      	adds	r1, r3, #1
 8009ca6:	d103      	bne.n	8009cb0 <_raise_r+0x42>
 8009ca8:	2316      	movs	r3, #22
 8009caa:	6003      	str	r3, [r0, #0]
 8009cac:	2001      	movs	r0, #1
 8009cae:	e7e7      	b.n	8009c80 <_raise_r+0x12>
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4798      	blx	r3
 8009cba:	2000      	movs	r0, #0
 8009cbc:	e7e0      	b.n	8009c80 <_raise_r+0x12>
	...

08009cc0 <raise>:
 8009cc0:	4b02      	ldr	r3, [pc, #8]	@ (8009ccc <raise+0xc>)
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	f7ff bfd2 	b.w	8009c6e <_raise_r>
 8009cca:	bf00      	nop
 8009ccc:	20000020 	.word	0x20000020

08009cd0 <_kill_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d07      	ldr	r5, [pc, #28]	@ (8009cf0 <_kill_r+0x20>)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	f7f9 fc0e 	bl	80034fe <_kill>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	d102      	bne.n	8009cec <_kill_r+0x1c>
 8009ce6:	682b      	ldr	r3, [r5, #0]
 8009ce8:	b103      	cbz	r3, 8009cec <_kill_r+0x1c>
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	bd38      	pop	{r3, r4, r5, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000554 	.word	0x20000554

08009cf4 <_getpid_r>:
 8009cf4:	f7f9 bbfb 	b.w	80034ee <_getpid>

08009cf8 <_init>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr

08009d04 <_fini>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr
