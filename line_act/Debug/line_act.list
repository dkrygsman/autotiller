
line_act.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a920  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  0800aac0  0800aac0  0000bac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b750  0800b750  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b750  0800b750  0000c750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b758  0800b758  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b758  0800b758  0000c758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b75c  0800b75c  0000c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b760  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  200001e4  0800b944  0000d1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  0800b944  0000d9c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001482d  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289a  00000000  00000000  00021a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000242e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eda  00000000  00000000  000255a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001999e  00000000  00000000  00026482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016241  00000000  00000000  0003fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a03fc  00000000  00000000  00056061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f645d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  000f64a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000fc7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aaa8 	.word	0x0800aaa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800aaa8 	.word	0x0800aaa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b0af      	sub	sp, #188	@ 0xbc
 8000eac:	af2a      	add	r7, sp, #168	@ 0xa8
 8000eae:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	799b      	ldrb	r3, [r3, #6]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000ec0:	687c      	ldr	r4, [r7, #4]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000ec6:	f107 030e 	add.w	r3, r7, #14
 8000eca:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000ed0:	4668      	mov	r0, sp
 8000ed2:	f104 0310 	add.w	r3, r4, #16
 8000ed6:	229c      	movs	r2, #156	@ 0x9c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f007 feda 	bl	8008c92 <memcpy>
 8000ede:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ee2:	f001 fbb6 	bl	8002652 <bno055_read_regs>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <bno055_init+0x4c>
        return err;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	e0b6      	b.n	8001062 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ef8:	d001      	beq.n	8000efe <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000efa:	2306      	movs	r3, #6
 8000efc:	e0b1      	b.n	8001062 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f001 fa74 	bl	80023ee <bno055_set_opmode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <bno055_init+0x6c>
        return err;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	e0a6      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f003 f825 	bl	8003f64 <HAL_Delay>
    bno055_reset(imu);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f001 fb53 	bl	80025c6 <bno055_reset>
    HAL_Delay(5000);
 8000f20:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f24:	f003 f81e 	bl	8003f64 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 faee 	bl	800250c <bno055_set_pwr_mode>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <bno055_init+0x96>
        return err;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	e091      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f003 f810 	bl	8003f64 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000f44:	2100      	movs	r1, #0
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f001 fbe7 	bl	800271a <bno055_set_page>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <bno055_init+0xb2>
        return err;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	e083      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000f5a:	200c      	movs	r0, #12
 8000f5c:	f003 f802 	bl	8003f64 <HAL_Delay>
    bno055_on(imu);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f001 fb53 	bl	800260c <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	791b      	ldrb	r3, [r3, #4]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 fa3e 	bl	80023ee <bno055_set_opmode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <bno055_init+0xd8>
        return err;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	e070      	b.n	8001062 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8000f80:	2018      	movs	r0, #24
 8000f82:	f002 ffef 	bl	8003f64 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a38      	ldr	r2, [pc, #224]	@ (800106c <bno055_init+0x1c4>)
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a38      	ldr	r2, [pc, #224]	@ (8001070 <bno055_init+0x1c8>)
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a37      	ldr	r2, [pc, #220]	@ (8001074 <bno055_init+0x1cc>)
 8000f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a37      	ldr	r2, [pc, #220]	@ (8001078 <bno055_init+0x1d0>)
 8000f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a36      	ldr	r2, [pc, #216]	@ (800107c <bno055_init+0x1d4>)
 8000fa2:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a36      	ldr	r2, [pc, #216]	@ (8001080 <bno055_init+0x1d8>)
 8000fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a35      	ldr	r2, [pc, #212]	@ (8001084 <bno055_init+0x1dc>)
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a35      	ldr	r2, [pc, #212]	@ (8001088 <bno055_init+0x1e0>)
 8000fb4:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a34      	ldr	r2, [pc, #208]	@ (800108c <bno055_init+0x1e4>)
 8000fba:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a34      	ldr	r2, [pc, #208]	@ (8001090 <bno055_init+0x1e8>)
 8000fc0:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a33      	ldr	r2, [pc, #204]	@ (8001094 <bno055_init+0x1ec>)
 8000fc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a33      	ldr	r2, [pc, #204]	@ (8001098 <bno055_init+0x1f0>)
 8000fcc:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a32      	ldr	r2, [pc, #200]	@ (800109c <bno055_init+0x1f4>)
 8000fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a32      	ldr	r2, [pc, #200]	@ (80010a0 <bno055_init+0x1f8>)
 8000fd8:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a31      	ldr	r2, [pc, #196]	@ (80010a4 <bno055_init+0x1fc>)
 8000fde:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <bno055_init+0x200>)
 8000fe4:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a30      	ldr	r2, [pc, #192]	@ (80010ac <bno055_init+0x204>)
 8000fea:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a30      	ldr	r2, [pc, #192]	@ (80010b0 <bno055_init+0x208>)
 8000ff0:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <bno055_init+0x20c>)
 8000ff6:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80010b8 <bno055_init+0x210>)
 8000ffc:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a2e      	ldr	r2, [pc, #184]	@ (80010bc <bno055_init+0x214>)
 8001002:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	@ (80010c0 <bno055_init+0x218>)
 8001008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a2d      	ldr	r2, [pc, #180]	@ (80010c4 <bno055_init+0x21c>)
 8001010:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a2c      	ldr	r2, [pc, #176]	@ (80010c8 <bno055_init+0x220>)
 8001016:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <bno055_init+0x224>)
 800101c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a2b      	ldr	r2, [pc, #172]	@ (80010d0 <bno055_init+0x228>)
 8001024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <bno055_init+0x22c>)
 800102c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <bno055_init+0x230>)
 8001034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <bno055_init+0x234>)
 800103c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <bno055_init+0x238>)
 8001044:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a26      	ldr	r2, [pc, #152]	@ (80010e4 <bno055_init+0x23c>)
 800104c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a25      	ldr	r2, [pc, #148]	@ (80010e8 <bno055_init+0x240>)
 8001054:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a24      	ldr	r2, [pc, #144]	@ (80010ec <bno055_init+0x244>)
 800105c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	080010f1 	.word	0x080010f1
 8001070:	08001159 	.word	0x08001159
 8001074:	080011d9 	.word	0x080011d9
 8001078:	08001259 	.word	0x08001259
 800107c:	080012d9 	.word	0x080012d9
 8001080:	080013a5 	.word	0x080013a5
 8001084:	08001425 	.word	0x08001425
 8001088:	080014a5 	.word	0x080014a5
 800108c:	08001525 	.word	0x08001525
 8001090:	080015f1 	.word	0x080015f1
 8001094:	08001671 	.word	0x08001671
 8001098:	080016f1 	.word	0x080016f1
 800109c:	08001771 	.word	0x08001771
 80010a0:	0800183d 	.word	0x0800183d
 80010a4:	080018a9 	.word	0x080018a9
 80010a8:	08001915 	.word	0x08001915
 80010ac:	08001981 	.word	0x08001981
 80010b0:	08001a35 	.word	0x08001a35
 80010b4:	08001ab9 	.word	0x08001ab9
 80010b8:	08001b3d 	.word	0x08001b3d
 80010bc:	08001bc1 	.word	0x08001bc1
 80010c0:	08001c8d 	.word	0x08001c8d
 80010c4:	08001d11 	.word	0x08001d11
 80010c8:	08001d95 	.word	0x08001d95
 80010cc:	08001e19 	.word	0x08001e19
 80010d0:	08001ee5 	.word	0x08001ee5
 80010d4:	08001f55 	.word	0x08001f55
 80010d8:	08001fc5 	.word	0x08001fc5
 80010dc:	08002035 	.word	0x08002035
 80010e0:	080020a5 	.word	0x080020a5
 80010e4:	08002181 	.word	0x08002181
 80010e8:	08002251 	.word	0x08002251
 80010ec:	0800231f 	.word	0x0800231f

080010f0 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b0af      	sub	sp, #188	@ 0xbc
 80010f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80010fe:	687c      	ldr	r4, [r7, #4]
 8001100:	2301      	movs	r3, #1
 8001102:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001104:	f107 030e 	add.w	r3, r7, #14
 8001108:	9328      	str	r3, [sp, #160]	@ 0xa0
 800110a:	2334      	movs	r3, #52	@ 0x34
 800110c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800110e:	4668      	mov	r0, sp
 8001110:	f104 0310 	add.w	r3, r4, #16
 8001114:	229c      	movs	r2, #156	@ 0x9c
 8001116:	4619      	mov	r1, r3
 8001118:	f007 fdbb 	bl	8008c92 <memcpy>
 800111c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001120:	f001 fa97 	bl	8002652 <bno055_read_regs>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <bno055_temperature+0x42>
        return err;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	e00d      	b.n	800114e <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7bdb      	ldrb	r3, [r3, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <bno055_temperature+0x54>
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	e001      	b.n	8001148 <bno055_temperature+0x58>
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
	...

08001158 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b0af      	sub	sp, #188	@ 0xbc
 800115c:	af2a      	add	r7, sp, #168	@ 0xa8
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001162:	687c      	ldr	r4, [r7, #4]
 8001164:	2302      	movs	r3, #2
 8001166:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800116e:	2308      	movs	r3, #8
 8001170:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001172:	4668      	mov	r0, sp
 8001174:	f104 0310 	add.w	r3, r4, #16
 8001178:	229c      	movs	r2, #156	@ 0x9c
 800117a:	4619      	mov	r1, r3
 800117c:	f007 fd89 	bl	8008c92 <memcpy>
 8001180:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001184:	f001 fa65 	bl	8002652 <bno055_read_regs>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <bno055_acc_x+0x3e>
        return err;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	e019      	b.n	80011ca <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7b3b      	ldrb	r3, [r7, #12]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <bno055_acc_x+0x62>
 80011b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011d4 <bno055_acc_x+0x7c>
 80011b8:	e001      	b.n	80011be <bno055_acc_x+0x66>
 80011ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80011be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011c8:	2300      	movs	r3, #0
};
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	42c80000 	.word	0x42c80000

080011d8 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0af      	sub	sp, #188	@ 0xbc
 80011dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80011e2:	687c      	ldr	r4, [r7, #4]
 80011e4:	2302      	movs	r3, #2
 80011e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80011ee:	230a      	movs	r3, #10
 80011f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80011f2:	4668      	mov	r0, sp
 80011f4:	f104 0310 	add.w	r3, r4, #16
 80011f8:	229c      	movs	r2, #156	@ 0x9c
 80011fa:	4619      	mov	r1, r3
 80011fc:	f007 fd49 	bl	8008c92 <memcpy>
 8001200:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001204:	f001 fa25 	bl	8002652 <bno055_read_regs>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <bno055_acc_y+0x3e>
        return err;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	e019      	b.n	800124a <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21b      	sxth	r3, r3
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <bno055_acc_y+0x62>
 8001234:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001254 <bno055_acc_y+0x7c>
 8001238:	e001      	b.n	800123e <bno055_acc_y+0x66>
 800123a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800123e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001248:	2300      	movs	r3, #0
};
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	bf00      	nop
 8001254:	42c80000 	.word	0x42c80000

08001258 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b0af      	sub	sp, #188	@ 0xbc
 800125c:	af2a      	add	r7, sp, #168	@ 0xa8
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001262:	687c      	ldr	r4, [r7, #4]
 8001264:	2302      	movs	r3, #2
 8001266:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800126e:	230c      	movs	r3, #12
 8001270:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001272:	4668      	mov	r0, sp
 8001274:	f104 0310 	add.w	r3, r4, #16
 8001278:	229c      	movs	r2, #156	@ 0x9c
 800127a:	4619      	mov	r1, r3
 800127c:	f007 fd09 	bl	8008c92 <memcpy>
 8001280:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001284:	f001 f9e5 	bl	8002652 <bno055_read_regs>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <bno055_acc_z+0x3e>
        return err;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	e019      	b.n	80012ca <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7b3b      	ldrb	r3, [r7, #12]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <bno055_acc_z+0x62>
 80012b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80012d4 <bno055_acc_z+0x7c>
 80012b8:	e001      	b.n	80012be <bno055_acc_z+0x66>
 80012ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80012be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012c8:	2300      	movs	r3, #0
};
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	42c80000 	.word	0x42c80000

080012d8 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b0b1      	sub	sp, #196	@ 0xc4
 80012dc:	af2a      	add	r7, sp, #168	@ 0xa8
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80012e2:	687c      	ldr	r4, [r7, #4]
 80012e4:	2306      	movs	r3, #6
 80012e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80012ee:	2308      	movs	r3, #8
 80012f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80012f2:	4668      	mov	r0, sp
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	229c      	movs	r2, #156	@ 0x9c
 80012fa:	4619      	mov	r1, r3
 80012fc:	f007 fcc9 	bl	8008c92 <memcpy>
 8001300:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001304:	f001 f9a5 	bl	8002652 <bno055_read_regs>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <bno055_acc+0x3e>
        return err;
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	e03f      	b.n	8001396 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <bno055_acc+0x4a>
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <bno055_acc+0xc8>)
 8001320:	e001      	b.n	8001326 <bno055_acc+0x4e>
 8001322:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001326:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001328:	7a7b      	ldrb	r3, [r7, #9]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	7a3b      	ldrb	r3, [r7, #8]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800133e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21a      	sxth	r2, r3
 8001352:	7abb      	ldrb	r3, [r7, #10]
 8001354:	b21b      	sxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b21b      	sxth	r3, r3
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001362:	ed97 7a04 	vldr	s14, [r7, #16]
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a04 	vldr	s14, [r7, #16]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001394:	2300      	movs	r3, #0
};
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
 800139e:	bf00      	nop
 80013a0:	42c80000 	.word	0x42c80000

080013a4 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b0af      	sub	sp, #188	@ 0xbc
 80013a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80013ae:	687c      	ldr	r4, [r7, #4]
 80013b0:	2302      	movs	r3, #2
 80013b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80013ba:	2328      	movs	r3, #40	@ 0x28
 80013bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80013be:	4668      	mov	r0, sp
 80013c0:	f104 0310 	add.w	r3, r4, #16
 80013c4:	229c      	movs	r2, #156	@ 0x9c
 80013c6:	4619      	mov	r1, r3
 80013c8:	f007 fc63 	bl	8008c92 <memcpy>
 80013cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013d0:	f001 f93f 	bl	8002652 <bno055_read_regs>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <bno055_linear_acc_x+0x3e>
        return err;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	e019      	b.n	8001416 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013e2:	7b7b      	ldrb	r3, [r7, #13]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7b3b      	ldrb	r3, [r7, #12]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <bno055_linear_acc_x+0x62>
 8001400:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001420 <bno055_linear_acc_x+0x7c>
 8001404:	e001      	b.n	800140a <bno055_linear_acc_x+0x66>
 8001406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800140a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001414:	2300      	movs	r3, #0
};
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	42c80000 	.word	0x42c80000

08001424 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b0af      	sub	sp, #188	@ 0xbc
 8001428:	af2a      	add	r7, sp, #168	@ 0xa8
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800142e:	687c      	ldr	r4, [r7, #4]
 8001430:	2302      	movs	r3, #2
 8001432:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	9328      	str	r3, [sp, #160]	@ 0xa0
 800143a:	232a      	movs	r3, #42	@ 0x2a
 800143c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800143e:	4668      	mov	r0, sp
 8001440:	f104 0310 	add.w	r3, r4, #16
 8001444:	229c      	movs	r2, #156	@ 0x9c
 8001446:	4619      	mov	r1, r3
 8001448:	f007 fc23 	bl	8008c92 <memcpy>
 800144c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001450:	f001 f8ff 	bl	8002652 <bno055_read_regs>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <bno055_linear_acc_y+0x3e>
        return err;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	e019      	b.n	8001496 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <bno055_linear_acc_y+0x62>
 8001480:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80014a0 <bno055_linear_acc_y+0x7c>
 8001484:	e001      	b.n	800148a <bno055_linear_acc_y+0x66>
 8001486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001494:	2300      	movs	r3, #0
};
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	42c80000 	.word	0x42c80000

080014a4 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b0af      	sub	sp, #188	@ 0xbc
 80014a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80014ae:	687c      	ldr	r4, [r7, #4]
 80014b0:	2302      	movs	r3, #2
 80014b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80014ba:	232c      	movs	r3, #44	@ 0x2c
 80014bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80014be:	4668      	mov	r0, sp
 80014c0:	f104 0310 	add.w	r3, r4, #16
 80014c4:	229c      	movs	r2, #156	@ 0x9c
 80014c6:	4619      	mov	r1, r3
 80014c8:	f007 fbe3 	bl	8008c92 <memcpy>
 80014cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014d0:	f001 f8bf 	bl	8002652 <bno055_read_regs>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <bno055_linear_acc_z+0x3e>
        return err;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	e019      	b.n	8001516 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	7b3b      	ldrb	r3, [r7, #12]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <bno055_linear_acc_z+0x62>
 8001500:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001520 <bno055_linear_acc_z+0x7c>
 8001504:	e001      	b.n	800150a <bno055_linear_acc_z+0x66>
 8001506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800150a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001514:	2300      	movs	r3, #0
};
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	42c80000 	.word	0x42c80000

08001524 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b0b1      	sub	sp, #196	@ 0xc4
 8001528:	af2a      	add	r7, sp, #168	@ 0xa8
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 800152e:	687c      	ldr	r4, [r7, #4]
 8001530:	2306      	movs	r3, #6
 8001532:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	9328      	str	r3, [sp, #160]	@ 0xa0
 800153a:	2328      	movs	r3, #40	@ 0x28
 800153c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800153e:	4668      	mov	r0, sp
 8001540:	f104 0310 	add.w	r3, r4, #16
 8001544:	229c      	movs	r2, #156	@ 0x9c
 8001546:	4619      	mov	r1, r3
 8001548:	f007 fba3 	bl	8008c92 <memcpy>
 800154c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001550:	f001 f87f 	bl	8002652 <bno055_read_regs>
 8001554:	4603      	mov	r3, r0
 8001556:	75fb      	strb	r3, [r7, #23]
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <bno055_linear_acc+0x3e>
        return err;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	e03f      	b.n	80015e2 <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <bno055_linear_acc+0x4a>
 800156a:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <bno055_linear_acc+0xc8>)
 800156c:	e001      	b.n	8001572 <bno055_linear_acc+0x4e>
 800156e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001572:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7a3b      	ldrb	r3, [r7, #8]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21b      	sxth	r3, r3
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800158a:	ed97 7a04 	vldr	s14, [r7, #16]
 800158e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7abb      	ldrb	r3, [r7, #10]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80015bc:	7b7b      	ldrb	r3, [r7, #13]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	7b3b      	ldrb	r3, [r7, #12]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80015e0:	2300      	movs	r3, #0
};
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	42c80000 	.word	0x42c80000

080015f0 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b0af      	sub	sp, #188	@ 0xbc
 80015f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80015fa:	687c      	ldr	r4, [r7, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001606:	2314      	movs	r3, #20
 8001608:	9327      	str	r3, [sp, #156]	@ 0x9c
 800160a:	4668      	mov	r0, sp
 800160c:	f104 0310 	add.w	r3, r4, #16
 8001610:	229c      	movs	r2, #156	@ 0x9c
 8001612:	4619      	mov	r1, r3
 8001614:	f007 fb3d 	bl	8008c92 <memcpy>
 8001618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800161c:	f001 f819 	bl	8002652 <bno055_read_regs>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <bno055_gyro_x+0x3e>
        return err;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	e019      	b.n	8001662 <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	7b3b      	ldrb	r3, [r7, #12]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <bno055_gyro_x+0x62>
 800164c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001650:	e001      	b.n	8001656 <bno055_gyro_x+0x66>
 8001652:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800166c <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001660:	2300      	movs	r3, #0
};
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	44610000 	.word	0x44610000

08001670 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b0af      	sub	sp, #188	@ 0xbc
 8001674:	af2a      	add	r7, sp, #168	@ 0xa8
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800167a:	687c      	ldr	r4, [r7, #4]
 800167c:	2302      	movs	r3, #2
 800167e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001686:	2316      	movs	r3, #22
 8001688:	9327      	str	r3, [sp, #156]	@ 0x9c
 800168a:	4668      	mov	r0, sp
 800168c:	f104 0310 	add.w	r3, r4, #16
 8001690:	229c      	movs	r2, #156	@ 0x9c
 8001692:	4619      	mov	r1, r3
 8001694:	f007 fafd 	bl	8008c92 <memcpy>
 8001698:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800169c:	f000 ffd9 	bl	8002652 <bno055_read_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <bno055_gyro_y+0x3e>
        return err;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	e019      	b.n	80016e2 <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80016ae:	7b7b      	ldrb	r3, [r7, #13]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7b3b      	ldrb	r3, [r7, #12]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <bno055_gyro_y+0x62>
 80016cc:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80016d0:	e001      	b.n	80016d6 <bno055_gyro_y+0x66>
 80016d2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80016ec <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80016d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016e0:	2300      	movs	r3, #0
};
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	44610000 	.word	0x44610000

080016f0 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b0af      	sub	sp, #188	@ 0xbc
 80016f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80016fa:	687c      	ldr	r4, [r7, #4]
 80016fc:	2302      	movs	r3, #2
 80016fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001706:	2318      	movs	r3, #24
 8001708:	9327      	str	r3, [sp, #156]	@ 0x9c
 800170a:	4668      	mov	r0, sp
 800170c:	f104 0310 	add.w	r3, r4, #16
 8001710:	229c      	movs	r2, #156	@ 0x9c
 8001712:	4619      	mov	r1, r3
 8001714:	f007 fabd 	bl	8008c92 <memcpy>
 8001718:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800171c:	f000 ff99 	bl	8002652 <bno055_read_regs>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <bno055_gyro_z+0x3e>
        return err;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	e019      	b.n	8001762 <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <bno055_gyro_z+0x62>
 800174c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001750:	e001      	b.n	8001756 <bno055_gyro_z+0x66>
 8001752:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800176c <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001760:	2300      	movs	r3, #0
};
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	bf00      	nop
 800176c:	44610000 	.word	0x44610000

08001770 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b0b1      	sub	sp, #196	@ 0xc4
 8001774:	af2a      	add	r7, sp, #168	@ 0xa8
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 800177a:	687c      	ldr	r4, [r7, #4]
 800177c:	2306      	movs	r3, #6
 800177e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001786:	2314      	movs	r3, #20
 8001788:	9327      	str	r3, [sp, #156]	@ 0x9c
 800178a:	4668      	mov	r0, sp
 800178c:	f104 0310 	add.w	r3, r4, #16
 8001790:	229c      	movs	r2, #156	@ 0x9c
 8001792:	4619      	mov	r1, r3
 8001794:	f007 fa7d 	bl	8008c92 <memcpy>
 8001798:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800179c:	f000 ff59 	bl	8002652 <bno055_read_regs>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <bno055_gyro+0x3e>
        return err;
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	e03f      	b.n	800182e <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <bno055_gyro+0x4c>
 80017b6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80017ba:	e000      	b.n	80017be <bno055_gyro+0x4e>
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017be:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80017c0:	7a7b      	ldrb	r3, [r7, #9]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	7a3b      	ldrb	r3, [r7, #8]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80017da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80017e4:	7afb      	ldrb	r3, [r7, #11]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	7abb      	ldrb	r3, [r7, #10]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80017fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	7b3b      	ldrb	r3, [r7, #12]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21b      	sxth	r3, r3
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	44610000 	.word	0x44610000

0800183c <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b0af      	sub	sp, #188	@ 0xbc
 8001840:	af2a      	add	r7, sp, #168	@ 0xa8
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001846:	687c      	ldr	r4, [r7, #4]
 8001848:	2302      	movs	r3, #2
 800184a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001852:	230e      	movs	r3, #14
 8001854:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001856:	4668      	mov	r0, sp
 8001858:	f104 0310 	add.w	r3, r4, #16
 800185c:	229c      	movs	r2, #156	@ 0x9c
 800185e:	4619      	mov	r1, r3
 8001860:	f007 fa17 	bl	8008c92 <memcpy>
 8001864:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001868:	f000 fef3 	bl	8002652 <bno055_read_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <bno055_mag_x+0x3e>
        return err;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	e012      	b.n	80018a0 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800187a:	7b7b      	ldrb	r3, [r7, #13]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	7b3b      	ldrb	r3, [r7, #12]
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b21b      	sxth	r3, r3
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001890:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}

080018a8 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b0af      	sub	sp, #188	@ 0xbc
 80018ac:	af2a      	add	r7, sp, #168	@ 0xa8
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80018b2:	687c      	ldr	r4, [r7, #4]
 80018b4:	2302      	movs	r3, #2
 80018b6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80018be:	2310      	movs	r3, #16
 80018c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80018c2:	4668      	mov	r0, sp
 80018c4:	f104 0310 	add.w	r3, r4, #16
 80018c8:	229c      	movs	r2, #156	@ 0x9c
 80018ca:	4619      	mov	r1, r3
 80018cc:	f007 f9e1 	bl	8008c92 <memcpy>
 80018d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018d4:	f000 febd 	bl	8002652 <bno055_read_regs>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <bno055_mag_y+0x3e>
        return err;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	e012      	b.n	800190c <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b0af      	sub	sp, #188	@ 0xbc
 8001918:	af2a      	add	r7, sp, #168	@ 0xa8
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800191e:	687c      	ldr	r4, [r7, #4]
 8001920:	2302      	movs	r3, #2
 8001922:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	9328      	str	r3, [sp, #160]	@ 0xa0
 800192a:	2312      	movs	r3, #18
 800192c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800192e:	4668      	mov	r0, sp
 8001930:	f104 0310 	add.w	r3, r4, #16
 8001934:	229c      	movs	r2, #156	@ 0x9c
 8001936:	4619      	mov	r1, r3
 8001938:	f007 f9ab 	bl	8008c92 <memcpy>
 800193c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001940:	f000 fe87 	bl	8002652 <bno055_read_regs>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <bno055_mag_z+0x3e>
        return err;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	e012      	b.n	8001978 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001952:	7b7b      	ldrb	r3, [r7, #13]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b21a      	sxth	r2, r3
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	b21b      	sxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b21b      	sxth	r3, r3
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800196c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}

08001980 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b0af      	sub	sp, #188	@ 0xbc
 8001984:	af2a      	add	r7, sp, #168	@ 0xa8
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 800198a:	687c      	ldr	r4, [r7, #4]
 800198c:	2306      	movs	r3, #6
 800198e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001996:	230e      	movs	r3, #14
 8001998:	9327      	str	r3, [sp, #156]	@ 0x9c
 800199a:	4668      	mov	r0, sp
 800199c:	f104 0310 	add.w	r3, r4, #16
 80019a0:	229c      	movs	r2, #156	@ 0x9c
 80019a2:	4619      	mov	r1, r3
 80019a4:	f007 f975 	bl	8008c92 <memcpy>
 80019a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019ac:	f000 fe51 	bl	8002652 <bno055_read_regs>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <bno055_mag+0x3e>
        return err;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	e036      	b.n	8001a2c <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	7a3b      	ldrb	r3, [r7, #8]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001a06:	7b7b      	ldrb	r3, [r7, #13]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001a2a:	2300      	movs	r3, #0
};
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b0b1      	sub	sp, #196	@ 0xc4
 8001a38:	af2a      	add	r7, sp, #168	@ 0xa8
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001a3e:	687c      	ldr	r4, [r7, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001a4a:	232e      	movs	r3, #46	@ 0x2e
 8001a4c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001a4e:	4668      	mov	r0, sp
 8001a50:	f104 0310 	add.w	r3, r4, #16
 8001a54:	229c      	movs	r2, #156	@ 0x9c
 8001a56:	4619      	mov	r1, r3
 8001a58:	f007 f91b 	bl	8008c92 <memcpy>
 8001a5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a60:	f000 fdf7 	bl	8002652 <bno055_read_regs>
 8001a64:	4603      	mov	r3, r0
 8001a66:	75fb      	strb	r3, [r7, #23]
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <bno055_gravity_x+0x3e>
        return err;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	e01b      	b.n	8001aaa <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <bno055_gravity_x+0x4a>
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <bno055_gravity_x+0x80>)
 8001a7c:	e001      	b.n	8001a82 <bno055_gravity_x+0x4e>
 8001a7e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a82:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	7b3b      	ldrb	r3, [r7, #12]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	42c80000 	.word	0x42c80000

08001ab8 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b0b1      	sub	sp, #196	@ 0xc4
 8001abc:	af2a      	add	r7, sp, #168	@ 0xa8
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001ac2:	687c      	ldr	r4, [r7, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ace:	2330      	movs	r3, #48	@ 0x30
 8001ad0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ad2:	4668      	mov	r0, sp
 8001ad4:	f104 0310 	add.w	r3, r4, #16
 8001ad8:	229c      	movs	r2, #156	@ 0x9c
 8001ada:	4619      	mov	r1, r3
 8001adc:	f007 f8d9 	bl	8008c92 <memcpy>
 8001ae0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ae4:	f000 fdb5 	bl	8002652 <bno055_read_regs>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	75fb      	strb	r3, [r7, #23]
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <bno055_gravity_y+0x3e>
        return err;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	e01b      	b.n	8001b2e <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <bno055_gravity_y+0x4a>
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <bno055_gravity_y+0x80>)
 8001b00:	e001      	b.n	8001b06 <bno055_gravity_y+0x4e>
 8001b02:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b06:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7b3b      	ldrb	r3, [r7, #12]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	42c80000 	.word	0x42c80000

08001b3c <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b0b1      	sub	sp, #196	@ 0xc4
 8001b40:	af2a      	add	r7, sp, #168	@ 0xa8
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001b46:	687c      	ldr	r4, [r7, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001b52:	2332      	movs	r3, #50	@ 0x32
 8001b54:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001b56:	4668      	mov	r0, sp
 8001b58:	f104 0310 	add.w	r3, r4, #16
 8001b5c:	229c      	movs	r2, #156	@ 0x9c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f007 f897 	bl	8008c92 <memcpy>
 8001b64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b68:	f000 fd73 	bl	8002652 <bno055_read_regs>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	75fb      	strb	r3, [r7, #23]
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <bno055_gravity_z+0x3e>
        return err;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	e01b      	b.n	8001bb2 <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <bno055_gravity_z+0x4a>
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <bno055_gravity_z+0x80>)
 8001b84:	e001      	b.n	8001b8a <bno055_gravity_z+0x4e>
 8001b86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b8a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ba2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	42c80000 	.word	0x42c80000

08001bc0 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b0b1      	sub	sp, #196	@ 0xc4
 8001bc4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001bca:	687c      	ldr	r4, [r7, #4]
 8001bcc:	2306      	movs	r3, #6
 8001bce:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001bd6:	232e      	movs	r3, #46	@ 0x2e
 8001bd8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001bda:	4668      	mov	r0, sp
 8001bdc:	f104 0310 	add.w	r3, r4, #16
 8001be0:	229c      	movs	r2, #156	@ 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	f007 f855 	bl	8008c92 <memcpy>
 8001be8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bec:	f000 fd31 	bl	8002652 <bno055_read_regs>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <bno055_gravity+0x3e>
        return err;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	e03f      	b.n	8001c7e <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <bno055_gravity+0x4a>
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <bno055_gravity+0xc8>)
 8001c08:	e001      	b.n	8001c0e <bno055_gravity+0x4e>
 8001c0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c0e:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	7a3b      	ldrb	r3, [r7, #8]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c26:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	7abb      	ldrb	r3, [r7, #10]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001c58:	7b7b      	ldrb	r3, [r7, #13]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	7b3b      	ldrb	r3, [r7, #12]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	42c80000 	.word	0x42c80000

08001c8c <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b0b1      	sub	sp, #196	@ 0xc4
 8001c90:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001c96:	687c      	ldr	r4, [r7, #4]
 8001c98:	2302      	movs	r3, #2
 8001c9a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ca2:	231a      	movs	r3, #26
 8001ca4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ca6:	4668      	mov	r0, sp
 8001ca8:	f104 0310 	add.w	r3, r4, #16
 8001cac:	229c      	movs	r2, #156	@ 0x9c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f006 ffef 	bl	8008c92 <memcpy>
 8001cb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cb8:	f000 fccb 	bl	8002652 <bno055_read_regs>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	75fb      	strb	r3, [r7, #23]
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	e01b      	b.n	8001d02 <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <bno055_euler_yaw+0x4c>
 8001cd2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001cd6:	e000      	b.n	8001cda <bno055_euler_yaw+0x4e>
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cda:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	7b3b      	ldrb	r3, [r7, #12]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cf2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	44610000 	.word	0x44610000

08001d10 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b0b1      	sub	sp, #196	@ 0xc4
 8001d14:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001d1a:	687c      	ldr	r4, [r7, #4]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001d26:	231c      	movs	r3, #28
 8001d28:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001d2a:	4668      	mov	r0, sp
 8001d2c:	f104 0310 	add.w	r3, r4, #16
 8001d30:	229c      	movs	r2, #156	@ 0x9c
 8001d32:	4619      	mov	r1, r3
 8001d34:	f006 ffad 	bl	8008c92 <memcpy>
 8001d38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d3c:	f000 fc89 	bl	8002652 <bno055_read_regs>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <bno055_euler_roll+0x3e>
        return err;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	e01b      	b.n	8001d86 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <bno055_euler_roll+0x4c>
 8001d56:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001d5a:	e000      	b.n	8001d5e <bno055_euler_roll+0x4e>
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d5e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	44610000 	.word	0x44610000

08001d94 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b0b1      	sub	sp, #196	@ 0xc4
 8001d98:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001d9e:	687c      	ldr	r4, [r7, #4]
 8001da0:	2302      	movs	r3, #2
 8001da2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001daa:	231e      	movs	r3, #30
 8001dac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001dae:	4668      	mov	r0, sp
 8001db0:	f104 0310 	add.w	r3, r4, #16
 8001db4:	229c      	movs	r2, #156	@ 0x9c
 8001db6:	4619      	mov	r1, r3
 8001db8:	f006 ff6b 	bl	8008c92 <memcpy>
 8001dbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dc0:	f000 fc47 	bl	8002652 <bno055_read_regs>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	75fb      	strb	r3, [r7, #23]
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <bno055_euler_pitch+0x3e>
        return err;
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	e01b      	b.n	8001e0a <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <bno055_euler_pitch+0x4c>
 8001dda:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001dde:	e000      	b.n	8001de2 <bno055_euler_pitch+0x4e>
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001de2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001de4:	7b7b      	ldrb	r3, [r7, #13]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	7b3b      	ldrb	r3, [r7, #12]
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	44610000 	.word	0x44610000

08001e18 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b0b1      	sub	sp, #196	@ 0xc4
 8001e1c:	af2a      	add	r7, sp, #168	@ 0xa8
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001e22:	687c      	ldr	r4, [r7, #4]
 8001e24:	2306      	movs	r3, #6
 8001e26:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001e2e:	231a      	movs	r3, #26
 8001e30:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001e32:	4668      	mov	r0, sp
 8001e34:	f104 0310 	add.w	r3, r4, #16
 8001e38:	229c      	movs	r2, #156	@ 0x9c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f006 ff29 	bl	8008c92 <memcpy>
 8001e40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e44:	f000 fc05 	bl	8002652 <bno055_read_regs>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	e03f      	b.n	8001ed6 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <bno055_euler+0x4c>
 8001e5e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001e62:	e000      	b.n	8001e66 <bno055_euler+0x4e>
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e66:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001e68:	7a7b      	ldrb	r3, [r7, #9]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	7a3b      	ldrb	r3, [r7, #8]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	7abb      	ldrb	r3, [r7, #10]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ea2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001eb0:	7b7b      	ldrb	r3, [r7, #13]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ec6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	44610000 	.word	0x44610000

08001ee4 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b0af      	sub	sp, #188	@ 0xbc
 8001ee8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001eee:	687c      	ldr	r4, [r7, #4]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001efa:	2320      	movs	r3, #32
 8001efc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001efe:	4668      	mov	r0, sp
 8001f00:	f104 0310 	add.w	r3, r4, #16
 8001f04:	229c      	movs	r2, #156	@ 0x9c
 8001f06:	4619      	mov	r1, r3
 8001f08:	f006 fec3 	bl	8008c92 <memcpy>
 8001f0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f10:	f000 fb9f 	bl	8002652 <bno055_read_regs>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <bno055_quaternion_w+0x3e>
        return err;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	e012      	b.n	8001f48 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f22:	7b7b      	ldrb	r3, [r7, #13]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	7b3b      	ldrb	r3, [r7, #12]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f38:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001f50 <bno055_quaternion_w+0x6c>
 8001f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	46800000 	.word	0x46800000

08001f54 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b0af      	sub	sp, #188	@ 0xbc
 8001f58:	af2a      	add	r7, sp, #168	@ 0xa8
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001f5e:	687c      	ldr	r4, [r7, #4]
 8001f60:	2302      	movs	r3, #2
 8001f62:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f6a:	2322      	movs	r3, #34	@ 0x22
 8001f6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f6e:	4668      	mov	r0, sp
 8001f70:	f104 0310 	add.w	r3, r4, #16
 8001f74:	229c      	movs	r2, #156	@ 0x9c
 8001f76:	4619      	mov	r1, r3
 8001f78:	f006 fe8b 	bl	8008c92 <memcpy>
 8001f7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f80:	f000 fb67 	bl	8002652 <bno055_read_regs>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <bno055_quaternion_x+0x3e>
        return err;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	e012      	b.n	8001fb8 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f92:	7b7b      	ldrb	r3, [r7, #13]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	7b3b      	ldrb	r3, [r7, #12]
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa8:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001fc0 <bno055_quaternion_x+0x6c>
 8001fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	46800000 	.word	0x46800000

08001fc4 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b0af      	sub	sp, #188	@ 0xbc
 8001fc8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001fce:	687c      	ldr	r4, [r7, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001fda:	2324      	movs	r3, #36	@ 0x24
 8001fdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001fde:	4668      	mov	r0, sp
 8001fe0:	f104 0310 	add.w	r3, r4, #16
 8001fe4:	229c      	movs	r2, #156	@ 0x9c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f006 fe53 	bl	8008c92 <memcpy>
 8001fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ff0:	f000 fb2f 	bl	8002652 <bno055_read_regs>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <bno055_quaternion_y+0x3e>
        return err;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	e012      	b.n	8002028 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002002:	7b7b      	ldrb	r3, [r7, #13]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21b      	sxth	r3, r3
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002030 <bno055_quaternion_y+0x6c>
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	46800000 	.word	0x46800000

08002034 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b0af      	sub	sp, #188	@ 0xbc
 8002038:	af2a      	add	r7, sp, #168	@ 0xa8
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800203e:	687c      	ldr	r4, [r7, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	9328      	str	r3, [sp, #160]	@ 0xa0
 800204a:	2326      	movs	r3, #38	@ 0x26
 800204c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800204e:	4668      	mov	r0, sp
 8002050:	f104 0310 	add.w	r3, r4, #16
 8002054:	229c      	movs	r2, #156	@ 0x9c
 8002056:	4619      	mov	r1, r3
 8002058:	f006 fe1b 	bl	8008c92 <memcpy>
 800205c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002060:	f000 faf7 	bl	8002652 <bno055_read_regs>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <bno055_quaternion_z+0x3e>
        return err;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	e012      	b.n	8002098 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7b3b      	ldrb	r3, [r7, #12]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002088:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80020a0 <bno055_quaternion_z+0x6c>
 800208c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	46800000 	.word	0x46800000

080020a4 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b0b1      	sub	sp, #196	@ 0xc4
 80020a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80020ae:	687c      	ldr	r4, [r7, #4]
 80020b0:	2308      	movs	r3, #8
 80020b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80020ba:	2320      	movs	r3, #32
 80020bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80020be:	4668      	mov	r0, sp
 80020c0:	f104 0310 	add.w	r3, r4, #16
 80020c4:	229c      	movs	r2, #156	@ 0x9c
 80020c6:	4619      	mov	r1, r3
 80020c8:	f006 fde3 	bl	8008c92 <memcpy>
 80020cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020d0:	f000 fabf 	bl	8002652 <bno055_read_regs>
 80020d4:	4603      	mov	r3, r0
 80020d6:	75fb      	strb	r3, [r7, #23]
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <bno055_quaternion+0x3e>
        return err;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	e048      	b.n	8002174 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80020e2:	7b7b      	ldrb	r3, [r7, #13]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800217c <bno055_quaternion+0xd8>
 80020fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21a      	sxth	r2, r3
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800217c <bno055_quaternion+0xd8>
 8002120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 800212a:	7c7b      	ldrb	r3, [r7, #17]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b21a      	sxth	r2, r3
 8002130:	7c3b      	ldrb	r3, [r7, #16]
 8002132:	b21b      	sxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b21b      	sxth	r3, r3
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002140:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800217c <bno055_quaternion+0xd8>
 8002144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800214e:	7cfb      	ldrb	r3, [r7, #19]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21a      	sxth	r2, r3
 8002154:	7cbb      	ldrb	r3, [r7, #18]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21b      	sxth	r3, r3
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002164:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800217c <bno055_quaternion+0xd8>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd90      	pop	{r4, r7, pc}
 800217c:	46800000 	.word	0x46800000

08002180 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b0af      	sub	sp, #188	@ 0xbc
 8002184:	af2a      	add	r7, sp, #168	@ 0xa8
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	70fb      	strb	r3, [r7, #3]
 8002192:	460b      	mov	r3, r1
 8002194:	70bb      	strb	r3, [r7, #2]
 8002196:	4613      	mov	r3, r2
 8002198:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800219a:	2101      	movs	r1, #1
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fabc 	bl	800271a <bno055_set_page>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <bno055_acc_conf+0x30>
        return err;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	e04b      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80021b0:	2100      	movs	r1, #0
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f91b 	bl	80023ee <bno055_set_opmode>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <bno055_acc_conf+0x46>
        return err;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	e040      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80021c6:	200c      	movs	r0, #12
 80021c8:	f001 fecc 	bl	8003f64 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	78bb      	ldrb	r3, [r7, #2]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80021dc:	687c      	ldr	r4, [r7, #4]
 80021de:	2301      	movs	r3, #1
 80021e0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80021e2:	f107 030e 	add.w	r3, r7, #14
 80021e6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80021e8:	2308      	movs	r3, #8
 80021ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 80021ec:	4668      	mov	r0, sp
 80021ee:	f104 0310 	add.w	r3, r4, #16
 80021f2:	229c      	movs	r2, #156	@ 0x9c
 80021f4:	4619      	mov	r1, r3
 80021f6:	f006 fd4c 	bl	8008c92 <memcpy>
 80021fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021fe:	f000 fa5e 	bl	80026be <bno055_write_regs>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <bno055_acc_conf+0x90>
        return err;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	e01b      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8e9 	bl	80023ee <bno055_set_opmode>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <bno055_acc_conf+0xaa>
        return err;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	e00e      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800222a:	2018      	movs	r0, #24
 800222c:	f001 fe9a 	bl	8003f64 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa71 	bl	800271a <bno055_set_page>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <bno055_acc_conf+0xc6>
        return err;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	e000      	b.n	8002248 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}

08002250 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b0af      	sub	sp, #188	@ 0xbc
 8002254:	af2a      	add	r7, sp, #168	@ 0xa8
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4603      	mov	r3, r0
 8002260:	70fb      	strb	r3, [r7, #3]
 8002262:	460b      	mov	r3, r1
 8002264:	70bb      	strb	r3, [r7, #2]
 8002266:	4613      	mov	r3, r2
 8002268:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800226a:	2101      	movs	r1, #1
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fa54 	bl	800271a <bno055_set_page>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <bno055_gyr_conf+0x30>
        return err;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	e04a      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002280:	2100      	movs	r1, #0
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8b3 	bl	80023ee <bno055_set_opmode>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <bno055_gyr_conf+0x46>
        return err;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	e03f      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002296:	200c      	movs	r0, #12
 8002298:	f001 fe64 	bl	8003f64 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	78bb      	ldrb	r3, [r7, #2]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	733b      	strb	r3, [r7, #12]
 80022a6:	787b      	ldrb	r3, [r7, #1]
 80022a8:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80022aa:	687c      	ldr	r4, [r7, #4]
 80022ac:	2302      	movs	r3, #2
 80022ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80022b6:	230a      	movs	r3, #10
 80022b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80022ba:	4668      	mov	r0, sp
 80022bc:	f104 0310 	add.w	r3, r4, #16
 80022c0:	229c      	movs	r2, #156	@ 0x9c
 80022c2:	4619      	mov	r1, r3
 80022c4:	f006 fce5 	bl	8008c92 <memcpy>
 80022c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022cc:	f000 f9f7 	bl	80026be <bno055_write_regs>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	e01b      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	791b      	ldrb	r3, [r3, #4]
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f882 	bl	80023ee <bno055_set_opmode>
 80022ea:	4603      	mov	r3, r0
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <bno055_gyr_conf+0xa8>
        return err;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	e00e      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80022f8:	2018      	movs	r0, #24
 80022fa:	f001 fe33 	bl	8003f64 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80022fe:	2100      	movs	r1, #0
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fa0a 	bl	800271a <bno055_set_page>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <bno055_gyr_conf+0xc4>
        return err;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	e000      	b.n	8002316 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}

0800231e <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 800231e:	b590      	push	{r4, r7, lr}
 8002320:	b0af      	sub	sp, #188	@ 0xbc
 8002322:	af2a      	add	r7, sp, #168	@ 0xa8
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	4608      	mov	r0, r1
 8002328:	4611      	mov	r1, r2
 800232a:	461a      	mov	r2, r3
 800232c:	4603      	mov	r3, r0
 800232e:	70fb      	strb	r3, [r7, #3]
 8002330:	460b      	mov	r3, r1
 8002332:	70bb      	strb	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002338:	2101      	movs	r1, #1
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f9ed 	bl	800271a <bno055_set_page>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <bno055_mag_conf+0x30>
        return err;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	e04b      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800234e:	2100      	movs	r1, #0
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f84c 	bl	80023ee <bno055_set_opmode>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <bno055_mag_conf+0x46>
        return err;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	e040      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002364:	200c      	movs	r0, #12
 8002366:	f001 fdfd 	bl	8003f64 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	78bb      	ldrb	r3, [r7, #2]
 800236e:	4313      	orrs	r3, r2
 8002370:	b2da      	uxtb	r2, r3
 8002372:	787b      	ldrb	r3, [r7, #1]
 8002374:	4313      	orrs	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800237a:	687c      	ldr	r4, [r7, #4]
 800237c:	2301      	movs	r3, #1
 800237e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002380:	f107 030e 	add.w	r3, r7, #14
 8002384:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002386:	2309      	movs	r3, #9
 8002388:	9327      	str	r3, [sp, #156]	@ 0x9c
 800238a:	4668      	mov	r0, sp
 800238c:	f104 0310 	add.w	r3, r4, #16
 8002390:	229c      	movs	r2, #156	@ 0x9c
 8002392:	4619      	mov	r1, r3
 8002394:	f006 fc7d 	bl	8008c92 <memcpy>
 8002398:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800239c:	f000 f98f 	bl	80026be <bno055_write_regs>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <bno055_mag_conf+0x90>
        return err;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	e01b      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f81a 	bl	80023ee <bno055_set_opmode>
 80023ba:	4603      	mov	r3, r0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <bno055_mag_conf+0xaa>
        return err;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	e00e      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80023c8:	2018      	movs	r0, #24
 80023ca:	f001 fdcb 	bl	8003f64 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f9a2 	bl	800271a <bno055_set_page>
 80023d6:	4603      	mov	r3, r0
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <bno055_mag_conf+0xc6>
        return err;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	e000      	b.n	80023e6 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}

080023ee <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80023ee:	b590      	push	{r4, r7, lr}
 80023f0:	b0af      	sub	sp, #188	@ 0xbc
 80023f2:	af2a      	add	r7, sp, #168	@ 0xa8
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80023fa:	687c      	ldr	r4, [r7, #4]
 80023fc:	2301      	movs	r3, #1
 80023fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002400:	1cfb      	adds	r3, r7, #3
 8002402:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002404:	233d      	movs	r3, #61	@ 0x3d
 8002406:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002408:	4668      	mov	r0, sp
 800240a:	f104 0310 	add.w	r3, r4, #16
 800240e:	229c      	movs	r2, #156	@ 0x9c
 8002410:	4619      	mov	r1, r3
 8002412:	f006 fc3e 	bl	8008c92 <memcpy>
 8002416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800241a:	f000 f950 	bl	80026be <bno055_write_regs>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	e003      	b.n	8002434 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800242c:	2018      	movs	r0, #24
 800242e:	f001 fd99 	bl	8003f64 <HAL_Delay>
    return BNO_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}

0800243c <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b0af      	sub	sp, #188	@ 0xbc
 8002440:	af2a      	add	r7, sp, #168	@ 0xa8
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	70fb      	strb	r3, [r7, #3]
 800244e:	460b      	mov	r3, r1
 8002450:	70bb      	strb	r3, [r7, #2]
 8002452:	4613      	mov	r3, r2
 8002454:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002456:	2100      	movs	r1, #0
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ffc8 	bl	80023ee <bno055_set_opmode>
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <bno055_set_unit+0x30>
        return err;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	e04b      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f953 	bl	800271a <bno055_set_page>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <bno055_set_unit+0x46>
        return err;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	e040      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	78bb      	ldrb	r3, [r7, #2]
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	787b      	ldrb	r3, [r7, #1]
 800248c:	4313      	orrs	r3, r2
 800248e:	b2da      	uxtb	r2, r3
 8002490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002494:	4313      	orrs	r3, r2
 8002496:	b2db      	uxtb	r3, r3
 8002498:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 800249a:	687c      	ldr	r4, [r7, #4]
 800249c:	2301      	movs	r3, #1
 800249e:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024a0:	f107 030e 	add.w	r3, r7, #14
 80024a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024a6:	233b      	movs	r3, #59	@ 0x3b
 80024a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024aa:	4668      	mov	r0, sp
 80024ac:	f104 0310 	add.w	r3, r4, #16
 80024b0:	229c      	movs	r2, #156	@ 0x9c
 80024b2:	4619      	mov	r1, r3
 80024b4:	f006 fbed 	bl	8008c92 <memcpy>
 80024b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024bc:	f000 f8ff 	bl	80026be <bno055_write_regs>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <bno055_set_unit+0x92>
        return err;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	e01a      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	78ba      	ldrb	r2, [r7, #2]
 80024d2:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	787a      	ldrb	r2, [r7, #1]
 80024d8:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024e0:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff7d 	bl	80023ee <bno055_set_opmode>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <bno055_set_unit+0xc6>
        return err;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	e000      	b.n	8002504 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bd90      	pop	{r4, r7, pc}

0800250c <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b0af      	sub	sp, #188	@ 0xbc
 8002510:	af2a      	add	r7, sp, #168	@ 0xa8
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800251e:	2304      	movs	r3, #4
 8002520:	e04d      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002522:	2100      	movs	r1, #0
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff62 	bl	80023ee <bno055_set_opmode>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <bno055_set_pwr_mode+0x2c>
        return err;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	e042      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002538:	2100      	movs	r1, #0
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8ed 	bl	800271a <bno055_set_page>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <bno055_set_pwr_mode+0x42>
        return err;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	e037      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 800254e:	687c      	ldr	r4, [r7, #4]
 8002550:	2301      	movs	r3, #1
 8002552:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002554:	1cfb      	adds	r3, r7, #3
 8002556:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002558:	233e      	movs	r3, #62	@ 0x3e
 800255a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800255c:	4668      	mov	r0, sp
 800255e:	f104 0310 	add.w	r3, r4, #16
 8002562:	229c      	movs	r2, #156	@ 0x9c
 8002564:	4619      	mov	r1, r3
 8002566:	f006 fb94 	bl	8008c92 <memcpy>
 800256a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800256e:	f000 f8a6 	bl	80026be <bno055_write_regs>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	e01e      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002586:	2100      	movs	r1, #0
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f8c6 	bl	800271a <bno055_set_page>
 800258e:	4603      	mov	r3, r0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <bno055_set_pwr_mode+0x90>
        return err;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	e010      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	791b      	ldrb	r3, [r3, #4]
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff23 	bl	80023ee <bno055_set_opmode>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <bno055_set_pwr_mode+0xaa>
        return err;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	e003      	b.n	80025be <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 80025b6:	2002      	movs	r0, #2
 80025b8:	f001 fcd4 	bl	8003f64 <HAL_Delay>
    return BNO_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}

080025c6 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80025c6:	b590      	push	{r4, r7, lr}
 80025c8:	b0af      	sub	sp, #188	@ 0xbc
 80025ca:	af2a      	add	r7, sp, #168	@ 0xa8
 80025cc:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80025d2:	687c      	ldr	r4, [r7, #4]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80025d8:	f107 030f 	add.w	r3, r7, #15
 80025dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80025de:	233f      	movs	r3, #63	@ 0x3f
 80025e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80025e2:	4668      	mov	r0, sp
 80025e4:	f104 0310 	add.w	r3, r4, #16
 80025e8:	229c      	movs	r2, #156	@ 0x9c
 80025ea:	4619      	mov	r1, r3
 80025ec:	f006 fb51 	bl	8008c92 <memcpy>
 80025f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025f4:	f000 f863 	bl	80026be <bno055_write_regs>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b0af      	sub	sp, #188	@ 0xbc
 8002610:	af2a      	add	r7, sp, #168	@ 0xa8
 8002612:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002618:	687c      	ldr	r4, [r7, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	9329      	str	r3, [sp, #164]	@ 0xa4
 800261e:	f107 030f 	add.w	r3, r7, #15
 8002622:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002624:	233f      	movs	r3, #63	@ 0x3f
 8002626:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002628:	4668      	mov	r0, sp
 800262a:	f104 0310 	add.w	r3, r4, #16
 800262e:	229c      	movs	r2, #156	@ 0x9c
 8002630:	4619      	mov	r1, r3
 8002632:	f006 fb2e 	bl	8008c92 <memcpy>
 8002636:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800263a:	f000 f840 	bl	80026be <bno055_write_regs>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <bno055_on+0x3e>
    }
    return BNO_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}

08002652 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8002652:	b084      	sub	sp, #16
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af02      	add	r7, sp, #8
 800265a:	f107 0c10 	add.w	ip, r7, #16
 800265e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002662:	6938      	ldr	r0, [r7, #16]
 8002664:	7dbb      	ldrb	r3, [r7, #22]
 8002666:	4619      	mov	r1, r3
 8002668:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2301      	movs	r3, #1
 8002674:	f002 fc54 	bl	8004f20 <HAL_I2C_Master_Transmit>
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002682:	2301      	movs	r3, #1
 8002684:	e014      	b.n	80026b0 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8002686:	6938      	ldr	r0, [r7, #16]
 8002688:	7dbb      	ldrb	r3, [r7, #22]
 800268a:	4619      	mov	r1, r3
 800268c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002690:	b29b      	uxth	r3, r3
 8002692:	f04f 32ff 	mov.w	r2, #4294967295
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800269c:	f002 fd3e 	bl	800511c <HAL_I2C_Master_Receive>
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026ba:	b004      	add	sp, #16
 80026bc:	4770      	bx	lr

080026be <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80026be:	b084      	sub	sp, #16
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af04      	add	r7, sp, #16
 80026c6:	f107 0418 	add.w	r4, r7, #24
 80026ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80026ce:	69b8      	ldr	r0, [r7, #24]
 80026d0:	7fbb      	ldrb	r3, [r7, #30]
 80026d2:	461d      	mov	r5, r3
 80026d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026de:	b299      	uxth	r1, r3
 80026e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f04f 34ff 	mov.w	r4, #4294967295
 80026ea:	9402      	str	r4, [sp, #8]
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	4629      	mov	r1, r5
 80026f8:	f002 ff42 	bl	8005580 <HAL_I2C_Mem_Write>
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002716:	b004      	add	sp, #16
 8002718:	4770      	bx	lr

0800271a <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b0af      	sub	sp, #188	@ 0xbc
 800271e:	af2a      	add	r7, sp, #168	@ 0xa8
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7b5a      	ldrb	r2, [r3, #13]
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <bno055_set_page+0x1a>
        return BNO_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e024      	b.n	800277e <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d901      	bls.n	800273e <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800273a:	2302      	movs	r3, #2
 800273c:	e01f      	b.n	800277e <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 800273e:	687c      	ldr	r4, [r7, #4]
 8002740:	2301      	movs	r3, #1
 8002742:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002744:	1cfb      	adds	r3, r7, #3
 8002746:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002748:	2307      	movs	r3, #7
 800274a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800274c:	4668      	mov	r0, sp
 800274e:	f104 0310 	add.w	r3, r4, #16
 8002752:	229c      	movs	r2, #156	@ 0x9c
 8002754:	4619      	mov	r1, r3
 8002756:	f006 fa9c 	bl	8008c92 <memcpy>
 800275a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800275e:	f7ff ffae 	bl	80026be <bno055_write_regs>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <bno055_set_page+0x56>
        return err;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	e006      	b.n	800277e <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002776:	2002      	movs	r0, #2
 8002778:	f001 fbf4 	bl	8003f64 <HAL_Delay>
    return BNO_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
	...

08002788 <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b06      	cmp	r3, #6
 8002796:	d81f      	bhi.n	80027d8 <bno055_err_str+0x50>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <bno055_err_str+0x18>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027bd 	.word	0x080027bd
 80027a4:	080027c1 	.word	0x080027c1
 80027a8:	080027c5 	.word	0x080027c5
 80027ac:	080027d1 	.word	0x080027d1
 80027b0:	080027c9 	.word	0x080027c9
 80027b4:	080027cd 	.word	0x080027cd
 80027b8:	080027d5 	.word	0x080027d5
        case BNO_OK:
            return "[BNO] Ok!";
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <bno055_err_str+0x60>)
 80027be:	e00c      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <bno055_err_str+0x64>)
 80027c2:	e00a      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <bno055_err_str+0x68>)
 80027c6:	e008      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 80027c8:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <bno055_err_str+0x6c>)
 80027ca:	e006      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <bno055_err_str+0x70>)
 80027ce:	e004      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <bno055_err_str+0x74>)
 80027d2:	e002      	b.n	80027da <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 80027d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <bno055_err_str+0x78>)
 80027d6:	e000      	b.n	80027da <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <bno055_err_str+0x60>)
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	0800aac0 	.word	0x0800aac0
 80027ec:	0800aacc 	.word	0x0800aacc
 80027f0:	0800aae0 	.word	0x0800aae0
 80027f4:	0800aafc 	.word	0x0800aafc
 80027f8:	0800ab20 	.word	0x0800ab20
 80027fc:	0800ab38 	.word	0x0800ab38
 8002800:	0800ab44 	.word	0x0800ab44

08002804 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800280c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002810:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800281c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002820:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002824:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800282c:	e000      	b.n	8002830 <ITM_SendChar+0x2c>
    {
      __NOP();
 800282e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002830:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f9      	beq.n	800282e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800283a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <ADC_Select_CH0>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Select_CH0 (void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800285a:	463b      	mov	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_0;
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800286e:	2302      	movs	r3, #2
 8002870:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002872:	463b      	mov	r3, r7
 8002874:	4619      	mov	r1, r3
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <ADC_Select_CH0+0x3c>)
 8002878:	f001 fd5c 	bl	8004334 <HAL_ADC_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8002882:	f000 fd73 	bl	800336c <Error_Handler>
	  }
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000200 	.word	0x20000200

08002894 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800289a:	463b      	mov	r3, r7
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80028ae:	2302      	movs	r3, #2
 80028b0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b2:	463b      	mov	r3, r7
 80028b4:	4619      	mov	r1, r3
 80028b6:	4806      	ldr	r0, [pc, #24]	@ (80028d0 <ADC_Select_CH1+0x3c>)
 80028b8:	f001 fd3c 	bl	8004334 <HAL_ADC_ConfigChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 80028c2:	f000 fd53 	bl	800336c <Error_Handler>
	  }
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000200 	.word	0x20000200

080028d4 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80028da:	463b      	mov	r3, r7
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_4;
 80028e6:	2304      	movs	r3, #4
 80028e8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80028ee:	2302      	movs	r3, #2
 80028f0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028f2:	463b      	mov	r3, r7
 80028f4:	4619      	mov	r1, r3
 80028f6:	4806      	ldr	r0, [pc, #24]	@ (8002910 <ADC_Select_CH4+0x3c>)
 80028f8:	f001 fd1c 	bl	8004334 <HAL_ADC_ConfigChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <ADC_Select_CH4+0x32>
	  {
		Error_Handler();
 8002902:	f000 fd33 	bl	800336c <Error_Handler>
	  }
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000200 	.word	0x20000200

08002914 <remap_val>:


float remap_val(float value, float in_min, float in_max, float out_min, float out_max)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	ed87 0a05 	vstr	s0, [r7, #20]
 800291e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002922:	ed87 1a03 	vstr	s2, [r7, #12]
 8002926:	edc7 1a02 	vstr	s3, [r7, #8]
 800292a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800292e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002932:	edd7 7a04 	vldr	s15, [r7, #16]
 8002936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800293a:	edd7 6a01 	vldr	s13, [r7, #4]
 800293e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002942:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002946:	ee67 6a27 	vmul.f32	s13, s14, s15
 800294a:	ed97 7a03 	vldr	s14, [r7, #12]
 800294e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800295a:	edd7 7a02 	vldr	s15, [r7, #8]
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002974:	b0b9      	sub	sp, #228	@ 0xe4
 8002976:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002978:	f001 fa82 	bl	8003e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800297c:	f000 facc 	bl	8002f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002980:	f000 fc68 	bl	8003254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002984:	f000 fc3c 	bl	8003200 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002988:	f000 fb2e 	bl	8002fe8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800298c:	f000 fb66 	bl	800305c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002990:	f000 fbc0 	bl	8003114 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002994:	f000 fb90 	bl	80030b8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002998:	2104      	movs	r1, #4
 800299a:	48a3      	ldr	r0, [pc, #652]	@ (8002c28 <main+0x2b8>)
 800299c:	f004 f974 	bl	8006c88 <HAL_TIM_PWM_Start>



  bno = (bno055_t)
 80029a0:	4ba2      	ldr	r3, [pc, #648]	@ (8002c2c <main+0x2bc>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	23ac      	movs	r3, #172	@ 0xac
 80029a6:	461a      	mov	r2, r3
 80029a8:	2100      	movs	r1, #0
 80029aa:	f006 f8f3 	bl	8008b94 <memset>
 80029ae:	4b9f      	ldr	r3, [pc, #636]	@ (8002c2c <main+0x2bc>)
 80029b0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c30 <main+0x2c0>)
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	4b9d      	ldr	r3, [pc, #628]	@ (8002c2c <main+0x2bc>)
 80029b6:	2208      	movs	r2, #8
 80029b8:	711a      	strb	r2, [r3, #4]
 80029ba:	4b9c      	ldr	r3, [pc, #624]	@ (8002c2c <main+0x2bc>)
 80029bc:	2229      	movs	r2, #41	@ 0x29
 80029be:	719a      	strb	r2, [r3, #6]
  {
	.i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU, ._temp_unit = 0,
	// .ptr = &bno,
  };
  HAL_Delay(1000);
 80029c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029c4:	f001 face 	bl	8003f64 <HAL_Delay>

  if ((err = bno055_init(&bno)) == BNO_OK)
 80029c8:	4898      	ldr	r0, [pc, #608]	@ (8002c2c <main+0x2bc>)
 80029ca:	f7fe fa6d 	bl	8000ea8 <bno055_init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b98      	ldr	r3, [pc, #608]	@ (8002c34 <main+0x2c4>)
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	4b97      	ldr	r3, [pc, #604]	@ (8002c34 <main+0x2c4>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <main+0x7c>
  {
  	  printf("[+] BNO055 init success\r\n");
 80029de:	4896      	ldr	r0, [pc, #600]	@ (8002c38 <main+0x2c8>)
 80029e0:	f005 ffd8 	bl	8008994 <puts>
	  HAL_Delay(100);
 80029e4:	2064      	movs	r0, #100	@ 0x64
 80029e6:	f001 fabd 	bl	8003f64 <HAL_Delay>
 80029ea:	e00d      	b.n	8002a08 <main+0x98>
  }
  else
  {
	  printf("[!] BNO055 init failed\r\n");
 80029ec:	4893      	ldr	r0, [pc, #588]	@ (8002c3c <main+0x2cc>)
 80029ee:	f005 ffd1 	bl	8008994 <puts>
	  printf("%s\n", bno055_err_str(err));
 80029f2:	4b90      	ldr	r3, [pc, #576]	@ (8002c34 <main+0x2c4>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fec6 	bl	8002788 <bno055_err_str>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f005 ffc8 	bl	8008994 <puts>
	  Error_Handler();
 8002a04:	f000 fcb2 	bl	800336c <Error_Handler>
  }
	  HAL_Delay(100);
 8002a08:	2064      	movs	r0, #100	@ 0x64
 8002a0a:	f001 faab 	bl	8003f64 <HAL_Delay>
	  err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2300      	movs	r3, #0
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	4884      	ldr	r0, [pc, #528]	@ (8002c2c <main+0x2bc>)
 8002a1a:	f7ff fd0f 	bl	800243c <bno055_set_unit>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b84      	ldr	r3, [pc, #528]	@ (8002c34 <main+0x2c4>)
 8002a24:	701a      	strb	r2, [r3, #0]
  if (err != BNO_OK)
 8002a26:	4b83      	ldr	r3, [pc, #524]	@ (8002c34 <main+0x2c4>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <main+0xcc>
  {
	  printf("[BNO] Failed to set units. Err: %d\r\n", err);
 8002a2e:	4b81      	ldr	r3, [pc, #516]	@ (8002c34 <main+0x2c4>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4882      	ldr	r0, [pc, #520]	@ (8002c40 <main+0x2d0>)
 8002a36:	f005 ff45 	bl	80088c4 <iprintf>
 8002a3a:	e002      	b.n	8002a42 <main+0xd2>
  }
  else
  {
	  printf("[BNO] Unit selection success\r\n");
 8002a3c:	4881      	ldr	r0, [pc, #516]	@ (8002c44 <main+0x2d4>)
 8002a3e:	f005 ffa9 	bl	8008994 <puts>
  }

  HAL_Delay(1000);
 8002a42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a46:	f001 fa8d 	bl	8003f64 <HAL_Delay>
  bno055_euler_t eul = {0, 0, 0};
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]


  //________________________________________________________________________________________oled code____________________


  SSD1306_Init();
 8002a5c:	f000 fc8c 	bl	8003378 <SSD1306_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bno.euler(&bno, &eul);
 8002a60:	4b72      	ldr	r3, [pc, #456]	@ (8002c2c <main+0x2bc>)
 8002a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a66:	f107 0208 	add.w	r2, r7, #8
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	486f      	ldr	r0, [pc, #444]	@ (8002c2c <main+0x2bc>)
 8002a6e:	4798      	blx	r3
	  new_yaw = (int)eul.yaw;
 8002a70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a78:	ee17 2a90 	vmov	r2, s15
 8002a7c:	4b72      	ldr	r3, [pc, #456]	@ (8002c48 <main+0x2d8>)
 8002a7e:	601a      	str	r2, [r3, #0]
	  new_yaw = (new_yaw + 180) % 360;
 8002a80:	4b71      	ldr	r3, [pc, #452]	@ (8002c48 <main+0x2d8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 8002a88:	08d3      	lsrs	r3, r2, #3
 8002a8a:	4970      	ldr	r1, [pc, #448]	@ (8002c4c <main+0x2dc>)
 8002a8c:	fba1 1303 	umull	r1, r3, r1, r3
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c48 <main+0x2d8>)
 8002a9e:	6013      	str	r3, [r2, #0]

	  ADC_Select_CH0();
 8002aa0:	f7ff fed8 	bl	8002854 <ADC_Select_CH0>
	  HAL_ADC_Start(&hadc1);
 8002aa4:	486a      	ldr	r0, [pc, #424]	@ (8002c50 <main+0x2e0>)
 8002aa6:	f001 fac5 	bl	8004034 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8002aaa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002aae:	4868      	ldr	r0, [pc, #416]	@ (8002c50 <main+0x2e0>)
 8002ab0:	f001 fba7 	bl	8004202 <HAL_ADC_PollForConversion>
	  pot_one = HAL_ADC_GetValue(&hadc1);
 8002ab4:	4866      	ldr	r0, [pc, #408]	@ (8002c50 <main+0x2e0>)
 8002ab6:	f001 fc2f 	bl	8004318 <HAL_ADC_GetValue>
 8002aba:	ee07 0a90 	vmov	s15, r0
 8002abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac2:	4b64      	ldr	r3, [pc, #400]	@ (8002c54 <main+0x2e4>)
 8002ac4:	edc3 7a00 	vstr	s15, [r3]
	  kp = pot_one / 200;
 8002ac8:	4b62      	ldr	r3, [pc, #392]	@ (8002c54 <main+0x2e4>)
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002c58 <main+0x2e8>
 8002ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad6:	4b61      	ldr	r3, [pc, #388]	@ (8002c5c <main+0x2ec>)
 8002ad8:	edc3 7a00 	vstr	s15, [r3]
	  HAL_ADC_Stop(&hadc1);
 8002adc:	485c      	ldr	r0, [pc, #368]	@ (8002c50 <main+0x2e0>)
 8002ade:	f001 fb5d 	bl	800419c <HAL_ADC_Stop>

	  ADC_Select_CH1();
 8002ae2:	f7ff fed7 	bl	8002894 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8002ae6:	485a      	ldr	r0, [pc, #360]	@ (8002c50 <main+0x2e0>)
 8002ae8:	f001 faa4 	bl	8004034 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8002aec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002af0:	4857      	ldr	r0, [pc, #348]	@ (8002c50 <main+0x2e0>)
 8002af2:	f001 fb86 	bl	8004202 <HAL_ADC_PollForConversion>
	  pot_two = HAL_ADC_GetValue(&hadc1);
 8002af6:	4856      	ldr	r0, [pc, #344]	@ (8002c50 <main+0x2e0>)
 8002af8:	f001 fc0e 	bl	8004318 <HAL_ADC_GetValue>
 8002afc:	ee07 0a90 	vmov	s15, r0
 8002b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b04:	4b56      	ldr	r3, [pc, #344]	@ (8002c60 <main+0x2f0>)
 8002b06:	edc3 7a00 	vstr	s15, [r3]
	  ki = pot_two / 800;
 8002b0a:	4b55      	ldr	r3, [pc, #340]	@ (8002c60 <main+0x2f0>)
 8002b0c:	ed93 7a00 	vldr	s14, [r3]
 8002b10:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002c64 <main+0x2f4>
 8002b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b18:	4b53      	ldr	r3, [pc, #332]	@ (8002c68 <main+0x2f8>)
 8002b1a:	edc3 7a00 	vstr	s15, [r3]
	  HAL_ADC_Stop(&hadc1);
 8002b1e:	484c      	ldr	r0, [pc, #304]	@ (8002c50 <main+0x2e0>)
 8002b20:	f001 fb3c 	bl	800419c <HAL_ADC_Stop>

	  ADC_Select_CH4();
 8002b24:	f7ff fed6 	bl	80028d4 <ADC_Select_CH4>
	  HAL_ADC_Start(&hadc1);
 8002b28:	4849      	ldr	r0, [pc, #292]	@ (8002c50 <main+0x2e0>)
 8002b2a:	f001 fa83 	bl	8004034 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8002b2e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b32:	4847      	ldr	r0, [pc, #284]	@ (8002c50 <main+0x2e0>)
 8002b34:	f001 fb65 	bl	8004202 <HAL_ADC_PollForConversion>
	  pot_three = HAL_ADC_GetValue(&hadc1);
 8002b38:	4845      	ldr	r0, [pc, #276]	@ (8002c50 <main+0x2e0>)
 8002b3a:	f001 fbed 	bl	8004318 <HAL_ADC_GetValue>
 8002b3e:	ee07 0a90 	vmov	s15, r0
 8002b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b46:	4b49      	ldr	r3, [pc, #292]	@ (8002c6c <main+0x2fc>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]
	  kd = pot_three;
 8002b4c:	4b47      	ldr	r3, [pc, #284]	@ (8002c6c <main+0x2fc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a47      	ldr	r2, [pc, #284]	@ (8002c70 <main+0x300>)
 8002b52:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8002b54:	483e      	ldr	r0, [pc, #248]	@ (8002c50 <main+0x2e0>)
 8002b56:	f001 fb21 	bl	800419c <HAL_ADC_Stop>


	  heading = new_yaw;
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <main+0x2d8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b66:	4b43      	ldr	r3, [pc, #268]	@ (8002c74 <main+0x304>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]
	  heading_error = heading_setpoint - heading;
 8002b6c:	4b42      	ldr	r3, [pc, #264]	@ (8002c78 <main+0x308>)
 8002b6e:	ed93 7a00 	vldr	s14, [r3]
 8002b72:	4b40      	ldr	r3, [pc, #256]	@ (8002c74 <main+0x304>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c7c <main+0x30c>)
 8002b7e:	edc3 7a00 	vstr	s15, [r3]
	  PID_p = kp *heading_error;
 8002b82:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <main+0x2ec>)
 8002b84:	ed93 7a00 	vldr	s14, [r3]
 8002b88:	4b3c      	ldr	r3, [pc, #240]	@ (8002c7c <main+0x30c>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b92:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <main+0x310>)
 8002b94:	edc3 7a00 	vstr	s15, [r3]

	  heading_difference = heading_error - heading_prev_error;
 8002b98:	4b38      	ldr	r3, [pc, #224]	@ (8002c7c <main+0x30c>)
 8002b9a:	ed93 7a00 	vldr	s14, [r3]
 8002b9e:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <main+0x314>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba8:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <main+0x318>)
 8002baa:	edc3 7a00 	vstr	s15, [r3]
	  PID_d = kd*((heading_error - heading_prev_error)/period);
 8002bae:	4b33      	ldr	r3, [pc, #204]	@ (8002c7c <main+0x30c>)
 8002bb0:	ed93 7a00 	vldr	s14, [r3]
 8002bb4:	4b33      	ldr	r3, [pc, #204]	@ (8002c84 <main+0x314>)
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bbe:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <main+0x31c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bce:	4b28      	ldr	r3, [pc, #160]	@ (8002c70 <main+0x300>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c90 <main+0x320>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]

	  if(heading_error > -3 && heading_error < 3)
 8002bde:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <main+0x30c>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8002be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	dd52      	ble.n	8002c98 <main+0x328>
 8002bf2:	4b22      	ldr	r3, [pc, #136]	@ (8002c7c <main+0x30c>)
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c04:	d548      	bpl.n	8002c98 <main+0x328>
	  {
		  PID_i = PID_i + (ki * heading_error);
 8002c06:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <main+0x2f8>)
 8002c08:	ed93 7a00 	vldr	s14, [r3]
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <main+0x30c>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c16:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <main+0x324>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c20:	4b1c      	ldr	r3, [pc, #112]	@ (8002c94 <main+0x324>)
 8002c22:	edc3 7a00 	vstr	s15, [r3]
 8002c26:	e03b      	b.n	8002ca0 <main+0x330>
 8002c28:	200002f0 	.word	0x200002f0
 8002c2c:	20000380 	.word	0x20000380
 8002c30:	20000248 	.word	0x20000248
 8002c34:	2000042c 	.word	0x2000042c
 8002c38:	0800ab5c 	.word	0x0800ab5c
 8002c3c:	0800ab78 	.word	0x0800ab78
 8002c40:	0800ab90 	.word	0x0800ab90
 8002c44:	0800abb8 	.word	0x0800abb8
 8002c48:	2000043c 	.word	0x2000043c
 8002c4c:	16c16c17 	.word	0x16c16c17
 8002c50:	20000200 	.word	0x20000200
 8002c54:	20000460 	.word	0x20000460
 8002c58:	43480000 	.word	0x43480000
 8002c5c:	20000454 	.word	0x20000454
 8002c60:	20000464 	.word	0x20000464
 8002c64:	44480000 	.word	0x44480000
 8002c68:	20000458 	.word	0x20000458
 8002c6c:	20000468 	.word	0x20000468
 8002c70:	2000045c 	.word	0x2000045c
 8002c74:	20000430 	.word	0x20000430
 8002c78:	20000008 	.word	0x20000008
 8002c7c:	20000434 	.word	0x20000434
 8002c80:	20000444 	.word	0x20000444
 8002c84:	20000438 	.word	0x20000438
 8002c88:	20000440 	.word	0x20000440
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	2000044c 	.word	0x2000044c
 8002c94:	20000448 	.word	0x20000448
	  }
	  else
	  {
		  PID_i = 0;
 8002c98:	4b82      	ldr	r3, [pc, #520]	@ (8002ea4 <main+0x534>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
	  }

	  PID_total = PID_p + PID_i + PID_d;
 8002ca0:	4b81      	ldr	r3, [pc, #516]	@ (8002ea8 <main+0x538>)
 8002ca2:	ed93 7a00 	vldr	s14, [r3]
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea4 <main+0x534>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8002eac <main+0x53c>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cba:	4b7d      	ldr	r3, [pc, #500]	@ (8002eb0 <main+0x540>)
 8002cbc:	edc3 7a00 	vstr	s15, [r3]

	  PID_total = remap_val(PID_total, -3000, 3000, 250, 1250);
 8002cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8002eb0 <main+0x540>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 8002eb4 <main+0x544>
 8002cca:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8002eb8 <main+0x548>
 8002cce:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 8002ebc <main+0x54c>
 8002cd2:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8002ec0 <main+0x550>
 8002cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cda:	f7ff fe1b 	bl	8002914 <remap_val>
 8002cde:	eef0 7a40 	vmov.f32	s15, s0
 8002ce2:	4b73      	ldr	r3, [pc, #460]	@ (8002eb0 <main+0x540>)
 8002ce4:	edc3 7a00 	vstr	s15, [r3]

	  if(PID_total < 138)
 8002ce8:	4b71      	ldr	r3, [pc, #452]	@ (8002eb0 <main+0x540>)
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8002ec4 <main+0x554>
 8002cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	d502      	bpl.n	8002d02 <main+0x392>
	  {
		  PID_total = 138;
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb0 <main+0x540>)
 8002cfe:	4a72      	ldr	r2, [pc, #456]	@ (8002ec8 <main+0x558>)
 8002d00:	601a      	str	r2, [r3, #0]
	  }
	  if(PID_total > 1111)
 8002d02:	4b6b      	ldr	r3, [pc, #428]	@ (8002eb0 <main+0x540>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002ecc <main+0x55c>
 8002d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	dd02      	ble.n	8002d1c <main+0x3ac>
	  {
		  PID_total = 1111;
 8002d16:	4b66      	ldr	r3, [pc, #408]	@ (8002eb0 <main+0x540>)
 8002d18:	4a6d      	ldr	r2, [pc, #436]	@ (8002ed0 <main+0x560>)
 8002d1a:	601a      	str	r2, [r3, #0]
	  }


	  printf("K_p: %3.0f K_i: %2.2f  K_d: %4.0f New_Yaw: %ld PID_tot: %4.2f\r\n", kp, ki, kd, new_yaw, PID_total);
 8002d1c:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed4 <main+0x564>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc19 	bl	8000558 <__aeabi_f2d>
 8002d26:	4682      	mov	sl, r0
 8002d28:	468b      	mov	fp, r1
 8002d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ed8 <main+0x568>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc12 	bl	8000558 <__aeabi_f2d>
 8002d34:	4604      	mov	r4, r0
 8002d36:	460d      	mov	r5, r1
 8002d38:	4b68      	ldr	r3, [pc, #416]	@ (8002edc <main+0x56c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc0b 	bl	8000558 <__aeabi_f2d>
 8002d42:	4680      	mov	r8, r0
 8002d44:	4689      	mov	r9, r1
 8002d46:	4b66      	ldr	r3, [pc, #408]	@ (8002ee0 <main+0x570>)
 8002d48:	681e      	ldr	r6, [r3, #0]
 8002d4a:	4b59      	ldr	r3, [pc, #356]	@ (8002eb0 <main+0x540>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fc02 	bl	8000558 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002d5c:	9604      	str	r6, [sp, #16]
 8002d5e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002d62:	e9cd 4500 	strd	r4, r5, [sp]
 8002d66:	4652      	mov	r2, sl
 8002d68:	465b      	mov	r3, fp
 8002d6a:	485e      	ldr	r0, [pc, #376]	@ (8002ee4 <main+0x574>)
 8002d6c:	f005 fdaa 	bl	80088c4 <iprintf>
	  fflush(stdout);
 8002d70:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee8 <main+0x578>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f005 fcce 	bl	8008718 <fflush>


	  SSD1306_GotoXY (0,0);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f000 fc64 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts ("PID Controller", &Font_7x10, 1);
 8002d84:	2201      	movs	r2, #1
 8002d86:	4959      	ldr	r1, [pc, #356]	@ (8002eec <main+0x57c>)
 8002d88:	4859      	ldr	r0, [pc, #356]	@ (8002ef0 <main+0x580>)
 8002d8a:	f000 fcf3 	bl	8003774 <SSD1306_Puts>

	  SSD1306_GotoXY (0,16);
 8002d8e:	2110      	movs	r1, #16
 8002d90:	2000      	movs	r0, #0
 8002d92:	f000 fc5b 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts ("P: ", &Font_7x10, 1);
 8002d96:	2201      	movs	r2, #1
 8002d98:	4954      	ldr	r1, [pc, #336]	@ (8002eec <main+0x57c>)
 8002d9a:	4856      	ldr	r0, [pc, #344]	@ (8002ef4 <main+0x584>)
 8002d9c:	f000 fcea 	bl	8003774 <SSD1306_Puts>
	  char char_buff[7];
	  sprintf(char_buff, "%3.0f", kp);
 8002da0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed4 <main+0x564>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fbd7 	bl	8000558 <__aeabi_f2d>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4638      	mov	r0, r7
 8002db0:	4951      	ldr	r1, [pc, #324]	@ (8002ef8 <main+0x588>)
 8002db2:	f005 fdf7 	bl	80089a4 <siprintf>
	  SSD1306_GotoXY (35,16);
 8002db6:	2110      	movs	r1, #16
 8002db8:	2023      	movs	r0, #35	@ 0x23
 8002dba:	f000 fc47 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts (char_buff, &Font_7x10, 1);
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	494a      	ldr	r1, [pc, #296]	@ (8002eec <main+0x57c>)
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fcd5 	bl	8003774 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8002dca:	f000 fb99 	bl	8003500 <SSD1306_UpdateScreen>

	  SSD1306_GotoXY (0,27);
 8002dce:	211b      	movs	r1, #27
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f000 fc3b 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts ("I: ", &Font_7x10, 1);
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4944      	ldr	r1, [pc, #272]	@ (8002eec <main+0x57c>)
 8002dda:	4848      	ldr	r0, [pc, #288]	@ (8002efc <main+0x58c>)
 8002ddc:	f000 fcca 	bl	8003774 <SSD1306_Puts>
	  sprintf(char_buff, "%2.2f", ki);
 8002de0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed8 <main+0x568>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fbb7 	bl	8000558 <__aeabi_f2d>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4638      	mov	r0, r7
 8002df0:	4943      	ldr	r1, [pc, #268]	@ (8002f00 <main+0x590>)
 8002df2:	f005 fdd7 	bl	80089a4 <siprintf>
	  SSD1306_GotoXY (35,27);
 8002df6:	211b      	movs	r1, #27
 8002df8:	2023      	movs	r0, #35	@ 0x23
 8002dfa:	f000 fc27 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts (char_buff, &Font_7x10, 1);
 8002dfe:	463b      	mov	r3, r7
 8002e00:	2201      	movs	r2, #1
 8002e02:	493a      	ldr	r1, [pc, #232]	@ (8002eec <main+0x57c>)
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fcb5 	bl	8003774 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8002e0a:	f000 fb79 	bl	8003500 <SSD1306_UpdateScreen>

	  SSD1306_GotoXY (0,38);
 8002e0e:	2126      	movs	r1, #38	@ 0x26
 8002e10:	2000      	movs	r0, #0
 8002e12:	f000 fc1b 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts ("D: ", &Font_7x10, 1);
 8002e16:	2201      	movs	r2, #1
 8002e18:	4934      	ldr	r1, [pc, #208]	@ (8002eec <main+0x57c>)
 8002e1a:	483a      	ldr	r0, [pc, #232]	@ (8002f04 <main+0x594>)
 8002e1c:	f000 fcaa 	bl	8003774 <SSD1306_Puts>
	  sprintf(char_buff, "%4.0f", kd);
 8002e20:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <main+0x56c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fb97 	bl	8000558 <__aeabi_f2d>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4638      	mov	r0, r7
 8002e30:	4935      	ldr	r1, [pc, #212]	@ (8002f08 <main+0x598>)
 8002e32:	f005 fdb7 	bl	80089a4 <siprintf>
	  SSD1306_GotoXY (35,38);
 8002e36:	2126      	movs	r1, #38	@ 0x26
 8002e38:	2023      	movs	r0, #35	@ 0x23
 8002e3a:	f000 fc07 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts (char_buff, &Font_7x10, 1);
 8002e3e:	463b      	mov	r3, r7
 8002e40:	2201      	movs	r2, #1
 8002e42:	492a      	ldr	r1, [pc, #168]	@ (8002eec <main+0x57c>)
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fc95 	bl	8003774 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8002e4a:	f000 fb59 	bl	8003500 <SSD1306_UpdateScreen>

	  SSD1306_GotoXY (0,49);
 8002e4e:	2131      	movs	r1, #49	@ 0x31
 8002e50:	2000      	movs	r0, #0
 8002e52:	f000 fbfb 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts ("Yaw: ", &Font_7x10, 1);
 8002e56:	2201      	movs	r2, #1
 8002e58:	4924      	ldr	r1, [pc, #144]	@ (8002eec <main+0x57c>)
 8002e5a:	482c      	ldr	r0, [pc, #176]	@ (8002f0c <main+0x59c>)
 8002e5c:	f000 fc8a 	bl	8003774 <SSD1306_Puts>
	  sprintf(char_buff, "%ld", new_yaw);
 8002e60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <main+0x570>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	463b      	mov	r3, r7
 8002e66:	492a      	ldr	r1, [pc, #168]	@ (8002f10 <main+0x5a0>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 fd9b 	bl	80089a4 <siprintf>
	  SSD1306_GotoXY (35,49);
 8002e6e:	2131      	movs	r1, #49	@ 0x31
 8002e70:	2023      	movs	r0, #35	@ 0x23
 8002e72:	f000 fbeb 	bl	800364c <SSD1306_GotoXY>
	  SSD1306_Puts (char_buff, &Font_7x10, 1);
 8002e76:	463b      	mov	r3, r7
 8002e78:	2201      	movs	r2, #1
 8002e7a:	491c      	ldr	r1, [pc, #112]	@ (8002eec <main+0x57c>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fc79 	bl	8003774 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8002e82:	f000 fb3d 	bl	8003500 <SSD1306_UpdateScreen>



	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PID_total);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <main+0x540>)
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <main+0x5a4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e94:	ee17 2a90 	vmov	r2, s15
 8002e98:	639a      	str	r2, [r3, #56]	@ 0x38

	  HAL_Delay(10);
 8002e9a:	200a      	movs	r0, #10
 8002e9c:	f001 f862 	bl	8003f64 <HAL_Delay>
  {
 8002ea0:	e5de      	b.n	8002a60 <main+0xf0>
 8002ea2:	bf00      	nop
 8002ea4:	20000448 	.word	0x20000448
 8002ea8:	20000444 	.word	0x20000444
 8002eac:	2000044c 	.word	0x2000044c
 8002eb0:	20000450 	.word	0x20000450
 8002eb4:	449c4000 	.word	0x449c4000
 8002eb8:	437a0000 	.word	0x437a0000
 8002ebc:	453b8000 	.word	0x453b8000
 8002ec0:	c53b8000 	.word	0xc53b8000
 8002ec4:	430a0000 	.word	0x430a0000
 8002ec8:	430a0000 	.word	0x430a0000
 8002ecc:	448ae000 	.word	0x448ae000
 8002ed0:	448ae000 	.word	0x448ae000
 8002ed4:	20000454 	.word	0x20000454
 8002ed8:	20000458 	.word	0x20000458
 8002edc:	2000045c 	.word	0x2000045c
 8002ee0:	2000043c 	.word	0x2000043c
 8002ee4:	0800abd8 	.word	0x0800abd8
 8002ee8:	20000028 	.word	0x20000028
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	0800ac18 	.word	0x0800ac18
 8002ef4:	0800ac28 	.word	0x0800ac28
 8002ef8:	0800ac2c 	.word	0x0800ac2c
 8002efc:	0800ac34 	.word	0x0800ac34
 8002f00:	0800ac38 	.word	0x0800ac38
 8002f04:	0800ac40 	.word	0x0800ac40
 8002f08:	0800ac44 	.word	0x0800ac44
 8002f0c:	0800ac4c 	.word	0x0800ac4c
 8002f10:	0800ac54 	.word	0x0800ac54
 8002f14:	200002f0 	.word	0x200002f0

08002f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b094      	sub	sp, #80	@ 0x50
 8002f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f1e:	f107 0320 	add.w	r3, r7, #32
 8002f22:	2230      	movs	r2, #48	@ 0x30
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 fe34 	bl	8008b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <SystemClock_Config+0xc8>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	4a26      	ldr	r2, [pc, #152]	@ (8002fe0 <SystemClock_Config+0xc8>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4c:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <SystemClock_Config+0xc8>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	4b21      	ldr	r3, [pc, #132]	@ (8002fe4 <SystemClock_Config+0xcc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a20      	ldr	r2, [pc, #128]	@ (8002fe4 <SystemClock_Config+0xcc>)
 8002f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe4 <SystemClock_Config+0xcc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f74:	2302      	movs	r3, #2
 8002f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f80:	2302      	movs	r3, #2
 8002f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f84:	2300      	movs	r3, #0
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002f8c:	2354      	movs	r3, #84	@ 0x54
 8002f8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f90:	2302      	movs	r3, #2
 8002f92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f94:	2304      	movs	r3, #4
 8002f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f98:	f107 0320 	add.w	r3, r7, #32
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 f933 	bl	8006208 <HAL_RCC_OscConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fa8:	f000 f9e0 	bl	800336c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fac:	230f      	movs	r3, #15
 8002fae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fc2:	f107 030c 	add.w	r3, r7, #12
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fb95 	bl	80066f8 <HAL_RCC_ClockConfig>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002fd4:	f000 f9ca 	bl	800336c <Error_Handler>
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3750      	adds	r7, #80	@ 0x50
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002fec:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <MX_ADC1_Init+0x68>)
 8002fee:	4a19      	ldr	r2, [pc, #100]	@ (8003054 <MX_ADC1_Init+0x6c>)
 8002ff0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ff2:	4b17      	ldr	r3, [pc, #92]	@ (8003050 <MX_ADC1_Init+0x68>)
 8002ff4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ff8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ffa:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <MX_ADC1_Init+0x68>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003000:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <MX_ADC1_Init+0x68>)
 8003002:	2201      	movs	r2, #1
 8003004:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003006:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <MX_ADC1_Init+0x68>)
 8003008:	2201      	movs	r2, #1
 800300a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800300c:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <MX_ADC1_Init+0x68>)
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003014:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <MX_ADC1_Init+0x68>)
 8003016:	2200      	movs	r2, #0
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <MX_ADC1_Init+0x68>)
 800301c:	4a0e      	ldr	r2, [pc, #56]	@ (8003058 <MX_ADC1_Init+0x70>)
 800301e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <MX_ADC1_Init+0x68>)
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8003026:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <MX_ADC1_Init+0x68>)
 8003028:	2203      	movs	r2, #3
 800302a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <MX_ADC1_Init+0x68>)
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <MX_ADC1_Init+0x68>)
 8003036:	2201      	movs	r2, #1
 8003038:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800303a:	4805      	ldr	r0, [pc, #20]	@ (8003050 <MX_ADC1_Init+0x68>)
 800303c:	f000 ffb6 	bl	8003fac <HAL_ADC_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8003046:	f000 f991 	bl	800336c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000200 	.word	0x20000200
 8003054:	40012000 	.word	0x40012000
 8003058:	0f000001 	.word	0x0f000001

0800305c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003060:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <MX_I2C1_Init+0x50>)
 8003062:	4a13      	ldr	r2, [pc, #76]	@ (80030b0 <MX_I2C1_Init+0x54>)
 8003064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003066:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <MX_I2C1_Init+0x50>)
 8003068:	4a12      	ldr	r2, [pc, #72]	@ (80030b4 <MX_I2C1_Init+0x58>)
 800306a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800306c:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <MX_I2C1_Init+0x50>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <MX_I2C1_Init+0x50>)
 8003074:	2200      	movs	r2, #0
 8003076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <MX_I2C1_Init+0x50>)
 800307a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800307e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003080:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <MX_I2C1_Init+0x50>)
 8003082:	2200      	movs	r2, #0
 8003084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <MX_I2C1_Init+0x50>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800308c:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <MX_I2C1_Init+0x50>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <MX_I2C1_Init+0x50>)
 8003094:	2200      	movs	r2, #0
 8003096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003098:	4804      	ldr	r0, [pc, #16]	@ (80030ac <MX_I2C1_Init+0x50>)
 800309a:	f001 fdfd 	bl	8004c98 <HAL_I2C_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030a4:	f000 f962 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000248 	.word	0x20000248
 80030b0:	40005400 	.word	0x40005400
 80030b4:	000186a0 	.word	0x000186a0

080030b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80030bc:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030be:	4a13      	ldr	r2, [pc, #76]	@ (800310c <MX_I2C3_Init+0x54>)
 80030c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030c4:	4a12      	ldr	r2, [pc, #72]	@ (8003110 <MX_I2C3_Init+0x58>)
 80030c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030de:	2200      	movs	r2, #0
 80030e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030e8:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80030f4:	4804      	ldr	r0, [pc, #16]	@ (8003108 <MX_I2C3_Init+0x50>)
 80030f6:	f001 fdcf 	bl	8004c98 <HAL_I2C_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003100:	f000 f934 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003104:	bf00      	nop
 8003106:	bd80      	pop	{r7, pc}
 8003108:	2000029c 	.word	0x2000029c
 800310c:	40005c00 	.word	0x40005c00
 8003110:	00061a80 	.word	0x00061a80

08003114 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08e      	sub	sp, #56	@ 0x38
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800311a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003128:	f107 0320 	add.w	r3, r7, #32
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]
 8003140:	615a      	str	r2, [r3, #20]
 8003142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003144:	4b2c      	ldr	r3, [pc, #176]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 8003146:	4a2d      	ldr	r2, [pc, #180]	@ (80031fc <MX_TIM3_Init+0xe8>)
 8003148:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 800314a:	4b2b      	ldr	r3, [pc, #172]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 800314c:	22b3      	movs	r2, #179	@ 0xb3
 800314e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003150:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9333-1;
 8003156:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 8003158:	f242 4274 	movw	r2, #9332	@ 0x2474
 800315c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800315e:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003164:	4b24      	ldr	r3, [pc, #144]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800316a:	4823      	ldr	r0, [pc, #140]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 800316c:	f003 fce4 	bl	8006b38 <HAL_TIM_Base_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003176:	f000 f8f9 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800317a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800317e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003184:	4619      	mov	r1, r3
 8003186:	481c      	ldr	r0, [pc, #112]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 8003188:	f003 fef0 	bl	8006f6c <HAL_TIM_ConfigClockSource>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003192:	f000 f8eb 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003196:	4818      	ldr	r0, [pc, #96]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 8003198:	f003 fd1d 	bl	8006bd6 <HAL_TIM_PWM_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80031a2:	f000 f8e3 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031ae:	f107 0320 	add.w	r3, r7, #32
 80031b2:	4619      	mov	r1, r3
 80031b4:	4810      	ldr	r0, [pc, #64]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 80031b6:	f004 fa79 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80031c0:	f000 f8d4 	bl	800336c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031c4:	2360      	movs	r3, #96	@ 0x60
 80031c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	2204      	movs	r2, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4807      	ldr	r0, [pc, #28]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 80031dc:	f003 fe04 	bl	8006de8 <HAL_TIM_PWM_ConfigChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80031e6:	f000 f8c1 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031ea:	4803      	ldr	r0, [pc, #12]	@ (80031f8 <MX_TIM3_Init+0xe4>)
 80031ec:	f000 fcb0 	bl	8003b50 <HAL_TIM_MspPostInit>

}
 80031f0:	bf00      	nop
 80031f2:	3738      	adds	r7, #56	@ 0x38
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200002f0 	.word	0x200002f0
 80031fc:	40000400 	.word	0x40000400

08003200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003206:	4a12      	ldr	r2, [pc, #72]	@ (8003250 <MX_USART2_UART_Init+0x50>)
 8003208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 800320c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003226:	220c      	movs	r2, #12
 8003228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003236:	4805      	ldr	r0, [pc, #20]	@ (800324c <MX_USART2_UART_Init+0x4c>)
 8003238:	f004 faa6 	bl	8007788 <HAL_UART_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003242:	f000 f893 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000338 	.word	0x20000338
 8003250:	40004400 	.word	0x40004400

08003254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	4b2e      	ldr	r3, [pc, #184]	@ (8003328 <MX_GPIO_Init+0xd4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4a2d      	ldr	r2, [pc, #180]	@ (8003328 <MX_GPIO_Init+0xd4>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	6313      	str	r3, [r2, #48]	@ 0x30
 800327a:	4b2b      	ldr	r3, [pc, #172]	@ (8003328 <MX_GPIO_Init+0xd4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <MX_GPIO_Init+0xd4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4a26      	ldr	r2, [pc, #152]	@ (8003328 <MX_GPIO_Init+0xd4>)
 8003290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003294:	6313      	str	r3, [r2, #48]	@ 0x30
 8003296:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <MX_GPIO_Init+0xd4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b20      	ldr	r3, [pc, #128]	@ (8003328 <MX_GPIO_Init+0xd4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <MX_GPIO_Init+0xd4>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <MX_GPIO_Init+0xd4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <MX_GPIO_Init+0xd4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a18      	ldr	r2, [pc, #96]	@ (8003328 <MX_GPIO_Init+0xd4>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b16      	ldr	r3, [pc, #88]	@ (8003328 <MX_GPIO_Init+0xd4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80032e0:	4812      	ldr	r0, [pc, #72]	@ (800332c <MX_GPIO_Init+0xd8>)
 80032e2:	f001 fcbf 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80032f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032f6:	f107 0314 	add.w	r3, r7, #20
 80032fa:	4619      	mov	r1, r3
 80032fc:	480c      	ldr	r0, [pc, #48]	@ (8003330 <MX_GPIO_Init+0xdc>)
 80032fe:	f001 fb2d 	bl	800495c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8003302:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8003306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003308:	2301      	movs	r3, #1
 800330a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4619      	mov	r1, r3
 800331a:	4804      	ldr	r0, [pc, #16]	@ (800332c <MX_GPIO_Init+0xd8>)
 800331c:	f001 fb1e 	bl	800495c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003320:	bf00      	nop
 8003322:	3728      	adds	r7, #40	@ 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	40020000 	.word	0x40020000
 8003330:	40020800 	.word	0x40020800

08003334 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e009      	b.n	800335a <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	60ba      	str	r2, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fa58 	bl	8002804 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3301      	adds	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	429a      	cmp	r2, r3
 8003360:	dbf1      	blt.n	8003346 <_write+0x12>
  }
  return len;
 8003362:	687b      	ldr	r3, [r7, #4]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <Error_Handler+0x8>

08003378 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800337e:	f000 fa1f 	bl	80037c0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003382:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003386:	2201      	movs	r2, #1
 8003388:	2178      	movs	r1, #120	@ 0x78
 800338a:	485b      	ldr	r0, [pc, #364]	@ (80034f8 <SSD1306_Init+0x180>)
 800338c:	f002 f9f2 	bl	8005774 <HAL_I2C_IsDeviceReady>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003396:	2300      	movs	r3, #0
 8003398:	e0a9      	b.n	80034ee <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800339a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800339e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80033a0:	e002      	b.n	80033a8 <SSD1306_Init+0x30>
		p--;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80033ae:	22ae      	movs	r2, #174	@ 0xae
 80033b0:	2100      	movs	r1, #0
 80033b2:	2078      	movs	r0, #120	@ 0x78
 80033b4:	f000 fa80 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80033b8:	2220      	movs	r2, #32
 80033ba:	2100      	movs	r1, #0
 80033bc:	2078      	movs	r0, #120	@ 0x78
 80033be:	f000 fa7b 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80033c2:	2210      	movs	r2, #16
 80033c4:	2100      	movs	r1, #0
 80033c6:	2078      	movs	r0, #120	@ 0x78
 80033c8:	f000 fa76 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80033cc:	22b0      	movs	r2, #176	@ 0xb0
 80033ce:	2100      	movs	r1, #0
 80033d0:	2078      	movs	r0, #120	@ 0x78
 80033d2:	f000 fa71 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80033d6:	22c8      	movs	r2, #200	@ 0xc8
 80033d8:	2100      	movs	r1, #0
 80033da:	2078      	movs	r0, #120	@ 0x78
 80033dc:	f000 fa6c 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	2078      	movs	r0, #120	@ 0x78
 80033e6:	f000 fa67 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80033ea:	2210      	movs	r2, #16
 80033ec:	2100      	movs	r1, #0
 80033ee:	2078      	movs	r0, #120	@ 0x78
 80033f0:	f000 fa62 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80033f4:	2240      	movs	r2, #64	@ 0x40
 80033f6:	2100      	movs	r1, #0
 80033f8:	2078      	movs	r0, #120	@ 0x78
 80033fa:	f000 fa5d 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80033fe:	2281      	movs	r2, #129	@ 0x81
 8003400:	2100      	movs	r1, #0
 8003402:	2078      	movs	r0, #120	@ 0x78
 8003404:	f000 fa58 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003408:	22ff      	movs	r2, #255	@ 0xff
 800340a:	2100      	movs	r1, #0
 800340c:	2078      	movs	r0, #120	@ 0x78
 800340e:	f000 fa53 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003412:	22a1      	movs	r2, #161	@ 0xa1
 8003414:	2100      	movs	r1, #0
 8003416:	2078      	movs	r0, #120	@ 0x78
 8003418:	f000 fa4e 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800341c:	22a6      	movs	r2, #166	@ 0xa6
 800341e:	2100      	movs	r1, #0
 8003420:	2078      	movs	r0, #120	@ 0x78
 8003422:	f000 fa49 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003426:	22a8      	movs	r2, #168	@ 0xa8
 8003428:	2100      	movs	r1, #0
 800342a:	2078      	movs	r0, #120	@ 0x78
 800342c:	f000 fa44 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003430:	223f      	movs	r2, #63	@ 0x3f
 8003432:	2100      	movs	r1, #0
 8003434:	2078      	movs	r0, #120	@ 0x78
 8003436:	f000 fa3f 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800343a:	22a4      	movs	r2, #164	@ 0xa4
 800343c:	2100      	movs	r1, #0
 800343e:	2078      	movs	r0, #120	@ 0x78
 8003440:	f000 fa3a 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003444:	22d3      	movs	r2, #211	@ 0xd3
 8003446:	2100      	movs	r1, #0
 8003448:	2078      	movs	r0, #120	@ 0x78
 800344a:	f000 fa35 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800344e:	2200      	movs	r2, #0
 8003450:	2100      	movs	r1, #0
 8003452:	2078      	movs	r0, #120	@ 0x78
 8003454:	f000 fa30 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003458:	22d5      	movs	r2, #213	@ 0xd5
 800345a:	2100      	movs	r1, #0
 800345c:	2078      	movs	r0, #120	@ 0x78
 800345e:	f000 fa2b 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003462:	22f0      	movs	r2, #240	@ 0xf0
 8003464:	2100      	movs	r1, #0
 8003466:	2078      	movs	r0, #120	@ 0x78
 8003468:	f000 fa26 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800346c:	22d9      	movs	r2, #217	@ 0xd9
 800346e:	2100      	movs	r1, #0
 8003470:	2078      	movs	r0, #120	@ 0x78
 8003472:	f000 fa21 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003476:	2222      	movs	r2, #34	@ 0x22
 8003478:	2100      	movs	r1, #0
 800347a:	2078      	movs	r0, #120	@ 0x78
 800347c:	f000 fa1c 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003480:	22da      	movs	r2, #218	@ 0xda
 8003482:	2100      	movs	r1, #0
 8003484:	2078      	movs	r0, #120	@ 0x78
 8003486:	f000 fa17 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800348a:	2212      	movs	r2, #18
 800348c:	2100      	movs	r1, #0
 800348e:	2078      	movs	r0, #120	@ 0x78
 8003490:	f000 fa12 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003494:	22db      	movs	r2, #219	@ 0xdb
 8003496:	2100      	movs	r1, #0
 8003498:	2078      	movs	r0, #120	@ 0x78
 800349a:	f000 fa0d 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800349e:	2220      	movs	r2, #32
 80034a0:	2100      	movs	r1, #0
 80034a2:	2078      	movs	r0, #120	@ 0x78
 80034a4:	f000 fa08 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80034a8:	228d      	movs	r2, #141	@ 0x8d
 80034aa:	2100      	movs	r1, #0
 80034ac:	2078      	movs	r0, #120	@ 0x78
 80034ae:	f000 fa03 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80034b2:	2214      	movs	r2, #20
 80034b4:	2100      	movs	r1, #0
 80034b6:	2078      	movs	r0, #120	@ 0x78
 80034b8:	f000 f9fe 	bl	80038b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80034bc:	22af      	movs	r2, #175	@ 0xaf
 80034be:	2100      	movs	r1, #0
 80034c0:	2078      	movs	r0, #120	@ 0x78
 80034c2:	f000 f9f9 	bl	80038b8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80034c6:	222e      	movs	r2, #46	@ 0x2e
 80034c8:	2100      	movs	r1, #0
 80034ca:	2078      	movs	r0, #120	@ 0x78
 80034cc:	f000 f9f4 	bl	80038b8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f000 f843 	bl	800355c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80034d6:	f000 f813 	bl	8003500 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80034da:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <SSD1306_Init+0x184>)
 80034dc:	2200      	movs	r2, #0
 80034de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <SSD1306_Init+0x184>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <SSD1306_Init+0x184>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80034ec:	2301      	movs	r3, #1
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	2000029c 	.word	0x2000029c
 80034fc:	2000086c 	.word	0x2000086c

08003500 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003506:	2300      	movs	r3, #0
 8003508:	71fb      	strb	r3, [r7, #7]
 800350a:	e01d      	b.n	8003548 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	3b50      	subs	r3, #80	@ 0x50
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	2100      	movs	r1, #0
 8003516:	2078      	movs	r0, #120	@ 0x78
 8003518:	f000 f9ce 	bl	80038b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	2078      	movs	r0, #120	@ 0x78
 8003522:	f000 f9c9 	bl	80038b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003526:	2210      	movs	r2, #16
 8003528:	2100      	movs	r1, #0
 800352a:	2078      	movs	r0, #120	@ 0x78
 800352c:	f000 f9c4 	bl	80038b8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	01db      	lsls	r3, r3, #7
 8003534:	4a08      	ldr	r2, [pc, #32]	@ (8003558 <SSD1306_UpdateScreen+0x58>)
 8003536:	441a      	add	r2, r3
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	2140      	movs	r1, #64	@ 0x40
 800353c:	2078      	movs	r0, #120	@ 0x78
 800353e:	f000 f955 	bl	80037ec <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	3301      	adds	r3, #1
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	2b07      	cmp	r3, #7
 800354c:	d9de      	bls.n	800350c <SSD1306_UpdateScreen+0xc>
	}
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	2000046c 	.word	0x2000046c

0800355c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <SSD1306_Fill+0x14>
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <SSD1306_Fill+0x16>
 8003570:	23ff      	movs	r3, #255	@ 0xff
 8003572:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003576:	4619      	mov	r1, r3
 8003578:	4803      	ldr	r0, [pc, #12]	@ (8003588 <SSD1306_Fill+0x2c>)
 800357a:	f005 fb0b 	bl	8008b94 <memset>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	2000046c 	.word	0x2000046c

0800358c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	80fb      	strh	r3, [r7, #6]
 8003596:	460b      	mov	r3, r1
 8003598:	80bb      	strh	r3, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	70fb      	strb	r3, [r7, #3]
	if (
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80035a2:	d848      	bhi.n	8003636 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80035a4:	88bb      	ldrh	r3, [r7, #4]
 80035a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80035a8:	d845      	bhi.n	8003636 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80035aa:	4b26      	ldr	r3, [pc, #152]	@ (8003644 <SSD1306_DrawPixel+0xb8>)
 80035ac:	791b      	ldrb	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d11a      	bne.n	80035fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	88bb      	ldrh	r3, [r7, #4]
 80035ca:	08db      	lsrs	r3, r3, #3
 80035cc:	b298      	uxth	r0, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	01db      	lsls	r3, r3, #7
 80035d2:	4413      	add	r3, r2
 80035d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003648 <SSD1306_DrawPixel+0xbc>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	b25a      	sxtb	r2, r3
 80035da:	88bb      	ldrh	r3, [r7, #4]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	2101      	movs	r1, #1
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b259      	sxtb	r1, r3
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	4603      	mov	r3, r0
 80035f0:	01db      	lsls	r3, r3, #7
 80035f2:	4413      	add	r3, r2
 80035f4:	b2c9      	uxtb	r1, r1
 80035f6:	4a14      	ldr	r2, [pc, #80]	@ (8003648 <SSD1306_DrawPixel+0xbc>)
 80035f8:	54d1      	strb	r1, [r2, r3]
 80035fa:	e01d      	b.n	8003638 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	88bb      	ldrh	r3, [r7, #4]
 8003600:	08db      	lsrs	r3, r3, #3
 8003602:	b298      	uxth	r0, r3
 8003604:	4603      	mov	r3, r0
 8003606:	01db      	lsls	r3, r3, #7
 8003608:	4413      	add	r3, r2
 800360a:	4a0f      	ldr	r2, [pc, #60]	@ (8003648 <SSD1306_DrawPixel+0xbc>)
 800360c:	5cd3      	ldrb	r3, [r2, r3]
 800360e:	b25a      	sxtb	r2, r3
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	b25b      	sxtb	r3, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	b25b      	sxtb	r3, r3
 8003622:	4013      	ands	r3, r2
 8003624:	b259      	sxtb	r1, r3
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	4603      	mov	r3, r0
 800362a:	01db      	lsls	r3, r3, #7
 800362c:	4413      	add	r3, r2
 800362e:	b2c9      	uxtb	r1, r1
 8003630:	4a05      	ldr	r2, [pc, #20]	@ (8003648 <SSD1306_DrawPixel+0xbc>)
 8003632:	54d1      	strb	r1, [r2, r3]
 8003634:	e000      	b.n	8003638 <SSD1306_DrawPixel+0xac>
		return;
 8003636:	bf00      	nop
	}
}
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	2000086c 	.word	0x2000086c
 8003648:	2000046c 	.word	0x2000046c

0800364c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	460a      	mov	r2, r1
 8003656:	80fb      	strh	r3, [r7, #6]
 8003658:	4613      	mov	r3, r2
 800365a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800365c:	4a05      	ldr	r2, [pc, #20]	@ (8003674 <SSD1306_GotoXY+0x28>)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003662:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <SSD1306_GotoXY+0x28>)
 8003664:	88bb      	ldrh	r3, [r7, #4]
 8003666:	8053      	strh	r3, [r2, #2]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	2000086c 	.word	0x2000086c

08003678 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
 8003684:	4613      	mov	r3, r2
 8003686:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003688:	4b39      	ldr	r3, [pc, #228]	@ (8003770 <SSD1306_Putc+0xf8>)
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	4413      	add	r3, r2
	if (
 8003694:	2b7f      	cmp	r3, #127	@ 0x7f
 8003696:	dc07      	bgt.n	80036a8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003698:	4b35      	ldr	r3, [pc, #212]	@ (8003770 <SSD1306_Putc+0xf8>)
 800369a:	885b      	ldrh	r3, [r3, #2]
 800369c:	461a      	mov	r2, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80036a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80036a6:	dd01      	ble.n	80036ac <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e05d      	b.n	8003768 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e04b      	b.n	800374a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	3b20      	subs	r3, #32
 80036ba:	6839      	ldr	r1, [r7, #0]
 80036bc:	7849      	ldrb	r1, [r1, #1]
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4619      	mov	r1, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	440b      	add	r3, r1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	e030      	b.n	8003738 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80036e6:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <SSD1306_Putc+0xf8>)
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	b298      	uxth	r0, r3
 80036f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003770 <SSD1306_Putc+0xf8>)
 80036f4:	885a      	ldrh	r2, [r3, #2]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	79ba      	ldrb	r2, [r7, #6]
 8003700:	4619      	mov	r1, r3
 8003702:	f7ff ff43 	bl	800358c <SSD1306_DrawPixel>
 8003706:	e014      	b.n	8003732 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <SSD1306_Putc+0xf8>)
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4413      	add	r3, r2
 8003712:	b298      	uxth	r0, r3
 8003714:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <SSD1306_Putc+0xf8>)
 8003716:	885a      	ldrh	r2, [r3, #2]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	b29b      	uxth	r3, r3
 800371c:	4413      	add	r3, r2
 800371e:	b299      	uxth	r1, r3
 8003720:	79bb      	ldrb	r3, [r7, #6]
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	f7ff ff2d 	bl	800358c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	3301      	adds	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4293      	cmp	r3, r2
 8003742:	d3c8      	bcc.n	80036d6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	3301      	adds	r3, #1
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	785b      	ldrb	r3, [r3, #1]
 800374e:	461a      	mov	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4293      	cmp	r3, r2
 8003754:	d3ad      	bcc.n	80036b2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <SSD1306_Putc+0xf8>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	4413      	add	r3, r2
 8003760:	b29a      	uxth	r2, r3
 8003762:	4b03      	ldr	r3, [pc, #12]	@ (8003770 <SSD1306_Putc+0xf8>)
 8003764:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003766:	79fb      	ldrb	r3, [r7, #7]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	2000086c 	.word	0x2000086c

08003774 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003782:	e012      	b.n	80037aa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	79fa      	ldrb	r2, [r7, #7]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff73 	bl	8003678 <SSD1306_Putc>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d002      	beq.n	80037a4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	e008      	b.n	80037b6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e8      	bne.n	8003784 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	781b      	ldrb	r3, [r3, #0]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80037c6:	4b08      	ldr	r3, [pc, #32]	@ (80037e8 <ssd1306_I2C_Init+0x28>)
 80037c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037ca:	e002      	b.n	80037d2 <ssd1306_I2C_Init+0x12>
		p--;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f9      	bne.n	80037cc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	0003d090 	.word	0x0003d090

080037ec <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b0c7      	sub	sp, #284	@ 0x11c
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	4604      	mov	r4, r0
 80037f4:	4608      	mov	r0, r1
 80037f6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80037fa:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80037fe:	600a      	str	r2, [r1, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003806:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800380a:	4622      	mov	r2, r4
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003812:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003816:	4602      	mov	r2, r0
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800381e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003822:	460a      	mov	r2, r1
 8003824:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800382a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800382e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003832:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003840:	e015      	b.n	800386e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003842:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003846:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800384a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	441a      	add	r2, r3
 8003852:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003856:	3301      	adds	r3, #1
 8003858:	7811      	ldrb	r1, [r2, #0]
 800385a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800385e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003862:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003864:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003868:	3301      	adds	r3, #1
 800386a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800386e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003872:	b29b      	uxth	r3, r3
 8003874:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003878:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d8df      	bhi.n	8003842 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 8003882:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003886:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b299      	uxth	r1, r3
 800388e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003892:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	b29b      	uxth	r3, r3
 800389c:	f107 020c 	add.w	r2, r7, #12
 80038a0:	200a      	movs	r0, #10
 80038a2:	9000      	str	r0, [sp, #0]
 80038a4:	4803      	ldr	r0, [pc, #12]	@ (80038b4 <ssd1306_I2C_WriteMulti+0xc8>)
 80038a6:	f001 fb3b 	bl	8004f20 <HAL_I2C_Master_Transmit>
}
 80038aa:	bf00      	nop
 80038ac:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd90      	pop	{r4, r7, pc}
 80038b4:	2000029c 	.word	0x2000029c

080038b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
 80038c2:	460b      	mov	r3, r1
 80038c4:	71bb      	strb	r3, [r7, #6]
 80038c6:	4613      	mov	r3, r2
 80038c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80038ce:	797b      	ldrb	r3, [r7, #5]
 80038d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	b299      	uxth	r1, r3
 80038d6:	f107 020c 	add.w	r2, r7, #12
 80038da:	230a      	movs	r3, #10
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2302      	movs	r3, #2
 80038e0:	4803      	ldr	r0, [pc, #12]	@ (80038f0 <ssd1306_I2C_Write+0x38>)
 80038e2:	f001 fb1d 	bl	8004f20 <HAL_I2C_Master_Transmit>
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000029c 	.word	0x2000029c

080038f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <HAL_MspInit+0x4c>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	4a0f      	ldr	r2, [pc, #60]	@ (8003940 <HAL_MspInit+0x4c>)
 8003904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003908:	6453      	str	r3, [r2, #68]	@ 0x44
 800390a:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_MspInit+0x4c>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_MspInit+0x4c>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	4a08      	ldr	r2, [pc, #32]	@ (8003940 <HAL_MspInit+0x4c>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	@ 0x40
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_MspInit+0x4c>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003932:	2007      	movs	r0, #7
 8003934:	f000 ffde 	bl	80048f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800

08003944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	@ 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a17      	ldr	r2, [pc, #92]	@ (80039c0 <HAL_ADC_MspInit+0x7c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d127      	bne.n	80039b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	4b16      	ldr	r3, [pc, #88]	@ (80039c4 <HAL_ADC_MspInit+0x80>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	4a15      	ldr	r2, [pc, #84]	@ (80039c4 <HAL_ADC_MspInit+0x80>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003974:	6453      	str	r3, [r2, #68]	@ 0x44
 8003976:	4b13      	ldr	r3, [pc, #76]	@ (80039c4 <HAL_ADC_MspInit+0x80>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <HAL_ADC_MspInit+0x80>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	4a0e      	ldr	r2, [pc, #56]	@ (80039c4 <HAL_ADC_MspInit+0x80>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6313      	str	r3, [r2, #48]	@ 0x30
 8003992:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <HAL_ADC_MspInit+0x80>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800399e:	2313      	movs	r3, #19
 80039a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039a2:	2303      	movs	r3, #3
 80039a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039aa:	f107 0314 	add.w	r3, r7, #20
 80039ae:	4619      	mov	r1, r3
 80039b0:	4805      	ldr	r0, [pc, #20]	@ (80039c8 <HAL_ADC_MspInit+0x84>)
 80039b2:	f000 ffd3 	bl	800495c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80039b6:	bf00      	nop
 80039b8:	3728      	adds	r7, #40	@ 0x28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40012000 	.word	0x40012000
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40020000 	.word	0x40020000

080039cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	@ 0x30
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	f107 031c 	add.w	r3, r7, #28
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a42      	ldr	r2, [pc, #264]	@ (8003af4 <HAL_I2C_MspInit+0x128>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d12d      	bne.n	8003a4a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	4b41      	ldr	r3, [pc, #260]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	4a40      	ldr	r2, [pc, #256]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fe:	4b3e      	ldr	r3, [pc, #248]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a10:	2312      	movs	r3, #18
 8003a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	4619      	mov	r1, r3
 8003a26:	4835      	ldr	r0, [pc, #212]	@ (8003afc <HAL_I2C_MspInit+0x130>)
 8003a28:	f000 ff98 	bl	800495c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	4b31      	ldr	r3, [pc, #196]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	4a30      	ldr	r2, [pc, #192]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003a48:	e050      	b.n	8003aec <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b00 <HAL_I2C_MspInit+0x134>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d14b      	bne.n	8003aec <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	4b27      	ldr	r3, [pc, #156]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5c:	4a26      	ldr	r2, [pc, #152]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a64:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	4a1f      	ldr	r2, [pc, #124]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a80:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a92:	2312      	movs	r3, #18
 8003a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa2:	f107 031c 	add.w	r3, r7, #28
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4816      	ldr	r0, [pc, #88]	@ (8003b04 <HAL_I2C_MspInit+0x138>)
 8003aaa:	f000 ff57 	bl	800495c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ab4:	2312      	movs	r3, #18
 8003ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	4619      	mov	r1, r3
 8003aca:	480f      	ldr	r0, [pc, #60]	@ (8003b08 <HAL_I2C_MspInit+0x13c>)
 8003acc:	f000 ff46 	bl	800495c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	4a07      	ldr	r2, [pc, #28]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003ada:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_I2C_MspInit+0x12c>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]
}
 8003aec:	bf00      	nop
 8003aee:	3730      	adds	r7, #48	@ 0x30
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40005400 	.word	0x40005400
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40005c00 	.word	0x40005c00
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020000 	.word	0x40020000

08003b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <HAL_TIM_Base_MspInit+0x3c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10d      	bne.n	8003b3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <HAL_TIM_Base_MspInit+0x40>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	4a09      	ldr	r2, [pc, #36]	@ (8003b4c <HAL_TIM_Base_MspInit+0x40>)
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2e:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <HAL_TIM_Base_MspInit+0x40>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40023800 	.word	0x40023800

08003b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a12      	ldr	r2, [pc, #72]	@ (8003bb8 <HAL_TIM_MspPostInit+0x68>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d11d      	bne.n	8003bae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <HAL_TIM_MspPostInit+0x6c>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	4a10      	ldr	r2, [pc, #64]	@ (8003bbc <HAL_TIM_MspPostInit+0x6c>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b82:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <HAL_TIM_MspPostInit+0x6c>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	2302      	movs	r3, #2
 8003b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4805      	ldr	r0, [pc, #20]	@ (8003bc0 <HAL_TIM_MspPostInit+0x70>)
 8003baa:	f000 fed7 	bl	800495c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003bae:	bf00      	nop
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020000 	.word	0x40020000

08003bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	@ 0x28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <HAL_UART_MspInit+0x84>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d12b      	bne.n	8003c3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	4b18      	ldr	r3, [pc, #96]	@ (8003c4c <HAL_UART_MspInit+0x88>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	4a17      	ldr	r2, [pc, #92]	@ (8003c4c <HAL_UART_MspInit+0x88>)
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf6:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <HAL_UART_MspInit+0x88>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <HAL_UART_MspInit+0x88>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	4a10      	ldr	r2, [pc, #64]	@ (8003c4c <HAL_UART_MspInit+0x88>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c12:	4b0e      	ldr	r3, [pc, #56]	@ (8003c4c <HAL_UART_MspInit+0x88>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c1e:	230c      	movs	r3, #12
 8003c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c2e:	2307      	movs	r3, #7
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	4619      	mov	r1, r3
 8003c38:	4805      	ldr	r0, [pc, #20]	@ (8003c50 <HAL_UART_MspInit+0x8c>)
 8003c3a:	f000 fe8f 	bl	800495c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003c3e:	bf00      	nop
 8003c40:	3728      	adds	r7, #40	@ 0x28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40004400 	.word	0x40004400
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40020000 	.word	0x40020000

08003c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c58:	bf00      	nop
 8003c5a:	e7fd      	b.n	8003c58 <NMI_Handler+0x4>

08003c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <HardFault_Handler+0x4>

08003c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c68:	bf00      	nop
 8003c6a:	e7fd      	b.n	8003c68 <MemManage_Handler+0x4>

08003c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c70:	bf00      	nop
 8003c72:	e7fd      	b.n	8003c70 <BusFault_Handler+0x4>

08003c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <UsageFault_Handler+0x4>

08003c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003caa:	f000 f93b 	bl	8003f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  return 1;
 8003cb6:	2301      	movs	r3, #1
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <_kill>:

int _kill(int pid, int sig)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ccc:	f004 ffb4 	bl	8008c38 <__errno>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2216      	movs	r2, #22
 8003cd4:	601a      	str	r2, [r3, #0]
  return -1;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <_exit>:

void _exit (int status)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cea:	f04f 31ff 	mov.w	r1, #4294967295
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff ffe7 	bl	8003cc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <_exit+0x12>

08003cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e00a      	b.n	8003d20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d0a:	f3af 8000 	nop.w
 8003d0e:	4601      	mov	r1, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	60ba      	str	r2, [r7, #8]
 8003d16:	b2ca      	uxtb	r2, r1
 8003d18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	dbf0      	blt.n	8003d0a <_read+0x12>
  }

  return len;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <_isatty>:

int _isatty(int file)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d72:	2301      	movs	r3, #1
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da4:	4a14      	ldr	r2, [pc, #80]	@ (8003df8 <_sbrk+0x5c>)
 8003da6:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <_sbrk+0x60>)
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db0:	4b13      	ldr	r3, [pc, #76]	@ (8003e00 <_sbrk+0x64>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <_sbrk+0x64>)
 8003dba:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <_sbrk+0x68>)
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dbe:	4b10      	ldr	r3, [pc, #64]	@ (8003e00 <_sbrk+0x64>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d207      	bcs.n	8003ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dcc:	f004 ff34 	bl	8008c38 <__errno>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e009      	b.n	8003df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ddc:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003de2:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <_sbrk+0x64>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	4a05      	ldr	r2, [pc, #20]	@ (8003e00 <_sbrk+0x64>)
 8003dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20020000 	.word	0x20020000
 8003dfc:	00000400 	.word	0x00000400
 8003e00:	20000874 	.word	0x20000874
 8003e04:	200009c8 	.word	0x200009c8

08003e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <SystemInit+0x20>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e12:	4a05      	ldr	r2, [pc, #20]	@ (8003e28 <SystemInit+0x20>)
 8003e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e30:	f7ff ffea 	bl	8003e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e34:	480c      	ldr	r0, [pc, #48]	@ (8003e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e36:	490d      	ldr	r1, [pc, #52]	@ (8003e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e38:	4a0d      	ldr	r2, [pc, #52]	@ (8003e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e3c:	e002      	b.n	8003e44 <LoopCopyDataInit>

08003e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e42:	3304      	adds	r3, #4

08003e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e48:	d3f9      	bcc.n	8003e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e50:	e001      	b.n	8003e56 <LoopFillZerobss>

08003e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e54:	3204      	adds	r2, #4

08003e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e58:	d3fb      	bcc.n	8003e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e5a:	f004 fef3 	bl	8008c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e5e:	f7fe fd87 	bl	8002970 <main>
  bx  lr    
 8003e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e6c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003e70:	0800b760 	.word	0x0800b760
  ldr r2, =_sbss
 8003e74:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003e78:	200009c8 	.word	0x200009c8

08003e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e7c:	e7fe      	b.n	8003e7c <ADC_IRQHandler>
	...

08003e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <HAL_Init+0x40>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec0 <HAL_Init+0x40>)
 8003e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_Init+0x40>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec0 <HAL_Init+0x40>)
 8003e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <HAL_Init+0x40>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a07      	ldr	r2, [pc, #28]	@ (8003ec0 <HAL_Init+0x40>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ea8:	2003      	movs	r0, #3
 8003eaa:	f000 fd23 	bl	80048f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f000 f808 	bl	8003ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eb4:	f7ff fd1e 	bl	80038f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023c00 	.word	0x40023c00

08003ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ecc:	4b12      	ldr	r3, [pc, #72]	@ (8003f18 <HAL_InitTick+0x54>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_InitTick+0x58>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fd2d 	bl	8004942 <HAL_SYSTICK_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00e      	b.n	8003f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b0f      	cmp	r3, #15
 8003ef6:	d80a      	bhi.n	8003f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	f000 fd03 	bl	800490a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f04:	4a06      	ldr	r2, [pc, #24]	@ (8003f20 <HAL_InitTick+0x5c>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000010 	.word	0x20000010
 8003f1c:	20000018 	.word	0x20000018
 8003f20:	20000014 	.word	0x20000014

08003f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f28:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_IncTick+0x20>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_IncTick+0x24>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4413      	add	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	@ (8003f48 <HAL_IncTick+0x24>)
 8003f36:	6013      	str	r3, [r2, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000018 	.word	0x20000018
 8003f48:	20000878 	.word	0x20000878

08003f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <HAL_GetTick+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000878 	.word	0x20000878

08003f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f6c:	f7ff ffee 	bl	8003f4c <HAL_GetTick>
 8003f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d005      	beq.n	8003f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <HAL_Delay+0x44>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f8a:	bf00      	nop
 8003f8c:	f7ff ffde 	bl	8003f4c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d8f7      	bhi.n	8003f8c <HAL_Delay+0x28>
  {
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000018 	.word	0x20000018

08003fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e033      	b.n	800402a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fcba 	bl	8003944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ff2:	f023 0302 	bic.w	r3, r3, #2
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 faca 	bl	8004598 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	@ 0x40
 800401a:	e001      	b.n	8004020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_ADC_Start+0x1a>
 800404a:	2302      	movs	r3, #2
 800404c:	e097      	b.n	800417e <HAL_ADC_Start+0x14a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d018      	beq.n	8004096 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004074:	4b45      	ldr	r3, [pc, #276]	@ (800418c <HAL_ADC_Start+0x158>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a45      	ldr	r2, [pc, #276]	@ (8004190 <HAL_ADC_Start+0x15c>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0c9a      	lsrs	r2, r3, #18
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004088:	e002      	b.n	8004090 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	3b01      	subs	r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f9      	bne.n	800408a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d15f      	bne.n	8004164 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e2:	d106      	bne.n	80040f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e8:	f023 0206 	bic.w	r2, r3, #6
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80040f0:	e002      	b.n	80040f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004100:	4b24      	ldr	r3, [pc, #144]	@ (8004194 <HAL_ADC_Start+0x160>)
 8004102:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800410c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d129      	bne.n	800417c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	e020      	b.n	800417c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a16      	ldr	r2, [pc, #88]	@ (8004198 <HAL_ADC_Start+0x164>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d11b      	bne.n	800417c <HAL_ADC_Start+0x148>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d114      	bne.n	800417c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	e00b      	b.n	800417c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	f043 0210 	orr.w	r2, r3, #16
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004174:	f043 0201 	orr.w	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20000010 	.word	0x20000010
 8004190:	431bde83 	.word	0x431bde83
 8004194:	40012300 	.word	0x40012300
 8004198:	40012000 	.word	0x40012000

0800419c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_ADC_Stop+0x16>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e021      	b.n	80041f6 <HAL_ADC_Stop+0x5a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f043 0201 	orr.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421e:	d113      	bne.n	8004248 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800422a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422e:	d10b      	bne.n	8004248 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e063      	b.n	8004310 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004248:	f7ff fe80 	bl	8003f4c <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800424e:	e021      	b.n	8004294 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d01d      	beq.n	8004294 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_ADC_PollForConversion+0x6c>
 800425e:	f7ff fe75 	bl	8003f4c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d212      	bcs.n	8004294 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d00b      	beq.n	8004294 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	f043 0204 	orr.w	r2, r3, #4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e03d      	b.n	8004310 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d1d6      	bne.n	8004250 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f06f 0212 	mvn.w	r2, #18
 80042aa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d123      	bne.n	800430e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11f      	bne.n	800430e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d006      	beq.n	80042ea <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d111      	bne.n	800430e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d105      	bne.n	800430e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f043 0201 	orr.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x1c>
 800434c:	2302      	movs	r3, #2
 800434e:	e113      	b.n	8004578 <HAL_ADC_ConfigChannel+0x244>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b09      	cmp	r3, #9
 800435e:	d925      	bls.n	80043ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68d9      	ldr	r1, [r3, #12]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	3b1e      	subs	r3, #30
 8004376:	2207      	movs	r2, #7
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43da      	mvns	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	400a      	ands	r2, r1
 8004384:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68d9      	ldr	r1, [r3, #12]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	4618      	mov	r0, r3
 8004398:	4603      	mov	r3, r0
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4403      	add	r3, r0
 800439e:	3b1e      	subs	r3, #30
 80043a0:	409a      	lsls	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	e022      	b.n	80043f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6919      	ldr	r1, [r3, #16]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	4613      	mov	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	2207      	movs	r2, #7
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43da      	mvns	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	400a      	ands	r2, r1
 80043ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6919      	ldr	r1, [r3, #16]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	4618      	mov	r0, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4403      	add	r3, r0
 80043e8:	409a      	lsls	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d824      	bhi.n	8004444 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	3b05      	subs	r3, #5
 800440c:	221f      	movs	r2, #31
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43da      	mvns	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	400a      	ands	r2, r1
 800441a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	4618      	mov	r0, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	3b05      	subs	r3, #5
 8004436:	fa00 f203 	lsl.w	r2, r0, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	635a      	str	r2, [r3, #52]	@ 0x34
 8004442:	e04c      	b.n	80044de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d824      	bhi.n	8004496 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	3b23      	subs	r3, #35	@ 0x23
 800445e:	221f      	movs	r2, #31
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43da      	mvns	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	400a      	ands	r2, r1
 800446c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	4618      	mov	r0, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	3b23      	subs	r3, #35	@ 0x23
 8004488:	fa00 f203 	lsl.w	r2, r0, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
 8004494:	e023      	b.n	80044de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	3b41      	subs	r3, #65	@ 0x41
 80044a8:	221f      	movs	r2, #31
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43da      	mvns	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	400a      	ands	r2, r1
 80044b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	4618      	mov	r0, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	3b41      	subs	r3, #65	@ 0x41
 80044d2:	fa00 f203 	lsl.w	r2, r0, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044de:	4b29      	ldr	r3, [pc, #164]	@ (8004584 <HAL_ADC_ConfigChannel+0x250>)
 80044e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a28      	ldr	r2, [pc, #160]	@ (8004588 <HAL_ADC_ConfigChannel+0x254>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10f      	bne.n	800450c <HAL_ADC_ConfigChannel+0x1d8>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b12      	cmp	r3, #18
 80044f2:	d10b      	bne.n	800450c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <HAL_ADC_ConfigChannel+0x254>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d12b      	bne.n	800456e <HAL_ADC_ConfigChannel+0x23a>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <HAL_ADC_ConfigChannel+0x258>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <HAL_ADC_ConfigChannel+0x1f4>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b11      	cmp	r3, #17
 8004526:	d122      	bne.n	800456e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a11      	ldr	r2, [pc, #68]	@ (800458c <HAL_ADC_ConfigChannel+0x258>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d111      	bne.n	800456e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800454a:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <HAL_ADC_ConfigChannel+0x25c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a11      	ldr	r2, [pc, #68]	@ (8004594 <HAL_ADC_ConfigChannel+0x260>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	0c9a      	lsrs	r2, r3, #18
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004560:	e002      	b.n	8004568 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3b01      	subs	r3, #1
 8004566:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f9      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	40012300 	.word	0x40012300
 8004588:	40012000 	.word	0x40012000
 800458c:	10000012 	.word	0x10000012
 8004590:	20000010 	.word	0x20000010
 8004594:	431bde83 	.word	0x431bde83

08004598 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045a0:	4b79      	ldr	r3, [pc, #484]	@ (8004788 <ADC_Init+0x1f0>)
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	021a      	lsls	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80045f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6899      	ldr	r1, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	4a58      	ldr	r2, [pc, #352]	@ (800478c <ADC_Init+0x1f4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d022      	beq.n	8004676 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800463e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	e00f      	b.n	8004696 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004694:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0202 	bic.w	r2, r2, #2
 80046a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6899      	ldr	r1, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	7e1b      	ldrb	r3, [r3, #24]
 80046b0:	005a      	lsls	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80046e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	3b01      	subs	r3, #1
 80046f0:	035a      	lsls	r2, r3, #13
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	e007      	b.n	800470c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800470a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800471a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	3b01      	subs	r3, #1
 8004728:	051a      	lsls	r2, r3, #20
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800474e:	025a      	lsls	r2, r3, #9
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6899      	ldr	r1, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	029a      	lsls	r2, r3, #10
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	40012300 	.word	0x40012300
 800478c:	0f000001 	.word	0x0f000001

08004790 <__NVIC_SetPriorityGrouping>:
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a0:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <__NVIC_SetPriorityGrouping+0x44>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047ac:	4013      	ands	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047c2:	4a04      	ldr	r2, [pc, #16]	@ (80047d4 <__NVIC_SetPriorityGrouping+0x44>)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	60d3      	str	r3, [r2, #12]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_GetPriorityGrouping>:
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047dc:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <__NVIC_GetPriorityGrouping+0x18>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	0a1b      	lsrs	r3, r3, #8
 80047e2:	f003 0307 	and.w	r3, r3, #7
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <__NVIC_SetPriority>:
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004804:	2b00      	cmp	r3, #0
 8004806:	db0a      	blt.n	800481e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	490c      	ldr	r1, [pc, #48]	@ (8004840 <__NVIC_SetPriority+0x4c>)
 800480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004812:	0112      	lsls	r2, r2, #4
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	440b      	add	r3, r1
 8004818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800481c:	e00a      	b.n	8004834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	4908      	ldr	r1, [pc, #32]	@ (8004844 <__NVIC_SetPriority+0x50>)
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	3b04      	subs	r3, #4
 800482c:	0112      	lsls	r2, r2, #4
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	440b      	add	r3, r1
 8004832:	761a      	strb	r2, [r3, #24]
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000e100 	.word	0xe000e100
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <NVIC_EncodePriority>:
{
 8004848:	b480      	push	{r7}
 800484a:	b089      	sub	sp, #36	@ 0x24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f1c3 0307 	rsb	r3, r3, #7
 8004862:	2b04      	cmp	r3, #4
 8004864:	bf28      	it	cs
 8004866:	2304      	movcs	r3, #4
 8004868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3304      	adds	r3, #4
 800486e:	2b06      	cmp	r3, #6
 8004870:	d902      	bls.n	8004878 <NVIC_EncodePriority+0x30>
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3b03      	subs	r3, #3
 8004876:	e000      	b.n	800487a <NVIC_EncodePriority+0x32>
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800487c:	f04f 32ff 	mov.w	r2, #4294967295
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	401a      	ands	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004890:	f04f 31ff 	mov.w	r1, #4294967295
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fa01 f303 	lsl.w	r3, r1, r3
 800489a:	43d9      	mvns	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a0:	4313      	orrs	r3, r2
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3724      	adds	r7, #36	@ 0x24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <SysTick_Config>:
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c0:	d301      	bcc.n	80048c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80048c2:	2301      	movs	r3, #1
 80048c4:	e00f      	b.n	80048e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048c6:	4a0a      	ldr	r2, [pc, #40]	@ (80048f0 <SysTick_Config+0x40>)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ce:	210f      	movs	r1, #15
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	f7ff ff8e 	bl	80047f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048d8:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <SysTick_Config+0x40>)
 80048da:	2200      	movs	r2, #0
 80048dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048de:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <SysTick_Config+0x40>)
 80048e0:	2207      	movs	r2, #7
 80048e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	e000e010 	.word	0xe000e010

080048f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff47 	bl	8004790 <__NVIC_SetPriorityGrouping>
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	4603      	mov	r3, r0
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800491c:	f7ff ff5c 	bl	80047d8 <__NVIC_GetPriorityGrouping>
 8004920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	6978      	ldr	r0, [r7, #20]
 8004928:	f7ff ff8e 	bl	8004848 <NVIC_EncodePriority>
 800492c:	4602      	mov	r2, r0
 800492e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff ff5d 	bl	80047f4 <__NVIC_SetPriority>
}
 800493a:	bf00      	nop
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff ffb0 	bl	80048b0 <SysTick_Config>
 8004950:	4603      	mov	r3, r0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	@ 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e159      	b.n	8004c2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004978:	2201      	movs	r2, #1
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4013      	ands	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	429a      	cmp	r2, r3
 8004992:	f040 8148 	bne.w	8004c26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d005      	beq.n	80049ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d130      	bne.n	8004a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	2203      	movs	r2, #3
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049e4:	2201      	movs	r2, #1
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 0201 	and.w	r2, r3, #1
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d017      	beq.n	8004a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	2203      	movs	r2, #3
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4013      	ands	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d123      	bne.n	8004aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	08da      	lsrs	r2, r3, #3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3208      	adds	r2, #8
 8004a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	220f      	movs	r2, #15
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	08da      	lsrs	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3208      	adds	r2, #8
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	2203      	movs	r2, #3
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 0203 	and.w	r2, r3, #3
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a2 	beq.w	8004c26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	4b57      	ldr	r3, [pc, #348]	@ (8004c44 <HAL_GPIO_Init+0x2e8>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	4a56      	ldr	r2, [pc, #344]	@ (8004c44 <HAL_GPIO_Init+0x2e8>)
 8004aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004af2:	4b54      	ldr	r3, [pc, #336]	@ (8004c44 <HAL_GPIO_Init+0x2e8>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004afe:	4a52      	ldr	r2, [pc, #328]	@ (8004c48 <HAL_GPIO_Init+0x2ec>)
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	089b      	lsrs	r3, r3, #2
 8004b04:	3302      	adds	r3, #2
 8004b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	220f      	movs	r2, #15
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a49      	ldr	r2, [pc, #292]	@ (8004c4c <HAL_GPIO_Init+0x2f0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d019      	beq.n	8004b5e <HAL_GPIO_Init+0x202>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a48      	ldr	r2, [pc, #288]	@ (8004c50 <HAL_GPIO_Init+0x2f4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_GPIO_Init+0x1fe>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a47      	ldr	r2, [pc, #284]	@ (8004c54 <HAL_GPIO_Init+0x2f8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00d      	beq.n	8004b56 <HAL_GPIO_Init+0x1fa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a46      	ldr	r2, [pc, #280]	@ (8004c58 <HAL_GPIO_Init+0x2fc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <HAL_GPIO_Init+0x1f6>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a45      	ldr	r2, [pc, #276]	@ (8004c5c <HAL_GPIO_Init+0x300>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_GPIO_Init+0x1f2>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	e008      	b.n	8004b60 <HAL_GPIO_Init+0x204>
 8004b4e:	2307      	movs	r3, #7
 8004b50:	e006      	b.n	8004b60 <HAL_GPIO_Init+0x204>
 8004b52:	2303      	movs	r3, #3
 8004b54:	e004      	b.n	8004b60 <HAL_GPIO_Init+0x204>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e002      	b.n	8004b60 <HAL_GPIO_Init+0x204>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <HAL_GPIO_Init+0x204>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	f002 0203 	and.w	r2, r2, #3
 8004b66:	0092      	lsls	r2, r2, #2
 8004b68:	4093      	lsls	r3, r2
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b70:	4935      	ldr	r1, [pc, #212]	@ (8004c48 <HAL_GPIO_Init+0x2ec>)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	3302      	adds	r3, #2
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b7e:	4b38      	ldr	r3, [pc, #224]	@ (8004c60 <HAL_GPIO_Init+0x304>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c60 <HAL_GPIO_Init+0x304>)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <HAL_GPIO_Init+0x304>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bcc:	4a24      	ldr	r2, [pc, #144]	@ (8004c60 <HAL_GPIO_Init+0x304>)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bd2:	4b23      	ldr	r3, [pc, #140]	@ (8004c60 <HAL_GPIO_Init+0x304>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4013      	ands	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c60 <HAL_GPIO_Init+0x304>)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bfc:	4b18      	ldr	r3, [pc, #96]	@ (8004c60 <HAL_GPIO_Init+0x304>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c20:	4a0f      	ldr	r2, [pc, #60]	@ (8004c60 <HAL_GPIO_Init+0x304>)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b0f      	cmp	r3, #15
 8004c30:	f67f aea2 	bls.w	8004978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	3724      	adds	r7, #36	@ 0x24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40013800 	.word	0x40013800
 8004c4c:	40020000 	.word	0x40020000
 8004c50:	40020400 	.word	0x40020400
 8004c54:	40020800 	.word	0x40020800
 8004c58:	40020c00 	.word	0x40020c00
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40013c00 	.word	0x40013c00

08004c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
 8004c70:	4613      	mov	r3, r2
 8004c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c74:	787b      	ldrb	r3, [r7, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c80:	e003      	b.n	8004c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e12b      	b.n	8004f02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fe fe84 	bl	80039cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	@ 0x24
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f001 fef4 	bl	8006ae8 <HAL_RCC_GetPCLK1Freq>
 8004d00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4a81      	ldr	r2, [pc, #516]	@ (8004f0c <HAL_I2C_Init+0x274>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d807      	bhi.n	8004d1c <HAL_I2C_Init+0x84>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a80      	ldr	r2, [pc, #512]	@ (8004f10 <HAL_I2C_Init+0x278>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	bf94      	ite	ls
 8004d14:	2301      	movls	r3, #1
 8004d16:	2300      	movhi	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e006      	b.n	8004d2a <HAL_I2C_Init+0x92>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f14 <HAL_I2C_Init+0x27c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	bf94      	ite	ls
 8004d24:	2301      	movls	r3, #1
 8004d26:	2300      	movhi	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0e7      	b.n	8004f02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4a78      	ldr	r2, [pc, #480]	@ (8004f18 <HAL_I2C_Init+0x280>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	0c9b      	lsrs	r3, r3, #18
 8004d3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a6a      	ldr	r2, [pc, #424]	@ (8004f0c <HAL_I2C_Init+0x274>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d802      	bhi.n	8004d6c <HAL_I2C_Init+0xd4>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	e009      	b.n	8004d80 <HAL_I2C_Init+0xe8>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	4a69      	ldr	r2, [pc, #420]	@ (8004f1c <HAL_I2C_Init+0x284>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	099b      	lsrs	r3, r3, #6
 8004d7e:	3301      	adds	r3, #1
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	495c      	ldr	r1, [pc, #368]	@ (8004f0c <HAL_I2C_Init+0x274>)
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	d819      	bhi.n	8004dd4 <HAL_I2C_Init+0x13c>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1e59      	subs	r1, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dae:	1c59      	adds	r1, r3, #1
 8004db0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004db4:	400b      	ands	r3, r1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_I2C_Init+0x138>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1e59      	subs	r1, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dc8:	3301      	adds	r3, #1
 8004dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dce:	e051      	b.n	8004e74 <HAL_I2C_Init+0x1dc>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	e04f      	b.n	8004e74 <HAL_I2C_Init+0x1dc>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d111      	bne.n	8004e00 <HAL_I2C_Init+0x168>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1e58      	subs	r0, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	440b      	add	r3, r1
 8004dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dee:	3301      	adds	r3, #1
 8004df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	e012      	b.n	8004e26 <HAL_I2C_Init+0x18e>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1e58      	subs	r0, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	0099      	lsls	r1, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e16:	3301      	adds	r3, #1
 8004e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_Init+0x196>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e022      	b.n	8004e74 <HAL_I2C_Init+0x1dc>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10e      	bne.n	8004e54 <HAL_I2C_Init+0x1bc>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1e58      	subs	r0, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6859      	ldr	r1, [r3, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	440b      	add	r3, r1
 8004e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e52:	e00f      	b.n	8004e74 <HAL_I2C_Init+0x1dc>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1e58      	subs	r0, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6859      	ldr	r1, [r3, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	0099      	lsls	r1, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	6809      	ldr	r1, [r1, #0]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ea2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6911      	ldr	r1, [r2, #16]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68d2      	ldr	r2, [r2, #12]
 8004eae:	4311      	orrs	r1, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	000186a0 	.word	0x000186a0
 8004f10:	001e847f 	.word	0x001e847f
 8004f14:	003d08ff 	.word	0x003d08ff
 8004f18:	431bde83 	.word	0x431bde83
 8004f1c:	10624dd3 	.word	0x10624dd3

08004f20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	607a      	str	r2, [r7, #4]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	817b      	strh	r3, [r7, #10]
 8004f30:	4613      	mov	r3, r2
 8004f32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f34:	f7ff f80a 	bl	8003f4c <HAL_GetTick>
 8004f38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	f040 80e0 	bne.w	8005108 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2319      	movs	r3, #25
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4970      	ldr	r1, [pc, #448]	@ (8005114 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 ff22 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e0d3      	b.n	800510a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_I2C_Master_Transmit+0x50>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e0cc      	b.n	800510a <HAL_I2C_Master_Transmit+0x1ea>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d007      	beq.n	8004f96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2221      	movs	r2, #33	@ 0x21
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	893a      	ldrh	r2, [r7, #8]
 8004fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a50      	ldr	r2, [pc, #320]	@ (8005118 <HAL_I2C_Master_Transmit+0x1f8>)
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fd8:	8979      	ldrh	r1, [r7, #10]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fcf6 	bl	80059d0 <I2C_MasterRequestWrite>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e08d      	b.n	800510a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005004:	e066      	b.n	80050d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	6a39      	ldr	r1, [r7, #32]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 ffe0 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	2b04      	cmp	r3, #4
 800501c:	d107      	bne.n	800502e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800502c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e06b      	b.n	800510a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	781a      	ldrb	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b04      	cmp	r3, #4
 800506e:	d11b      	bne.n	80050a8 <HAL_I2C_Master_Transmit+0x188>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	6a39      	ldr	r1, [r7, #32]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 ffd7 	bl	8006060 <I2C_WaitOnBTFFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d107      	bne.n	80050d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e01a      	b.n	800510a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d194      	bne.n	8005006 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	00100002 	.word	0x00100002
 8005118:	ffff0000 	.word	0xffff0000

0800511c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08c      	sub	sp, #48	@ 0x30
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	461a      	mov	r2, r3
 8005128:	460b      	mov	r3, r1
 800512a:	817b      	strh	r3, [r7, #10]
 800512c:	4613      	mov	r3, r2
 800512e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005130:	f7fe ff0c 	bl	8003f4c <HAL_GetTick>
 8005134:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b20      	cmp	r3, #32
 8005140:	f040 8217 	bne.w	8005572 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	2319      	movs	r3, #25
 800514a:	2201      	movs	r2, #1
 800514c:	497c      	ldr	r1, [pc, #496]	@ (8005340 <HAL_I2C_Master_Receive+0x224>)
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fe24 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800515a:	2302      	movs	r3, #2
 800515c:	e20a      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_I2C_Master_Receive+0x50>
 8005168:	2302      	movs	r3, #2
 800516a:	e203      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d007      	beq.n	8005192 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0201 	orr.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2222      	movs	r2, #34	@ 0x22
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2210      	movs	r2, #16
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	893a      	ldrh	r2, [r7, #8]
 80051c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a5c      	ldr	r2, [pc, #368]	@ (8005344 <HAL_I2C_Master_Receive+0x228>)
 80051d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051d4:	8979      	ldrh	r1, [r7, #10]
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fc7a 	bl	8005ad4 <I2C_MasterRequestRead>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e1c4      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d113      	bne.n	800521a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f2:	2300      	movs	r3, #0
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e198      	b.n	800554c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521e:	2b01      	cmp	r3, #1
 8005220:	d11b      	bne.n	800525a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e178      	b.n	800554c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525e:	2b02      	cmp	r3, #2
 8005260:	d11b      	bne.n	800529a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005282:	2300      	movs	r3, #0
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	e158      	b.n	800554c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052c0:	e144      	b.n	800554c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	f200 80f1 	bhi.w	80054ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d123      	bne.n	800531c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 ff09 	bl	80060f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e145      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800531a:	e117      	b.n	800554c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005320:	2b02      	cmp	r3, #2
 8005322:	d14e      	bne.n	80053c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	2200      	movs	r2, #0
 800532c:	4906      	ldr	r1, [pc, #24]	@ (8005348 <HAL_I2C_Master_Receive+0x22c>)
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 fd34 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d008      	beq.n	800534c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e11a      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
 800533e:	bf00      	nop
 8005340:	00100002 	.word	0x00100002
 8005344:	ffff0000 	.word	0xffff0000
 8005348:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800535a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053c0:	e0c4      	b.n	800554c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	496c      	ldr	r1, [pc, #432]	@ (800557c <HAL_I2C_Master_Receive+0x460>)
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fce5 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e0cb      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	2200      	movs	r2, #0
 8005426:	4955      	ldr	r1, [pc, #340]	@ (800557c <HAL_I2C_Master_Receive+0x460>)
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fcb7 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e09d      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054ac:	e04e      	b.n	800554c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 fe1c 	bl	80060f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e058      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d124      	bne.n	800554c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005506:	2b03      	cmp	r3, #3
 8005508:	d107      	bne.n	800551a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005518:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	f47f aeb6 	bne.w	80052c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
  }
}
 8005574:	4618      	mov	r0, r3
 8005576:	3728      	adds	r7, #40	@ 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	00010004 	.word	0x00010004

08005580 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	461a      	mov	r2, r3
 800558e:	4603      	mov	r3, r0
 8005590:	817b      	strh	r3, [r7, #10]
 8005592:	460b      	mov	r3, r1
 8005594:	813b      	strh	r3, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800559a:	f7fe fcd7 	bl	8003f4c <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	f040 80d9 	bne.w	8005760 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2319      	movs	r3, #25
 80055b4:	2201      	movs	r2, #1
 80055b6:	496d      	ldr	r1, [pc, #436]	@ (800576c <HAL_I2C_Mem_Write+0x1ec>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fbef 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
 80055c6:	e0cc      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2C_Mem_Write+0x56>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e0c5      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d007      	beq.n	80055fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800560a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2221      	movs	r2, #33	@ 0x21
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2240      	movs	r2, #64	@ 0x40
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800562c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a4d      	ldr	r2, [pc, #308]	@ (8005770 <HAL_I2C_Mem_Write+0x1f0>)
 800563c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800563e:	88f8      	ldrh	r0, [r7, #6]
 8005640:	893a      	ldrh	r2, [r7, #8]
 8005642:	8979      	ldrh	r1, [r7, #10]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4603      	mov	r3, r0
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fb0e 	bl	8005c70 <I2C_RequestMemoryWrite>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d052      	beq.n	8005700 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e081      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fcb4 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00d      	beq.n	800568a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	2b04      	cmp	r3, #4
 8005674:	d107      	bne.n	8005686 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e06b      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d11b      	bne.n	8005700 <HAL_I2C_Mem_Write+0x180>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d017      	beq.n	8005700 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1aa      	bne.n	800565e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fca7 	bl	8006060 <I2C_WaitOnBTFFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	2b04      	cmp	r3, #4
 800571e:	d107      	bne.n	8005730 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800572e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e016      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	00100002 	.word	0x00100002
 8005770:	ffff0000 	.word	0xffff0000

08005774 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	@ 0x28
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	460b      	mov	r3, r1
 8005782:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005784:	f7fe fbe2 	bl	8003f4c <HAL_GetTick>
 8005788:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b20      	cmp	r3, #32
 8005798:	f040 8111 	bne.w	80059be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	2319      	movs	r3, #25
 80057a2:	2201      	movs	r2, #1
 80057a4:	4988      	ldr	r1, [pc, #544]	@ (80059c8 <HAL_I2C_IsDeviceReady+0x254>)
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 faf8 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
 80057b4:	e104      	b.n	80059c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_I2C_IsDeviceReady+0x50>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0fd      	b.n	80059c0 <HAL_I2C_IsDeviceReady+0x24c>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d007      	beq.n	80057ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2224      	movs	r2, #36	@ 0x24
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a70      	ldr	r2, [pc, #448]	@ (80059cc <HAL_I2C_IsDeviceReady+0x258>)
 800580c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800581c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2200      	movs	r2, #0
 8005826:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fab6 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005844:	d103      	bne.n	800584e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800584c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e0b6      	b.n	80059c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005852:	897b      	ldrh	r3, [r7, #10]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005860:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005862:	f7fe fb73 	bl	8003f4c <HAL_GetTick>
 8005866:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b02      	cmp	r3, #2
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005896:	e025      	b.n	80058e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005898:	f7fe fb58 	bl	8003f4c <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <HAL_I2C_IsDeviceReady+0x13a>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	22a0      	movs	r2, #160	@ 0xa0
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80058ee:	d005      	beq.n	80058fc <HAL_I2C_IsDeviceReady+0x188>
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_I2C_IsDeviceReady+0x188>
 80058f6:	7dbb      	ldrb	r3, [r7, #22]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0cd      	beq.n	8005898 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d129      	bne.n	8005966 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005920:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2319      	movs	r3, #25
 800593e:	2201      	movs	r2, #1
 8005940:	4921      	ldr	r1, [pc, #132]	@ (80059c8 <HAL_I2C_IsDeviceReady+0x254>)
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fa2a 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e036      	b.n	80059c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e02c      	b.n	80059c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005974:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800597e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	2319      	movs	r3, #25
 8005986:	2201      	movs	r2, #1
 8005988:	490f      	ldr	r1, [pc, #60]	@ (80059c8 <HAL_I2C_IsDeviceReady+0x254>)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fa06 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e012      	b.n	80059c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	3301      	adds	r3, #1
 800599e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	f4ff af32 	bcc.w	800580e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	00100002 	.word	0x00100002
 80059cc:	ffff0000 	.word	0xffff0000

080059d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	460b      	mov	r3, r1
 80059de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d006      	beq.n	80059fa <I2C_MasterRequestWrite+0x2a>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d003      	beq.n	80059fa <I2C_MasterRequestWrite+0x2a>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059f8:	d108      	bne.n	8005a0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e00b      	b.n	8005a24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a10:	2b12      	cmp	r3, #18
 8005a12:	d107      	bne.n	8005a24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f9b3 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00d      	beq.n	8005a58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a4a:	d103      	bne.n	8005a54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e035      	b.n	8005ac4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a60:	d108      	bne.n	8005a74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a70:	611a      	str	r2, [r3, #16]
 8005a72:	e01b      	b.n	8005aac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a74:	897b      	ldrh	r3, [r7, #10]
 8005a76:	11db      	asrs	r3, r3, #7
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f003 0306 	and.w	r3, r3, #6
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f063 030f 	orn	r3, r3, #15
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	490e      	ldr	r1, [pc, #56]	@ (8005acc <I2C_MasterRequestWrite+0xfc>)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f9fc 	bl	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e010      	b.n	8005ac4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005aa2:	897b      	ldrh	r3, [r7, #10]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4907      	ldr	r1, [pc, #28]	@ (8005ad0 <I2C_MasterRequestWrite+0x100>)
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f9ec 	bl	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	00010008 	.word	0x00010008
 8005ad0:	00010002 	.word	0x00010002

08005ad4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005af8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d006      	beq.n	8005b0e <I2C_MasterRequestRead+0x3a>
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d003      	beq.n	8005b0e <I2C_MasterRequestRead+0x3a>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b0c:	d108      	bne.n	8005b20 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e00b      	b.n	8005b38 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b24:	2b11      	cmp	r3, #17
 8005b26:	d107      	bne.n	8005b38 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f929 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00d      	beq.n	8005b6c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b5e:	d103      	bne.n	8005b68 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e079      	b.n	8005c60 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b74:	d108      	bne.n	8005b88 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	611a      	str	r2, [r3, #16]
 8005b86:	e05f      	b.n	8005c48 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b88:	897b      	ldrh	r3, [r7, #10]
 8005b8a:	11db      	asrs	r3, r3, #7
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 0306 	and.w	r3, r3, #6
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f063 030f 	orn	r3, r3, #15
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4930      	ldr	r1, [pc, #192]	@ (8005c68 <I2C_MasterRequestRead+0x194>)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f972 	bl	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e054      	b.n	8005c60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bb6:	897b      	ldrh	r3, [r7, #10]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	4929      	ldr	r1, [pc, #164]	@ (8005c6c <I2C_MasterRequestRead+0x198>)
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f962 	bl	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e044      	b.n	8005c60 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bfa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f8c7 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c22:	d103      	bne.n	8005c2c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e017      	b.n	8005c60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c30:	897b      	ldrh	r3, [r7, #10]
 8005c32:	11db      	asrs	r3, r3, #7
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 0306 	and.w	r3, r3, #6
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f063 030e 	orn	r3, r3, #14
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4907      	ldr	r1, [pc, #28]	@ (8005c6c <I2C_MasterRequestRead+0x198>)
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f91e 	bl	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	00010008 	.word	0x00010008
 8005c6c:	00010002 	.word	0x00010002

08005c70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	4608      	mov	r0, r1
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	817b      	strh	r3, [r7, #10]
 8005c82:	460b      	mov	r3, r1
 8005c84:	813b      	strh	r3, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f878 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00d      	beq.n	8005cce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc0:	d103      	bne.n	8005cca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e05f      	b.n	8005d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cce:	897b      	ldrh	r3, [r7, #10]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	492d      	ldr	r1, [pc, #180]	@ (8005d98 <I2C_RequestMemoryWrite+0x128>)
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f8d3 	bl	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e04c      	b.n	8005d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0c:	6a39      	ldr	r1, [r7, #32]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f95e 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d107      	bne.n	8005d32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e02b      	b.n	8005d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d105      	bne.n	8005d48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d3c:	893b      	ldrh	r3, [r7, #8]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	611a      	str	r2, [r3, #16]
 8005d46:	e021      	b.n	8005d8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d48:	893b      	ldrh	r3, [r7, #8]
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d58:	6a39      	ldr	r1, [r7, #32]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f938 	bl	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d107      	bne.n	8005d7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e005      	b.n	8005d8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d82:	893b      	ldrh	r3, [r7, #8]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	00010002 	.word	0x00010002

08005d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dac:	e048      	b.n	8005e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d044      	beq.n	8005e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db6:	f7fe f8c9 	bl	8003f4c <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d139      	bne.n	8005e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10d      	bne.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	43da      	mvns	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4013      	ands	r3, r2
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	e00c      	b.n	8005e0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	43da      	mvns	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d116      	bne.n	8005e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e023      	b.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10d      	bne.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	43da      	mvns	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	4013      	ands	r3, r2
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2301      	moveq	r3, #1
 8005e5e:	2300      	movne	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	e00c      	b.n	8005e80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	43da      	mvns	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4013      	ands	r3, r2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d093      	beq.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e9e:	e071      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eae:	d123      	bne.n	8005ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ebe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee4:	f043 0204 	orr.w	r2, r3, #4
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e067      	b.n	8005fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efe:	d041      	beq.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f00:	f7fe f824 	bl	8003f4c <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d302      	bcc.n	8005f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d136      	bne.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10c      	bne.n	8005f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	43da      	mvns	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bf14      	ite	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	2300      	moveq	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	e00b      	b.n	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	43da      	mvns	r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e021      	b.n	8005fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d10c      	bne.n	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	43da      	mvns	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf14      	ite	ne
 8005fa0:	2301      	movne	r3, #1
 8005fa2:	2300      	moveq	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	e00b      	b.n	8005fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	43da      	mvns	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bf14      	ite	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	2300      	moveq	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f47f af6d 	bne.w	8005ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fdc:	e034      	b.n	8006048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f8e3 	bl	80061aa <I2C_IsAcknowledgeFailed>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e034      	b.n	8006058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d028      	beq.n	8006048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff6:	f7fd ffa9 	bl	8003f4c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11d      	bne.n	8006048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006016:	2b80      	cmp	r3, #128	@ 0x80
 8006018:	d016      	beq.n	8006048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	f043 0220 	orr.w	r2, r3, #32
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e007      	b.n	8006058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006052:	2b80      	cmp	r3, #128	@ 0x80
 8006054:	d1c3      	bne.n	8005fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800606c:	e034      	b.n	80060d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 f89b 	bl	80061aa <I2C_IsAcknowledgeFailed>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e034      	b.n	80060e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d028      	beq.n	80060d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006086:	f7fd ff61 	bl	8003f4c <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11d      	bne.n	80060d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d016      	beq.n	80060d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c4:	f043 0220 	orr.w	r2, r3, #32
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e007      	b.n	80060e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d1c3      	bne.n	800606e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060fc:	e049      	b.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b10      	cmp	r3, #16
 800610a:	d119      	bne.n	8006140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0210 	mvn.w	r2, #16
 8006114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e030      	b.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006140:	f7fd ff04 	bl	8003f4c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	d302      	bcc.n	8006156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d11d      	bne.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b40      	cmp	r3, #64	@ 0x40
 8006162:	d016      	beq.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	f043 0220 	orr.w	r2, r3, #32
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e007      	b.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619c:	2b40      	cmp	r3, #64	@ 0x40
 800619e:	d1ae      	bne.n	80060fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c0:	d11b      	bne.n	80061fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	f043 0204 	orr.w	r2, r3, #4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e267      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d075      	beq.n	8006312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006226:	4b88      	ldr	r3, [pc, #544]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	2b04      	cmp	r3, #4
 8006230:	d00c      	beq.n	800624c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006232:	4b85      	ldr	r3, [pc, #532]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800623a:	2b08      	cmp	r3, #8
 800623c:	d112      	bne.n	8006264 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800623e:	4b82      	ldr	r3, [pc, #520]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800624a:	d10b      	bne.n	8006264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800624c:	4b7e      	ldr	r3, [pc, #504]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d05b      	beq.n	8006310 <HAL_RCC_OscConfig+0x108>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d157      	bne.n	8006310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e242      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d106      	bne.n	800627c <HAL_RCC_OscConfig+0x74>
 800626e:	4b76      	ldr	r3, [pc, #472]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a75      	ldr	r2, [pc, #468]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e01d      	b.n	80062b8 <HAL_RCC_OscConfig+0xb0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006284:	d10c      	bne.n	80062a0 <HAL_RCC_OscConfig+0x98>
 8006286:	4b70      	ldr	r3, [pc, #448]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a6f      	ldr	r2, [pc, #444]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800628c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	4b6d      	ldr	r3, [pc, #436]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a6c      	ldr	r2, [pc, #432]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e00b      	b.n	80062b8 <HAL_RCC_OscConfig+0xb0>
 80062a0:	4b69      	ldr	r3, [pc, #420]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a68      	ldr	r2, [pc, #416]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	4b66      	ldr	r3, [pc, #408]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a65      	ldr	r2, [pc, #404]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d013      	beq.n	80062e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7fd fe44 	bl	8003f4c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c8:	f7fd fe40 	bl	8003f4c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	@ 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e207      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	4b5b      	ldr	r3, [pc, #364]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0xc0>
 80062e6:	e014      	b.n	8006312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e8:	f7fd fe30 	bl	8003f4c <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062f0:	f7fd fe2c 	bl	8003f4c <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b64      	cmp	r3, #100	@ 0x64
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e1f3      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006302:	4b51      	ldr	r3, [pc, #324]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f0      	bne.n	80062f0 <HAL_RCC_OscConfig+0xe8>
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d063      	beq.n	80063e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800631e:	4b4a      	ldr	r3, [pc, #296]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632a:	4b47      	ldr	r3, [pc, #284]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006332:	2b08      	cmp	r3, #8
 8006334:	d11c      	bne.n	8006370 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006336:	4b44      	ldr	r3, [pc, #272]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d116      	bne.n	8006370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006342:	4b41      	ldr	r3, [pc, #260]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_RCC_OscConfig+0x152>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d001      	beq.n	800635a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e1c7      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635a:	4b3b      	ldr	r3, [pc, #236]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4937      	ldr	r1, [pc, #220]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800636a:	4313      	orrs	r3, r2
 800636c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636e:	e03a      	b.n	80063e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d020      	beq.n	80063ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006378:	4b34      	ldr	r3, [pc, #208]	@ (800644c <HAL_RCC_OscConfig+0x244>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fd fde5 	bl	8003f4c <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006386:	f7fd fde1 	bl	8003f4c <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e1a8      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006398:	4b2b      	ldr	r3, [pc, #172]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a4:	4b28      	ldr	r3, [pc, #160]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4925      	ldr	r1, [pc, #148]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]
 80063b8:	e015      	b.n	80063e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ba:	4b24      	ldr	r3, [pc, #144]	@ (800644c <HAL_RCC_OscConfig+0x244>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c0:	f7fd fdc4 	bl	8003f4c <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c8:	f7fd fdc0 	bl	8003f4c <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e187      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063da:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f0      	bne.n	80063c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d036      	beq.n	8006460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d016      	beq.n	8006428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063fa:	4b15      	ldr	r3, [pc, #84]	@ (8006450 <HAL_RCC_OscConfig+0x248>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006400:	f7fd fda4 	bl	8003f4c <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006408:	f7fd fda0 	bl	8003f4c <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e167      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641a:	4b0b      	ldr	r3, [pc, #44]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800641c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0x200>
 8006426:	e01b      	b.n	8006460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006428:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <HAL_RCC_OscConfig+0x248>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642e:	f7fd fd8d 	bl	8003f4c <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006434:	e00e      	b.n	8006454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006436:	f7fd fd89 	bl	8003f4c <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d907      	bls.n	8006454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e150      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
 8006448:	40023800 	.word	0x40023800
 800644c:	42470000 	.word	0x42470000
 8006450:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006454:	4b88      	ldr	r3, [pc, #544]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ea      	bne.n	8006436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8097 	beq.w	800659c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006472:	4b81      	ldr	r3, [pc, #516]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	4b7d      	ldr	r3, [pc, #500]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	4a7c      	ldr	r2, [pc, #496]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800648c:	6413      	str	r3, [r2, #64]	@ 0x40
 800648e:	4b7a      	ldr	r3, [pc, #488]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649e:	4b77      	ldr	r3, [pc, #476]	@ (800667c <HAL_RCC_OscConfig+0x474>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d118      	bne.n	80064dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064aa:	4b74      	ldr	r3, [pc, #464]	@ (800667c <HAL_RCC_OscConfig+0x474>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a73      	ldr	r2, [pc, #460]	@ (800667c <HAL_RCC_OscConfig+0x474>)
 80064b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064b6:	f7fd fd49 	bl	8003f4c <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064be:	f7fd fd45 	bl	8003f4c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e10c      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d0:	4b6a      	ldr	r3, [pc, #424]	@ (800667c <HAL_RCC_OscConfig+0x474>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f0      	beq.n	80064be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d106      	bne.n	80064f2 <HAL_RCC_OscConfig+0x2ea>
 80064e4:	4b64      	ldr	r3, [pc, #400]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e8:	4a63      	ldr	r2, [pc, #396]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f0:	e01c      	b.n	800652c <HAL_RCC_OscConfig+0x324>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	d10c      	bne.n	8006514 <HAL_RCC_OscConfig+0x30c>
 80064fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006500:	f043 0304 	orr.w	r3, r3, #4
 8006504:	6713      	str	r3, [r2, #112]	@ 0x70
 8006506:	4b5c      	ldr	r3, [pc, #368]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650a:	4a5b      	ldr	r2, [pc, #364]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	6713      	str	r3, [r2, #112]	@ 0x70
 8006512:	e00b      	b.n	800652c <HAL_RCC_OscConfig+0x324>
 8006514:	4b58      	ldr	r3, [pc, #352]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006518:	4a57      	ldr	r2, [pc, #348]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 800651a:	f023 0301 	bic.w	r3, r3, #1
 800651e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006520:	4b55      	ldr	r3, [pc, #340]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006524:	4a54      	ldr	r2, [pc, #336]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006526:	f023 0304 	bic.w	r3, r3, #4
 800652a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d015      	beq.n	8006560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006534:	f7fd fd0a 	bl	8003f4c <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653a:	e00a      	b.n	8006552 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653c:	f7fd fd06 	bl	8003f4c <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e0cb      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006552:	4b49      	ldr	r3, [pc, #292]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ee      	beq.n	800653c <HAL_RCC_OscConfig+0x334>
 800655e:	e014      	b.n	800658a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006560:	f7fd fcf4 	bl	8003f4c <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006566:	e00a      	b.n	800657e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006568:	f7fd fcf0 	bl	8003f4c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e0b5      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657e:	4b3e      	ldr	r3, [pc, #248]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1ee      	bne.n	8006568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d105      	bne.n	800659c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006590:	4b39      	ldr	r3, [pc, #228]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006594:	4a38      	ldr	r2, [pc, #224]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800659a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80a1 	beq.w	80066e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065a6:	4b34      	ldr	r3, [pc, #208]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 030c 	and.w	r3, r3, #12
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d05c      	beq.n	800666c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d141      	bne.n	800663e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ba:	4b31      	ldr	r3, [pc, #196]	@ (8006680 <HAL_RCC_OscConfig+0x478>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c0:	f7fd fcc4 	bl	8003f4c <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c8:	f7fd fcc0 	bl	8003f4c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e087      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065da:	4b27      	ldr	r3, [pc, #156]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69da      	ldr	r2, [r3, #28]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f4:	019b      	lsls	r3, r3, #6
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	3b01      	subs	r3, #1
 8006600:	041b      	lsls	r3, r3, #16
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	061b      	lsls	r3, r3, #24
 800660a:	491b      	ldr	r1, [pc, #108]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 800660c:	4313      	orrs	r3, r2
 800660e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006610:	4b1b      	ldr	r3, [pc, #108]	@ (8006680 <HAL_RCC_OscConfig+0x478>)
 8006612:	2201      	movs	r2, #1
 8006614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006616:	f7fd fc99 	bl	8003f4c <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661e:	f7fd fc95 	bl	8003f4c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e05c      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006630:	4b11      	ldr	r3, [pc, #68]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x416>
 800663c:	e054      	b.n	80066e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663e:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <HAL_RCC_OscConfig+0x478>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006644:	f7fd fc82 	bl	8003f4c <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800664c:	f7fd fc7e 	bl	8003f4c <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e045      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x444>
 800666a:	e03d      	b.n	80066e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d107      	bne.n	8006684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e038      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
 8006678:	40023800 	.word	0x40023800
 800667c:	40007000 	.word	0x40007000
 8006680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006684:	4b1b      	ldr	r3, [pc, #108]	@ (80066f4 <HAL_RCC_OscConfig+0x4ec>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d028      	beq.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d121      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d11a      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066bc:	4293      	cmp	r3, r2
 80066be:	d111      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	3b01      	subs	r3, #1
 80066ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d107      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d001      	beq.n	80066e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800

080066f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0cc      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800670c:	4b68      	ldr	r3, [pc, #416]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d90c      	bls.n	8006734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671a:	4b65      	ldr	r3, [pc, #404]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006722:	4b63      	ldr	r3, [pc, #396]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d001      	beq.n	8006734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0b8      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d020      	beq.n	8006782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800674c:	4b59      	ldr	r3, [pc, #356]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a58      	ldr	r2, [pc, #352]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006756:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006764:	4b53      	ldr	r3, [pc, #332]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	4a52      	ldr	r2, [pc, #328]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800676e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006770:	4b50      	ldr	r3, [pc, #320]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	494d      	ldr	r1, [pc, #308]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	4313      	orrs	r3, r2
 8006780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d044      	beq.n	8006818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d107      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	4b47      	ldr	r3, [pc, #284]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d119      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07f      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d003      	beq.n	80067b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d107      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b6:	4b3f      	ldr	r3, [pc, #252]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e06f      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c6:	4b3b      	ldr	r3, [pc, #236]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e067      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067d6:	4b37      	ldr	r3, [pc, #220]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f023 0203 	bic.w	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4934      	ldr	r1, [pc, #208]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e8:	f7fd fbb0 	bl	8003f4c <HAL_GetTick>
 80067ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	e00a      	b.n	8006806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f0:	f7fd fbac 	bl	8003f4c <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e04f      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006806:	4b2b      	ldr	r3, [pc, #172]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 020c 	and.w	r2, r3, #12
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	429a      	cmp	r2, r3
 8006816:	d1eb      	bne.n	80067f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006818:	4b25      	ldr	r3, [pc, #148]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d20c      	bcs.n	8006840 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006826:	4b22      	ldr	r3, [pc, #136]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682e:	4b20      	ldr	r3, [pc, #128]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d001      	beq.n	8006840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e032      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800684c:	4b19      	ldr	r3, [pc, #100]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4916      	ldr	r1, [pc, #88]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	4313      	orrs	r3, r2
 800685c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800686a:	4b12      	ldr	r3, [pc, #72]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	490e      	ldr	r1, [pc, #56]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	4313      	orrs	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800687e:	f000 f821 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 8006882:	4602      	mov	r2, r0
 8006884:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	490a      	ldr	r1, [pc, #40]	@ (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006890:	5ccb      	ldrb	r3, [r1, r3]
 8006892:	fa22 f303 	lsr.w	r3, r2, r3
 8006896:	4a09      	ldr	r2, [pc, #36]	@ (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800689a:	4b09      	ldr	r3, [pc, #36]	@ (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd fb10 	bl	8003ec4 <HAL_InitTick>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40023c00 	.word	0x40023c00
 80068b4:	40023800 	.word	0x40023800
 80068b8:	0800b3c4 	.word	0x0800b3c4
 80068bc:	20000010 	.word	0x20000010
 80068c0:	20000014 	.word	0x20000014

080068c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c8:	b094      	sub	sp, #80	@ 0x50
 80068ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068dc:	4b79      	ldr	r3, [pc, #484]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 030c 	and.w	r3, r3, #12
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d00d      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x40>
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	f200 80e1 	bhi.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0x34>
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d003      	beq.n	80068fe <HAL_RCC_GetSysClockFreq+0x3a>
 80068f6:	e0db      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f8:	4b73      	ldr	r3, [pc, #460]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80068fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068fc:	e0db      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068fe:	4b73      	ldr	r3, [pc, #460]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x208>)
 8006900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006902:	e0d8      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006904:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800690c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800690e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d063      	beq.n	80069e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800691a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	099b      	lsrs	r3, r3, #6
 8006920:	2200      	movs	r2, #0
 8006922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692c:	633b      	str	r3, [r7, #48]	@ 0x30
 800692e:	2300      	movs	r3, #0
 8006930:	637b      	str	r3, [r7, #52]	@ 0x34
 8006932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006936:	4622      	mov	r2, r4
 8006938:	462b      	mov	r3, r5
 800693a:	f04f 0000 	mov.w	r0, #0
 800693e:	f04f 0100 	mov.w	r1, #0
 8006942:	0159      	lsls	r1, r3, #5
 8006944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006948:	0150      	lsls	r0, r2, #5
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4621      	mov	r1, r4
 8006950:	1a51      	subs	r1, r2, r1
 8006952:	6139      	str	r1, [r7, #16]
 8006954:	4629      	mov	r1, r5
 8006956:	eb63 0301 	sbc.w	r3, r3, r1
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006968:	4659      	mov	r1, fp
 800696a:	018b      	lsls	r3, r1, #6
 800696c:	4651      	mov	r1, sl
 800696e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006972:	4651      	mov	r1, sl
 8006974:	018a      	lsls	r2, r1, #6
 8006976:	4651      	mov	r1, sl
 8006978:	ebb2 0801 	subs.w	r8, r2, r1
 800697c:	4659      	mov	r1, fp
 800697e:	eb63 0901 	sbc.w	r9, r3, r1
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800698e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006996:	4690      	mov	r8, r2
 8006998:	4699      	mov	r9, r3
 800699a:	4623      	mov	r3, r4
 800699c:	eb18 0303 	adds.w	r3, r8, r3
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	462b      	mov	r3, r5
 80069a4:	eb49 0303 	adc.w	r3, r9, r3
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069b6:	4629      	mov	r1, r5
 80069b8:	024b      	lsls	r3, r1, #9
 80069ba:	4621      	mov	r1, r4
 80069bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069c0:	4621      	mov	r1, r4
 80069c2:	024a      	lsls	r2, r1, #9
 80069c4:	4610      	mov	r0, r2
 80069c6:	4619      	mov	r1, r3
 80069c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ca:	2200      	movs	r2, #0
 80069cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069d4:	f7fa f8f0 	bl	8000bb8 <__aeabi_uldivmod>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4613      	mov	r3, r2
 80069de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e0:	e058      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069e2:	4b38      	ldr	r3, [pc, #224]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	2200      	movs	r2, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	4611      	mov	r1, r2
 80069ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	2300      	movs	r3, #0
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	f04f 0000 	mov.w	r0, #0
 8006a04:	f04f 0100 	mov.w	r1, #0
 8006a08:	0159      	lsls	r1, r3, #5
 8006a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a0e:	0150      	lsls	r0, r2, #5
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4641      	mov	r1, r8
 8006a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a34:	ebb2 040a 	subs.w	r4, r2, sl
 8006a38:	eb63 050b 	sbc.w	r5, r3, fp
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	00eb      	lsls	r3, r5, #3
 8006a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a4a:	00e2      	lsls	r2, r4, #3
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	461d      	mov	r5, r3
 8006a50:	4643      	mov	r3, r8
 8006a52:	18e3      	adds	r3, r4, r3
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	464b      	mov	r3, r9
 8006a58:	eb45 0303 	adc.w	r3, r5, r3
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	028b      	lsls	r3, r1, #10
 8006a6e:	4621      	mov	r1, r4
 8006a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a74:	4621      	mov	r1, r4
 8006a76:	028a      	lsls	r2, r1, #10
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a7e:	2200      	movs	r2, #0
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	61fa      	str	r2, [r7, #28]
 8006a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a88:	f7fa f896 	bl	8000bb8 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4613      	mov	r3, r2
 8006a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006aae:	e002      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ab0:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3750      	adds	r7, #80	@ 0x50
 8006abc:	46bd      	mov	sp, r7
 8006abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	00f42400 	.word	0x00f42400
 8006acc:	007a1200 	.word	0x007a1200

08006ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad4:	4b03      	ldr	r3, [pc, #12]	@ (8006ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000010 	.word	0x20000010

08006ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006aec:	f7ff fff0 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006af0:	4602      	mov	r2, r0
 8006af2:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	0a9b      	lsrs	r3, r3, #10
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	4903      	ldr	r1, [pc, #12]	@ (8006b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afe:	5ccb      	ldrb	r3, [r1, r3]
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	0800b3d4 	.word	0x0800b3d4

08006b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b14:	f7ff ffdc 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	4b05      	ldr	r3, [pc, #20]	@ (8006b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	0b5b      	lsrs	r3, r3, #13
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	4903      	ldr	r1, [pc, #12]	@ (8006b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b26:	5ccb      	ldrb	r3, [r1, r3]
 8006b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40023800 	.word	0x40023800
 8006b34:	0800b3d4 	.word	0x0800b3d4

08006b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e041      	b.n	8006bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fc ffd4 	bl	8003b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f000 fac0 	bl	80070fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e041      	b.n	8006c6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f839 	bl	8006c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3304      	adds	r3, #4
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f000 fa71 	bl	80070fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <HAL_TIM_PWM_Start+0x24>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	e022      	b.n	8006cf2 <HAL_TIM_PWM_Start+0x6a>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d109      	bne.n	8006cc6 <HAL_TIM_PWM_Start+0x3e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	bf14      	ite	ne
 8006cbe:	2301      	movne	r3, #1
 8006cc0:	2300      	moveq	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	e015      	b.n	8006cf2 <HAL_TIM_PWM_Start+0x6a>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d109      	bne.n	8006ce0 <HAL_TIM_PWM_Start+0x58>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	bf14      	ite	ne
 8006cd8:	2301      	movne	r3, #1
 8006cda:	2300      	moveq	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	e008      	b.n	8006cf2 <HAL_TIM_PWM_Start+0x6a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e068      	b.n	8006dcc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <HAL_TIM_PWM_Start+0x82>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d08:	e013      	b.n	8006d32 <HAL_TIM_PWM_Start+0xaa>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d104      	bne.n	8006d1a <HAL_TIM_PWM_Start+0x92>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d18:	e00b      	b.n	8006d32 <HAL_TIM_PWM_Start+0xaa>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d104      	bne.n	8006d2a <HAL_TIM_PWM_Start+0xa2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d28:	e003      	b.n	8006d32 <HAL_TIM_PWM_Start+0xaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2201      	movs	r2, #1
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fc90 	bl	8007660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a23      	ldr	r2, [pc, #140]	@ (8006dd4 <HAL_TIM_PWM_Start+0x14c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d107      	bne.n	8006d5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd4 <HAL_TIM_PWM_Start+0x14c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d018      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x10e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d6c:	d013      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x10e>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a19      	ldr	r2, [pc, #100]	@ (8006dd8 <HAL_TIM_PWM_Start+0x150>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00e      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x10e>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a17      	ldr	r2, [pc, #92]	@ (8006ddc <HAL_TIM_PWM_Start+0x154>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d009      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x10e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a16      	ldr	r2, [pc, #88]	@ (8006de0 <HAL_TIM_PWM_Start+0x158>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d004      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x10e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a14      	ldr	r2, [pc, #80]	@ (8006de4 <HAL_TIM_PWM_Start+0x15c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d111      	bne.n	8006dba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d010      	beq.n	8006dca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db8:	e007      	b.n	8006dca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0201 	orr.w	r2, r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40010000 	.word	0x40010000
 8006dd8:	40000400 	.word	0x40000400
 8006ddc:	40000800 	.word	0x40000800
 8006de0:	40000c00 	.word	0x40000c00
 8006de4:	40014000 	.word	0x40014000

08006de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e0ae      	b.n	8006f64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b0c      	cmp	r3, #12
 8006e12:	f200 809f 	bhi.w	8006f54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e16:	a201      	add	r2, pc, #4	@ (adr r2, 8006e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e51 	.word	0x08006e51
 8006e20:	08006f55 	.word	0x08006f55
 8006e24:	08006f55 	.word	0x08006f55
 8006e28:	08006f55 	.word	0x08006f55
 8006e2c:	08006e91 	.word	0x08006e91
 8006e30:	08006f55 	.word	0x08006f55
 8006e34:	08006f55 	.word	0x08006f55
 8006e38:	08006f55 	.word	0x08006f55
 8006e3c:	08006ed3 	.word	0x08006ed3
 8006e40:	08006f55 	.word	0x08006f55
 8006e44:	08006f55 	.word	0x08006f55
 8006e48:	08006f55 	.word	0x08006f55
 8006e4c:	08006f13 	.word	0x08006f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f9dc 	bl	8007214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0208 	orr.w	r2, r2, #8
 8006e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0204 	bic.w	r2, r2, #4
 8006e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6999      	ldr	r1, [r3, #24]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	619a      	str	r2, [r3, #24]
      break;
 8006e8e:	e064      	b.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fa22 	bl	80072e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6999      	ldr	r1, [r3, #24]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	021a      	lsls	r2, r3, #8
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	619a      	str	r2, [r3, #24]
      break;
 8006ed0:	e043      	b.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fa6d 	bl	80073b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0208 	orr.w	r2, r2, #8
 8006eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0204 	bic.w	r2, r2, #4
 8006efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69d9      	ldr	r1, [r3, #28]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	61da      	str	r2, [r3, #28]
      break;
 8006f10:	e023      	b.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fab7 	bl	800748c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69d9      	ldr	r1, [r3, #28]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	021a      	lsls	r2, r3, #8
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	61da      	str	r2, [r3, #28]
      break;
 8006f52:	e002      	b.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
      break;
 8006f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_TIM_ConfigClockSource+0x1c>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e0b4      	b.n	80070f2 <HAL_TIM_ConfigClockSource+0x186>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc0:	d03e      	beq.n	8007040 <HAL_TIM_ConfigClockSource+0xd4>
 8006fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc6:	f200 8087 	bhi.w	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fce:	f000 8086 	beq.w	80070de <HAL_TIM_ConfigClockSource+0x172>
 8006fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fd6:	d87f      	bhi.n	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd8:	2b70      	cmp	r3, #112	@ 0x70
 8006fda:	d01a      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0xa6>
 8006fdc:	2b70      	cmp	r3, #112	@ 0x70
 8006fde:	d87b      	bhi.n	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe0:	2b60      	cmp	r3, #96	@ 0x60
 8006fe2:	d050      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x11a>
 8006fe4:	2b60      	cmp	r3, #96	@ 0x60
 8006fe6:	d877      	bhi.n	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe8:	2b50      	cmp	r3, #80	@ 0x50
 8006fea:	d03c      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0xfa>
 8006fec:	2b50      	cmp	r3, #80	@ 0x50
 8006fee:	d873      	bhi.n	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff0:	2b40      	cmp	r3, #64	@ 0x40
 8006ff2:	d058      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x13a>
 8006ff4:	2b40      	cmp	r3, #64	@ 0x40
 8006ff6:	d86f      	bhi.n	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff8:	2b30      	cmp	r3, #48	@ 0x30
 8006ffa:	d064      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006ffc:	2b30      	cmp	r3, #48	@ 0x30
 8006ffe:	d86b      	bhi.n	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007000:	2b20      	cmp	r3, #32
 8007002:	d060      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007004:	2b20      	cmp	r3, #32
 8007006:	d867      	bhi.n	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d05c      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0x15a>
 800700c:	2b10      	cmp	r3, #16
 800700e:	d05a      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007010:	e062      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007022:	f000 fafd 	bl	8007620 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	609a      	str	r2, [r3, #8]
      break;
 800703e:	e04f      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007050:	f000 fae6 	bl	8007620 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689a      	ldr	r2, [r3, #8]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007062:	609a      	str	r2, [r3, #8]
      break;
 8007064:	e03c      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007072:	461a      	mov	r2, r3
 8007074:	f000 fa5a 	bl	800752c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2150      	movs	r1, #80	@ 0x50
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fab3 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 8007084:	e02c      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007092:	461a      	mov	r2, r3
 8007094:	f000 fa79 	bl	800758a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2160      	movs	r1, #96	@ 0x60
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 faa3 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 80070a4:	e01c      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b2:	461a      	mov	r2, r3
 80070b4:	f000 fa3a 	bl	800752c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2140      	movs	r1, #64	@ 0x40
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fa93 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 80070c4:	e00c      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f000 fa8a 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 80070d6:	e003      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	73fb      	strb	r3, [r7, #15]
      break;
 80070dc:	e000      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a3a      	ldr	r2, [pc, #232]	@ (80071f8 <TIM_Base_SetConfig+0xfc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00f      	beq.n	8007134 <TIM_Base_SetConfig+0x38>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800711a:	d00b      	beq.n	8007134 <TIM_Base_SetConfig+0x38>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a37      	ldr	r2, [pc, #220]	@ (80071fc <TIM_Base_SetConfig+0x100>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d007      	beq.n	8007134 <TIM_Base_SetConfig+0x38>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a36      	ldr	r2, [pc, #216]	@ (8007200 <TIM_Base_SetConfig+0x104>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_Base_SetConfig+0x38>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a35      	ldr	r2, [pc, #212]	@ (8007204 <TIM_Base_SetConfig+0x108>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d108      	bne.n	8007146 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2b      	ldr	r2, [pc, #172]	@ (80071f8 <TIM_Base_SetConfig+0xfc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d01b      	beq.n	8007186 <TIM_Base_SetConfig+0x8a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007154:	d017      	beq.n	8007186 <TIM_Base_SetConfig+0x8a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a28      	ldr	r2, [pc, #160]	@ (80071fc <TIM_Base_SetConfig+0x100>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <TIM_Base_SetConfig+0x8a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a27      	ldr	r2, [pc, #156]	@ (8007200 <TIM_Base_SetConfig+0x104>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00f      	beq.n	8007186 <TIM_Base_SetConfig+0x8a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a26      	ldr	r2, [pc, #152]	@ (8007204 <TIM_Base_SetConfig+0x108>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00b      	beq.n	8007186 <TIM_Base_SetConfig+0x8a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a25      	ldr	r2, [pc, #148]	@ (8007208 <TIM_Base_SetConfig+0x10c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d007      	beq.n	8007186 <TIM_Base_SetConfig+0x8a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a24      	ldr	r2, [pc, #144]	@ (800720c <TIM_Base_SetConfig+0x110>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_Base_SetConfig+0x8a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a23      	ldr	r2, [pc, #140]	@ (8007210 <TIM_Base_SetConfig+0x114>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d108      	bne.n	8007198 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800718c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a0e      	ldr	r2, [pc, #56]	@ (80071f8 <TIM_Base_SetConfig+0xfc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d103      	bne.n	80071cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d105      	bne.n	80071ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f023 0201 	bic.w	r2, r3, #1
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	611a      	str	r2, [r3, #16]
  }
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40000400 	.word	0x40000400
 8007200:	40000800 	.word	0x40000800
 8007204:	40000c00 	.word	0x40000c00
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800

08007214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f023 0201 	bic.w	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f023 0302 	bic.w	r3, r3, #2
 800725c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a1c      	ldr	r2, [pc, #112]	@ (80072dc <TIM_OC1_SetConfig+0xc8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10c      	bne.n	800728a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 0308 	bic.w	r3, r3, #8
 8007276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f023 0304 	bic.w	r3, r3, #4
 8007288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a13      	ldr	r2, [pc, #76]	@ (80072dc <TIM_OC1_SetConfig+0xc8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d111      	bne.n	80072b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	621a      	str	r2, [r3, #32]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	40010000 	.word	0x40010000

080072e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f023 0210 	bic.w	r2, r3, #16
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 0320 	bic.w	r3, r3, #32
 800732a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a1e      	ldr	r2, [pc, #120]	@ (80073b4 <TIM_OC2_SetConfig+0xd4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d10d      	bne.n	800735c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800735a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a15      	ldr	r2, [pc, #84]	@ (80073b4 <TIM_OC2_SetConfig+0xd4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d113      	bne.n	800738c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800736a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	40010000 	.word	0x40010000

080073b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0303 	bic.w	r3, r3, #3
 80073ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a1d      	ldr	r2, [pc, #116]	@ (8007488 <TIM_OC3_SetConfig+0xd0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10d      	bne.n	8007432 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800741c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a14      	ldr	r2, [pc, #80]	@ (8007488 <TIM_OC3_SetConfig+0xd0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d113      	bne.n	8007462 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	621a      	str	r2, [r3, #32]
}
 800747c:	bf00      	nop
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	40010000 	.word	0x40010000

0800748c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	031b      	lsls	r3, r3, #12
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a10      	ldr	r2, [pc, #64]	@ (8007528 <TIM_OC4_SetConfig+0x9c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d109      	bne.n	8007500 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	019b      	lsls	r3, r3, #6
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	621a      	str	r2, [r3, #32]
}
 800751a:	bf00      	nop
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40010000 	.word	0x40010000

0800752c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f023 0201 	bic.w	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f023 030a 	bic.w	r3, r3, #10
 8007568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	621a      	str	r2, [r3, #32]
}
 800757e:	bf00      	nop
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800758a:	b480      	push	{r7}
 800758c:	b087      	sub	sp, #28
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	f023 0210 	bic.w	r2, r3, #16
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	031b      	lsls	r3, r3, #12
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	4313      	orrs	r3, r2
 80075be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	621a      	str	r2, [r3, #32]
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	f043 0307 	orr.w	r3, r3, #7
 800760c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	609a      	str	r2, [r3, #8]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800763a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	431a      	orrs	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4313      	orrs	r3, r2
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	609a      	str	r2, [r3, #8]
}
 8007654:	bf00      	nop
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	2201      	movs	r2, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1a      	ldr	r2, [r3, #32]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	43db      	mvns	r3, r3
 8007682:	401a      	ands	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	fa01 f303 	lsl.w	r3, r1, r3
 8007698:	431a      	orrs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
	...

080076ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e050      	b.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1c      	ldr	r2, [pc, #112]	@ (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d018      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007710:	d013      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a18      	ldr	r2, [pc, #96]	@ (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00e      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a16      	ldr	r2, [pc, #88]	@ (800777c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d009      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a15      	ldr	r2, [pc, #84]	@ (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a13      	ldr	r2, [pc, #76]	@ (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d10c      	bne.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	4313      	orrs	r3, r2
 800774a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40010000 	.word	0x40010000
 8007778:	40000400 	.word	0x40000400
 800777c:	40000800 	.word	0x40000800
 8007780:	40000c00 	.word	0x40000c00
 8007784:	40014000 	.word	0x40014000

08007788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e042      	b.n	8007820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fc fa08 	bl	8003bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2224      	movs	r2, #36	@ 0x24
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f82b 	bl	8007828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695a      	ldr	r2, [r3, #20]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800782c:	b0c0      	sub	sp, #256	@ 0x100
 800782e:	af00      	add	r7, sp, #0
 8007830:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007844:	68d9      	ldr	r1, [r3, #12]
 8007846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	ea40 0301 	orr.w	r3, r0, r1
 8007850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	431a      	orrs	r2, r3
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	431a      	orrs	r2, r3
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007880:	f021 010c 	bic.w	r1, r1, #12
 8007884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800788e:	430b      	orrs	r3, r1
 8007890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800789e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a2:	6999      	ldr	r1, [r3, #24]
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	ea40 0301 	orr.w	r3, r0, r1
 80078ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4b8f      	ldr	r3, [pc, #572]	@ (8007af4 <UART_SetConfig+0x2cc>)
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d005      	beq.n	80078c8 <UART_SetConfig+0xa0>
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	4b8d      	ldr	r3, [pc, #564]	@ (8007af8 <UART_SetConfig+0x2d0>)
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d104      	bne.n	80078d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078c8:	f7ff f922 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 80078cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078d0:	e003      	b.n	80078da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078d2:	f7ff f909 	bl	8006ae8 <HAL_RCC_GetPCLK1Freq>
 80078d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078e4:	f040 810c 	bne.w	8007b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078fa:	4622      	mov	r2, r4
 80078fc:	462b      	mov	r3, r5
 80078fe:	1891      	adds	r1, r2, r2
 8007900:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007902:	415b      	adcs	r3, r3
 8007904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800790a:	4621      	mov	r1, r4
 800790c:	eb12 0801 	adds.w	r8, r2, r1
 8007910:	4629      	mov	r1, r5
 8007912:	eb43 0901 	adc.w	r9, r3, r1
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800792a:	4690      	mov	r8, r2
 800792c:	4699      	mov	r9, r3
 800792e:	4623      	mov	r3, r4
 8007930:	eb18 0303 	adds.w	r3, r8, r3
 8007934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007938:	462b      	mov	r3, r5
 800793a:	eb49 0303 	adc.w	r3, r9, r3
 800793e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800794e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007956:	460b      	mov	r3, r1
 8007958:	18db      	adds	r3, r3, r3
 800795a:	653b      	str	r3, [r7, #80]	@ 0x50
 800795c:	4613      	mov	r3, r2
 800795e:	eb42 0303 	adc.w	r3, r2, r3
 8007962:	657b      	str	r3, [r7, #84]	@ 0x54
 8007964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800796c:	f7f9 f924 	bl	8000bb8 <__aeabi_uldivmod>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4b61      	ldr	r3, [pc, #388]	@ (8007afc <UART_SetConfig+0x2d4>)
 8007976:	fba3 2302 	umull	r2, r3, r3, r2
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	011c      	lsls	r4, r3, #4
 800797e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007982:	2200      	movs	r2, #0
 8007984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007988:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800798c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007990:	4642      	mov	r2, r8
 8007992:	464b      	mov	r3, r9
 8007994:	1891      	adds	r1, r2, r2
 8007996:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007998:	415b      	adcs	r3, r3
 800799a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800799c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079a0:	4641      	mov	r1, r8
 80079a2:	eb12 0a01 	adds.w	sl, r2, r1
 80079a6:	4649      	mov	r1, r9
 80079a8:	eb43 0b01 	adc.w	fp, r3, r1
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079c0:	4692      	mov	sl, r2
 80079c2:	469b      	mov	fp, r3
 80079c4:	4643      	mov	r3, r8
 80079c6:	eb1a 0303 	adds.w	r3, sl, r3
 80079ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079ce:	464b      	mov	r3, r9
 80079d0:	eb4b 0303 	adc.w	r3, fp, r3
 80079d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079ec:	460b      	mov	r3, r1
 80079ee:	18db      	adds	r3, r3, r3
 80079f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079f2:	4613      	mov	r3, r2
 80079f4:	eb42 0303 	adc.w	r3, r2, r3
 80079f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a02:	f7f9 f8d9 	bl	8000bb8 <__aeabi_uldivmod>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8007afc <UART_SetConfig+0x2d4>)
 8007a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8007a12:	095b      	lsrs	r3, r3, #5
 8007a14:	2264      	movs	r2, #100	@ 0x64
 8007a16:	fb02 f303 	mul.w	r3, r2, r3
 8007a1a:	1acb      	subs	r3, r1, r3
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a22:	4b36      	ldr	r3, [pc, #216]	@ (8007afc <UART_SetConfig+0x2d4>)
 8007a24:	fba3 2302 	umull	r2, r3, r3, r2
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a30:	441c      	add	r4, r3
 8007a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	1891      	adds	r1, r2, r2
 8007a4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a4c:	415b      	adcs	r3, r3
 8007a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a54:	4641      	mov	r1, r8
 8007a56:	1851      	adds	r1, r2, r1
 8007a58:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	414b      	adcs	r3, r1
 8007a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	00cb      	lsls	r3, r1, #3
 8007a70:	4651      	mov	r1, sl
 8007a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a76:	4651      	mov	r1, sl
 8007a78:	00ca      	lsls	r2, r1, #3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4642      	mov	r2, r8
 8007a82:	189b      	adds	r3, r3, r2
 8007a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a88:	464b      	mov	r3, r9
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	eb42 0303 	adc.w	r3, r2, r3
 8007a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	18db      	adds	r3, r3, r3
 8007aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aae:	4613      	mov	r3, r2
 8007ab0:	eb42 0303 	adc.w	r3, r2, r3
 8007ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007abe:	f7f9 f87b 	bl	8000bb8 <__aeabi_uldivmod>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8007afc <UART_SetConfig+0x2d4>)
 8007ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	2164      	movs	r1, #100	@ 0x64
 8007ad0:	fb01 f303 	mul.w	r3, r1, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	3332      	adds	r3, #50	@ 0x32
 8007ada:	4a08      	ldr	r2, [pc, #32]	@ (8007afc <UART_SetConfig+0x2d4>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	f003 0207 	and.w	r2, r3, #7
 8007ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4422      	add	r2, r4
 8007aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007af0:	e106      	b.n	8007d00 <UART_SetConfig+0x4d8>
 8007af2:	bf00      	nop
 8007af4:	40011000 	.word	0x40011000
 8007af8:	40011400 	.word	0x40011400
 8007afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b04:	2200      	movs	r2, #0
 8007b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b12:	4642      	mov	r2, r8
 8007b14:	464b      	mov	r3, r9
 8007b16:	1891      	adds	r1, r2, r2
 8007b18:	6239      	str	r1, [r7, #32]
 8007b1a:	415b      	adcs	r3, r3
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b22:	4641      	mov	r1, r8
 8007b24:	1854      	adds	r4, r2, r1
 8007b26:	4649      	mov	r1, r9
 8007b28:	eb43 0501 	adc.w	r5, r3, r1
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	00eb      	lsls	r3, r5, #3
 8007b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b3a:	00e2      	lsls	r2, r4, #3
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	461d      	mov	r5, r3
 8007b40:	4643      	mov	r3, r8
 8007b42:	18e3      	adds	r3, r4, r3
 8007b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b48:	464b      	mov	r3, r9
 8007b4a:	eb45 0303 	adc.w	r3, r5, r3
 8007b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b62:	f04f 0200 	mov.w	r2, #0
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b6e:	4629      	mov	r1, r5
 8007b70:	008b      	lsls	r3, r1, #2
 8007b72:	4621      	mov	r1, r4
 8007b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b78:	4621      	mov	r1, r4
 8007b7a:	008a      	lsls	r2, r1, #2
 8007b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b80:	f7f9 f81a 	bl	8000bb8 <__aeabi_uldivmod>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4b60      	ldr	r3, [pc, #384]	@ (8007d0c <UART_SetConfig+0x4e4>)
 8007b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	011c      	lsls	r4, r3, #4
 8007b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	1891      	adds	r1, r2, r2
 8007baa:	61b9      	str	r1, [r7, #24]
 8007bac:	415b      	adcs	r3, r3
 8007bae:	61fb      	str	r3, [r7, #28]
 8007bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	1851      	adds	r1, r2, r1
 8007bb8:	6139      	str	r1, [r7, #16]
 8007bba:	4649      	mov	r1, r9
 8007bbc:	414b      	adcs	r3, r1
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bcc:	4659      	mov	r1, fp
 8007bce:	00cb      	lsls	r3, r1, #3
 8007bd0:	4651      	mov	r1, sl
 8007bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bd6:	4651      	mov	r1, sl
 8007bd8:	00ca      	lsls	r2, r1, #3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4603      	mov	r3, r0
 8007be0:	4642      	mov	r2, r8
 8007be2:	189b      	adds	r3, r3, r2
 8007be4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007be8:	464b      	mov	r3, r9
 8007bea:	460a      	mov	r2, r1
 8007bec:	eb42 0303 	adc.w	r3, r2, r3
 8007bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	f04f 0300 	mov.w	r3, #0
 8007c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	008b      	lsls	r3, r1, #2
 8007c10:	4641      	mov	r1, r8
 8007c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c16:	4641      	mov	r1, r8
 8007c18:	008a      	lsls	r2, r1, #2
 8007c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c1e:	f7f8 ffcb 	bl	8000bb8 <__aeabi_uldivmod>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4611      	mov	r1, r2
 8007c28:	4b38      	ldr	r3, [pc, #224]	@ (8007d0c <UART_SetConfig+0x4e4>)
 8007c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c2e:	095b      	lsrs	r3, r3, #5
 8007c30:	2264      	movs	r2, #100	@ 0x64
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
 8007c36:	1acb      	subs	r3, r1, r3
 8007c38:	011b      	lsls	r3, r3, #4
 8007c3a:	3332      	adds	r3, #50	@ 0x32
 8007c3c:	4a33      	ldr	r2, [pc, #204]	@ (8007d0c <UART_SetConfig+0x4e4>)
 8007c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c48:	441c      	add	r4, r3
 8007c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c4e:	2200      	movs	r2, #0
 8007c50:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c52:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	1891      	adds	r1, r2, r2
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	415b      	adcs	r3, r3
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c68:	4641      	mov	r1, r8
 8007c6a:	1851      	adds	r1, r2, r1
 8007c6c:	6039      	str	r1, [r7, #0]
 8007c6e:	4649      	mov	r1, r9
 8007c70:	414b      	adcs	r3, r1
 8007c72:	607b      	str	r3, [r7, #4]
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c80:	4659      	mov	r1, fp
 8007c82:	00cb      	lsls	r3, r1, #3
 8007c84:	4651      	mov	r1, sl
 8007c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	00ca      	lsls	r2, r1, #3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	4642      	mov	r2, r8
 8007c96:	189b      	adds	r3, r3, r2
 8007c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	460a      	mov	r2, r1
 8007c9e:	eb42 0303 	adc.w	r3, r2, r3
 8007ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cae:	667a      	str	r2, [r7, #100]	@ 0x64
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	f04f 0300 	mov.w	r3, #0
 8007cb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	008b      	lsls	r3, r1, #2
 8007cc0:	4641      	mov	r1, r8
 8007cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cc6:	4641      	mov	r1, r8
 8007cc8:	008a      	lsls	r2, r1, #2
 8007cca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cce:	f7f8 ff73 	bl	8000bb8 <__aeabi_uldivmod>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d0c <UART_SetConfig+0x4e4>)
 8007cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cdc:	095b      	lsrs	r3, r3, #5
 8007cde:	2164      	movs	r1, #100	@ 0x64
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	3332      	adds	r3, #50	@ 0x32
 8007cea:	4a08      	ldr	r2, [pc, #32]	@ (8007d0c <UART_SetConfig+0x4e4>)
 8007cec:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	f003 020f 	and.w	r2, r3, #15
 8007cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4422      	add	r2, r4
 8007cfe:	609a      	str	r2, [r3, #8]
}
 8007d00:	bf00      	nop
 8007d02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d06:	46bd      	mov	sp, r7
 8007d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d0c:	51eb851f 	.word	0x51eb851f

08007d10 <__cvt>:
 8007d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	ec57 6b10 	vmov	r6, r7, d0
 8007d18:	2f00      	cmp	r7, #0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	463b      	mov	r3, r7
 8007d20:	bfbb      	ittet	lt
 8007d22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d26:	461f      	movlt	r7, r3
 8007d28:	2300      	movge	r3, #0
 8007d2a:	232d      	movlt	r3, #45	@ 0x2d
 8007d2c:	700b      	strb	r3, [r1, #0]
 8007d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d34:	4691      	mov	r9, r2
 8007d36:	f023 0820 	bic.w	r8, r3, #32
 8007d3a:	bfbc      	itt	lt
 8007d3c:	4632      	movlt	r2, r6
 8007d3e:	4616      	movlt	r6, r2
 8007d40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d44:	d005      	beq.n	8007d52 <__cvt+0x42>
 8007d46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d4a:	d100      	bne.n	8007d4e <__cvt+0x3e>
 8007d4c:	3401      	adds	r4, #1
 8007d4e:	2102      	movs	r1, #2
 8007d50:	e000      	b.n	8007d54 <__cvt+0x44>
 8007d52:	2103      	movs	r1, #3
 8007d54:	ab03      	add	r3, sp, #12
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	ab02      	add	r3, sp, #8
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	ec47 6b10 	vmov	d0, r6, r7
 8007d60:	4653      	mov	r3, sl
 8007d62:	4622      	mov	r2, r4
 8007d64:	f001 f82c 	bl	8008dc0 <_dtoa_r>
 8007d68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	d119      	bne.n	8007da4 <__cvt+0x94>
 8007d70:	f019 0f01 	tst.w	r9, #1
 8007d74:	d00e      	beq.n	8007d94 <__cvt+0x84>
 8007d76:	eb00 0904 	add.w	r9, r0, r4
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4639      	mov	r1, r7
 8007d82:	f7f8 fea9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d86:	b108      	cbz	r0, 8007d8c <__cvt+0x7c>
 8007d88:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d8c:	2230      	movs	r2, #48	@ 0x30
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	454b      	cmp	r3, r9
 8007d92:	d31e      	bcc.n	8007dd2 <__cvt+0xc2>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d98:	1b5b      	subs	r3, r3, r5
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	b004      	add	sp, #16
 8007da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007da8:	eb00 0904 	add.w	r9, r0, r4
 8007dac:	d1e5      	bne.n	8007d7a <__cvt+0x6a>
 8007dae:	7803      	ldrb	r3, [r0, #0]
 8007db0:	2b30      	cmp	r3, #48	@ 0x30
 8007db2:	d10a      	bne.n	8007dca <__cvt+0xba>
 8007db4:	2200      	movs	r2, #0
 8007db6:	2300      	movs	r3, #0
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	f7f8 fe8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dc0:	b918      	cbnz	r0, 8007dca <__cvt+0xba>
 8007dc2:	f1c4 0401 	rsb	r4, r4, #1
 8007dc6:	f8ca 4000 	str.w	r4, [sl]
 8007dca:	f8da 3000 	ldr.w	r3, [sl]
 8007dce:	4499      	add	r9, r3
 8007dd0:	e7d3      	b.n	8007d7a <__cvt+0x6a>
 8007dd2:	1c59      	adds	r1, r3, #1
 8007dd4:	9103      	str	r1, [sp, #12]
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	e7d9      	b.n	8007d8e <__cvt+0x7e>

08007dda <__exponent>:
 8007dda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	bfba      	itte	lt
 8007de0:	4249      	neglt	r1, r1
 8007de2:	232d      	movlt	r3, #45	@ 0x2d
 8007de4:	232b      	movge	r3, #43	@ 0x2b
 8007de6:	2909      	cmp	r1, #9
 8007de8:	7002      	strb	r2, [r0, #0]
 8007dea:	7043      	strb	r3, [r0, #1]
 8007dec:	dd29      	ble.n	8007e42 <__exponent+0x68>
 8007dee:	f10d 0307 	add.w	r3, sp, #7
 8007df2:	461d      	mov	r5, r3
 8007df4:	270a      	movs	r7, #10
 8007df6:	461a      	mov	r2, r3
 8007df8:	fbb1 f6f7 	udiv	r6, r1, r7
 8007dfc:	fb07 1416 	mls	r4, r7, r6, r1
 8007e00:	3430      	adds	r4, #48	@ 0x30
 8007e02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e06:	460c      	mov	r4, r1
 8007e08:	2c63      	cmp	r4, #99	@ 0x63
 8007e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e0e:	4631      	mov	r1, r6
 8007e10:	dcf1      	bgt.n	8007df6 <__exponent+0x1c>
 8007e12:	3130      	adds	r1, #48	@ 0x30
 8007e14:	1e94      	subs	r4, r2, #2
 8007e16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e1a:	1c41      	adds	r1, r0, #1
 8007e1c:	4623      	mov	r3, r4
 8007e1e:	42ab      	cmp	r3, r5
 8007e20:	d30a      	bcc.n	8007e38 <__exponent+0x5e>
 8007e22:	f10d 0309 	add.w	r3, sp, #9
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	42ac      	cmp	r4, r5
 8007e2a:	bf88      	it	hi
 8007e2c:	2300      	movhi	r3, #0
 8007e2e:	3302      	adds	r3, #2
 8007e30:	4403      	add	r3, r0
 8007e32:	1a18      	subs	r0, r3, r0
 8007e34:	b003      	add	sp, #12
 8007e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e40:	e7ed      	b.n	8007e1e <__exponent+0x44>
 8007e42:	2330      	movs	r3, #48	@ 0x30
 8007e44:	3130      	adds	r1, #48	@ 0x30
 8007e46:	7083      	strb	r3, [r0, #2]
 8007e48:	70c1      	strb	r1, [r0, #3]
 8007e4a:	1d03      	adds	r3, r0, #4
 8007e4c:	e7f1      	b.n	8007e32 <__exponent+0x58>
	...

08007e50 <_printf_float>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	b08d      	sub	sp, #52	@ 0x34
 8007e56:	460c      	mov	r4, r1
 8007e58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	461f      	mov	r7, r3
 8007e60:	4605      	mov	r5, r0
 8007e62:	f000 fe9f 	bl	8008ba4 <_localeconv_r>
 8007e66:	6803      	ldr	r3, [r0, #0]
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7f8 fa08 	bl	8000280 <strlen>
 8007e70:	2300      	movs	r3, #0
 8007e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e74:	f8d8 3000 	ldr.w	r3, [r8]
 8007e78:	9005      	str	r0, [sp, #20]
 8007e7a:	3307      	adds	r3, #7
 8007e7c:	f023 0307 	bic.w	r3, r3, #7
 8007e80:	f103 0208 	add.w	r2, r3, #8
 8007e84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e88:	f8d4 b000 	ldr.w	fp, [r4]
 8007e8c:	f8c8 2000 	str.w	r2, [r8]
 8007e90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007e98:	9307      	str	r3, [sp, #28]
 8007e9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ea6:	4b9c      	ldr	r3, [pc, #624]	@ (8008118 <_printf_float+0x2c8>)
 8007ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eac:	f7f8 fe46 	bl	8000b3c <__aeabi_dcmpun>
 8007eb0:	bb70      	cbnz	r0, 8007f10 <_printf_float+0xc0>
 8007eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eb6:	4b98      	ldr	r3, [pc, #608]	@ (8008118 <_printf_float+0x2c8>)
 8007eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebc:	f7f8 fe20 	bl	8000b00 <__aeabi_dcmple>
 8007ec0:	bb30      	cbnz	r0, 8007f10 <_printf_float+0xc0>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	4649      	mov	r1, r9
 8007eca:	f7f8 fe0f 	bl	8000aec <__aeabi_dcmplt>
 8007ece:	b110      	cbz	r0, 8007ed6 <_printf_float+0x86>
 8007ed0:	232d      	movs	r3, #45	@ 0x2d
 8007ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ed6:	4a91      	ldr	r2, [pc, #580]	@ (800811c <_printf_float+0x2cc>)
 8007ed8:	4b91      	ldr	r3, [pc, #580]	@ (8008120 <_printf_float+0x2d0>)
 8007eda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ede:	bf94      	ite	ls
 8007ee0:	4690      	movls	r8, r2
 8007ee2:	4698      	movhi	r8, r3
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	6123      	str	r3, [r4, #16]
 8007ee8:	f02b 0304 	bic.w	r3, fp, #4
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	f04f 0900 	mov.w	r9, #0
 8007ef2:	9700      	str	r7, [sp, #0]
 8007ef4:	4633      	mov	r3, r6
 8007ef6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4628      	mov	r0, r5
 8007efc:	f000 f9d2 	bl	80082a4 <_printf_common>
 8007f00:	3001      	adds	r0, #1
 8007f02:	f040 808d 	bne.w	8008020 <_printf_float+0x1d0>
 8007f06:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0a:	b00d      	add	sp, #52	@ 0x34
 8007f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f10:	4642      	mov	r2, r8
 8007f12:	464b      	mov	r3, r9
 8007f14:	4640      	mov	r0, r8
 8007f16:	4649      	mov	r1, r9
 8007f18:	f7f8 fe10 	bl	8000b3c <__aeabi_dcmpun>
 8007f1c:	b140      	cbz	r0, 8007f30 <_printf_float+0xe0>
 8007f1e:	464b      	mov	r3, r9
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	bfbc      	itt	lt
 8007f24:	232d      	movlt	r3, #45	@ 0x2d
 8007f26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8008124 <_printf_float+0x2d4>)
 8007f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8008128 <_printf_float+0x2d8>)
 8007f2e:	e7d4      	b.n	8007eda <_printf_float+0x8a>
 8007f30:	6863      	ldr	r3, [r4, #4]
 8007f32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f36:	9206      	str	r2, [sp, #24]
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	d13b      	bne.n	8007fb4 <_printf_float+0x164>
 8007f3c:	2306      	movs	r3, #6
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f44:	2300      	movs	r3, #0
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	9303      	str	r3, [sp, #12]
 8007f4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f50:	ab09      	add	r3, sp, #36	@ 0x24
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	6861      	ldr	r1, [r4, #4]
 8007f56:	ec49 8b10 	vmov	d0, r8, r9
 8007f5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f7ff fed6 	bl	8007d10 <__cvt>
 8007f64:	9b06      	ldr	r3, [sp, #24]
 8007f66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f68:	2b47      	cmp	r3, #71	@ 0x47
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	d129      	bne.n	8007fc2 <_printf_float+0x172>
 8007f6e:	1cc8      	adds	r0, r1, #3
 8007f70:	db02      	blt.n	8007f78 <_printf_float+0x128>
 8007f72:	6863      	ldr	r3, [r4, #4]
 8007f74:	4299      	cmp	r1, r3
 8007f76:	dd41      	ble.n	8007ffc <_printf_float+0x1ac>
 8007f78:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f7c:	fa5f fa8a 	uxtb.w	sl, sl
 8007f80:	3901      	subs	r1, #1
 8007f82:	4652      	mov	r2, sl
 8007f84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007f88:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f8a:	f7ff ff26 	bl	8007dda <__exponent>
 8007f8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f90:	1813      	adds	r3, r2, r0
 8007f92:	2a01      	cmp	r2, #1
 8007f94:	4681      	mov	r9, r0
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	dc02      	bgt.n	8007fa0 <_printf_float+0x150>
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	07d2      	lsls	r2, r2, #31
 8007f9e:	d501      	bpl.n	8007fa4 <_printf_float+0x154>
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0a2      	beq.n	8007ef2 <_printf_float+0xa2>
 8007fac:	232d      	movs	r3, #45	@ 0x2d
 8007fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fb2:	e79e      	b.n	8007ef2 <_printf_float+0xa2>
 8007fb4:	9a06      	ldr	r2, [sp, #24]
 8007fb6:	2a47      	cmp	r2, #71	@ 0x47
 8007fb8:	d1c2      	bne.n	8007f40 <_printf_float+0xf0>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1c0      	bne.n	8007f40 <_printf_float+0xf0>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e7bd      	b.n	8007f3e <_printf_float+0xee>
 8007fc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007fc6:	d9db      	bls.n	8007f80 <_printf_float+0x130>
 8007fc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007fcc:	d118      	bne.n	8008000 <_printf_float+0x1b0>
 8007fce:	2900      	cmp	r1, #0
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	dd0b      	ble.n	8007fec <_printf_float+0x19c>
 8007fd4:	6121      	str	r1, [r4, #16]
 8007fd6:	b913      	cbnz	r3, 8007fde <_printf_float+0x18e>
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	07d0      	lsls	r0, r2, #31
 8007fdc:	d502      	bpl.n	8007fe4 <_printf_float+0x194>
 8007fde:	3301      	adds	r3, #1
 8007fe0:	440b      	add	r3, r1
 8007fe2:	6123      	str	r3, [r4, #16]
 8007fe4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007fe6:	f04f 0900 	mov.w	r9, #0
 8007fea:	e7db      	b.n	8007fa4 <_printf_float+0x154>
 8007fec:	b913      	cbnz	r3, 8007ff4 <_printf_float+0x1a4>
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	07d2      	lsls	r2, r2, #31
 8007ff2:	d501      	bpl.n	8007ff8 <_printf_float+0x1a8>
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	e7f4      	b.n	8007fe2 <_printf_float+0x192>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e7f2      	b.n	8007fe2 <_printf_float+0x192>
 8007ffc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008002:	4299      	cmp	r1, r3
 8008004:	db05      	blt.n	8008012 <_printf_float+0x1c2>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	6121      	str	r1, [r4, #16]
 800800a:	07d8      	lsls	r0, r3, #31
 800800c:	d5ea      	bpl.n	8007fe4 <_printf_float+0x194>
 800800e:	1c4b      	adds	r3, r1, #1
 8008010:	e7e7      	b.n	8007fe2 <_printf_float+0x192>
 8008012:	2900      	cmp	r1, #0
 8008014:	bfd4      	ite	le
 8008016:	f1c1 0202 	rsble	r2, r1, #2
 800801a:	2201      	movgt	r2, #1
 800801c:	4413      	add	r3, r2
 800801e:	e7e0      	b.n	8007fe2 <_printf_float+0x192>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	055a      	lsls	r2, r3, #21
 8008024:	d407      	bmi.n	8008036 <_printf_float+0x1e6>
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	4642      	mov	r2, r8
 800802a:	4631      	mov	r1, r6
 800802c:	4628      	mov	r0, r5
 800802e:	47b8      	blx	r7
 8008030:	3001      	adds	r0, #1
 8008032:	d12b      	bne.n	800808c <_printf_float+0x23c>
 8008034:	e767      	b.n	8007f06 <_printf_float+0xb6>
 8008036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800803a:	f240 80dd 	bls.w	80081f8 <_printf_float+0x3a8>
 800803e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008042:	2200      	movs	r2, #0
 8008044:	2300      	movs	r3, #0
 8008046:	f7f8 fd47 	bl	8000ad8 <__aeabi_dcmpeq>
 800804a:	2800      	cmp	r0, #0
 800804c:	d033      	beq.n	80080b6 <_printf_float+0x266>
 800804e:	4a37      	ldr	r2, [pc, #220]	@ (800812c <_printf_float+0x2dc>)
 8008050:	2301      	movs	r3, #1
 8008052:	4631      	mov	r1, r6
 8008054:	4628      	mov	r0, r5
 8008056:	47b8      	blx	r7
 8008058:	3001      	adds	r0, #1
 800805a:	f43f af54 	beq.w	8007f06 <_printf_float+0xb6>
 800805e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008062:	4543      	cmp	r3, r8
 8008064:	db02      	blt.n	800806c <_printf_float+0x21c>
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	07d8      	lsls	r0, r3, #31
 800806a:	d50f      	bpl.n	800808c <_printf_float+0x23c>
 800806c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f af45 	beq.w	8007f06 <_printf_float+0xb6>
 800807c:	f04f 0900 	mov.w	r9, #0
 8008080:	f108 38ff 	add.w	r8, r8, #4294967295
 8008084:	f104 0a1a 	add.w	sl, r4, #26
 8008088:	45c8      	cmp	r8, r9
 800808a:	dc09      	bgt.n	80080a0 <_printf_float+0x250>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	079b      	lsls	r3, r3, #30
 8008090:	f100 8103 	bmi.w	800829a <_printf_float+0x44a>
 8008094:	68e0      	ldr	r0, [r4, #12]
 8008096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008098:	4298      	cmp	r0, r3
 800809a:	bfb8      	it	lt
 800809c:	4618      	movlt	r0, r3
 800809e:	e734      	b.n	8007f0a <_printf_float+0xba>
 80080a0:	2301      	movs	r3, #1
 80080a2:	4652      	mov	r2, sl
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	f43f af2b 	beq.w	8007f06 <_printf_float+0xb6>
 80080b0:	f109 0901 	add.w	r9, r9, #1
 80080b4:	e7e8      	b.n	8008088 <_printf_float+0x238>
 80080b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dc39      	bgt.n	8008130 <_printf_float+0x2e0>
 80080bc:	4a1b      	ldr	r2, [pc, #108]	@ (800812c <_printf_float+0x2dc>)
 80080be:	2301      	movs	r3, #1
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f af1d 	beq.w	8007f06 <_printf_float+0xb6>
 80080cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80080d0:	ea59 0303 	orrs.w	r3, r9, r3
 80080d4:	d102      	bne.n	80080dc <_printf_float+0x28c>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	07d9      	lsls	r1, r3, #31
 80080da:	d5d7      	bpl.n	800808c <_printf_float+0x23c>
 80080dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af0d 	beq.w	8007f06 <_printf_float+0xb6>
 80080ec:	f04f 0a00 	mov.w	sl, #0
 80080f0:	f104 0b1a 	add.w	fp, r4, #26
 80080f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f6:	425b      	negs	r3, r3
 80080f8:	4553      	cmp	r3, sl
 80080fa:	dc01      	bgt.n	8008100 <_printf_float+0x2b0>
 80080fc:	464b      	mov	r3, r9
 80080fe:	e793      	b.n	8008028 <_printf_float+0x1d8>
 8008100:	2301      	movs	r3, #1
 8008102:	465a      	mov	r2, fp
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f aefb 	beq.w	8007f06 <_printf_float+0xb6>
 8008110:	f10a 0a01 	add.w	sl, sl, #1
 8008114:	e7ee      	b.n	80080f4 <_printf_float+0x2a4>
 8008116:	bf00      	nop
 8008118:	7fefffff 	.word	0x7fefffff
 800811c:	0800b3dc 	.word	0x0800b3dc
 8008120:	0800b3e0 	.word	0x0800b3e0
 8008124:	0800b3e4 	.word	0x0800b3e4
 8008128:	0800b3e8 	.word	0x0800b3e8
 800812c:	0800b3ec 	.word	0x0800b3ec
 8008130:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008132:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008136:	4553      	cmp	r3, sl
 8008138:	bfa8      	it	ge
 800813a:	4653      	movge	r3, sl
 800813c:	2b00      	cmp	r3, #0
 800813e:	4699      	mov	r9, r3
 8008140:	dc36      	bgt.n	80081b0 <_printf_float+0x360>
 8008142:	f04f 0b00 	mov.w	fp, #0
 8008146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800814a:	f104 021a 	add.w	r2, r4, #26
 800814e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008150:	9306      	str	r3, [sp, #24]
 8008152:	eba3 0309 	sub.w	r3, r3, r9
 8008156:	455b      	cmp	r3, fp
 8008158:	dc31      	bgt.n	80081be <_printf_float+0x36e>
 800815a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800815c:	459a      	cmp	sl, r3
 800815e:	dc3a      	bgt.n	80081d6 <_printf_float+0x386>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	07da      	lsls	r2, r3, #31
 8008164:	d437      	bmi.n	80081d6 <_printf_float+0x386>
 8008166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008168:	ebaa 0903 	sub.w	r9, sl, r3
 800816c:	9b06      	ldr	r3, [sp, #24]
 800816e:	ebaa 0303 	sub.w	r3, sl, r3
 8008172:	4599      	cmp	r9, r3
 8008174:	bfa8      	it	ge
 8008176:	4699      	movge	r9, r3
 8008178:	f1b9 0f00 	cmp.w	r9, #0
 800817c:	dc33      	bgt.n	80081e6 <_printf_float+0x396>
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008186:	f104 0b1a 	add.w	fp, r4, #26
 800818a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818c:	ebaa 0303 	sub.w	r3, sl, r3
 8008190:	eba3 0309 	sub.w	r3, r3, r9
 8008194:	4543      	cmp	r3, r8
 8008196:	f77f af79 	ble.w	800808c <_printf_float+0x23c>
 800819a:	2301      	movs	r3, #1
 800819c:	465a      	mov	r2, fp
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	f43f aeae 	beq.w	8007f06 <_printf_float+0xb6>
 80081aa:	f108 0801 	add.w	r8, r8, #1
 80081ae:	e7ec      	b.n	800818a <_printf_float+0x33a>
 80081b0:	4642      	mov	r2, r8
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	d1c2      	bne.n	8008142 <_printf_float+0x2f2>
 80081bc:	e6a3      	b.n	8007f06 <_printf_float+0xb6>
 80081be:	2301      	movs	r3, #1
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	9206      	str	r2, [sp, #24]
 80081c6:	47b8      	blx	r7
 80081c8:	3001      	adds	r0, #1
 80081ca:	f43f ae9c 	beq.w	8007f06 <_printf_float+0xb6>
 80081ce:	9a06      	ldr	r2, [sp, #24]
 80081d0:	f10b 0b01 	add.w	fp, fp, #1
 80081d4:	e7bb      	b.n	800814e <_printf_float+0x2fe>
 80081d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081da:	4631      	mov	r1, r6
 80081dc:	4628      	mov	r0, r5
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	d1c0      	bne.n	8008166 <_printf_float+0x316>
 80081e4:	e68f      	b.n	8007f06 <_printf_float+0xb6>
 80081e6:	9a06      	ldr	r2, [sp, #24]
 80081e8:	464b      	mov	r3, r9
 80081ea:	4442      	add	r2, r8
 80081ec:	4631      	mov	r1, r6
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	d1c3      	bne.n	800817e <_printf_float+0x32e>
 80081f6:	e686      	b.n	8007f06 <_printf_float+0xb6>
 80081f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081fc:	f1ba 0f01 	cmp.w	sl, #1
 8008200:	dc01      	bgt.n	8008206 <_printf_float+0x3b6>
 8008202:	07db      	lsls	r3, r3, #31
 8008204:	d536      	bpl.n	8008274 <_printf_float+0x424>
 8008206:	2301      	movs	r3, #1
 8008208:	4642      	mov	r2, r8
 800820a:	4631      	mov	r1, r6
 800820c:	4628      	mov	r0, r5
 800820e:	47b8      	blx	r7
 8008210:	3001      	adds	r0, #1
 8008212:	f43f ae78 	beq.w	8007f06 <_printf_float+0xb6>
 8008216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800821a:	4631      	mov	r1, r6
 800821c:	4628      	mov	r0, r5
 800821e:	47b8      	blx	r7
 8008220:	3001      	adds	r0, #1
 8008222:	f43f ae70 	beq.w	8007f06 <_printf_float+0xb6>
 8008226:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800822a:	2200      	movs	r2, #0
 800822c:	2300      	movs	r3, #0
 800822e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008232:	f7f8 fc51 	bl	8000ad8 <__aeabi_dcmpeq>
 8008236:	b9c0      	cbnz	r0, 800826a <_printf_float+0x41a>
 8008238:	4653      	mov	r3, sl
 800823a:	f108 0201 	add.w	r2, r8, #1
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	d10c      	bne.n	8008262 <_printf_float+0x412>
 8008248:	e65d      	b.n	8007f06 <_printf_float+0xb6>
 800824a:	2301      	movs	r3, #1
 800824c:	465a      	mov	r2, fp
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	f43f ae56 	beq.w	8007f06 <_printf_float+0xb6>
 800825a:	f108 0801 	add.w	r8, r8, #1
 800825e:	45d0      	cmp	r8, sl
 8008260:	dbf3      	blt.n	800824a <_printf_float+0x3fa>
 8008262:	464b      	mov	r3, r9
 8008264:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008268:	e6df      	b.n	800802a <_printf_float+0x1da>
 800826a:	f04f 0800 	mov.w	r8, #0
 800826e:	f104 0b1a 	add.w	fp, r4, #26
 8008272:	e7f4      	b.n	800825e <_printf_float+0x40e>
 8008274:	2301      	movs	r3, #1
 8008276:	4642      	mov	r2, r8
 8008278:	e7e1      	b.n	800823e <_printf_float+0x3ee>
 800827a:	2301      	movs	r3, #1
 800827c:	464a      	mov	r2, r9
 800827e:	4631      	mov	r1, r6
 8008280:	4628      	mov	r0, r5
 8008282:	47b8      	blx	r7
 8008284:	3001      	adds	r0, #1
 8008286:	f43f ae3e 	beq.w	8007f06 <_printf_float+0xb6>
 800828a:	f108 0801 	add.w	r8, r8, #1
 800828e:	68e3      	ldr	r3, [r4, #12]
 8008290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008292:	1a5b      	subs	r3, r3, r1
 8008294:	4543      	cmp	r3, r8
 8008296:	dcf0      	bgt.n	800827a <_printf_float+0x42a>
 8008298:	e6fc      	b.n	8008094 <_printf_float+0x244>
 800829a:	f04f 0800 	mov.w	r8, #0
 800829e:	f104 0919 	add.w	r9, r4, #25
 80082a2:	e7f4      	b.n	800828e <_printf_float+0x43e>

080082a4 <_printf_common>:
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	4616      	mov	r6, r2
 80082aa:	4698      	mov	r8, r3
 80082ac:	688a      	ldr	r2, [r1, #8]
 80082ae:	690b      	ldr	r3, [r1, #16]
 80082b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082b4:	4293      	cmp	r3, r2
 80082b6:	bfb8      	it	lt
 80082b8:	4613      	movlt	r3, r2
 80082ba:	6033      	str	r3, [r6, #0]
 80082bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082c0:	4607      	mov	r7, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	b10a      	cbz	r2, 80082ca <_printf_common+0x26>
 80082c6:	3301      	adds	r3, #1
 80082c8:	6033      	str	r3, [r6, #0]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	0699      	lsls	r1, r3, #26
 80082ce:	bf42      	ittt	mi
 80082d0:	6833      	ldrmi	r3, [r6, #0]
 80082d2:	3302      	addmi	r3, #2
 80082d4:	6033      	strmi	r3, [r6, #0]
 80082d6:	6825      	ldr	r5, [r4, #0]
 80082d8:	f015 0506 	ands.w	r5, r5, #6
 80082dc:	d106      	bne.n	80082ec <_printf_common+0x48>
 80082de:	f104 0a19 	add.w	sl, r4, #25
 80082e2:	68e3      	ldr	r3, [r4, #12]
 80082e4:	6832      	ldr	r2, [r6, #0]
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	dc26      	bgt.n	800833a <_printf_common+0x96>
 80082ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082f0:	6822      	ldr	r2, [r4, #0]
 80082f2:	3b00      	subs	r3, #0
 80082f4:	bf18      	it	ne
 80082f6:	2301      	movne	r3, #1
 80082f8:	0692      	lsls	r2, r2, #26
 80082fa:	d42b      	bmi.n	8008354 <_printf_common+0xb0>
 80082fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008300:	4641      	mov	r1, r8
 8008302:	4638      	mov	r0, r7
 8008304:	47c8      	blx	r9
 8008306:	3001      	adds	r0, #1
 8008308:	d01e      	beq.n	8008348 <_printf_common+0xa4>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	f003 0306 	and.w	r3, r3, #6
 8008312:	2b04      	cmp	r3, #4
 8008314:	bf02      	ittt	eq
 8008316:	68e5      	ldreq	r5, [r4, #12]
 8008318:	6833      	ldreq	r3, [r6, #0]
 800831a:	1aed      	subeq	r5, r5, r3
 800831c:	68a3      	ldr	r3, [r4, #8]
 800831e:	bf0c      	ite	eq
 8008320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008324:	2500      	movne	r5, #0
 8008326:	4293      	cmp	r3, r2
 8008328:	bfc4      	itt	gt
 800832a:	1a9b      	subgt	r3, r3, r2
 800832c:	18ed      	addgt	r5, r5, r3
 800832e:	2600      	movs	r6, #0
 8008330:	341a      	adds	r4, #26
 8008332:	42b5      	cmp	r5, r6
 8008334:	d11a      	bne.n	800836c <_printf_common+0xc8>
 8008336:	2000      	movs	r0, #0
 8008338:	e008      	b.n	800834c <_printf_common+0xa8>
 800833a:	2301      	movs	r3, #1
 800833c:	4652      	mov	r2, sl
 800833e:	4641      	mov	r1, r8
 8008340:	4638      	mov	r0, r7
 8008342:	47c8      	blx	r9
 8008344:	3001      	adds	r0, #1
 8008346:	d103      	bne.n	8008350 <_printf_common+0xac>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008350:	3501      	adds	r5, #1
 8008352:	e7c6      	b.n	80082e2 <_printf_common+0x3e>
 8008354:	18e1      	adds	r1, r4, r3
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	2030      	movs	r0, #48	@ 0x30
 800835a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800835e:	4422      	add	r2, r4
 8008360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008368:	3302      	adds	r3, #2
 800836a:	e7c7      	b.n	80082fc <_printf_common+0x58>
 800836c:	2301      	movs	r3, #1
 800836e:	4622      	mov	r2, r4
 8008370:	4641      	mov	r1, r8
 8008372:	4638      	mov	r0, r7
 8008374:	47c8      	blx	r9
 8008376:	3001      	adds	r0, #1
 8008378:	d0e6      	beq.n	8008348 <_printf_common+0xa4>
 800837a:	3601      	adds	r6, #1
 800837c:	e7d9      	b.n	8008332 <_printf_common+0x8e>
	...

08008380 <_printf_i>:
 8008380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	7e0f      	ldrb	r7, [r1, #24]
 8008386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008388:	2f78      	cmp	r7, #120	@ 0x78
 800838a:	4691      	mov	r9, r2
 800838c:	4680      	mov	r8, r0
 800838e:	460c      	mov	r4, r1
 8008390:	469a      	mov	sl, r3
 8008392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008396:	d807      	bhi.n	80083a8 <_printf_i+0x28>
 8008398:	2f62      	cmp	r7, #98	@ 0x62
 800839a:	d80a      	bhi.n	80083b2 <_printf_i+0x32>
 800839c:	2f00      	cmp	r7, #0
 800839e:	f000 80d2 	beq.w	8008546 <_printf_i+0x1c6>
 80083a2:	2f58      	cmp	r7, #88	@ 0x58
 80083a4:	f000 80b9 	beq.w	800851a <_printf_i+0x19a>
 80083a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083b0:	e03a      	b.n	8008428 <_printf_i+0xa8>
 80083b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083b6:	2b15      	cmp	r3, #21
 80083b8:	d8f6      	bhi.n	80083a8 <_printf_i+0x28>
 80083ba:	a101      	add	r1, pc, #4	@ (adr r1, 80083c0 <_printf_i+0x40>)
 80083bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083c0:	08008419 	.word	0x08008419
 80083c4:	0800842d 	.word	0x0800842d
 80083c8:	080083a9 	.word	0x080083a9
 80083cc:	080083a9 	.word	0x080083a9
 80083d0:	080083a9 	.word	0x080083a9
 80083d4:	080083a9 	.word	0x080083a9
 80083d8:	0800842d 	.word	0x0800842d
 80083dc:	080083a9 	.word	0x080083a9
 80083e0:	080083a9 	.word	0x080083a9
 80083e4:	080083a9 	.word	0x080083a9
 80083e8:	080083a9 	.word	0x080083a9
 80083ec:	0800852d 	.word	0x0800852d
 80083f0:	08008457 	.word	0x08008457
 80083f4:	080084e7 	.word	0x080084e7
 80083f8:	080083a9 	.word	0x080083a9
 80083fc:	080083a9 	.word	0x080083a9
 8008400:	0800854f 	.word	0x0800854f
 8008404:	080083a9 	.word	0x080083a9
 8008408:	08008457 	.word	0x08008457
 800840c:	080083a9 	.word	0x080083a9
 8008410:	080083a9 	.word	0x080083a9
 8008414:	080084ef 	.word	0x080084ef
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	1d1a      	adds	r2, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6032      	str	r2, [r6, #0]
 8008420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008428:	2301      	movs	r3, #1
 800842a:	e09d      	b.n	8008568 <_printf_i+0x1e8>
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	6820      	ldr	r0, [r4, #0]
 8008430:	1d19      	adds	r1, r3, #4
 8008432:	6031      	str	r1, [r6, #0]
 8008434:	0606      	lsls	r6, r0, #24
 8008436:	d501      	bpl.n	800843c <_printf_i+0xbc>
 8008438:	681d      	ldr	r5, [r3, #0]
 800843a:	e003      	b.n	8008444 <_printf_i+0xc4>
 800843c:	0645      	lsls	r5, r0, #25
 800843e:	d5fb      	bpl.n	8008438 <_printf_i+0xb8>
 8008440:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008444:	2d00      	cmp	r5, #0
 8008446:	da03      	bge.n	8008450 <_printf_i+0xd0>
 8008448:	232d      	movs	r3, #45	@ 0x2d
 800844a:	426d      	negs	r5, r5
 800844c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008450:	4859      	ldr	r0, [pc, #356]	@ (80085b8 <_printf_i+0x238>)
 8008452:	230a      	movs	r3, #10
 8008454:	e011      	b.n	800847a <_printf_i+0xfa>
 8008456:	6821      	ldr	r1, [r4, #0]
 8008458:	6833      	ldr	r3, [r6, #0]
 800845a:	0608      	lsls	r0, r1, #24
 800845c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008460:	d402      	bmi.n	8008468 <_printf_i+0xe8>
 8008462:	0649      	lsls	r1, r1, #25
 8008464:	bf48      	it	mi
 8008466:	b2ad      	uxthmi	r5, r5
 8008468:	2f6f      	cmp	r7, #111	@ 0x6f
 800846a:	4853      	ldr	r0, [pc, #332]	@ (80085b8 <_printf_i+0x238>)
 800846c:	6033      	str	r3, [r6, #0]
 800846e:	bf14      	ite	ne
 8008470:	230a      	movne	r3, #10
 8008472:	2308      	moveq	r3, #8
 8008474:	2100      	movs	r1, #0
 8008476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800847a:	6866      	ldr	r6, [r4, #4]
 800847c:	60a6      	str	r6, [r4, #8]
 800847e:	2e00      	cmp	r6, #0
 8008480:	bfa2      	ittt	ge
 8008482:	6821      	ldrge	r1, [r4, #0]
 8008484:	f021 0104 	bicge.w	r1, r1, #4
 8008488:	6021      	strge	r1, [r4, #0]
 800848a:	b90d      	cbnz	r5, 8008490 <_printf_i+0x110>
 800848c:	2e00      	cmp	r6, #0
 800848e:	d04b      	beq.n	8008528 <_printf_i+0x1a8>
 8008490:	4616      	mov	r6, r2
 8008492:	fbb5 f1f3 	udiv	r1, r5, r3
 8008496:	fb03 5711 	mls	r7, r3, r1, r5
 800849a:	5dc7      	ldrb	r7, [r0, r7]
 800849c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084a0:	462f      	mov	r7, r5
 80084a2:	42bb      	cmp	r3, r7
 80084a4:	460d      	mov	r5, r1
 80084a6:	d9f4      	bls.n	8008492 <_printf_i+0x112>
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d10b      	bne.n	80084c4 <_printf_i+0x144>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	07df      	lsls	r7, r3, #31
 80084b0:	d508      	bpl.n	80084c4 <_printf_i+0x144>
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	6861      	ldr	r1, [r4, #4]
 80084b6:	4299      	cmp	r1, r3
 80084b8:	bfde      	ittt	le
 80084ba:	2330      	movle	r3, #48	@ 0x30
 80084bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084c4:	1b92      	subs	r2, r2, r6
 80084c6:	6122      	str	r2, [r4, #16]
 80084c8:	f8cd a000 	str.w	sl, [sp]
 80084cc:	464b      	mov	r3, r9
 80084ce:	aa03      	add	r2, sp, #12
 80084d0:	4621      	mov	r1, r4
 80084d2:	4640      	mov	r0, r8
 80084d4:	f7ff fee6 	bl	80082a4 <_printf_common>
 80084d8:	3001      	adds	r0, #1
 80084da:	d14a      	bne.n	8008572 <_printf_i+0x1f2>
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	b004      	add	sp, #16
 80084e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	f043 0320 	orr.w	r3, r3, #32
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	4833      	ldr	r0, [pc, #204]	@ (80085bc <_printf_i+0x23c>)
 80084f0:	2778      	movs	r7, #120	@ 0x78
 80084f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	6831      	ldr	r1, [r6, #0]
 80084fa:	061f      	lsls	r7, r3, #24
 80084fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008500:	d402      	bmi.n	8008508 <_printf_i+0x188>
 8008502:	065f      	lsls	r7, r3, #25
 8008504:	bf48      	it	mi
 8008506:	b2ad      	uxthmi	r5, r5
 8008508:	6031      	str	r1, [r6, #0]
 800850a:	07d9      	lsls	r1, r3, #31
 800850c:	bf44      	itt	mi
 800850e:	f043 0320 	orrmi.w	r3, r3, #32
 8008512:	6023      	strmi	r3, [r4, #0]
 8008514:	b11d      	cbz	r5, 800851e <_printf_i+0x19e>
 8008516:	2310      	movs	r3, #16
 8008518:	e7ac      	b.n	8008474 <_printf_i+0xf4>
 800851a:	4827      	ldr	r0, [pc, #156]	@ (80085b8 <_printf_i+0x238>)
 800851c:	e7e9      	b.n	80084f2 <_printf_i+0x172>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f023 0320 	bic.w	r3, r3, #32
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	e7f6      	b.n	8008516 <_printf_i+0x196>
 8008528:	4616      	mov	r6, r2
 800852a:	e7bd      	b.n	80084a8 <_printf_i+0x128>
 800852c:	6833      	ldr	r3, [r6, #0]
 800852e:	6825      	ldr	r5, [r4, #0]
 8008530:	6961      	ldr	r1, [r4, #20]
 8008532:	1d18      	adds	r0, r3, #4
 8008534:	6030      	str	r0, [r6, #0]
 8008536:	062e      	lsls	r6, r5, #24
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	d501      	bpl.n	8008540 <_printf_i+0x1c0>
 800853c:	6019      	str	r1, [r3, #0]
 800853e:	e002      	b.n	8008546 <_printf_i+0x1c6>
 8008540:	0668      	lsls	r0, r5, #25
 8008542:	d5fb      	bpl.n	800853c <_printf_i+0x1bc>
 8008544:	8019      	strh	r1, [r3, #0]
 8008546:	2300      	movs	r3, #0
 8008548:	6123      	str	r3, [r4, #16]
 800854a:	4616      	mov	r6, r2
 800854c:	e7bc      	b.n	80084c8 <_printf_i+0x148>
 800854e:	6833      	ldr	r3, [r6, #0]
 8008550:	1d1a      	adds	r2, r3, #4
 8008552:	6032      	str	r2, [r6, #0]
 8008554:	681e      	ldr	r6, [r3, #0]
 8008556:	6862      	ldr	r2, [r4, #4]
 8008558:	2100      	movs	r1, #0
 800855a:	4630      	mov	r0, r6
 800855c:	f7f7 fe40 	bl	80001e0 <memchr>
 8008560:	b108      	cbz	r0, 8008566 <_printf_i+0x1e6>
 8008562:	1b80      	subs	r0, r0, r6
 8008564:	6060      	str	r0, [r4, #4]
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	6123      	str	r3, [r4, #16]
 800856a:	2300      	movs	r3, #0
 800856c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008570:	e7aa      	b.n	80084c8 <_printf_i+0x148>
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	4632      	mov	r2, r6
 8008576:	4649      	mov	r1, r9
 8008578:	4640      	mov	r0, r8
 800857a:	47d0      	blx	sl
 800857c:	3001      	adds	r0, #1
 800857e:	d0ad      	beq.n	80084dc <_printf_i+0x15c>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	079b      	lsls	r3, r3, #30
 8008584:	d413      	bmi.n	80085ae <_printf_i+0x22e>
 8008586:	68e0      	ldr	r0, [r4, #12]
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	4298      	cmp	r0, r3
 800858c:	bfb8      	it	lt
 800858e:	4618      	movlt	r0, r3
 8008590:	e7a6      	b.n	80084e0 <_printf_i+0x160>
 8008592:	2301      	movs	r3, #1
 8008594:	4632      	mov	r2, r6
 8008596:	4649      	mov	r1, r9
 8008598:	4640      	mov	r0, r8
 800859a:	47d0      	blx	sl
 800859c:	3001      	adds	r0, #1
 800859e:	d09d      	beq.n	80084dc <_printf_i+0x15c>
 80085a0:	3501      	adds	r5, #1
 80085a2:	68e3      	ldr	r3, [r4, #12]
 80085a4:	9903      	ldr	r1, [sp, #12]
 80085a6:	1a5b      	subs	r3, r3, r1
 80085a8:	42ab      	cmp	r3, r5
 80085aa:	dcf2      	bgt.n	8008592 <_printf_i+0x212>
 80085ac:	e7eb      	b.n	8008586 <_printf_i+0x206>
 80085ae:	2500      	movs	r5, #0
 80085b0:	f104 0619 	add.w	r6, r4, #25
 80085b4:	e7f5      	b.n	80085a2 <_printf_i+0x222>
 80085b6:	bf00      	nop
 80085b8:	0800b3ee 	.word	0x0800b3ee
 80085bc:	0800b3ff 	.word	0x0800b3ff

080085c0 <__sflush_r>:
 80085c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	0716      	lsls	r6, r2, #28
 80085ca:	4605      	mov	r5, r0
 80085cc:	460c      	mov	r4, r1
 80085ce:	d454      	bmi.n	800867a <__sflush_r+0xba>
 80085d0:	684b      	ldr	r3, [r1, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dc02      	bgt.n	80085dc <__sflush_r+0x1c>
 80085d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dd48      	ble.n	800866e <__sflush_r+0xae>
 80085dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085de:	2e00      	cmp	r6, #0
 80085e0:	d045      	beq.n	800866e <__sflush_r+0xae>
 80085e2:	2300      	movs	r3, #0
 80085e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085e8:	682f      	ldr	r7, [r5, #0]
 80085ea:	6a21      	ldr	r1, [r4, #32]
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	d030      	beq.n	8008652 <__sflush_r+0x92>
 80085f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	0759      	lsls	r1, r3, #29
 80085f6:	d505      	bpl.n	8008604 <__sflush_r+0x44>
 80085f8:	6863      	ldr	r3, [r4, #4]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085fe:	b10b      	cbz	r3, 8008604 <__sflush_r+0x44>
 8008600:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008602:	1ad2      	subs	r2, r2, r3
 8008604:	2300      	movs	r3, #0
 8008606:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008608:	6a21      	ldr	r1, [r4, #32]
 800860a:	4628      	mov	r0, r5
 800860c:	47b0      	blx	r6
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	d106      	bne.n	8008622 <__sflush_r+0x62>
 8008614:	6829      	ldr	r1, [r5, #0]
 8008616:	291d      	cmp	r1, #29
 8008618:	d82b      	bhi.n	8008672 <__sflush_r+0xb2>
 800861a:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <__sflush_r+0x104>)
 800861c:	410a      	asrs	r2, r1
 800861e:	07d6      	lsls	r6, r2, #31
 8008620:	d427      	bmi.n	8008672 <__sflush_r+0xb2>
 8008622:	2200      	movs	r2, #0
 8008624:	6062      	str	r2, [r4, #4]
 8008626:	04d9      	lsls	r1, r3, #19
 8008628:	6922      	ldr	r2, [r4, #16]
 800862a:	6022      	str	r2, [r4, #0]
 800862c:	d504      	bpl.n	8008638 <__sflush_r+0x78>
 800862e:	1c42      	adds	r2, r0, #1
 8008630:	d101      	bne.n	8008636 <__sflush_r+0x76>
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	b903      	cbnz	r3, 8008638 <__sflush_r+0x78>
 8008636:	6560      	str	r0, [r4, #84]	@ 0x54
 8008638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800863a:	602f      	str	r7, [r5, #0]
 800863c:	b1b9      	cbz	r1, 800866e <__sflush_r+0xae>
 800863e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008642:	4299      	cmp	r1, r3
 8008644:	d002      	beq.n	800864c <__sflush_r+0x8c>
 8008646:	4628      	mov	r0, r5
 8008648:	f001 f97e 	bl	8009948 <_free_r>
 800864c:	2300      	movs	r3, #0
 800864e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008650:	e00d      	b.n	800866e <__sflush_r+0xae>
 8008652:	2301      	movs	r3, #1
 8008654:	4628      	mov	r0, r5
 8008656:	47b0      	blx	r6
 8008658:	4602      	mov	r2, r0
 800865a:	1c50      	adds	r0, r2, #1
 800865c:	d1c9      	bne.n	80085f2 <__sflush_r+0x32>
 800865e:	682b      	ldr	r3, [r5, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0c6      	beq.n	80085f2 <__sflush_r+0x32>
 8008664:	2b1d      	cmp	r3, #29
 8008666:	d001      	beq.n	800866c <__sflush_r+0xac>
 8008668:	2b16      	cmp	r3, #22
 800866a:	d11e      	bne.n	80086aa <__sflush_r+0xea>
 800866c:	602f      	str	r7, [r5, #0]
 800866e:	2000      	movs	r0, #0
 8008670:	e022      	b.n	80086b8 <__sflush_r+0xf8>
 8008672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008676:	b21b      	sxth	r3, r3
 8008678:	e01b      	b.n	80086b2 <__sflush_r+0xf2>
 800867a:	690f      	ldr	r7, [r1, #16]
 800867c:	2f00      	cmp	r7, #0
 800867e:	d0f6      	beq.n	800866e <__sflush_r+0xae>
 8008680:	0793      	lsls	r3, r2, #30
 8008682:	680e      	ldr	r6, [r1, #0]
 8008684:	bf08      	it	eq
 8008686:	694b      	ldreq	r3, [r1, #20]
 8008688:	600f      	str	r7, [r1, #0]
 800868a:	bf18      	it	ne
 800868c:	2300      	movne	r3, #0
 800868e:	eba6 0807 	sub.w	r8, r6, r7
 8008692:	608b      	str	r3, [r1, #8]
 8008694:	f1b8 0f00 	cmp.w	r8, #0
 8008698:	dde9      	ble.n	800866e <__sflush_r+0xae>
 800869a:	6a21      	ldr	r1, [r4, #32]
 800869c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800869e:	4643      	mov	r3, r8
 80086a0:	463a      	mov	r2, r7
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b0      	blx	r6
 80086a6:	2800      	cmp	r0, #0
 80086a8:	dc08      	bgt.n	80086bc <__sflush_r+0xfc>
 80086aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295
 80086b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086bc:	4407      	add	r7, r0
 80086be:	eba8 0800 	sub.w	r8, r8, r0
 80086c2:	e7e7      	b.n	8008694 <__sflush_r+0xd4>
 80086c4:	dfbffffe 	.word	0xdfbffffe

080086c8 <_fflush_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	690b      	ldr	r3, [r1, #16]
 80086cc:	4605      	mov	r5, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	b913      	cbnz	r3, 80086d8 <_fflush_r+0x10>
 80086d2:	2500      	movs	r5, #0
 80086d4:	4628      	mov	r0, r5
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	b118      	cbz	r0, 80086e2 <_fflush_r+0x1a>
 80086da:	6a03      	ldr	r3, [r0, #32]
 80086dc:	b90b      	cbnz	r3, 80086e2 <_fflush_r+0x1a>
 80086de:	f000 f8bb 	bl	8008858 <__sinit>
 80086e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f3      	beq.n	80086d2 <_fflush_r+0xa>
 80086ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086ec:	07d0      	lsls	r0, r2, #31
 80086ee:	d404      	bmi.n	80086fa <_fflush_r+0x32>
 80086f0:	0599      	lsls	r1, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_fflush_r+0x32>
 80086f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086f6:	f000 faca 	bl	8008c8e <__retarget_lock_acquire_recursive>
 80086fa:	4628      	mov	r0, r5
 80086fc:	4621      	mov	r1, r4
 80086fe:	f7ff ff5f 	bl	80085c0 <__sflush_r>
 8008702:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008704:	07da      	lsls	r2, r3, #31
 8008706:	4605      	mov	r5, r0
 8008708:	d4e4      	bmi.n	80086d4 <_fflush_r+0xc>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	059b      	lsls	r3, r3, #22
 800870e:	d4e1      	bmi.n	80086d4 <_fflush_r+0xc>
 8008710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008712:	f000 fabd 	bl	8008c90 <__retarget_lock_release_recursive>
 8008716:	e7dd      	b.n	80086d4 <_fflush_r+0xc>

08008718 <fflush>:
 8008718:	4601      	mov	r1, r0
 800871a:	b920      	cbnz	r0, 8008726 <fflush+0xe>
 800871c:	4a04      	ldr	r2, [pc, #16]	@ (8008730 <fflush+0x18>)
 800871e:	4905      	ldr	r1, [pc, #20]	@ (8008734 <fflush+0x1c>)
 8008720:	4805      	ldr	r0, [pc, #20]	@ (8008738 <fflush+0x20>)
 8008722:	f000 b8b1 	b.w	8008888 <_fwalk_sglue>
 8008726:	4b05      	ldr	r3, [pc, #20]	@ (800873c <fflush+0x24>)
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	f7ff bfcd 	b.w	80086c8 <_fflush_r>
 800872e:	bf00      	nop
 8008730:	2000001c 	.word	0x2000001c
 8008734:	080086c9 	.word	0x080086c9
 8008738:	2000002c 	.word	0x2000002c
 800873c:	20000028 	.word	0x20000028

08008740 <std>:
 8008740:	2300      	movs	r3, #0
 8008742:	b510      	push	{r4, lr}
 8008744:	4604      	mov	r4, r0
 8008746:	e9c0 3300 	strd	r3, r3, [r0]
 800874a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800874e:	6083      	str	r3, [r0, #8]
 8008750:	8181      	strh	r1, [r0, #12]
 8008752:	6643      	str	r3, [r0, #100]	@ 0x64
 8008754:	81c2      	strh	r2, [r0, #14]
 8008756:	6183      	str	r3, [r0, #24]
 8008758:	4619      	mov	r1, r3
 800875a:	2208      	movs	r2, #8
 800875c:	305c      	adds	r0, #92	@ 0x5c
 800875e:	f000 fa19 	bl	8008b94 <memset>
 8008762:	4b0d      	ldr	r3, [pc, #52]	@ (8008798 <std+0x58>)
 8008764:	6263      	str	r3, [r4, #36]	@ 0x24
 8008766:	4b0d      	ldr	r3, [pc, #52]	@ (800879c <std+0x5c>)
 8008768:	62a3      	str	r3, [r4, #40]	@ 0x28
 800876a:	4b0d      	ldr	r3, [pc, #52]	@ (80087a0 <std+0x60>)
 800876c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800876e:	4b0d      	ldr	r3, [pc, #52]	@ (80087a4 <std+0x64>)
 8008770:	6323      	str	r3, [r4, #48]	@ 0x30
 8008772:	4b0d      	ldr	r3, [pc, #52]	@ (80087a8 <std+0x68>)
 8008774:	6224      	str	r4, [r4, #32]
 8008776:	429c      	cmp	r4, r3
 8008778:	d006      	beq.n	8008788 <std+0x48>
 800877a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800877e:	4294      	cmp	r4, r2
 8008780:	d002      	beq.n	8008788 <std+0x48>
 8008782:	33d0      	adds	r3, #208	@ 0xd0
 8008784:	429c      	cmp	r4, r3
 8008786:	d105      	bne.n	8008794 <std+0x54>
 8008788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800878c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008790:	f000 ba7c 	b.w	8008c8c <__retarget_lock_init_recursive>
 8008794:	bd10      	pop	{r4, pc}
 8008796:	bf00      	nop
 8008798:	080089e5 	.word	0x080089e5
 800879c:	08008a07 	.word	0x08008a07
 80087a0:	08008a3f 	.word	0x08008a3f
 80087a4:	08008a63 	.word	0x08008a63
 80087a8:	2000087c 	.word	0x2000087c

080087ac <stdio_exit_handler>:
 80087ac:	4a02      	ldr	r2, [pc, #8]	@ (80087b8 <stdio_exit_handler+0xc>)
 80087ae:	4903      	ldr	r1, [pc, #12]	@ (80087bc <stdio_exit_handler+0x10>)
 80087b0:	4803      	ldr	r0, [pc, #12]	@ (80087c0 <stdio_exit_handler+0x14>)
 80087b2:	f000 b869 	b.w	8008888 <_fwalk_sglue>
 80087b6:	bf00      	nop
 80087b8:	2000001c 	.word	0x2000001c
 80087bc:	080086c9 	.word	0x080086c9
 80087c0:	2000002c 	.word	0x2000002c

080087c4 <cleanup_stdio>:
 80087c4:	6841      	ldr	r1, [r0, #4]
 80087c6:	4b0c      	ldr	r3, [pc, #48]	@ (80087f8 <cleanup_stdio+0x34>)
 80087c8:	4299      	cmp	r1, r3
 80087ca:	b510      	push	{r4, lr}
 80087cc:	4604      	mov	r4, r0
 80087ce:	d001      	beq.n	80087d4 <cleanup_stdio+0x10>
 80087d0:	f7ff ff7a 	bl	80086c8 <_fflush_r>
 80087d4:	68a1      	ldr	r1, [r4, #8]
 80087d6:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <cleanup_stdio+0x38>)
 80087d8:	4299      	cmp	r1, r3
 80087da:	d002      	beq.n	80087e2 <cleanup_stdio+0x1e>
 80087dc:	4620      	mov	r0, r4
 80087de:	f7ff ff73 	bl	80086c8 <_fflush_r>
 80087e2:	68e1      	ldr	r1, [r4, #12]
 80087e4:	4b06      	ldr	r3, [pc, #24]	@ (8008800 <cleanup_stdio+0x3c>)
 80087e6:	4299      	cmp	r1, r3
 80087e8:	d004      	beq.n	80087f4 <cleanup_stdio+0x30>
 80087ea:	4620      	mov	r0, r4
 80087ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f0:	f7ff bf6a 	b.w	80086c8 <_fflush_r>
 80087f4:	bd10      	pop	{r4, pc}
 80087f6:	bf00      	nop
 80087f8:	2000087c 	.word	0x2000087c
 80087fc:	200008e4 	.word	0x200008e4
 8008800:	2000094c 	.word	0x2000094c

08008804 <global_stdio_init.part.0>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <global_stdio_init.part.0+0x30>)
 8008808:	4c0b      	ldr	r4, [pc, #44]	@ (8008838 <global_stdio_init.part.0+0x34>)
 800880a:	4a0c      	ldr	r2, [pc, #48]	@ (800883c <global_stdio_init.part.0+0x38>)
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	4620      	mov	r0, r4
 8008810:	2200      	movs	r2, #0
 8008812:	2104      	movs	r1, #4
 8008814:	f7ff ff94 	bl	8008740 <std>
 8008818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800881c:	2201      	movs	r2, #1
 800881e:	2109      	movs	r1, #9
 8008820:	f7ff ff8e 	bl	8008740 <std>
 8008824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008828:	2202      	movs	r2, #2
 800882a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882e:	2112      	movs	r1, #18
 8008830:	f7ff bf86 	b.w	8008740 <std>
 8008834:	200009b4 	.word	0x200009b4
 8008838:	2000087c 	.word	0x2000087c
 800883c:	080087ad 	.word	0x080087ad

08008840 <__sfp_lock_acquire>:
 8008840:	4801      	ldr	r0, [pc, #4]	@ (8008848 <__sfp_lock_acquire+0x8>)
 8008842:	f000 ba24 	b.w	8008c8e <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	200009bd 	.word	0x200009bd

0800884c <__sfp_lock_release>:
 800884c:	4801      	ldr	r0, [pc, #4]	@ (8008854 <__sfp_lock_release+0x8>)
 800884e:	f000 ba1f 	b.w	8008c90 <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	200009bd 	.word	0x200009bd

08008858 <__sinit>:
 8008858:	b510      	push	{r4, lr}
 800885a:	4604      	mov	r4, r0
 800885c:	f7ff fff0 	bl	8008840 <__sfp_lock_acquire>
 8008860:	6a23      	ldr	r3, [r4, #32]
 8008862:	b11b      	cbz	r3, 800886c <__sinit+0x14>
 8008864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008868:	f7ff bff0 	b.w	800884c <__sfp_lock_release>
 800886c:	4b04      	ldr	r3, [pc, #16]	@ (8008880 <__sinit+0x28>)
 800886e:	6223      	str	r3, [r4, #32]
 8008870:	4b04      	ldr	r3, [pc, #16]	@ (8008884 <__sinit+0x2c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f5      	bne.n	8008864 <__sinit+0xc>
 8008878:	f7ff ffc4 	bl	8008804 <global_stdio_init.part.0>
 800887c:	e7f2      	b.n	8008864 <__sinit+0xc>
 800887e:	bf00      	nop
 8008880:	080087c5 	.word	0x080087c5
 8008884:	200009b4 	.word	0x200009b4

08008888 <_fwalk_sglue>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	4607      	mov	r7, r0
 800888e:	4688      	mov	r8, r1
 8008890:	4614      	mov	r4, r2
 8008892:	2600      	movs	r6, #0
 8008894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008898:	f1b9 0901 	subs.w	r9, r9, #1
 800889c:	d505      	bpl.n	80088aa <_fwalk_sglue+0x22>
 800889e:	6824      	ldr	r4, [r4, #0]
 80088a0:	2c00      	cmp	r4, #0
 80088a2:	d1f7      	bne.n	8008894 <_fwalk_sglue+0xc>
 80088a4:	4630      	mov	r0, r6
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d907      	bls.n	80088c0 <_fwalk_sglue+0x38>
 80088b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088b4:	3301      	adds	r3, #1
 80088b6:	d003      	beq.n	80088c0 <_fwalk_sglue+0x38>
 80088b8:	4629      	mov	r1, r5
 80088ba:	4638      	mov	r0, r7
 80088bc:	47c0      	blx	r8
 80088be:	4306      	orrs	r6, r0
 80088c0:	3568      	adds	r5, #104	@ 0x68
 80088c2:	e7e9      	b.n	8008898 <_fwalk_sglue+0x10>

080088c4 <iprintf>:
 80088c4:	b40f      	push	{r0, r1, r2, r3}
 80088c6:	b507      	push	{r0, r1, r2, lr}
 80088c8:	4906      	ldr	r1, [pc, #24]	@ (80088e4 <iprintf+0x20>)
 80088ca:	ab04      	add	r3, sp, #16
 80088cc:	6808      	ldr	r0, [r1, #0]
 80088ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d2:	6881      	ldr	r1, [r0, #8]
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	f001 fe3b 	bl	800a550 <_vfiprintf_r>
 80088da:	b003      	add	sp, #12
 80088dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e0:	b004      	add	sp, #16
 80088e2:	4770      	bx	lr
 80088e4:	20000028 	.word	0x20000028

080088e8 <_puts_r>:
 80088e8:	6a03      	ldr	r3, [r0, #32]
 80088ea:	b570      	push	{r4, r5, r6, lr}
 80088ec:	6884      	ldr	r4, [r0, #8]
 80088ee:	4605      	mov	r5, r0
 80088f0:	460e      	mov	r6, r1
 80088f2:	b90b      	cbnz	r3, 80088f8 <_puts_r+0x10>
 80088f4:	f7ff ffb0 	bl	8008858 <__sinit>
 80088f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088fa:	07db      	lsls	r3, r3, #31
 80088fc:	d405      	bmi.n	800890a <_puts_r+0x22>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	0598      	lsls	r0, r3, #22
 8008902:	d402      	bmi.n	800890a <_puts_r+0x22>
 8008904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008906:	f000 f9c2 	bl	8008c8e <__retarget_lock_acquire_recursive>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	0719      	lsls	r1, r3, #28
 800890e:	d502      	bpl.n	8008916 <_puts_r+0x2e>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d135      	bne.n	8008982 <_puts_r+0x9a>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f8e5 	bl	8008ae8 <__swsetup_r>
 800891e:	b380      	cbz	r0, 8008982 <_puts_r+0x9a>
 8008920:	f04f 35ff 	mov.w	r5, #4294967295
 8008924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008926:	07da      	lsls	r2, r3, #31
 8008928:	d405      	bmi.n	8008936 <_puts_r+0x4e>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	059b      	lsls	r3, r3, #22
 800892e:	d402      	bmi.n	8008936 <_puts_r+0x4e>
 8008930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008932:	f000 f9ad 	bl	8008c90 <__retarget_lock_release_recursive>
 8008936:	4628      	mov	r0, r5
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	2b00      	cmp	r3, #0
 800893c:	da04      	bge.n	8008948 <_puts_r+0x60>
 800893e:	69a2      	ldr	r2, [r4, #24]
 8008940:	429a      	cmp	r2, r3
 8008942:	dc17      	bgt.n	8008974 <_puts_r+0x8c>
 8008944:	290a      	cmp	r1, #10
 8008946:	d015      	beq.n	8008974 <_puts_r+0x8c>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	6022      	str	r2, [r4, #0]
 800894e:	7019      	strb	r1, [r3, #0]
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008956:	3b01      	subs	r3, #1
 8008958:	60a3      	str	r3, [r4, #8]
 800895a:	2900      	cmp	r1, #0
 800895c:	d1ed      	bne.n	800893a <_puts_r+0x52>
 800895e:	2b00      	cmp	r3, #0
 8008960:	da11      	bge.n	8008986 <_puts_r+0x9e>
 8008962:	4622      	mov	r2, r4
 8008964:	210a      	movs	r1, #10
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f87f 	bl	8008a6a <__swbuf_r>
 800896c:	3001      	adds	r0, #1
 800896e:	d0d7      	beq.n	8008920 <_puts_r+0x38>
 8008970:	250a      	movs	r5, #10
 8008972:	e7d7      	b.n	8008924 <_puts_r+0x3c>
 8008974:	4622      	mov	r2, r4
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f877 	bl	8008a6a <__swbuf_r>
 800897c:	3001      	adds	r0, #1
 800897e:	d1e7      	bne.n	8008950 <_puts_r+0x68>
 8008980:	e7ce      	b.n	8008920 <_puts_r+0x38>
 8008982:	3e01      	subs	r6, #1
 8008984:	e7e4      	b.n	8008950 <_puts_r+0x68>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	220a      	movs	r2, #10
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	e7ee      	b.n	8008970 <_puts_r+0x88>
	...

08008994 <puts>:
 8008994:	4b02      	ldr	r3, [pc, #8]	@ (80089a0 <puts+0xc>)
 8008996:	4601      	mov	r1, r0
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	f7ff bfa5 	b.w	80088e8 <_puts_r>
 800899e:	bf00      	nop
 80089a0:	20000028 	.word	0x20000028

080089a4 <siprintf>:
 80089a4:	b40e      	push	{r1, r2, r3}
 80089a6:	b500      	push	{lr}
 80089a8:	b09c      	sub	sp, #112	@ 0x70
 80089aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80089ac:	9002      	str	r0, [sp, #8]
 80089ae:	9006      	str	r0, [sp, #24]
 80089b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80089b4:	4809      	ldr	r0, [pc, #36]	@ (80089dc <siprintf+0x38>)
 80089b6:	9107      	str	r1, [sp, #28]
 80089b8:	9104      	str	r1, [sp, #16]
 80089ba:	4909      	ldr	r1, [pc, #36]	@ (80089e0 <siprintf+0x3c>)
 80089bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c0:	9105      	str	r1, [sp, #20]
 80089c2:	6800      	ldr	r0, [r0, #0]
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	a902      	add	r1, sp, #8
 80089c8:	f001 fc9c 	bl	800a304 <_svfiprintf_r>
 80089cc:	9b02      	ldr	r3, [sp, #8]
 80089ce:	2200      	movs	r2, #0
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	b01c      	add	sp, #112	@ 0x70
 80089d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d8:	b003      	add	sp, #12
 80089da:	4770      	bx	lr
 80089dc:	20000028 	.word	0x20000028
 80089e0:	ffff0208 	.word	0xffff0208

080089e4 <__sread>:
 80089e4:	b510      	push	{r4, lr}
 80089e6:	460c      	mov	r4, r1
 80089e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ec:	f000 f900 	bl	8008bf0 <_read_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	bfab      	itete	ge
 80089f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089f6:	89a3      	ldrhlt	r3, [r4, #12]
 80089f8:	181b      	addge	r3, r3, r0
 80089fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089fe:	bfac      	ite	ge
 8008a00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a02:	81a3      	strhlt	r3, [r4, #12]
 8008a04:	bd10      	pop	{r4, pc}

08008a06 <__swrite>:
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	461f      	mov	r7, r3
 8008a0c:	898b      	ldrh	r3, [r1, #12]
 8008a0e:	05db      	lsls	r3, r3, #23
 8008a10:	4605      	mov	r5, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	4616      	mov	r6, r2
 8008a16:	d505      	bpl.n	8008a24 <__swrite+0x1e>
 8008a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f000 f8d4 	bl	8008bcc <_lseek_r>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	4628      	mov	r0, r5
 8008a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3a:	f000 b8eb 	b.w	8008c14 <_write_r>

08008a3e <__sseek>:
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	460c      	mov	r4, r1
 8008a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a46:	f000 f8c1 	bl	8008bcc <_lseek_r>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	bf15      	itete	ne
 8008a50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a5a:	81a3      	strheq	r3, [r4, #12]
 8008a5c:	bf18      	it	ne
 8008a5e:	81a3      	strhne	r3, [r4, #12]
 8008a60:	bd10      	pop	{r4, pc}

08008a62 <__sclose>:
 8008a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a66:	f000 b8a1 	b.w	8008bac <_close_r>

08008a6a <__swbuf_r>:
 8008a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6c:	460e      	mov	r6, r1
 8008a6e:	4614      	mov	r4, r2
 8008a70:	4605      	mov	r5, r0
 8008a72:	b118      	cbz	r0, 8008a7c <__swbuf_r+0x12>
 8008a74:	6a03      	ldr	r3, [r0, #32]
 8008a76:	b90b      	cbnz	r3, 8008a7c <__swbuf_r+0x12>
 8008a78:	f7ff feee 	bl	8008858 <__sinit>
 8008a7c:	69a3      	ldr	r3, [r4, #24]
 8008a7e:	60a3      	str	r3, [r4, #8]
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	071a      	lsls	r2, r3, #28
 8008a84:	d501      	bpl.n	8008a8a <__swbuf_r+0x20>
 8008a86:	6923      	ldr	r3, [r4, #16]
 8008a88:	b943      	cbnz	r3, 8008a9c <__swbuf_r+0x32>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 f82b 	bl	8008ae8 <__swsetup_r>
 8008a92:	b118      	cbz	r0, 8008a9c <__swbuf_r+0x32>
 8008a94:	f04f 37ff 	mov.w	r7, #4294967295
 8008a98:	4638      	mov	r0, r7
 8008a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	6922      	ldr	r2, [r4, #16]
 8008aa0:	1a98      	subs	r0, r3, r2
 8008aa2:	6963      	ldr	r3, [r4, #20]
 8008aa4:	b2f6      	uxtb	r6, r6
 8008aa6:	4283      	cmp	r3, r0
 8008aa8:	4637      	mov	r7, r6
 8008aaa:	dc05      	bgt.n	8008ab8 <__swbuf_r+0x4e>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f7ff fe0a 	bl	80086c8 <_fflush_r>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d1ed      	bne.n	8008a94 <__swbuf_r+0x2a>
 8008ab8:	68a3      	ldr	r3, [r4, #8]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	60a3      	str	r3, [r4, #8]
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	6022      	str	r2, [r4, #0]
 8008ac4:	701e      	strb	r6, [r3, #0]
 8008ac6:	6962      	ldr	r2, [r4, #20]
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d004      	beq.n	8008ad8 <__swbuf_r+0x6e>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	07db      	lsls	r3, r3, #31
 8008ad2:	d5e1      	bpl.n	8008a98 <__swbuf_r+0x2e>
 8008ad4:	2e0a      	cmp	r6, #10
 8008ad6:	d1df      	bne.n	8008a98 <__swbuf_r+0x2e>
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4628      	mov	r0, r5
 8008adc:	f7ff fdf4 	bl	80086c8 <_fflush_r>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d0d9      	beq.n	8008a98 <__swbuf_r+0x2e>
 8008ae4:	e7d6      	b.n	8008a94 <__swbuf_r+0x2a>
	...

08008ae8 <__swsetup_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4b29      	ldr	r3, [pc, #164]	@ (8008b90 <__swsetup_r+0xa8>)
 8008aec:	4605      	mov	r5, r0
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	460c      	mov	r4, r1
 8008af2:	b118      	cbz	r0, 8008afc <__swsetup_r+0x14>
 8008af4:	6a03      	ldr	r3, [r0, #32]
 8008af6:	b90b      	cbnz	r3, 8008afc <__swsetup_r+0x14>
 8008af8:	f7ff feae 	bl	8008858 <__sinit>
 8008afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b00:	0719      	lsls	r1, r3, #28
 8008b02:	d422      	bmi.n	8008b4a <__swsetup_r+0x62>
 8008b04:	06da      	lsls	r2, r3, #27
 8008b06:	d407      	bmi.n	8008b18 <__swsetup_r+0x30>
 8008b08:	2209      	movs	r2, #9
 8008b0a:	602a      	str	r2, [r5, #0]
 8008b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	e033      	b.n	8008b80 <__swsetup_r+0x98>
 8008b18:	0758      	lsls	r0, r3, #29
 8008b1a:	d512      	bpl.n	8008b42 <__swsetup_r+0x5a>
 8008b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b1e:	b141      	cbz	r1, 8008b32 <__swsetup_r+0x4a>
 8008b20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b24:	4299      	cmp	r1, r3
 8008b26:	d002      	beq.n	8008b2e <__swsetup_r+0x46>
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f000 ff0d 	bl	8009948 <_free_r>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	f043 0308 	orr.w	r3, r3, #8
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	b94b      	cbnz	r3, 8008b62 <__swsetup_r+0x7a>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b58:	d003      	beq.n	8008b62 <__swsetup_r+0x7a>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f001 fe35 	bl	800a7cc <__smakebuf_r>
 8008b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b66:	f013 0201 	ands.w	r2, r3, #1
 8008b6a:	d00a      	beq.n	8008b82 <__swsetup_r+0x9a>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	60a2      	str	r2, [r4, #8]
 8008b70:	6962      	ldr	r2, [r4, #20]
 8008b72:	4252      	negs	r2, r2
 8008b74:	61a2      	str	r2, [r4, #24]
 8008b76:	6922      	ldr	r2, [r4, #16]
 8008b78:	b942      	cbnz	r2, 8008b8c <__swsetup_r+0xa4>
 8008b7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b7e:	d1c5      	bne.n	8008b0c <__swsetup_r+0x24>
 8008b80:	bd38      	pop	{r3, r4, r5, pc}
 8008b82:	0799      	lsls	r1, r3, #30
 8008b84:	bf58      	it	pl
 8008b86:	6962      	ldrpl	r2, [r4, #20]
 8008b88:	60a2      	str	r2, [r4, #8]
 8008b8a:	e7f4      	b.n	8008b76 <__swsetup_r+0x8e>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	e7f7      	b.n	8008b80 <__swsetup_r+0x98>
 8008b90:	20000028 	.word	0x20000028

08008b94 <memset>:
 8008b94:	4402      	add	r2, r0
 8008b96:	4603      	mov	r3, r0
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d100      	bne.n	8008b9e <memset+0xa>
 8008b9c:	4770      	bx	lr
 8008b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba2:	e7f9      	b.n	8008b98 <memset+0x4>

08008ba4 <_localeconv_r>:
 8008ba4:	4800      	ldr	r0, [pc, #0]	@ (8008ba8 <_localeconv_r+0x4>)
 8008ba6:	4770      	bx	lr
 8008ba8:	20000168 	.word	0x20000168

08008bac <_close_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d06      	ldr	r5, [pc, #24]	@ (8008bc8 <_close_r+0x1c>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7fb f8bb 	bl	8003d32 <_close>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_close_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_close_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	200009b8 	.word	0x200009b8

08008bcc <_lseek_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d07      	ldr	r5, [pc, #28]	@ (8008bec <_lseek_r+0x20>)
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	602a      	str	r2, [r5, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f7fb f8d0 	bl	8003d80 <_lseek>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_lseek_r+0x1e>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_lseek_r+0x1e>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	200009b8 	.word	0x200009b8

08008bf0 <_read_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d07      	ldr	r5, [pc, #28]	@ (8008c10 <_read_r+0x20>)
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	4608      	mov	r0, r1
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	602a      	str	r2, [r5, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f7fb f87a 	bl	8003cf8 <_read>
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	d102      	bne.n	8008c0e <_read_r+0x1e>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	b103      	cbz	r3, 8008c0e <_read_r+0x1e>
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	200009b8 	.word	0x200009b8

08008c14 <_write_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d07      	ldr	r5, [pc, #28]	@ (8008c34 <_write_r+0x20>)
 8008c18:	4604      	mov	r4, r0
 8008c1a:	4608      	mov	r0, r1
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	2200      	movs	r2, #0
 8008c20:	602a      	str	r2, [r5, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	f7fa fb86 	bl	8003334 <_write>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_write_r+0x1e>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_write_r+0x1e>
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	200009b8 	.word	0x200009b8

08008c38 <__errno>:
 8008c38:	4b01      	ldr	r3, [pc, #4]	@ (8008c40 <__errno+0x8>)
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20000028 	.word	0x20000028

08008c44 <__libc_init_array>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4d0d      	ldr	r5, [pc, #52]	@ (8008c7c <__libc_init_array+0x38>)
 8008c48:	4c0d      	ldr	r4, [pc, #52]	@ (8008c80 <__libc_init_array+0x3c>)
 8008c4a:	1b64      	subs	r4, r4, r5
 8008c4c:	10a4      	asrs	r4, r4, #2
 8008c4e:	2600      	movs	r6, #0
 8008c50:	42a6      	cmp	r6, r4
 8008c52:	d109      	bne.n	8008c68 <__libc_init_array+0x24>
 8008c54:	4d0b      	ldr	r5, [pc, #44]	@ (8008c84 <__libc_init_array+0x40>)
 8008c56:	4c0c      	ldr	r4, [pc, #48]	@ (8008c88 <__libc_init_array+0x44>)
 8008c58:	f001 ff26 	bl	800aaa8 <_init>
 8008c5c:	1b64      	subs	r4, r4, r5
 8008c5e:	10a4      	asrs	r4, r4, #2
 8008c60:	2600      	movs	r6, #0
 8008c62:	42a6      	cmp	r6, r4
 8008c64:	d105      	bne.n	8008c72 <__libc_init_array+0x2e>
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6c:	4798      	blx	r3
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7ee      	b.n	8008c50 <__libc_init_array+0xc>
 8008c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c76:	4798      	blx	r3
 8008c78:	3601      	adds	r6, #1
 8008c7a:	e7f2      	b.n	8008c62 <__libc_init_array+0x1e>
 8008c7c:	0800b758 	.word	0x0800b758
 8008c80:	0800b758 	.word	0x0800b758
 8008c84:	0800b758 	.word	0x0800b758
 8008c88:	0800b75c 	.word	0x0800b75c

08008c8c <__retarget_lock_init_recursive>:
 8008c8c:	4770      	bx	lr

08008c8e <__retarget_lock_acquire_recursive>:
 8008c8e:	4770      	bx	lr

08008c90 <__retarget_lock_release_recursive>:
 8008c90:	4770      	bx	lr

08008c92 <memcpy>:
 8008c92:	440a      	add	r2, r1
 8008c94:	4291      	cmp	r1, r2
 8008c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c9a:	d100      	bne.n	8008c9e <memcpy+0xc>
 8008c9c:	4770      	bx	lr
 8008c9e:	b510      	push	{r4, lr}
 8008ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ca8:	4291      	cmp	r1, r2
 8008caa:	d1f9      	bne.n	8008ca0 <memcpy+0xe>
 8008cac:	bd10      	pop	{r4, pc}

08008cae <quorem>:
 8008cae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb2:	6903      	ldr	r3, [r0, #16]
 8008cb4:	690c      	ldr	r4, [r1, #16]
 8008cb6:	42a3      	cmp	r3, r4
 8008cb8:	4607      	mov	r7, r0
 8008cba:	db7e      	blt.n	8008dba <quorem+0x10c>
 8008cbc:	3c01      	subs	r4, #1
 8008cbe:	f101 0814 	add.w	r8, r1, #20
 8008cc2:	00a3      	lsls	r3, r4, #2
 8008cc4:	f100 0514 	add.w	r5, r0, #20
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ce0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ce4:	d32e      	bcc.n	8008d44 <quorem+0x96>
 8008ce6:	f04f 0a00 	mov.w	sl, #0
 8008cea:	46c4      	mov	ip, r8
 8008cec:	46ae      	mov	lr, r5
 8008cee:	46d3      	mov	fp, sl
 8008cf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cf4:	b298      	uxth	r0, r3
 8008cf6:	fb06 a000 	mla	r0, r6, r0, sl
 8008cfa:	0c02      	lsrs	r2, r0, #16
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	fb06 2303 	mla	r3, r6, r3, r2
 8008d02:	f8de 2000 	ldr.w	r2, [lr]
 8008d06:	b280      	uxth	r0, r0
 8008d08:	b292      	uxth	r2, r2
 8008d0a:	1a12      	subs	r2, r2, r0
 8008d0c:	445a      	add	r2, fp
 8008d0e:	f8de 0000 	ldr.w	r0, [lr]
 8008d12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d20:	b292      	uxth	r2, r2
 8008d22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d26:	45e1      	cmp	r9, ip
 8008d28:	f84e 2b04 	str.w	r2, [lr], #4
 8008d2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d30:	d2de      	bcs.n	8008cf0 <quorem+0x42>
 8008d32:	9b00      	ldr	r3, [sp, #0]
 8008d34:	58eb      	ldr	r3, [r5, r3]
 8008d36:	b92b      	cbnz	r3, 8008d44 <quorem+0x96>
 8008d38:	9b01      	ldr	r3, [sp, #4]
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	429d      	cmp	r5, r3
 8008d3e:	461a      	mov	r2, r3
 8008d40:	d32f      	bcc.n	8008da2 <quorem+0xf4>
 8008d42:	613c      	str	r4, [r7, #16]
 8008d44:	4638      	mov	r0, r7
 8008d46:	f001 f979 	bl	800a03c <__mcmp>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	db25      	blt.n	8008d9a <quorem+0xec>
 8008d4e:	4629      	mov	r1, r5
 8008d50:	2000      	movs	r0, #0
 8008d52:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d56:	f8d1 c000 	ldr.w	ip, [r1]
 8008d5a:	fa1f fe82 	uxth.w	lr, r2
 8008d5e:	fa1f f38c 	uxth.w	r3, ip
 8008d62:	eba3 030e 	sub.w	r3, r3, lr
 8008d66:	4403      	add	r3, r0
 8008d68:	0c12      	lsrs	r2, r2, #16
 8008d6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d78:	45c1      	cmp	r9, r8
 8008d7a:	f841 3b04 	str.w	r3, [r1], #4
 8008d7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d82:	d2e6      	bcs.n	8008d52 <quorem+0xa4>
 8008d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d8c:	b922      	cbnz	r2, 8008d98 <quorem+0xea>
 8008d8e:	3b04      	subs	r3, #4
 8008d90:	429d      	cmp	r5, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	d30b      	bcc.n	8008dae <quorem+0x100>
 8008d96:	613c      	str	r4, [r7, #16]
 8008d98:	3601      	adds	r6, #1
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	b003      	add	sp, #12
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	6812      	ldr	r2, [r2, #0]
 8008da4:	3b04      	subs	r3, #4
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d1cb      	bne.n	8008d42 <quorem+0x94>
 8008daa:	3c01      	subs	r4, #1
 8008dac:	e7c6      	b.n	8008d3c <quorem+0x8e>
 8008dae:	6812      	ldr	r2, [r2, #0]
 8008db0:	3b04      	subs	r3, #4
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	d1ef      	bne.n	8008d96 <quorem+0xe8>
 8008db6:	3c01      	subs	r4, #1
 8008db8:	e7ea      	b.n	8008d90 <quorem+0xe2>
 8008dba:	2000      	movs	r0, #0
 8008dbc:	e7ee      	b.n	8008d9c <quorem+0xee>
	...

08008dc0 <_dtoa_r>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	69c7      	ldr	r7, [r0, #28]
 8008dc6:	b099      	sub	sp, #100	@ 0x64
 8008dc8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008dcc:	ec55 4b10 	vmov	r4, r5, d0
 8008dd0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008dd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008dd4:	4683      	mov	fp, r0
 8008dd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dda:	b97f      	cbnz	r7, 8008dfc <_dtoa_r+0x3c>
 8008ddc:	2010      	movs	r0, #16
 8008dde:	f000 fdfd 	bl	80099dc <malloc>
 8008de2:	4602      	mov	r2, r0
 8008de4:	f8cb 001c 	str.w	r0, [fp, #28]
 8008de8:	b920      	cbnz	r0, 8008df4 <_dtoa_r+0x34>
 8008dea:	4ba7      	ldr	r3, [pc, #668]	@ (8009088 <_dtoa_r+0x2c8>)
 8008dec:	21ef      	movs	r1, #239	@ 0xef
 8008dee:	48a7      	ldr	r0, [pc, #668]	@ (800908c <_dtoa_r+0x2cc>)
 8008df0:	f001 fd74 	bl	800a8dc <__assert_func>
 8008df4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008df8:	6007      	str	r7, [r0, #0]
 8008dfa:	60c7      	str	r7, [r0, #12]
 8008dfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e00:	6819      	ldr	r1, [r3, #0]
 8008e02:	b159      	cbz	r1, 8008e1c <_dtoa_r+0x5c>
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	604a      	str	r2, [r1, #4]
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4093      	lsls	r3, r2
 8008e0c:	608b      	str	r3, [r1, #8]
 8008e0e:	4658      	mov	r0, fp
 8008e10:	f000 feda 	bl	8009bc8 <_Bfree>
 8008e14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	1e2b      	subs	r3, r5, #0
 8008e1e:	bfb9      	ittee	lt
 8008e20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e24:	9303      	strlt	r3, [sp, #12]
 8008e26:	2300      	movge	r3, #0
 8008e28:	6033      	strge	r3, [r6, #0]
 8008e2a:	9f03      	ldr	r7, [sp, #12]
 8008e2c:	4b98      	ldr	r3, [pc, #608]	@ (8009090 <_dtoa_r+0x2d0>)
 8008e2e:	bfbc      	itt	lt
 8008e30:	2201      	movlt	r2, #1
 8008e32:	6032      	strlt	r2, [r6, #0]
 8008e34:	43bb      	bics	r3, r7
 8008e36:	d112      	bne.n	8008e5e <_dtoa_r+0x9e>
 8008e38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e44:	4323      	orrs	r3, r4
 8008e46:	f000 854d 	beq.w	80098e4 <_dtoa_r+0xb24>
 8008e4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80090a4 <_dtoa_r+0x2e4>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 854f 	beq.w	80098f4 <_dtoa_r+0xb34>
 8008e56:	f10a 0303 	add.w	r3, sl, #3
 8008e5a:	f000 bd49 	b.w	80098f0 <_dtoa_r+0xb30>
 8008e5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e62:	2200      	movs	r2, #0
 8008e64:	ec51 0b17 	vmov	r0, r1, d7
 8008e68:	2300      	movs	r3, #0
 8008e6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e6e:	f7f7 fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e72:	4680      	mov	r8, r0
 8008e74:	b158      	cbz	r0, 8008e8e <_dtoa_r+0xce>
 8008e76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e78:	2301      	movs	r3, #1
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e7e:	b113      	cbz	r3, 8008e86 <_dtoa_r+0xc6>
 8008e80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e82:	4b84      	ldr	r3, [pc, #528]	@ (8009094 <_dtoa_r+0x2d4>)
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80090a8 <_dtoa_r+0x2e8>
 8008e8a:	f000 bd33 	b.w	80098f4 <_dtoa_r+0xb34>
 8008e8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e92:	aa16      	add	r2, sp, #88	@ 0x58
 8008e94:	a917      	add	r1, sp, #92	@ 0x5c
 8008e96:	4658      	mov	r0, fp
 8008e98:	f001 f980 	bl	800a19c <__d2b>
 8008e9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ea0:	4681      	mov	r9, r0
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d077      	beq.n	8008f96 <_dtoa_r+0x1d6>
 8008ea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ea8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008eb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ebc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4b74      	ldr	r3, [pc, #464]	@ (8009098 <_dtoa_r+0x2d8>)
 8008ec6:	f7f7 f9e7 	bl	8000298 <__aeabi_dsub>
 8008eca:	a369      	add	r3, pc, #420	@ (adr r3, 8009070 <_dtoa_r+0x2b0>)
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f7f7 fb9a 	bl	8000608 <__aeabi_dmul>
 8008ed4:	a368      	add	r3, pc, #416	@ (adr r3, 8009078 <_dtoa_r+0x2b8>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f9df 	bl	800029c <__adddf3>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	460d      	mov	r5, r1
 8008ee4:	f7f7 fb26 	bl	8000534 <__aeabi_i2d>
 8008ee8:	a365      	add	r3, pc, #404	@ (adr r3, 8009080 <_dtoa_r+0x2c0>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 fb8b 	bl	8000608 <__aeabi_dmul>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f7f7 f9cf 	bl	800029c <__adddf3>
 8008efe:	4604      	mov	r4, r0
 8008f00:	460d      	mov	r5, r1
 8008f02:	f7f7 fe31 	bl	8000b68 <__aeabi_d2iz>
 8008f06:	2200      	movs	r2, #0
 8008f08:	4607      	mov	r7, r0
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f7f7 fdec 	bl	8000aec <__aeabi_dcmplt>
 8008f14:	b140      	cbz	r0, 8008f28 <_dtoa_r+0x168>
 8008f16:	4638      	mov	r0, r7
 8008f18:	f7f7 fb0c 	bl	8000534 <__aeabi_i2d>
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	462b      	mov	r3, r5
 8008f20:	f7f7 fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f24:	b900      	cbnz	r0, 8008f28 <_dtoa_r+0x168>
 8008f26:	3f01      	subs	r7, #1
 8008f28:	2f16      	cmp	r7, #22
 8008f2a:	d851      	bhi.n	8008fd0 <_dtoa_r+0x210>
 8008f2c:	4b5b      	ldr	r3, [pc, #364]	@ (800909c <_dtoa_r+0x2dc>)
 8008f2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f3a:	f7f7 fdd7 	bl	8000aec <__aeabi_dcmplt>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d048      	beq.n	8008fd4 <_dtoa_r+0x214>
 8008f42:	3f01      	subs	r7, #1
 8008f44:	2300      	movs	r3, #0
 8008f46:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f4a:	1b9b      	subs	r3, r3, r6
 8008f4c:	1e5a      	subs	r2, r3, #1
 8008f4e:	bf44      	itt	mi
 8008f50:	f1c3 0801 	rsbmi	r8, r3, #1
 8008f54:	2300      	movmi	r3, #0
 8008f56:	9208      	str	r2, [sp, #32]
 8008f58:	bf54      	ite	pl
 8008f5a:	f04f 0800 	movpl.w	r8, #0
 8008f5e:	9308      	strmi	r3, [sp, #32]
 8008f60:	2f00      	cmp	r7, #0
 8008f62:	db39      	blt.n	8008fd8 <_dtoa_r+0x218>
 8008f64:	9b08      	ldr	r3, [sp, #32]
 8008f66:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f68:	443b      	add	r3, r7
 8008f6a:	9308      	str	r3, [sp, #32]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f72:	2b09      	cmp	r3, #9
 8008f74:	d864      	bhi.n	8009040 <_dtoa_r+0x280>
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	bfc4      	itt	gt
 8008f7a:	3b04      	subgt	r3, #4
 8008f7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f80:	f1a3 0302 	sub.w	r3, r3, #2
 8008f84:	bfcc      	ite	gt
 8008f86:	2400      	movgt	r4, #0
 8008f88:	2401      	movle	r4, #1
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d863      	bhi.n	8009056 <_dtoa_r+0x296>
 8008f8e:	e8df f003 	tbb	[pc, r3]
 8008f92:	372a      	.short	0x372a
 8008f94:	5535      	.short	0x5535
 8008f96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f9a:	441e      	add	r6, r3
 8008f9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	bfc1      	itttt	gt
 8008fa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008fa8:	409f      	lslgt	r7, r3
 8008faa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fae:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008fb2:	bfd6      	itet	le
 8008fb4:	f1c3 0320 	rsble	r3, r3, #32
 8008fb8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fbc:	fa04 f003 	lslle.w	r0, r4, r3
 8008fc0:	f7f7 faa8 	bl	8000514 <__aeabi_ui2d>
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008fca:	3e01      	subs	r6, #1
 8008fcc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008fce:	e777      	b.n	8008ec0 <_dtoa_r+0x100>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e7b8      	b.n	8008f46 <_dtoa_r+0x186>
 8008fd4:	9012      	str	r0, [sp, #72]	@ 0x48
 8008fd6:	e7b7      	b.n	8008f48 <_dtoa_r+0x188>
 8008fd8:	427b      	negs	r3, r7
 8008fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fdc:	2300      	movs	r3, #0
 8008fde:	eba8 0807 	sub.w	r8, r8, r7
 8008fe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fe4:	e7c4      	b.n	8008f70 <_dtoa_r+0x1b0>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dc35      	bgt.n	800905c <_dtoa_r+0x29c>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	9307      	str	r3, [sp, #28]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ffa:	e00b      	b.n	8009014 <_dtoa_r+0x254>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e7f3      	b.n	8008fe8 <_dtoa_r+0x228>
 8009000:	2300      	movs	r3, #0
 8009002:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009006:	18fb      	adds	r3, r7, r3
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	3301      	adds	r3, #1
 800900c:	2b01      	cmp	r3, #1
 800900e:	9307      	str	r3, [sp, #28]
 8009010:	bfb8      	it	lt
 8009012:	2301      	movlt	r3, #1
 8009014:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009018:	2100      	movs	r1, #0
 800901a:	2204      	movs	r2, #4
 800901c:	f102 0514 	add.w	r5, r2, #20
 8009020:	429d      	cmp	r5, r3
 8009022:	d91f      	bls.n	8009064 <_dtoa_r+0x2a4>
 8009024:	6041      	str	r1, [r0, #4]
 8009026:	4658      	mov	r0, fp
 8009028:	f000 fd8e 	bl	8009b48 <_Balloc>
 800902c:	4682      	mov	sl, r0
 800902e:	2800      	cmp	r0, #0
 8009030:	d13c      	bne.n	80090ac <_dtoa_r+0x2ec>
 8009032:	4b1b      	ldr	r3, [pc, #108]	@ (80090a0 <_dtoa_r+0x2e0>)
 8009034:	4602      	mov	r2, r0
 8009036:	f240 11af 	movw	r1, #431	@ 0x1af
 800903a:	e6d8      	b.n	8008dee <_dtoa_r+0x2e>
 800903c:	2301      	movs	r3, #1
 800903e:	e7e0      	b.n	8009002 <_dtoa_r+0x242>
 8009040:	2401      	movs	r4, #1
 8009042:	2300      	movs	r3, #0
 8009044:	9309      	str	r3, [sp, #36]	@ 0x24
 8009046:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009048:	f04f 33ff 	mov.w	r3, #4294967295
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	9307      	str	r3, [sp, #28]
 8009050:	2200      	movs	r2, #0
 8009052:	2312      	movs	r3, #18
 8009054:	e7d0      	b.n	8008ff8 <_dtoa_r+0x238>
 8009056:	2301      	movs	r3, #1
 8009058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800905a:	e7f5      	b.n	8009048 <_dtoa_r+0x288>
 800905c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	e7d7      	b.n	8009014 <_dtoa_r+0x254>
 8009064:	3101      	adds	r1, #1
 8009066:	0052      	lsls	r2, r2, #1
 8009068:	e7d8      	b.n	800901c <_dtoa_r+0x25c>
 800906a:	bf00      	nop
 800906c:	f3af 8000 	nop.w
 8009070:	636f4361 	.word	0x636f4361
 8009074:	3fd287a7 	.word	0x3fd287a7
 8009078:	8b60c8b3 	.word	0x8b60c8b3
 800907c:	3fc68a28 	.word	0x3fc68a28
 8009080:	509f79fb 	.word	0x509f79fb
 8009084:	3fd34413 	.word	0x3fd34413
 8009088:	0800b41d 	.word	0x0800b41d
 800908c:	0800b434 	.word	0x0800b434
 8009090:	7ff00000 	.word	0x7ff00000
 8009094:	0800b3ed 	.word	0x0800b3ed
 8009098:	3ff80000 	.word	0x3ff80000
 800909c:	0800b530 	.word	0x0800b530
 80090a0:	0800b48c 	.word	0x0800b48c
 80090a4:	0800b419 	.word	0x0800b419
 80090a8:	0800b3ec 	.word	0x0800b3ec
 80090ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090b0:	6018      	str	r0, [r3, #0]
 80090b2:	9b07      	ldr	r3, [sp, #28]
 80090b4:	2b0e      	cmp	r3, #14
 80090b6:	f200 80a4 	bhi.w	8009202 <_dtoa_r+0x442>
 80090ba:	2c00      	cmp	r4, #0
 80090bc:	f000 80a1 	beq.w	8009202 <_dtoa_r+0x442>
 80090c0:	2f00      	cmp	r7, #0
 80090c2:	dd33      	ble.n	800912c <_dtoa_r+0x36c>
 80090c4:	4bad      	ldr	r3, [pc, #692]	@ (800937c <_dtoa_r+0x5bc>)
 80090c6:	f007 020f 	and.w	r2, r7, #15
 80090ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090ce:	ed93 7b00 	vldr	d7, [r3]
 80090d2:	05f8      	lsls	r0, r7, #23
 80090d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80090d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80090dc:	d516      	bpl.n	800910c <_dtoa_r+0x34c>
 80090de:	4ba8      	ldr	r3, [pc, #672]	@ (8009380 <_dtoa_r+0x5c0>)
 80090e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090e8:	f7f7 fbb8 	bl	800085c <__aeabi_ddiv>
 80090ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f0:	f004 040f 	and.w	r4, r4, #15
 80090f4:	2603      	movs	r6, #3
 80090f6:	4da2      	ldr	r5, [pc, #648]	@ (8009380 <_dtoa_r+0x5c0>)
 80090f8:	b954      	cbnz	r4, 8009110 <_dtoa_r+0x350>
 80090fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009102:	f7f7 fbab 	bl	800085c <__aeabi_ddiv>
 8009106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800910a:	e028      	b.n	800915e <_dtoa_r+0x39e>
 800910c:	2602      	movs	r6, #2
 800910e:	e7f2      	b.n	80090f6 <_dtoa_r+0x336>
 8009110:	07e1      	lsls	r1, r4, #31
 8009112:	d508      	bpl.n	8009126 <_dtoa_r+0x366>
 8009114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009118:	e9d5 2300 	ldrd	r2, r3, [r5]
 800911c:	f7f7 fa74 	bl	8000608 <__aeabi_dmul>
 8009120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009124:	3601      	adds	r6, #1
 8009126:	1064      	asrs	r4, r4, #1
 8009128:	3508      	adds	r5, #8
 800912a:	e7e5      	b.n	80090f8 <_dtoa_r+0x338>
 800912c:	f000 80d2 	beq.w	80092d4 <_dtoa_r+0x514>
 8009130:	427c      	negs	r4, r7
 8009132:	4b92      	ldr	r3, [pc, #584]	@ (800937c <_dtoa_r+0x5bc>)
 8009134:	4d92      	ldr	r5, [pc, #584]	@ (8009380 <_dtoa_r+0x5c0>)
 8009136:	f004 020f 	and.w	r2, r4, #15
 800913a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009146:	f7f7 fa5f 	bl	8000608 <__aeabi_dmul>
 800914a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800914e:	1124      	asrs	r4, r4, #4
 8009150:	2300      	movs	r3, #0
 8009152:	2602      	movs	r6, #2
 8009154:	2c00      	cmp	r4, #0
 8009156:	f040 80b2 	bne.w	80092be <_dtoa_r+0x4fe>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1d3      	bne.n	8009106 <_dtoa_r+0x346>
 800915e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009160:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 80b7 	beq.w	80092d8 <_dtoa_r+0x518>
 800916a:	4b86      	ldr	r3, [pc, #536]	@ (8009384 <_dtoa_r+0x5c4>)
 800916c:	2200      	movs	r2, #0
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 fcbb 	bl	8000aec <__aeabi_dcmplt>
 8009176:	2800      	cmp	r0, #0
 8009178:	f000 80ae 	beq.w	80092d8 <_dtoa_r+0x518>
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 80aa 	beq.w	80092d8 <_dtoa_r+0x518>
 8009184:	9b00      	ldr	r3, [sp, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	dd37      	ble.n	80091fa <_dtoa_r+0x43a>
 800918a:	1e7b      	subs	r3, r7, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	4620      	mov	r0, r4
 8009190:	4b7d      	ldr	r3, [pc, #500]	@ (8009388 <_dtoa_r+0x5c8>)
 8009192:	2200      	movs	r2, #0
 8009194:	4629      	mov	r1, r5
 8009196:	f7f7 fa37 	bl	8000608 <__aeabi_dmul>
 800919a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800919e:	9c00      	ldr	r4, [sp, #0]
 80091a0:	3601      	adds	r6, #1
 80091a2:	4630      	mov	r0, r6
 80091a4:	f7f7 f9c6 	bl	8000534 <__aeabi_i2d>
 80091a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091ac:	f7f7 fa2c 	bl	8000608 <__aeabi_dmul>
 80091b0:	4b76      	ldr	r3, [pc, #472]	@ (800938c <_dtoa_r+0x5cc>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	f7f7 f872 	bl	800029c <__adddf3>
 80091b8:	4605      	mov	r5, r0
 80091ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091be:	2c00      	cmp	r4, #0
 80091c0:	f040 808d 	bne.w	80092de <_dtoa_r+0x51e>
 80091c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091c8:	4b71      	ldr	r3, [pc, #452]	@ (8009390 <_dtoa_r+0x5d0>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	f7f7 f864 	bl	8000298 <__aeabi_dsub>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091d8:	462a      	mov	r2, r5
 80091da:	4633      	mov	r3, r6
 80091dc:	f7f7 fca4 	bl	8000b28 <__aeabi_dcmpgt>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	f040 828b 	bne.w	80096fc <_dtoa_r+0x93c>
 80091e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ea:	462a      	mov	r2, r5
 80091ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091f0:	f7f7 fc7c 	bl	8000aec <__aeabi_dcmplt>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	f040 8128 	bne.w	800944a <_dtoa_r+0x68a>
 80091fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80091fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009202:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009204:	2b00      	cmp	r3, #0
 8009206:	f2c0 815a 	blt.w	80094be <_dtoa_r+0x6fe>
 800920a:	2f0e      	cmp	r7, #14
 800920c:	f300 8157 	bgt.w	80094be <_dtoa_r+0x6fe>
 8009210:	4b5a      	ldr	r3, [pc, #360]	@ (800937c <_dtoa_r+0x5bc>)
 8009212:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009216:	ed93 7b00 	vldr	d7, [r3]
 800921a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800921c:	2b00      	cmp	r3, #0
 800921e:	ed8d 7b00 	vstr	d7, [sp]
 8009222:	da03      	bge.n	800922c <_dtoa_r+0x46c>
 8009224:	9b07      	ldr	r3, [sp, #28]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f340 8101 	ble.w	800942e <_dtoa_r+0x66e>
 800922c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009230:	4656      	mov	r6, sl
 8009232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	f7f7 fb0f 	bl	800085c <__aeabi_ddiv>
 800923e:	f7f7 fc93 	bl	8000b68 <__aeabi_d2iz>
 8009242:	4680      	mov	r8, r0
 8009244:	f7f7 f976 	bl	8000534 <__aeabi_i2d>
 8009248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800924c:	f7f7 f9dc 	bl	8000608 <__aeabi_dmul>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800925c:	f7f7 f81c 	bl	8000298 <__aeabi_dsub>
 8009260:	f806 4b01 	strb.w	r4, [r6], #1
 8009264:	9d07      	ldr	r5, [sp, #28]
 8009266:	eba6 040a 	sub.w	r4, r6, sl
 800926a:	42a5      	cmp	r5, r4
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	f040 8117 	bne.w	80094a2 <_dtoa_r+0x6e2>
 8009274:	f7f7 f812 	bl	800029c <__adddf3>
 8009278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800927c:	4604      	mov	r4, r0
 800927e:	460d      	mov	r5, r1
 8009280:	f7f7 fc52 	bl	8000b28 <__aeabi_dcmpgt>
 8009284:	2800      	cmp	r0, #0
 8009286:	f040 80f9 	bne.w	800947c <_dtoa_r+0x6bc>
 800928a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800928e:	4620      	mov	r0, r4
 8009290:	4629      	mov	r1, r5
 8009292:	f7f7 fc21 	bl	8000ad8 <__aeabi_dcmpeq>
 8009296:	b118      	cbz	r0, 80092a0 <_dtoa_r+0x4e0>
 8009298:	f018 0f01 	tst.w	r8, #1
 800929c:	f040 80ee 	bne.w	800947c <_dtoa_r+0x6bc>
 80092a0:	4649      	mov	r1, r9
 80092a2:	4658      	mov	r0, fp
 80092a4:	f000 fc90 	bl	8009bc8 <_Bfree>
 80092a8:	2300      	movs	r3, #0
 80092aa:	7033      	strb	r3, [r6, #0]
 80092ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092ae:	3701      	adds	r7, #1
 80092b0:	601f      	str	r7, [r3, #0]
 80092b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 831d 	beq.w	80098f4 <_dtoa_r+0xb34>
 80092ba:	601e      	str	r6, [r3, #0]
 80092bc:	e31a      	b.n	80098f4 <_dtoa_r+0xb34>
 80092be:	07e2      	lsls	r2, r4, #31
 80092c0:	d505      	bpl.n	80092ce <_dtoa_r+0x50e>
 80092c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092c6:	f7f7 f99f 	bl	8000608 <__aeabi_dmul>
 80092ca:	3601      	adds	r6, #1
 80092cc:	2301      	movs	r3, #1
 80092ce:	1064      	asrs	r4, r4, #1
 80092d0:	3508      	adds	r5, #8
 80092d2:	e73f      	b.n	8009154 <_dtoa_r+0x394>
 80092d4:	2602      	movs	r6, #2
 80092d6:	e742      	b.n	800915e <_dtoa_r+0x39e>
 80092d8:	9c07      	ldr	r4, [sp, #28]
 80092da:	9704      	str	r7, [sp, #16]
 80092dc:	e761      	b.n	80091a2 <_dtoa_r+0x3e2>
 80092de:	4b27      	ldr	r3, [pc, #156]	@ (800937c <_dtoa_r+0x5bc>)
 80092e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092ea:	4454      	add	r4, sl
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d053      	beq.n	8009398 <_dtoa_r+0x5d8>
 80092f0:	4928      	ldr	r1, [pc, #160]	@ (8009394 <_dtoa_r+0x5d4>)
 80092f2:	2000      	movs	r0, #0
 80092f4:	f7f7 fab2 	bl	800085c <__aeabi_ddiv>
 80092f8:	4633      	mov	r3, r6
 80092fa:	462a      	mov	r2, r5
 80092fc:	f7f6 ffcc 	bl	8000298 <__aeabi_dsub>
 8009300:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009304:	4656      	mov	r6, sl
 8009306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800930a:	f7f7 fc2d 	bl	8000b68 <__aeabi_d2iz>
 800930e:	4605      	mov	r5, r0
 8009310:	f7f7 f910 	bl	8000534 <__aeabi_i2d>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800931c:	f7f6 ffbc 	bl	8000298 <__aeabi_dsub>
 8009320:	3530      	adds	r5, #48	@ 0x30
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800932a:	f806 5b01 	strb.w	r5, [r6], #1
 800932e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009332:	f7f7 fbdb 	bl	8000aec <__aeabi_dcmplt>
 8009336:	2800      	cmp	r0, #0
 8009338:	d171      	bne.n	800941e <_dtoa_r+0x65e>
 800933a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800933e:	4911      	ldr	r1, [pc, #68]	@ (8009384 <_dtoa_r+0x5c4>)
 8009340:	2000      	movs	r0, #0
 8009342:	f7f6 ffa9 	bl	8000298 <__aeabi_dsub>
 8009346:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800934a:	f7f7 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800934e:	2800      	cmp	r0, #0
 8009350:	f040 8095 	bne.w	800947e <_dtoa_r+0x6be>
 8009354:	42a6      	cmp	r6, r4
 8009356:	f43f af50 	beq.w	80091fa <_dtoa_r+0x43a>
 800935a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800935e:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <_dtoa_r+0x5c8>)
 8009360:	2200      	movs	r2, #0
 8009362:	f7f7 f951 	bl	8000608 <__aeabi_dmul>
 8009366:	4b08      	ldr	r3, [pc, #32]	@ (8009388 <_dtoa_r+0x5c8>)
 8009368:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800936c:	2200      	movs	r2, #0
 800936e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009372:	f7f7 f949 	bl	8000608 <__aeabi_dmul>
 8009376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800937a:	e7c4      	b.n	8009306 <_dtoa_r+0x546>
 800937c:	0800b530 	.word	0x0800b530
 8009380:	0800b508 	.word	0x0800b508
 8009384:	3ff00000 	.word	0x3ff00000
 8009388:	40240000 	.word	0x40240000
 800938c:	401c0000 	.word	0x401c0000
 8009390:	40140000 	.word	0x40140000
 8009394:	3fe00000 	.word	0x3fe00000
 8009398:	4631      	mov	r1, r6
 800939a:	4628      	mov	r0, r5
 800939c:	f7f7 f934 	bl	8000608 <__aeabi_dmul>
 80093a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80093a6:	4656      	mov	r6, sl
 80093a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ac:	f7f7 fbdc 	bl	8000b68 <__aeabi_d2iz>
 80093b0:	4605      	mov	r5, r0
 80093b2:	f7f7 f8bf 	bl	8000534 <__aeabi_i2d>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093be:	f7f6 ff6b 	bl	8000298 <__aeabi_dsub>
 80093c2:	3530      	adds	r5, #48	@ 0x30
 80093c4:	f806 5b01 	strb.w	r5, [r6], #1
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	42a6      	cmp	r6, r4
 80093ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	d124      	bne.n	8009422 <_dtoa_r+0x662>
 80093d8:	4bac      	ldr	r3, [pc, #688]	@ (800968c <_dtoa_r+0x8cc>)
 80093da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80093de:	f7f6 ff5d 	bl	800029c <__adddf3>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ea:	f7f7 fb9d 	bl	8000b28 <__aeabi_dcmpgt>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d145      	bne.n	800947e <_dtoa_r+0x6be>
 80093f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093f6:	49a5      	ldr	r1, [pc, #660]	@ (800968c <_dtoa_r+0x8cc>)
 80093f8:	2000      	movs	r0, #0
 80093fa:	f7f6 ff4d 	bl	8000298 <__aeabi_dsub>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009406:	f7f7 fb71 	bl	8000aec <__aeabi_dcmplt>
 800940a:	2800      	cmp	r0, #0
 800940c:	f43f aef5 	beq.w	80091fa <_dtoa_r+0x43a>
 8009410:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009412:	1e73      	subs	r3, r6, #1
 8009414:	9315      	str	r3, [sp, #84]	@ 0x54
 8009416:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800941a:	2b30      	cmp	r3, #48	@ 0x30
 800941c:	d0f8      	beq.n	8009410 <_dtoa_r+0x650>
 800941e:	9f04      	ldr	r7, [sp, #16]
 8009420:	e73e      	b.n	80092a0 <_dtoa_r+0x4e0>
 8009422:	4b9b      	ldr	r3, [pc, #620]	@ (8009690 <_dtoa_r+0x8d0>)
 8009424:	f7f7 f8f0 	bl	8000608 <__aeabi_dmul>
 8009428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800942c:	e7bc      	b.n	80093a8 <_dtoa_r+0x5e8>
 800942e:	d10c      	bne.n	800944a <_dtoa_r+0x68a>
 8009430:	4b98      	ldr	r3, [pc, #608]	@ (8009694 <_dtoa_r+0x8d4>)
 8009432:	2200      	movs	r2, #0
 8009434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009438:	f7f7 f8e6 	bl	8000608 <__aeabi_dmul>
 800943c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009440:	f7f7 fb68 	bl	8000b14 <__aeabi_dcmpge>
 8009444:	2800      	cmp	r0, #0
 8009446:	f000 8157 	beq.w	80096f8 <_dtoa_r+0x938>
 800944a:	2400      	movs	r4, #0
 800944c:	4625      	mov	r5, r4
 800944e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009450:	43db      	mvns	r3, r3
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	4656      	mov	r6, sl
 8009456:	2700      	movs	r7, #0
 8009458:	4621      	mov	r1, r4
 800945a:	4658      	mov	r0, fp
 800945c:	f000 fbb4 	bl	8009bc8 <_Bfree>
 8009460:	2d00      	cmp	r5, #0
 8009462:	d0dc      	beq.n	800941e <_dtoa_r+0x65e>
 8009464:	b12f      	cbz	r7, 8009472 <_dtoa_r+0x6b2>
 8009466:	42af      	cmp	r7, r5
 8009468:	d003      	beq.n	8009472 <_dtoa_r+0x6b2>
 800946a:	4639      	mov	r1, r7
 800946c:	4658      	mov	r0, fp
 800946e:	f000 fbab 	bl	8009bc8 <_Bfree>
 8009472:	4629      	mov	r1, r5
 8009474:	4658      	mov	r0, fp
 8009476:	f000 fba7 	bl	8009bc8 <_Bfree>
 800947a:	e7d0      	b.n	800941e <_dtoa_r+0x65e>
 800947c:	9704      	str	r7, [sp, #16]
 800947e:	4633      	mov	r3, r6
 8009480:	461e      	mov	r6, r3
 8009482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009486:	2a39      	cmp	r2, #57	@ 0x39
 8009488:	d107      	bne.n	800949a <_dtoa_r+0x6da>
 800948a:	459a      	cmp	sl, r3
 800948c:	d1f8      	bne.n	8009480 <_dtoa_r+0x6c0>
 800948e:	9a04      	ldr	r2, [sp, #16]
 8009490:	3201      	adds	r2, #1
 8009492:	9204      	str	r2, [sp, #16]
 8009494:	2230      	movs	r2, #48	@ 0x30
 8009496:	f88a 2000 	strb.w	r2, [sl]
 800949a:	781a      	ldrb	r2, [r3, #0]
 800949c:	3201      	adds	r2, #1
 800949e:	701a      	strb	r2, [r3, #0]
 80094a0:	e7bd      	b.n	800941e <_dtoa_r+0x65e>
 80094a2:	4b7b      	ldr	r3, [pc, #492]	@ (8009690 <_dtoa_r+0x8d0>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	f7f7 f8af 	bl	8000608 <__aeabi_dmul>
 80094aa:	2200      	movs	r2, #0
 80094ac:	2300      	movs	r3, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	460d      	mov	r5, r1
 80094b2:	f7f7 fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f43f aebb 	beq.w	8009232 <_dtoa_r+0x472>
 80094bc:	e6f0      	b.n	80092a0 <_dtoa_r+0x4e0>
 80094be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80094c0:	2a00      	cmp	r2, #0
 80094c2:	f000 80db 	beq.w	800967c <_dtoa_r+0x8bc>
 80094c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094c8:	2a01      	cmp	r2, #1
 80094ca:	f300 80bf 	bgt.w	800964c <_dtoa_r+0x88c>
 80094ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80094d0:	2a00      	cmp	r2, #0
 80094d2:	f000 80b7 	beq.w	8009644 <_dtoa_r+0x884>
 80094d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80094dc:	4646      	mov	r6, r8
 80094de:	9a08      	ldr	r2, [sp, #32]
 80094e0:	2101      	movs	r1, #1
 80094e2:	441a      	add	r2, r3
 80094e4:	4658      	mov	r0, fp
 80094e6:	4498      	add	r8, r3
 80094e8:	9208      	str	r2, [sp, #32]
 80094ea:	f000 fc21 	bl	8009d30 <__i2b>
 80094ee:	4605      	mov	r5, r0
 80094f0:	b15e      	cbz	r6, 800950a <_dtoa_r+0x74a>
 80094f2:	9b08      	ldr	r3, [sp, #32]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	dd08      	ble.n	800950a <_dtoa_r+0x74a>
 80094f8:	42b3      	cmp	r3, r6
 80094fa:	9a08      	ldr	r2, [sp, #32]
 80094fc:	bfa8      	it	ge
 80094fe:	4633      	movge	r3, r6
 8009500:	eba8 0803 	sub.w	r8, r8, r3
 8009504:	1af6      	subs	r6, r6, r3
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	9308      	str	r3, [sp, #32]
 800950a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800950c:	b1f3      	cbz	r3, 800954c <_dtoa_r+0x78c>
 800950e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 80b7 	beq.w	8009684 <_dtoa_r+0x8c4>
 8009516:	b18c      	cbz	r4, 800953c <_dtoa_r+0x77c>
 8009518:	4629      	mov	r1, r5
 800951a:	4622      	mov	r2, r4
 800951c:	4658      	mov	r0, fp
 800951e:	f000 fcc7 	bl	8009eb0 <__pow5mult>
 8009522:	464a      	mov	r2, r9
 8009524:	4601      	mov	r1, r0
 8009526:	4605      	mov	r5, r0
 8009528:	4658      	mov	r0, fp
 800952a:	f000 fc17 	bl	8009d5c <__multiply>
 800952e:	4649      	mov	r1, r9
 8009530:	9004      	str	r0, [sp, #16]
 8009532:	4658      	mov	r0, fp
 8009534:	f000 fb48 	bl	8009bc8 <_Bfree>
 8009538:	9b04      	ldr	r3, [sp, #16]
 800953a:	4699      	mov	r9, r3
 800953c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800953e:	1b1a      	subs	r2, r3, r4
 8009540:	d004      	beq.n	800954c <_dtoa_r+0x78c>
 8009542:	4649      	mov	r1, r9
 8009544:	4658      	mov	r0, fp
 8009546:	f000 fcb3 	bl	8009eb0 <__pow5mult>
 800954a:	4681      	mov	r9, r0
 800954c:	2101      	movs	r1, #1
 800954e:	4658      	mov	r0, fp
 8009550:	f000 fbee 	bl	8009d30 <__i2b>
 8009554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009556:	4604      	mov	r4, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 81cf 	beq.w	80098fc <_dtoa_r+0xb3c>
 800955e:	461a      	mov	r2, r3
 8009560:	4601      	mov	r1, r0
 8009562:	4658      	mov	r0, fp
 8009564:	f000 fca4 	bl	8009eb0 <__pow5mult>
 8009568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800956a:	2b01      	cmp	r3, #1
 800956c:	4604      	mov	r4, r0
 800956e:	f300 8095 	bgt.w	800969c <_dtoa_r+0x8dc>
 8009572:	9b02      	ldr	r3, [sp, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	f040 8087 	bne.w	8009688 <_dtoa_r+0x8c8>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009580:	2b00      	cmp	r3, #0
 8009582:	f040 8089 	bne.w	8009698 <_dtoa_r+0x8d8>
 8009586:	9b03      	ldr	r3, [sp, #12]
 8009588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800958c:	0d1b      	lsrs	r3, r3, #20
 800958e:	051b      	lsls	r3, r3, #20
 8009590:	b12b      	cbz	r3, 800959e <_dtoa_r+0x7de>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	3301      	adds	r3, #1
 8009596:	9308      	str	r3, [sp, #32]
 8009598:	f108 0801 	add.w	r8, r8, #1
 800959c:	2301      	movs	r3, #1
 800959e:	930a      	str	r3, [sp, #40]	@ 0x28
 80095a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 81b0 	beq.w	8009908 <_dtoa_r+0xb48>
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095ae:	6918      	ldr	r0, [r3, #16]
 80095b0:	f000 fb72 	bl	8009c98 <__hi0bits>
 80095b4:	f1c0 0020 	rsb	r0, r0, #32
 80095b8:	9b08      	ldr	r3, [sp, #32]
 80095ba:	4418      	add	r0, r3
 80095bc:	f010 001f 	ands.w	r0, r0, #31
 80095c0:	d077      	beq.n	80096b2 <_dtoa_r+0x8f2>
 80095c2:	f1c0 0320 	rsb	r3, r0, #32
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	dd6b      	ble.n	80096a2 <_dtoa_r+0x8e2>
 80095ca:	9b08      	ldr	r3, [sp, #32]
 80095cc:	f1c0 001c 	rsb	r0, r0, #28
 80095d0:	4403      	add	r3, r0
 80095d2:	4480      	add	r8, r0
 80095d4:	4406      	add	r6, r0
 80095d6:	9308      	str	r3, [sp, #32]
 80095d8:	f1b8 0f00 	cmp.w	r8, #0
 80095dc:	dd05      	ble.n	80095ea <_dtoa_r+0x82a>
 80095de:	4649      	mov	r1, r9
 80095e0:	4642      	mov	r2, r8
 80095e2:	4658      	mov	r0, fp
 80095e4:	f000 fcbe 	bl	8009f64 <__lshift>
 80095e8:	4681      	mov	r9, r0
 80095ea:	9b08      	ldr	r3, [sp, #32]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dd05      	ble.n	80095fc <_dtoa_r+0x83c>
 80095f0:	4621      	mov	r1, r4
 80095f2:	461a      	mov	r2, r3
 80095f4:	4658      	mov	r0, fp
 80095f6:	f000 fcb5 	bl	8009f64 <__lshift>
 80095fa:	4604      	mov	r4, r0
 80095fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d059      	beq.n	80096b6 <_dtoa_r+0x8f6>
 8009602:	4621      	mov	r1, r4
 8009604:	4648      	mov	r0, r9
 8009606:	f000 fd19 	bl	800a03c <__mcmp>
 800960a:	2800      	cmp	r0, #0
 800960c:	da53      	bge.n	80096b6 <_dtoa_r+0x8f6>
 800960e:	1e7b      	subs	r3, r7, #1
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	4649      	mov	r1, r9
 8009614:	2300      	movs	r3, #0
 8009616:	220a      	movs	r2, #10
 8009618:	4658      	mov	r0, fp
 800961a:	f000 faf7 	bl	8009c0c <__multadd>
 800961e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009620:	4681      	mov	r9, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 8172 	beq.w	800990c <_dtoa_r+0xb4c>
 8009628:	2300      	movs	r3, #0
 800962a:	4629      	mov	r1, r5
 800962c:	220a      	movs	r2, #10
 800962e:	4658      	mov	r0, fp
 8009630:	f000 faec 	bl	8009c0c <__multadd>
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	4605      	mov	r5, r0
 800963a:	dc67      	bgt.n	800970c <_dtoa_r+0x94c>
 800963c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800963e:	2b02      	cmp	r3, #2
 8009640:	dc41      	bgt.n	80096c6 <_dtoa_r+0x906>
 8009642:	e063      	b.n	800970c <_dtoa_r+0x94c>
 8009644:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009646:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800964a:	e746      	b.n	80094da <_dtoa_r+0x71a>
 800964c:	9b07      	ldr	r3, [sp, #28]
 800964e:	1e5c      	subs	r4, r3, #1
 8009650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009652:	42a3      	cmp	r3, r4
 8009654:	bfbf      	itttt	lt
 8009656:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009658:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800965a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800965c:	1ae3      	sublt	r3, r4, r3
 800965e:	bfb4      	ite	lt
 8009660:	18d2      	addlt	r2, r2, r3
 8009662:	1b1c      	subge	r4, r3, r4
 8009664:	9b07      	ldr	r3, [sp, #28]
 8009666:	bfbc      	itt	lt
 8009668:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800966a:	2400      	movlt	r4, #0
 800966c:	2b00      	cmp	r3, #0
 800966e:	bfb5      	itete	lt
 8009670:	eba8 0603 	sublt.w	r6, r8, r3
 8009674:	9b07      	ldrge	r3, [sp, #28]
 8009676:	2300      	movlt	r3, #0
 8009678:	4646      	movge	r6, r8
 800967a:	e730      	b.n	80094de <_dtoa_r+0x71e>
 800967c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800967e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009680:	4646      	mov	r6, r8
 8009682:	e735      	b.n	80094f0 <_dtoa_r+0x730>
 8009684:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009686:	e75c      	b.n	8009542 <_dtoa_r+0x782>
 8009688:	2300      	movs	r3, #0
 800968a:	e788      	b.n	800959e <_dtoa_r+0x7de>
 800968c:	3fe00000 	.word	0x3fe00000
 8009690:	40240000 	.word	0x40240000
 8009694:	40140000 	.word	0x40140000
 8009698:	9b02      	ldr	r3, [sp, #8]
 800969a:	e780      	b.n	800959e <_dtoa_r+0x7de>
 800969c:	2300      	movs	r3, #0
 800969e:	930a      	str	r3, [sp, #40]	@ 0x28
 80096a0:	e782      	b.n	80095a8 <_dtoa_r+0x7e8>
 80096a2:	d099      	beq.n	80095d8 <_dtoa_r+0x818>
 80096a4:	9a08      	ldr	r2, [sp, #32]
 80096a6:	331c      	adds	r3, #28
 80096a8:	441a      	add	r2, r3
 80096aa:	4498      	add	r8, r3
 80096ac:	441e      	add	r6, r3
 80096ae:	9208      	str	r2, [sp, #32]
 80096b0:	e792      	b.n	80095d8 <_dtoa_r+0x818>
 80096b2:	4603      	mov	r3, r0
 80096b4:	e7f6      	b.n	80096a4 <_dtoa_r+0x8e4>
 80096b6:	9b07      	ldr	r3, [sp, #28]
 80096b8:	9704      	str	r7, [sp, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	dc20      	bgt.n	8009700 <_dtoa_r+0x940>
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	dd1e      	ble.n	8009704 <_dtoa_r+0x944>
 80096c6:	9b00      	ldr	r3, [sp, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f47f aec0 	bne.w	800944e <_dtoa_r+0x68e>
 80096ce:	4621      	mov	r1, r4
 80096d0:	2205      	movs	r2, #5
 80096d2:	4658      	mov	r0, fp
 80096d4:	f000 fa9a 	bl	8009c0c <__multadd>
 80096d8:	4601      	mov	r1, r0
 80096da:	4604      	mov	r4, r0
 80096dc:	4648      	mov	r0, r9
 80096de:	f000 fcad 	bl	800a03c <__mcmp>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f77f aeb3 	ble.w	800944e <_dtoa_r+0x68e>
 80096e8:	4656      	mov	r6, sl
 80096ea:	2331      	movs	r3, #49	@ 0x31
 80096ec:	f806 3b01 	strb.w	r3, [r6], #1
 80096f0:	9b04      	ldr	r3, [sp, #16]
 80096f2:	3301      	adds	r3, #1
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	e6ae      	b.n	8009456 <_dtoa_r+0x696>
 80096f8:	9c07      	ldr	r4, [sp, #28]
 80096fa:	9704      	str	r7, [sp, #16]
 80096fc:	4625      	mov	r5, r4
 80096fe:	e7f3      	b.n	80096e8 <_dtoa_r+0x928>
 8009700:	9b07      	ldr	r3, [sp, #28]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 8104 	beq.w	8009914 <_dtoa_r+0xb54>
 800970c:	2e00      	cmp	r6, #0
 800970e:	dd05      	ble.n	800971c <_dtoa_r+0x95c>
 8009710:	4629      	mov	r1, r5
 8009712:	4632      	mov	r2, r6
 8009714:	4658      	mov	r0, fp
 8009716:	f000 fc25 	bl	8009f64 <__lshift>
 800971a:	4605      	mov	r5, r0
 800971c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d05a      	beq.n	80097d8 <_dtoa_r+0xa18>
 8009722:	6869      	ldr	r1, [r5, #4]
 8009724:	4658      	mov	r0, fp
 8009726:	f000 fa0f 	bl	8009b48 <_Balloc>
 800972a:	4606      	mov	r6, r0
 800972c:	b928      	cbnz	r0, 800973a <_dtoa_r+0x97a>
 800972e:	4b84      	ldr	r3, [pc, #528]	@ (8009940 <_dtoa_r+0xb80>)
 8009730:	4602      	mov	r2, r0
 8009732:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009736:	f7ff bb5a 	b.w	8008dee <_dtoa_r+0x2e>
 800973a:	692a      	ldr	r2, [r5, #16]
 800973c:	3202      	adds	r2, #2
 800973e:	0092      	lsls	r2, r2, #2
 8009740:	f105 010c 	add.w	r1, r5, #12
 8009744:	300c      	adds	r0, #12
 8009746:	f7ff faa4 	bl	8008c92 <memcpy>
 800974a:	2201      	movs	r2, #1
 800974c:	4631      	mov	r1, r6
 800974e:	4658      	mov	r0, fp
 8009750:	f000 fc08 	bl	8009f64 <__lshift>
 8009754:	f10a 0301 	add.w	r3, sl, #1
 8009758:	9307      	str	r3, [sp, #28]
 800975a:	9b00      	ldr	r3, [sp, #0]
 800975c:	4453      	add	r3, sl
 800975e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009760:	9b02      	ldr	r3, [sp, #8]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	462f      	mov	r7, r5
 8009768:	930a      	str	r3, [sp, #40]	@ 0x28
 800976a:	4605      	mov	r5, r0
 800976c:	9b07      	ldr	r3, [sp, #28]
 800976e:	4621      	mov	r1, r4
 8009770:	3b01      	subs	r3, #1
 8009772:	4648      	mov	r0, r9
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	f7ff fa9a 	bl	8008cae <quorem>
 800977a:	4639      	mov	r1, r7
 800977c:	9002      	str	r0, [sp, #8]
 800977e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009782:	4648      	mov	r0, r9
 8009784:	f000 fc5a 	bl	800a03c <__mcmp>
 8009788:	462a      	mov	r2, r5
 800978a:	9008      	str	r0, [sp, #32]
 800978c:	4621      	mov	r1, r4
 800978e:	4658      	mov	r0, fp
 8009790:	f000 fc70 	bl	800a074 <__mdiff>
 8009794:	68c2      	ldr	r2, [r0, #12]
 8009796:	4606      	mov	r6, r0
 8009798:	bb02      	cbnz	r2, 80097dc <_dtoa_r+0xa1c>
 800979a:	4601      	mov	r1, r0
 800979c:	4648      	mov	r0, r9
 800979e:	f000 fc4d 	bl	800a03c <__mcmp>
 80097a2:	4602      	mov	r2, r0
 80097a4:	4631      	mov	r1, r6
 80097a6:	4658      	mov	r0, fp
 80097a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80097aa:	f000 fa0d 	bl	8009bc8 <_Bfree>
 80097ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097b2:	9e07      	ldr	r6, [sp, #28]
 80097b4:	ea43 0102 	orr.w	r1, r3, r2
 80097b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ba:	4319      	orrs	r1, r3
 80097bc:	d110      	bne.n	80097e0 <_dtoa_r+0xa20>
 80097be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097c2:	d029      	beq.n	8009818 <_dtoa_r+0xa58>
 80097c4:	9b08      	ldr	r3, [sp, #32]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	dd02      	ble.n	80097d0 <_dtoa_r+0xa10>
 80097ca:	9b02      	ldr	r3, [sp, #8]
 80097cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80097d0:	9b00      	ldr	r3, [sp, #0]
 80097d2:	f883 8000 	strb.w	r8, [r3]
 80097d6:	e63f      	b.n	8009458 <_dtoa_r+0x698>
 80097d8:	4628      	mov	r0, r5
 80097da:	e7bb      	b.n	8009754 <_dtoa_r+0x994>
 80097dc:	2201      	movs	r2, #1
 80097de:	e7e1      	b.n	80097a4 <_dtoa_r+0x9e4>
 80097e0:	9b08      	ldr	r3, [sp, #32]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	db04      	blt.n	80097f0 <_dtoa_r+0xa30>
 80097e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097e8:	430b      	orrs	r3, r1
 80097ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097ec:	430b      	orrs	r3, r1
 80097ee:	d120      	bne.n	8009832 <_dtoa_r+0xa72>
 80097f0:	2a00      	cmp	r2, #0
 80097f2:	dded      	ble.n	80097d0 <_dtoa_r+0xa10>
 80097f4:	4649      	mov	r1, r9
 80097f6:	2201      	movs	r2, #1
 80097f8:	4658      	mov	r0, fp
 80097fa:	f000 fbb3 	bl	8009f64 <__lshift>
 80097fe:	4621      	mov	r1, r4
 8009800:	4681      	mov	r9, r0
 8009802:	f000 fc1b 	bl	800a03c <__mcmp>
 8009806:	2800      	cmp	r0, #0
 8009808:	dc03      	bgt.n	8009812 <_dtoa_r+0xa52>
 800980a:	d1e1      	bne.n	80097d0 <_dtoa_r+0xa10>
 800980c:	f018 0f01 	tst.w	r8, #1
 8009810:	d0de      	beq.n	80097d0 <_dtoa_r+0xa10>
 8009812:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009816:	d1d8      	bne.n	80097ca <_dtoa_r+0xa0a>
 8009818:	9a00      	ldr	r2, [sp, #0]
 800981a:	2339      	movs	r3, #57	@ 0x39
 800981c:	7013      	strb	r3, [r2, #0]
 800981e:	4633      	mov	r3, r6
 8009820:	461e      	mov	r6, r3
 8009822:	3b01      	subs	r3, #1
 8009824:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009828:	2a39      	cmp	r2, #57	@ 0x39
 800982a:	d052      	beq.n	80098d2 <_dtoa_r+0xb12>
 800982c:	3201      	adds	r2, #1
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e612      	b.n	8009458 <_dtoa_r+0x698>
 8009832:	2a00      	cmp	r2, #0
 8009834:	dd07      	ble.n	8009846 <_dtoa_r+0xa86>
 8009836:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800983a:	d0ed      	beq.n	8009818 <_dtoa_r+0xa58>
 800983c:	9a00      	ldr	r2, [sp, #0]
 800983e:	f108 0301 	add.w	r3, r8, #1
 8009842:	7013      	strb	r3, [r2, #0]
 8009844:	e608      	b.n	8009458 <_dtoa_r+0x698>
 8009846:	9b07      	ldr	r3, [sp, #28]
 8009848:	9a07      	ldr	r2, [sp, #28]
 800984a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800984e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009850:	4293      	cmp	r3, r2
 8009852:	d028      	beq.n	80098a6 <_dtoa_r+0xae6>
 8009854:	4649      	mov	r1, r9
 8009856:	2300      	movs	r3, #0
 8009858:	220a      	movs	r2, #10
 800985a:	4658      	mov	r0, fp
 800985c:	f000 f9d6 	bl	8009c0c <__multadd>
 8009860:	42af      	cmp	r7, r5
 8009862:	4681      	mov	r9, r0
 8009864:	f04f 0300 	mov.w	r3, #0
 8009868:	f04f 020a 	mov.w	r2, #10
 800986c:	4639      	mov	r1, r7
 800986e:	4658      	mov	r0, fp
 8009870:	d107      	bne.n	8009882 <_dtoa_r+0xac2>
 8009872:	f000 f9cb 	bl	8009c0c <__multadd>
 8009876:	4607      	mov	r7, r0
 8009878:	4605      	mov	r5, r0
 800987a:	9b07      	ldr	r3, [sp, #28]
 800987c:	3301      	adds	r3, #1
 800987e:	9307      	str	r3, [sp, #28]
 8009880:	e774      	b.n	800976c <_dtoa_r+0x9ac>
 8009882:	f000 f9c3 	bl	8009c0c <__multadd>
 8009886:	4629      	mov	r1, r5
 8009888:	4607      	mov	r7, r0
 800988a:	2300      	movs	r3, #0
 800988c:	220a      	movs	r2, #10
 800988e:	4658      	mov	r0, fp
 8009890:	f000 f9bc 	bl	8009c0c <__multadd>
 8009894:	4605      	mov	r5, r0
 8009896:	e7f0      	b.n	800987a <_dtoa_r+0xaba>
 8009898:	9b00      	ldr	r3, [sp, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfcc      	ite	gt
 800989e:	461e      	movgt	r6, r3
 80098a0:	2601      	movle	r6, #1
 80098a2:	4456      	add	r6, sl
 80098a4:	2700      	movs	r7, #0
 80098a6:	4649      	mov	r1, r9
 80098a8:	2201      	movs	r2, #1
 80098aa:	4658      	mov	r0, fp
 80098ac:	f000 fb5a 	bl	8009f64 <__lshift>
 80098b0:	4621      	mov	r1, r4
 80098b2:	4681      	mov	r9, r0
 80098b4:	f000 fbc2 	bl	800a03c <__mcmp>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	dcb0      	bgt.n	800981e <_dtoa_r+0xa5e>
 80098bc:	d102      	bne.n	80098c4 <_dtoa_r+0xb04>
 80098be:	f018 0f01 	tst.w	r8, #1
 80098c2:	d1ac      	bne.n	800981e <_dtoa_r+0xa5e>
 80098c4:	4633      	mov	r3, r6
 80098c6:	461e      	mov	r6, r3
 80098c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098cc:	2a30      	cmp	r2, #48	@ 0x30
 80098ce:	d0fa      	beq.n	80098c6 <_dtoa_r+0xb06>
 80098d0:	e5c2      	b.n	8009458 <_dtoa_r+0x698>
 80098d2:	459a      	cmp	sl, r3
 80098d4:	d1a4      	bne.n	8009820 <_dtoa_r+0xa60>
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	3301      	adds	r3, #1
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	2331      	movs	r3, #49	@ 0x31
 80098de:	f88a 3000 	strb.w	r3, [sl]
 80098e2:	e5b9      	b.n	8009458 <_dtoa_r+0x698>
 80098e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009944 <_dtoa_r+0xb84>
 80098ea:	b11b      	cbz	r3, 80098f4 <_dtoa_r+0xb34>
 80098ec:	f10a 0308 	add.w	r3, sl, #8
 80098f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	4650      	mov	r0, sl
 80098f6:	b019      	add	sp, #100	@ 0x64
 80098f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098fe:	2b01      	cmp	r3, #1
 8009900:	f77f ae37 	ble.w	8009572 <_dtoa_r+0x7b2>
 8009904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009906:	930a      	str	r3, [sp, #40]	@ 0x28
 8009908:	2001      	movs	r0, #1
 800990a:	e655      	b.n	80095b8 <_dtoa_r+0x7f8>
 800990c:	9b00      	ldr	r3, [sp, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f77f aed6 	ble.w	80096c0 <_dtoa_r+0x900>
 8009914:	4656      	mov	r6, sl
 8009916:	4621      	mov	r1, r4
 8009918:	4648      	mov	r0, r9
 800991a:	f7ff f9c8 	bl	8008cae <quorem>
 800991e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009922:	f806 8b01 	strb.w	r8, [r6], #1
 8009926:	9b00      	ldr	r3, [sp, #0]
 8009928:	eba6 020a 	sub.w	r2, r6, sl
 800992c:	4293      	cmp	r3, r2
 800992e:	ddb3      	ble.n	8009898 <_dtoa_r+0xad8>
 8009930:	4649      	mov	r1, r9
 8009932:	2300      	movs	r3, #0
 8009934:	220a      	movs	r2, #10
 8009936:	4658      	mov	r0, fp
 8009938:	f000 f968 	bl	8009c0c <__multadd>
 800993c:	4681      	mov	r9, r0
 800993e:	e7ea      	b.n	8009916 <_dtoa_r+0xb56>
 8009940:	0800b48c 	.word	0x0800b48c
 8009944:	0800b410 	.word	0x0800b410

08009948 <_free_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4605      	mov	r5, r0
 800994c:	2900      	cmp	r1, #0
 800994e:	d041      	beq.n	80099d4 <_free_r+0x8c>
 8009950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009954:	1f0c      	subs	r4, r1, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfb8      	it	lt
 800995a:	18e4      	addlt	r4, r4, r3
 800995c:	f000 f8e8 	bl	8009b30 <__malloc_lock>
 8009960:	4a1d      	ldr	r2, [pc, #116]	@ (80099d8 <_free_r+0x90>)
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	b933      	cbnz	r3, 8009974 <_free_r+0x2c>
 8009966:	6063      	str	r3, [r4, #4]
 8009968:	6014      	str	r4, [r2, #0]
 800996a:	4628      	mov	r0, r5
 800996c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009970:	f000 b8e4 	b.w	8009b3c <__malloc_unlock>
 8009974:	42a3      	cmp	r3, r4
 8009976:	d908      	bls.n	800998a <_free_r+0x42>
 8009978:	6820      	ldr	r0, [r4, #0]
 800997a:	1821      	adds	r1, r4, r0
 800997c:	428b      	cmp	r3, r1
 800997e:	bf01      	itttt	eq
 8009980:	6819      	ldreq	r1, [r3, #0]
 8009982:	685b      	ldreq	r3, [r3, #4]
 8009984:	1809      	addeq	r1, r1, r0
 8009986:	6021      	streq	r1, [r4, #0]
 8009988:	e7ed      	b.n	8009966 <_free_r+0x1e>
 800998a:	461a      	mov	r2, r3
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	b10b      	cbz	r3, 8009994 <_free_r+0x4c>
 8009990:	42a3      	cmp	r3, r4
 8009992:	d9fa      	bls.n	800998a <_free_r+0x42>
 8009994:	6811      	ldr	r1, [r2, #0]
 8009996:	1850      	adds	r0, r2, r1
 8009998:	42a0      	cmp	r0, r4
 800999a:	d10b      	bne.n	80099b4 <_free_r+0x6c>
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	4401      	add	r1, r0
 80099a0:	1850      	adds	r0, r2, r1
 80099a2:	4283      	cmp	r3, r0
 80099a4:	6011      	str	r1, [r2, #0]
 80099a6:	d1e0      	bne.n	800996a <_free_r+0x22>
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	6053      	str	r3, [r2, #4]
 80099ae:	4408      	add	r0, r1
 80099b0:	6010      	str	r0, [r2, #0]
 80099b2:	e7da      	b.n	800996a <_free_r+0x22>
 80099b4:	d902      	bls.n	80099bc <_free_r+0x74>
 80099b6:	230c      	movs	r3, #12
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	e7d6      	b.n	800996a <_free_r+0x22>
 80099bc:	6820      	ldr	r0, [r4, #0]
 80099be:	1821      	adds	r1, r4, r0
 80099c0:	428b      	cmp	r3, r1
 80099c2:	bf04      	itt	eq
 80099c4:	6819      	ldreq	r1, [r3, #0]
 80099c6:	685b      	ldreq	r3, [r3, #4]
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	bf04      	itt	eq
 80099cc:	1809      	addeq	r1, r1, r0
 80099ce:	6021      	streq	r1, [r4, #0]
 80099d0:	6054      	str	r4, [r2, #4]
 80099d2:	e7ca      	b.n	800996a <_free_r+0x22>
 80099d4:	bd38      	pop	{r3, r4, r5, pc}
 80099d6:	bf00      	nop
 80099d8:	200009c4 	.word	0x200009c4

080099dc <malloc>:
 80099dc:	4b02      	ldr	r3, [pc, #8]	@ (80099e8 <malloc+0xc>)
 80099de:	4601      	mov	r1, r0
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	f000 b825 	b.w	8009a30 <_malloc_r>
 80099e6:	bf00      	nop
 80099e8:	20000028 	.word	0x20000028

080099ec <sbrk_aligned>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	4e0f      	ldr	r6, [pc, #60]	@ (8009a2c <sbrk_aligned+0x40>)
 80099f0:	460c      	mov	r4, r1
 80099f2:	6831      	ldr	r1, [r6, #0]
 80099f4:	4605      	mov	r5, r0
 80099f6:	b911      	cbnz	r1, 80099fe <sbrk_aligned+0x12>
 80099f8:	f000 ff60 	bl	800a8bc <_sbrk_r>
 80099fc:	6030      	str	r0, [r6, #0]
 80099fe:	4621      	mov	r1, r4
 8009a00:	4628      	mov	r0, r5
 8009a02:	f000 ff5b 	bl	800a8bc <_sbrk_r>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	d103      	bne.n	8009a12 <sbrk_aligned+0x26>
 8009a0a:	f04f 34ff 	mov.w	r4, #4294967295
 8009a0e:	4620      	mov	r0, r4
 8009a10:	bd70      	pop	{r4, r5, r6, pc}
 8009a12:	1cc4      	adds	r4, r0, #3
 8009a14:	f024 0403 	bic.w	r4, r4, #3
 8009a18:	42a0      	cmp	r0, r4
 8009a1a:	d0f8      	beq.n	8009a0e <sbrk_aligned+0x22>
 8009a1c:	1a21      	subs	r1, r4, r0
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 ff4c 	bl	800a8bc <_sbrk_r>
 8009a24:	3001      	adds	r0, #1
 8009a26:	d1f2      	bne.n	8009a0e <sbrk_aligned+0x22>
 8009a28:	e7ef      	b.n	8009a0a <sbrk_aligned+0x1e>
 8009a2a:	bf00      	nop
 8009a2c:	200009c0 	.word	0x200009c0

08009a30 <_malloc_r>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	1ccd      	adds	r5, r1, #3
 8009a36:	f025 0503 	bic.w	r5, r5, #3
 8009a3a:	3508      	adds	r5, #8
 8009a3c:	2d0c      	cmp	r5, #12
 8009a3e:	bf38      	it	cc
 8009a40:	250c      	movcc	r5, #12
 8009a42:	2d00      	cmp	r5, #0
 8009a44:	4606      	mov	r6, r0
 8009a46:	db01      	blt.n	8009a4c <_malloc_r+0x1c>
 8009a48:	42a9      	cmp	r1, r5
 8009a4a:	d904      	bls.n	8009a56 <_malloc_r+0x26>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	6033      	str	r3, [r6, #0]
 8009a50:	2000      	movs	r0, #0
 8009a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b2c <_malloc_r+0xfc>
 8009a5a:	f000 f869 	bl	8009b30 <__malloc_lock>
 8009a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a62:	461c      	mov	r4, r3
 8009a64:	bb44      	cbnz	r4, 8009ab8 <_malloc_r+0x88>
 8009a66:	4629      	mov	r1, r5
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7ff ffbf 	bl	80099ec <sbrk_aligned>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	4604      	mov	r4, r0
 8009a72:	d158      	bne.n	8009b26 <_malloc_r+0xf6>
 8009a74:	f8d8 4000 	ldr.w	r4, [r8]
 8009a78:	4627      	mov	r7, r4
 8009a7a:	2f00      	cmp	r7, #0
 8009a7c:	d143      	bne.n	8009b06 <_malloc_r+0xd6>
 8009a7e:	2c00      	cmp	r4, #0
 8009a80:	d04b      	beq.n	8009b1a <_malloc_r+0xea>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	4639      	mov	r1, r7
 8009a86:	4630      	mov	r0, r6
 8009a88:	eb04 0903 	add.w	r9, r4, r3
 8009a8c:	f000 ff16 	bl	800a8bc <_sbrk_r>
 8009a90:	4581      	cmp	r9, r0
 8009a92:	d142      	bne.n	8009b1a <_malloc_r+0xea>
 8009a94:	6821      	ldr	r1, [r4, #0]
 8009a96:	1a6d      	subs	r5, r5, r1
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7ff ffa6 	bl	80099ec <sbrk_aligned>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d03a      	beq.n	8009b1a <_malloc_r+0xea>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	442b      	add	r3, r5
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	bb62      	cbnz	r2, 8009b0c <_malloc_r+0xdc>
 8009ab2:	f8c8 7000 	str.w	r7, [r8]
 8009ab6:	e00f      	b.n	8009ad8 <_malloc_r+0xa8>
 8009ab8:	6822      	ldr	r2, [r4, #0]
 8009aba:	1b52      	subs	r2, r2, r5
 8009abc:	d420      	bmi.n	8009b00 <_malloc_r+0xd0>
 8009abe:	2a0b      	cmp	r2, #11
 8009ac0:	d917      	bls.n	8009af2 <_malloc_r+0xc2>
 8009ac2:	1961      	adds	r1, r4, r5
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	6025      	str	r5, [r4, #0]
 8009ac8:	bf18      	it	ne
 8009aca:	6059      	strne	r1, [r3, #4]
 8009acc:	6863      	ldr	r3, [r4, #4]
 8009ace:	bf08      	it	eq
 8009ad0:	f8c8 1000 	streq.w	r1, [r8]
 8009ad4:	5162      	str	r2, [r4, r5]
 8009ad6:	604b      	str	r3, [r1, #4]
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f000 f82f 	bl	8009b3c <__malloc_unlock>
 8009ade:	f104 000b 	add.w	r0, r4, #11
 8009ae2:	1d23      	adds	r3, r4, #4
 8009ae4:	f020 0007 	bic.w	r0, r0, #7
 8009ae8:	1ac2      	subs	r2, r0, r3
 8009aea:	bf1c      	itt	ne
 8009aec:	1a1b      	subne	r3, r3, r0
 8009aee:	50a3      	strne	r3, [r4, r2]
 8009af0:	e7af      	b.n	8009a52 <_malloc_r+0x22>
 8009af2:	6862      	ldr	r2, [r4, #4]
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	bf0c      	ite	eq
 8009af8:	f8c8 2000 	streq.w	r2, [r8]
 8009afc:	605a      	strne	r2, [r3, #4]
 8009afe:	e7eb      	b.n	8009ad8 <_malloc_r+0xa8>
 8009b00:	4623      	mov	r3, r4
 8009b02:	6864      	ldr	r4, [r4, #4]
 8009b04:	e7ae      	b.n	8009a64 <_malloc_r+0x34>
 8009b06:	463c      	mov	r4, r7
 8009b08:	687f      	ldr	r7, [r7, #4]
 8009b0a:	e7b6      	b.n	8009a7a <_malloc_r+0x4a>
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d1fb      	bne.n	8009b0c <_malloc_r+0xdc>
 8009b14:	2300      	movs	r3, #0
 8009b16:	6053      	str	r3, [r2, #4]
 8009b18:	e7de      	b.n	8009ad8 <_malloc_r+0xa8>
 8009b1a:	230c      	movs	r3, #12
 8009b1c:	6033      	str	r3, [r6, #0]
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f000 f80c 	bl	8009b3c <__malloc_unlock>
 8009b24:	e794      	b.n	8009a50 <_malloc_r+0x20>
 8009b26:	6005      	str	r5, [r0, #0]
 8009b28:	e7d6      	b.n	8009ad8 <_malloc_r+0xa8>
 8009b2a:	bf00      	nop
 8009b2c:	200009c4 	.word	0x200009c4

08009b30 <__malloc_lock>:
 8009b30:	4801      	ldr	r0, [pc, #4]	@ (8009b38 <__malloc_lock+0x8>)
 8009b32:	f7ff b8ac 	b.w	8008c8e <__retarget_lock_acquire_recursive>
 8009b36:	bf00      	nop
 8009b38:	200009bc 	.word	0x200009bc

08009b3c <__malloc_unlock>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	@ (8009b44 <__malloc_unlock+0x8>)
 8009b3e:	f7ff b8a7 	b.w	8008c90 <__retarget_lock_release_recursive>
 8009b42:	bf00      	nop
 8009b44:	200009bc 	.word	0x200009bc

08009b48 <_Balloc>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	69c6      	ldr	r6, [r0, #28]
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	460d      	mov	r5, r1
 8009b50:	b976      	cbnz	r6, 8009b70 <_Balloc+0x28>
 8009b52:	2010      	movs	r0, #16
 8009b54:	f7ff ff42 	bl	80099dc <malloc>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	61e0      	str	r0, [r4, #28]
 8009b5c:	b920      	cbnz	r0, 8009b68 <_Balloc+0x20>
 8009b5e:	4b18      	ldr	r3, [pc, #96]	@ (8009bc0 <_Balloc+0x78>)
 8009b60:	4818      	ldr	r0, [pc, #96]	@ (8009bc4 <_Balloc+0x7c>)
 8009b62:	216b      	movs	r1, #107	@ 0x6b
 8009b64:	f000 feba 	bl	800a8dc <__assert_func>
 8009b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b6c:	6006      	str	r6, [r0, #0]
 8009b6e:	60c6      	str	r6, [r0, #12]
 8009b70:	69e6      	ldr	r6, [r4, #28]
 8009b72:	68f3      	ldr	r3, [r6, #12]
 8009b74:	b183      	cbz	r3, 8009b98 <_Balloc+0x50>
 8009b76:	69e3      	ldr	r3, [r4, #28]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b7e:	b9b8      	cbnz	r0, 8009bb0 <_Balloc+0x68>
 8009b80:	2101      	movs	r1, #1
 8009b82:	fa01 f605 	lsl.w	r6, r1, r5
 8009b86:	1d72      	adds	r2, r6, #5
 8009b88:	0092      	lsls	r2, r2, #2
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 fec4 	bl	800a918 <_calloc_r>
 8009b90:	b160      	cbz	r0, 8009bac <_Balloc+0x64>
 8009b92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b96:	e00e      	b.n	8009bb6 <_Balloc+0x6e>
 8009b98:	2221      	movs	r2, #33	@ 0x21
 8009b9a:	2104      	movs	r1, #4
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 febb 	bl	800a918 <_calloc_r>
 8009ba2:	69e3      	ldr	r3, [r4, #28]
 8009ba4:	60f0      	str	r0, [r6, #12]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e4      	bne.n	8009b76 <_Balloc+0x2e>
 8009bac:	2000      	movs	r0, #0
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	6802      	ldr	r2, [r0, #0]
 8009bb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bbc:	e7f7      	b.n	8009bae <_Balloc+0x66>
 8009bbe:	bf00      	nop
 8009bc0:	0800b41d 	.word	0x0800b41d
 8009bc4:	0800b49d 	.word	0x0800b49d

08009bc8 <_Bfree>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	69c6      	ldr	r6, [r0, #28]
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	b976      	cbnz	r6, 8009bf0 <_Bfree+0x28>
 8009bd2:	2010      	movs	r0, #16
 8009bd4:	f7ff ff02 	bl	80099dc <malloc>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	61e8      	str	r0, [r5, #28]
 8009bdc:	b920      	cbnz	r0, 8009be8 <_Bfree+0x20>
 8009bde:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <_Bfree+0x3c>)
 8009be0:	4809      	ldr	r0, [pc, #36]	@ (8009c08 <_Bfree+0x40>)
 8009be2:	218f      	movs	r1, #143	@ 0x8f
 8009be4:	f000 fe7a 	bl	800a8dc <__assert_func>
 8009be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bec:	6006      	str	r6, [r0, #0]
 8009bee:	60c6      	str	r6, [r0, #12]
 8009bf0:	b13c      	cbz	r4, 8009c02 <_Bfree+0x3a>
 8009bf2:	69eb      	ldr	r3, [r5, #28]
 8009bf4:	6862      	ldr	r2, [r4, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bfc:	6021      	str	r1, [r4, #0]
 8009bfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	0800b41d 	.word	0x0800b41d
 8009c08:	0800b49d 	.word	0x0800b49d

08009c0c <__multadd>:
 8009c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c10:	690d      	ldr	r5, [r1, #16]
 8009c12:	4607      	mov	r7, r0
 8009c14:	460c      	mov	r4, r1
 8009c16:	461e      	mov	r6, r3
 8009c18:	f101 0c14 	add.w	ip, r1, #20
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c22:	b299      	uxth	r1, r3
 8009c24:	fb02 6101 	mla	r1, r2, r1, r6
 8009c28:	0c1e      	lsrs	r6, r3, #16
 8009c2a:	0c0b      	lsrs	r3, r1, #16
 8009c2c:	fb02 3306 	mla	r3, r2, r6, r3
 8009c30:	b289      	uxth	r1, r1
 8009c32:	3001      	adds	r0, #1
 8009c34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c38:	4285      	cmp	r5, r0
 8009c3a:	f84c 1b04 	str.w	r1, [ip], #4
 8009c3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c42:	dcec      	bgt.n	8009c1e <__multadd+0x12>
 8009c44:	b30e      	cbz	r6, 8009c8a <__multadd+0x7e>
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	dc19      	bgt.n	8009c80 <__multadd+0x74>
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	4638      	mov	r0, r7
 8009c50:	3101      	adds	r1, #1
 8009c52:	f7ff ff79 	bl	8009b48 <_Balloc>
 8009c56:	4680      	mov	r8, r0
 8009c58:	b928      	cbnz	r0, 8009c66 <__multadd+0x5a>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c90 <__multadd+0x84>)
 8009c5e:	480d      	ldr	r0, [pc, #52]	@ (8009c94 <__multadd+0x88>)
 8009c60:	21ba      	movs	r1, #186	@ 0xba
 8009c62:	f000 fe3b 	bl	800a8dc <__assert_func>
 8009c66:	6922      	ldr	r2, [r4, #16]
 8009c68:	3202      	adds	r2, #2
 8009c6a:	f104 010c 	add.w	r1, r4, #12
 8009c6e:	0092      	lsls	r2, r2, #2
 8009c70:	300c      	adds	r0, #12
 8009c72:	f7ff f80e 	bl	8008c92 <memcpy>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7ff ffa5 	bl	8009bc8 <_Bfree>
 8009c7e:	4644      	mov	r4, r8
 8009c80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c84:	3501      	adds	r5, #1
 8009c86:	615e      	str	r6, [r3, #20]
 8009c88:	6125      	str	r5, [r4, #16]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c90:	0800b48c 	.word	0x0800b48c
 8009c94:	0800b49d 	.word	0x0800b49d

08009c98 <__hi0bits>:
 8009c98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	bf36      	itet	cc
 8009ca0:	0403      	lslcc	r3, r0, #16
 8009ca2:	2000      	movcs	r0, #0
 8009ca4:	2010      	movcc	r0, #16
 8009ca6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009caa:	bf3c      	itt	cc
 8009cac:	021b      	lslcc	r3, r3, #8
 8009cae:	3008      	addcc	r0, #8
 8009cb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cb4:	bf3c      	itt	cc
 8009cb6:	011b      	lslcc	r3, r3, #4
 8009cb8:	3004      	addcc	r0, #4
 8009cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cbe:	bf3c      	itt	cc
 8009cc0:	009b      	lslcc	r3, r3, #2
 8009cc2:	3002      	addcc	r0, #2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	db05      	blt.n	8009cd4 <__hi0bits+0x3c>
 8009cc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ccc:	f100 0001 	add.w	r0, r0, #1
 8009cd0:	bf08      	it	eq
 8009cd2:	2020      	moveq	r0, #32
 8009cd4:	4770      	bx	lr

08009cd6 <__lo0bits>:
 8009cd6:	6803      	ldr	r3, [r0, #0]
 8009cd8:	4602      	mov	r2, r0
 8009cda:	f013 0007 	ands.w	r0, r3, #7
 8009cde:	d00b      	beq.n	8009cf8 <__lo0bits+0x22>
 8009ce0:	07d9      	lsls	r1, r3, #31
 8009ce2:	d421      	bmi.n	8009d28 <__lo0bits+0x52>
 8009ce4:	0798      	lsls	r0, r3, #30
 8009ce6:	bf49      	itett	mi
 8009ce8:	085b      	lsrmi	r3, r3, #1
 8009cea:	089b      	lsrpl	r3, r3, #2
 8009cec:	2001      	movmi	r0, #1
 8009cee:	6013      	strmi	r3, [r2, #0]
 8009cf0:	bf5c      	itt	pl
 8009cf2:	6013      	strpl	r3, [r2, #0]
 8009cf4:	2002      	movpl	r0, #2
 8009cf6:	4770      	bx	lr
 8009cf8:	b299      	uxth	r1, r3
 8009cfa:	b909      	cbnz	r1, 8009d00 <__lo0bits+0x2a>
 8009cfc:	0c1b      	lsrs	r3, r3, #16
 8009cfe:	2010      	movs	r0, #16
 8009d00:	b2d9      	uxtb	r1, r3
 8009d02:	b909      	cbnz	r1, 8009d08 <__lo0bits+0x32>
 8009d04:	3008      	adds	r0, #8
 8009d06:	0a1b      	lsrs	r3, r3, #8
 8009d08:	0719      	lsls	r1, r3, #28
 8009d0a:	bf04      	itt	eq
 8009d0c:	091b      	lsreq	r3, r3, #4
 8009d0e:	3004      	addeq	r0, #4
 8009d10:	0799      	lsls	r1, r3, #30
 8009d12:	bf04      	itt	eq
 8009d14:	089b      	lsreq	r3, r3, #2
 8009d16:	3002      	addeq	r0, #2
 8009d18:	07d9      	lsls	r1, r3, #31
 8009d1a:	d403      	bmi.n	8009d24 <__lo0bits+0x4e>
 8009d1c:	085b      	lsrs	r3, r3, #1
 8009d1e:	f100 0001 	add.w	r0, r0, #1
 8009d22:	d003      	beq.n	8009d2c <__lo0bits+0x56>
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	4770      	bx	lr
 8009d28:	2000      	movs	r0, #0
 8009d2a:	4770      	bx	lr
 8009d2c:	2020      	movs	r0, #32
 8009d2e:	4770      	bx	lr

08009d30 <__i2b>:
 8009d30:	b510      	push	{r4, lr}
 8009d32:	460c      	mov	r4, r1
 8009d34:	2101      	movs	r1, #1
 8009d36:	f7ff ff07 	bl	8009b48 <_Balloc>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	b928      	cbnz	r0, 8009d4a <__i2b+0x1a>
 8009d3e:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <__i2b+0x24>)
 8009d40:	4805      	ldr	r0, [pc, #20]	@ (8009d58 <__i2b+0x28>)
 8009d42:	f240 1145 	movw	r1, #325	@ 0x145
 8009d46:	f000 fdc9 	bl	800a8dc <__assert_func>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	6144      	str	r4, [r0, #20]
 8009d4e:	6103      	str	r3, [r0, #16]
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	bf00      	nop
 8009d54:	0800b48c 	.word	0x0800b48c
 8009d58:	0800b49d 	.word	0x0800b49d

08009d5c <__multiply>:
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	4614      	mov	r4, r2
 8009d62:	690a      	ldr	r2, [r1, #16]
 8009d64:	6923      	ldr	r3, [r4, #16]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	bfa8      	it	ge
 8009d6a:	4623      	movge	r3, r4
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	bfa4      	itt	ge
 8009d70:	460c      	movge	r4, r1
 8009d72:	461f      	movge	r7, r3
 8009d74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009d78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009d7c:	68a3      	ldr	r3, [r4, #8]
 8009d7e:	6861      	ldr	r1, [r4, #4]
 8009d80:	eb0a 0609 	add.w	r6, sl, r9
 8009d84:	42b3      	cmp	r3, r6
 8009d86:	b085      	sub	sp, #20
 8009d88:	bfb8      	it	lt
 8009d8a:	3101      	addlt	r1, #1
 8009d8c:	f7ff fedc 	bl	8009b48 <_Balloc>
 8009d90:	b930      	cbnz	r0, 8009da0 <__multiply+0x44>
 8009d92:	4602      	mov	r2, r0
 8009d94:	4b44      	ldr	r3, [pc, #272]	@ (8009ea8 <__multiply+0x14c>)
 8009d96:	4845      	ldr	r0, [pc, #276]	@ (8009eac <__multiply+0x150>)
 8009d98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d9c:	f000 fd9e 	bl	800a8dc <__assert_func>
 8009da0:	f100 0514 	add.w	r5, r0, #20
 8009da4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009da8:	462b      	mov	r3, r5
 8009daa:	2200      	movs	r2, #0
 8009dac:	4543      	cmp	r3, r8
 8009dae:	d321      	bcc.n	8009df4 <__multiply+0x98>
 8009db0:	f107 0114 	add.w	r1, r7, #20
 8009db4:	f104 0214 	add.w	r2, r4, #20
 8009db8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009dbc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009dc0:	9302      	str	r3, [sp, #8]
 8009dc2:	1b13      	subs	r3, r2, r4
 8009dc4:	3b15      	subs	r3, #21
 8009dc6:	f023 0303 	bic.w	r3, r3, #3
 8009dca:	3304      	adds	r3, #4
 8009dcc:	f104 0715 	add.w	r7, r4, #21
 8009dd0:	42ba      	cmp	r2, r7
 8009dd2:	bf38      	it	cc
 8009dd4:	2304      	movcc	r3, #4
 8009dd6:	9301      	str	r3, [sp, #4]
 8009dd8:	9b02      	ldr	r3, [sp, #8]
 8009dda:	9103      	str	r1, [sp, #12]
 8009ddc:	428b      	cmp	r3, r1
 8009dde:	d80c      	bhi.n	8009dfa <__multiply+0x9e>
 8009de0:	2e00      	cmp	r6, #0
 8009de2:	dd03      	ble.n	8009dec <__multiply+0x90>
 8009de4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d05b      	beq.n	8009ea4 <__multiply+0x148>
 8009dec:	6106      	str	r6, [r0, #16]
 8009dee:	b005      	add	sp, #20
 8009df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df4:	f843 2b04 	str.w	r2, [r3], #4
 8009df8:	e7d8      	b.n	8009dac <__multiply+0x50>
 8009dfa:	f8b1 a000 	ldrh.w	sl, [r1]
 8009dfe:	f1ba 0f00 	cmp.w	sl, #0
 8009e02:	d024      	beq.n	8009e4e <__multiply+0xf2>
 8009e04:	f104 0e14 	add.w	lr, r4, #20
 8009e08:	46a9      	mov	r9, r5
 8009e0a:	f04f 0c00 	mov.w	ip, #0
 8009e0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e12:	f8d9 3000 	ldr.w	r3, [r9]
 8009e16:	fa1f fb87 	uxth.w	fp, r7
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009e24:	f8d9 7000 	ldr.w	r7, [r9]
 8009e28:	4463      	add	r3, ip
 8009e2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e2e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009e32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e3c:	4572      	cmp	r2, lr
 8009e3e:	f849 3b04 	str.w	r3, [r9], #4
 8009e42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e46:	d8e2      	bhi.n	8009e0e <__multiply+0xb2>
 8009e48:	9b01      	ldr	r3, [sp, #4]
 8009e4a:	f845 c003 	str.w	ip, [r5, r3]
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e54:	3104      	adds	r1, #4
 8009e56:	f1b9 0f00 	cmp.w	r9, #0
 8009e5a:	d021      	beq.n	8009ea0 <__multiply+0x144>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	f104 0c14 	add.w	ip, r4, #20
 8009e62:	46ae      	mov	lr, r5
 8009e64:	f04f 0a00 	mov.w	sl, #0
 8009e68:	f8bc b000 	ldrh.w	fp, [ip]
 8009e6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009e70:	fb09 770b 	mla	r7, r9, fp, r7
 8009e74:	4457      	add	r7, sl
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e7c:	f84e 3b04 	str.w	r3, [lr], #4
 8009e80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e88:	f8be 3000 	ldrh.w	r3, [lr]
 8009e8c:	fb09 330a 	mla	r3, r9, sl, r3
 8009e90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009e94:	4562      	cmp	r2, ip
 8009e96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e9a:	d8e5      	bhi.n	8009e68 <__multiply+0x10c>
 8009e9c:	9f01      	ldr	r7, [sp, #4]
 8009e9e:	51eb      	str	r3, [r5, r7]
 8009ea0:	3504      	adds	r5, #4
 8009ea2:	e799      	b.n	8009dd8 <__multiply+0x7c>
 8009ea4:	3e01      	subs	r6, #1
 8009ea6:	e79b      	b.n	8009de0 <__multiply+0x84>
 8009ea8:	0800b48c 	.word	0x0800b48c
 8009eac:	0800b49d 	.word	0x0800b49d

08009eb0 <__pow5mult>:
 8009eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb4:	4615      	mov	r5, r2
 8009eb6:	f012 0203 	ands.w	r2, r2, #3
 8009eba:	4607      	mov	r7, r0
 8009ebc:	460e      	mov	r6, r1
 8009ebe:	d007      	beq.n	8009ed0 <__pow5mult+0x20>
 8009ec0:	4c25      	ldr	r4, [pc, #148]	@ (8009f58 <__pow5mult+0xa8>)
 8009ec2:	3a01      	subs	r2, #1
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eca:	f7ff fe9f 	bl	8009c0c <__multadd>
 8009ece:	4606      	mov	r6, r0
 8009ed0:	10ad      	asrs	r5, r5, #2
 8009ed2:	d03d      	beq.n	8009f50 <__pow5mult+0xa0>
 8009ed4:	69fc      	ldr	r4, [r7, #28]
 8009ed6:	b97c      	cbnz	r4, 8009ef8 <__pow5mult+0x48>
 8009ed8:	2010      	movs	r0, #16
 8009eda:	f7ff fd7f 	bl	80099dc <malloc>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	61f8      	str	r0, [r7, #28]
 8009ee2:	b928      	cbnz	r0, 8009ef0 <__pow5mult+0x40>
 8009ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8009f5c <__pow5mult+0xac>)
 8009ee6:	481e      	ldr	r0, [pc, #120]	@ (8009f60 <__pow5mult+0xb0>)
 8009ee8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009eec:	f000 fcf6 	bl	800a8dc <__assert_func>
 8009ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ef4:	6004      	str	r4, [r0, #0]
 8009ef6:	60c4      	str	r4, [r0, #12]
 8009ef8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009efc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f00:	b94c      	cbnz	r4, 8009f16 <__pow5mult+0x66>
 8009f02:	f240 2171 	movw	r1, #625	@ 0x271
 8009f06:	4638      	mov	r0, r7
 8009f08:	f7ff ff12 	bl	8009d30 <__i2b>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f12:	4604      	mov	r4, r0
 8009f14:	6003      	str	r3, [r0, #0]
 8009f16:	f04f 0900 	mov.w	r9, #0
 8009f1a:	07eb      	lsls	r3, r5, #31
 8009f1c:	d50a      	bpl.n	8009f34 <__pow5mult+0x84>
 8009f1e:	4631      	mov	r1, r6
 8009f20:	4622      	mov	r2, r4
 8009f22:	4638      	mov	r0, r7
 8009f24:	f7ff ff1a 	bl	8009d5c <__multiply>
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f7ff fe4b 	bl	8009bc8 <_Bfree>
 8009f32:	4646      	mov	r6, r8
 8009f34:	106d      	asrs	r5, r5, #1
 8009f36:	d00b      	beq.n	8009f50 <__pow5mult+0xa0>
 8009f38:	6820      	ldr	r0, [r4, #0]
 8009f3a:	b938      	cbnz	r0, 8009f4c <__pow5mult+0x9c>
 8009f3c:	4622      	mov	r2, r4
 8009f3e:	4621      	mov	r1, r4
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7ff ff0b 	bl	8009d5c <__multiply>
 8009f46:	6020      	str	r0, [r4, #0]
 8009f48:	f8c0 9000 	str.w	r9, [r0]
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	e7e4      	b.n	8009f1a <__pow5mult+0x6a>
 8009f50:	4630      	mov	r0, r6
 8009f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f56:	bf00      	nop
 8009f58:	0800b4f8 	.word	0x0800b4f8
 8009f5c:	0800b41d 	.word	0x0800b41d
 8009f60:	0800b49d 	.word	0x0800b49d

08009f64 <__lshift>:
 8009f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	6849      	ldr	r1, [r1, #4]
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f72:	68a3      	ldr	r3, [r4, #8]
 8009f74:	4607      	mov	r7, r0
 8009f76:	4691      	mov	r9, r2
 8009f78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f7c:	f108 0601 	add.w	r6, r8, #1
 8009f80:	42b3      	cmp	r3, r6
 8009f82:	db0b      	blt.n	8009f9c <__lshift+0x38>
 8009f84:	4638      	mov	r0, r7
 8009f86:	f7ff fddf 	bl	8009b48 <_Balloc>
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	b948      	cbnz	r0, 8009fa2 <__lshift+0x3e>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4b28      	ldr	r3, [pc, #160]	@ (800a034 <__lshift+0xd0>)
 8009f92:	4829      	ldr	r0, [pc, #164]	@ (800a038 <__lshift+0xd4>)
 8009f94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f98:	f000 fca0 	bl	800a8dc <__assert_func>
 8009f9c:	3101      	adds	r1, #1
 8009f9e:	005b      	lsls	r3, r3, #1
 8009fa0:	e7ee      	b.n	8009f80 <__lshift+0x1c>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f100 0114 	add.w	r1, r0, #20
 8009fa8:	f100 0210 	add.w	r2, r0, #16
 8009fac:	4618      	mov	r0, r3
 8009fae:	4553      	cmp	r3, sl
 8009fb0:	db33      	blt.n	800a01a <__lshift+0xb6>
 8009fb2:	6920      	ldr	r0, [r4, #16]
 8009fb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fb8:	f104 0314 	add.w	r3, r4, #20
 8009fbc:	f019 091f 	ands.w	r9, r9, #31
 8009fc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fc8:	d02b      	beq.n	800a022 <__lshift+0xbe>
 8009fca:	f1c9 0e20 	rsb	lr, r9, #32
 8009fce:	468a      	mov	sl, r1
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	fa00 f009 	lsl.w	r0, r0, r9
 8009fd8:	4310      	orrs	r0, r2
 8009fda:	f84a 0b04 	str.w	r0, [sl], #4
 8009fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fe2:	459c      	cmp	ip, r3
 8009fe4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fe8:	d8f3      	bhi.n	8009fd2 <__lshift+0x6e>
 8009fea:	ebac 0304 	sub.w	r3, ip, r4
 8009fee:	3b15      	subs	r3, #21
 8009ff0:	f023 0303 	bic.w	r3, r3, #3
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	f104 0015 	add.w	r0, r4, #21
 8009ffa:	4584      	cmp	ip, r0
 8009ffc:	bf38      	it	cc
 8009ffe:	2304      	movcc	r3, #4
 800a000:	50ca      	str	r2, [r1, r3]
 800a002:	b10a      	cbz	r2, 800a008 <__lshift+0xa4>
 800a004:	f108 0602 	add.w	r6, r8, #2
 800a008:	3e01      	subs	r6, #1
 800a00a:	4638      	mov	r0, r7
 800a00c:	612e      	str	r6, [r5, #16]
 800a00e:	4621      	mov	r1, r4
 800a010:	f7ff fdda 	bl	8009bc8 <_Bfree>
 800a014:	4628      	mov	r0, r5
 800a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a01e:	3301      	adds	r3, #1
 800a020:	e7c5      	b.n	8009fae <__lshift+0x4a>
 800a022:	3904      	subs	r1, #4
 800a024:	f853 2b04 	ldr.w	r2, [r3], #4
 800a028:	f841 2f04 	str.w	r2, [r1, #4]!
 800a02c:	459c      	cmp	ip, r3
 800a02e:	d8f9      	bhi.n	800a024 <__lshift+0xc0>
 800a030:	e7ea      	b.n	800a008 <__lshift+0xa4>
 800a032:	bf00      	nop
 800a034:	0800b48c 	.word	0x0800b48c
 800a038:	0800b49d 	.word	0x0800b49d

0800a03c <__mcmp>:
 800a03c:	690a      	ldr	r2, [r1, #16]
 800a03e:	4603      	mov	r3, r0
 800a040:	6900      	ldr	r0, [r0, #16]
 800a042:	1a80      	subs	r0, r0, r2
 800a044:	b530      	push	{r4, r5, lr}
 800a046:	d10e      	bne.n	800a066 <__mcmp+0x2a>
 800a048:	3314      	adds	r3, #20
 800a04a:	3114      	adds	r1, #20
 800a04c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a050:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a054:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a058:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a05c:	4295      	cmp	r5, r2
 800a05e:	d003      	beq.n	800a068 <__mcmp+0x2c>
 800a060:	d205      	bcs.n	800a06e <__mcmp+0x32>
 800a062:	f04f 30ff 	mov.w	r0, #4294967295
 800a066:	bd30      	pop	{r4, r5, pc}
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d3f3      	bcc.n	800a054 <__mcmp+0x18>
 800a06c:	e7fb      	b.n	800a066 <__mcmp+0x2a>
 800a06e:	2001      	movs	r0, #1
 800a070:	e7f9      	b.n	800a066 <__mcmp+0x2a>
	...

0800a074 <__mdiff>:
 800a074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	4689      	mov	r9, r1
 800a07a:	4606      	mov	r6, r0
 800a07c:	4611      	mov	r1, r2
 800a07e:	4648      	mov	r0, r9
 800a080:	4614      	mov	r4, r2
 800a082:	f7ff ffdb 	bl	800a03c <__mcmp>
 800a086:	1e05      	subs	r5, r0, #0
 800a088:	d112      	bne.n	800a0b0 <__mdiff+0x3c>
 800a08a:	4629      	mov	r1, r5
 800a08c:	4630      	mov	r0, r6
 800a08e:	f7ff fd5b 	bl	8009b48 <_Balloc>
 800a092:	4602      	mov	r2, r0
 800a094:	b928      	cbnz	r0, 800a0a2 <__mdiff+0x2e>
 800a096:	4b3f      	ldr	r3, [pc, #252]	@ (800a194 <__mdiff+0x120>)
 800a098:	f240 2137 	movw	r1, #567	@ 0x237
 800a09c:	483e      	ldr	r0, [pc, #248]	@ (800a198 <__mdiff+0x124>)
 800a09e:	f000 fc1d 	bl	800a8dc <__assert_func>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	b003      	add	sp, #12
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b0:	bfbc      	itt	lt
 800a0b2:	464b      	movlt	r3, r9
 800a0b4:	46a1      	movlt	r9, r4
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0bc:	bfba      	itte	lt
 800a0be:	461c      	movlt	r4, r3
 800a0c0:	2501      	movlt	r5, #1
 800a0c2:	2500      	movge	r5, #0
 800a0c4:	f7ff fd40 	bl	8009b48 <_Balloc>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	b918      	cbnz	r0, 800a0d4 <__mdiff+0x60>
 800a0cc:	4b31      	ldr	r3, [pc, #196]	@ (800a194 <__mdiff+0x120>)
 800a0ce:	f240 2145 	movw	r1, #581	@ 0x245
 800a0d2:	e7e3      	b.n	800a09c <__mdiff+0x28>
 800a0d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0d8:	6926      	ldr	r6, [r4, #16]
 800a0da:	60c5      	str	r5, [r0, #12]
 800a0dc:	f109 0310 	add.w	r3, r9, #16
 800a0e0:	f109 0514 	add.w	r5, r9, #20
 800a0e4:	f104 0e14 	add.w	lr, r4, #20
 800a0e8:	f100 0b14 	add.w	fp, r0, #20
 800a0ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a0f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a0f4:	9301      	str	r3, [sp, #4]
 800a0f6:	46d9      	mov	r9, fp
 800a0f8:	f04f 0c00 	mov.w	ip, #0
 800a0fc:	9b01      	ldr	r3, [sp, #4]
 800a0fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a102:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	fa1f f38a 	uxth.w	r3, sl
 800a10c:	4619      	mov	r1, r3
 800a10e:	b283      	uxth	r3, r0
 800a110:	1acb      	subs	r3, r1, r3
 800a112:	0c00      	lsrs	r0, r0, #16
 800a114:	4463      	add	r3, ip
 800a116:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a11a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a11e:	b29b      	uxth	r3, r3
 800a120:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a124:	4576      	cmp	r6, lr
 800a126:	f849 3b04 	str.w	r3, [r9], #4
 800a12a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a12e:	d8e5      	bhi.n	800a0fc <__mdiff+0x88>
 800a130:	1b33      	subs	r3, r6, r4
 800a132:	3b15      	subs	r3, #21
 800a134:	f023 0303 	bic.w	r3, r3, #3
 800a138:	3415      	adds	r4, #21
 800a13a:	3304      	adds	r3, #4
 800a13c:	42a6      	cmp	r6, r4
 800a13e:	bf38      	it	cc
 800a140:	2304      	movcc	r3, #4
 800a142:	441d      	add	r5, r3
 800a144:	445b      	add	r3, fp
 800a146:	461e      	mov	r6, r3
 800a148:	462c      	mov	r4, r5
 800a14a:	4544      	cmp	r4, r8
 800a14c:	d30e      	bcc.n	800a16c <__mdiff+0xf8>
 800a14e:	f108 0103 	add.w	r1, r8, #3
 800a152:	1b49      	subs	r1, r1, r5
 800a154:	f021 0103 	bic.w	r1, r1, #3
 800a158:	3d03      	subs	r5, #3
 800a15a:	45a8      	cmp	r8, r5
 800a15c:	bf38      	it	cc
 800a15e:	2100      	movcc	r1, #0
 800a160:	440b      	add	r3, r1
 800a162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a166:	b191      	cbz	r1, 800a18e <__mdiff+0x11a>
 800a168:	6117      	str	r7, [r2, #16]
 800a16a:	e79d      	b.n	800a0a8 <__mdiff+0x34>
 800a16c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a170:	46e6      	mov	lr, ip
 800a172:	0c08      	lsrs	r0, r1, #16
 800a174:	fa1c fc81 	uxtah	ip, ip, r1
 800a178:	4471      	add	r1, lr
 800a17a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a17e:	b289      	uxth	r1, r1
 800a180:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a184:	f846 1b04 	str.w	r1, [r6], #4
 800a188:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a18c:	e7dd      	b.n	800a14a <__mdiff+0xd6>
 800a18e:	3f01      	subs	r7, #1
 800a190:	e7e7      	b.n	800a162 <__mdiff+0xee>
 800a192:	bf00      	nop
 800a194:	0800b48c 	.word	0x0800b48c
 800a198:	0800b49d 	.word	0x0800b49d

0800a19c <__d2b>:
 800a19c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	ec59 8b10 	vmov	r8, r9, d0
 800a1a8:	4616      	mov	r6, r2
 800a1aa:	f7ff fccd 	bl	8009b48 <_Balloc>
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	b930      	cbnz	r0, 800a1c0 <__d2b+0x24>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	4b23      	ldr	r3, [pc, #140]	@ (800a244 <__d2b+0xa8>)
 800a1b6:	4824      	ldr	r0, [pc, #144]	@ (800a248 <__d2b+0xac>)
 800a1b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a1bc:	f000 fb8e 	bl	800a8dc <__assert_func>
 800a1c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1c8:	b10d      	cbz	r5, 800a1ce <__d2b+0x32>
 800a1ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	f1b8 0300 	subs.w	r3, r8, #0
 800a1d4:	d023      	beq.n	800a21e <__d2b+0x82>
 800a1d6:	4668      	mov	r0, sp
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	f7ff fd7c 	bl	8009cd6 <__lo0bits>
 800a1de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1e2:	b1d0      	cbz	r0, 800a21a <__d2b+0x7e>
 800a1e4:	f1c0 0320 	rsb	r3, r0, #32
 800a1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	40c2      	lsrs	r2, r0
 800a1f0:	6163      	str	r3, [r4, #20]
 800a1f2:	9201      	str	r2, [sp, #4]
 800a1f4:	9b01      	ldr	r3, [sp, #4]
 800a1f6:	61a3      	str	r3, [r4, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	bf0c      	ite	eq
 800a1fc:	2201      	moveq	r2, #1
 800a1fe:	2202      	movne	r2, #2
 800a200:	6122      	str	r2, [r4, #16]
 800a202:	b1a5      	cbz	r5, 800a22e <__d2b+0x92>
 800a204:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a208:	4405      	add	r5, r0
 800a20a:	603d      	str	r5, [r7, #0]
 800a20c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a210:	6030      	str	r0, [r6, #0]
 800a212:	4620      	mov	r0, r4
 800a214:	b003      	add	sp, #12
 800a216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a21a:	6161      	str	r1, [r4, #20]
 800a21c:	e7ea      	b.n	800a1f4 <__d2b+0x58>
 800a21e:	a801      	add	r0, sp, #4
 800a220:	f7ff fd59 	bl	8009cd6 <__lo0bits>
 800a224:	9b01      	ldr	r3, [sp, #4]
 800a226:	6163      	str	r3, [r4, #20]
 800a228:	3020      	adds	r0, #32
 800a22a:	2201      	movs	r2, #1
 800a22c:	e7e8      	b.n	800a200 <__d2b+0x64>
 800a22e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a232:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a236:	6038      	str	r0, [r7, #0]
 800a238:	6918      	ldr	r0, [r3, #16]
 800a23a:	f7ff fd2d 	bl	8009c98 <__hi0bits>
 800a23e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a242:	e7e5      	b.n	800a210 <__d2b+0x74>
 800a244:	0800b48c 	.word	0x0800b48c
 800a248:	0800b49d 	.word	0x0800b49d

0800a24c <__ssputs_r>:
 800a24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	688e      	ldr	r6, [r1, #8]
 800a252:	461f      	mov	r7, r3
 800a254:	42be      	cmp	r6, r7
 800a256:	680b      	ldr	r3, [r1, #0]
 800a258:	4682      	mov	sl, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4690      	mov	r8, r2
 800a25e:	d82d      	bhi.n	800a2bc <__ssputs_r+0x70>
 800a260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a268:	d026      	beq.n	800a2b8 <__ssputs_r+0x6c>
 800a26a:	6965      	ldr	r5, [r4, #20]
 800a26c:	6909      	ldr	r1, [r1, #16]
 800a26e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a272:	eba3 0901 	sub.w	r9, r3, r1
 800a276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a27a:	1c7b      	adds	r3, r7, #1
 800a27c:	444b      	add	r3, r9
 800a27e:	106d      	asrs	r5, r5, #1
 800a280:	429d      	cmp	r5, r3
 800a282:	bf38      	it	cc
 800a284:	461d      	movcc	r5, r3
 800a286:	0553      	lsls	r3, r2, #21
 800a288:	d527      	bpl.n	800a2da <__ssputs_r+0x8e>
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7ff fbd0 	bl	8009a30 <_malloc_r>
 800a290:	4606      	mov	r6, r0
 800a292:	b360      	cbz	r0, 800a2ee <__ssputs_r+0xa2>
 800a294:	6921      	ldr	r1, [r4, #16]
 800a296:	464a      	mov	r2, r9
 800a298:	f7fe fcfb 	bl	8008c92 <memcpy>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	6126      	str	r6, [r4, #16]
 800a2aa:	6165      	str	r5, [r4, #20]
 800a2ac:	444e      	add	r6, r9
 800a2ae:	eba5 0509 	sub.w	r5, r5, r9
 800a2b2:	6026      	str	r6, [r4, #0]
 800a2b4:	60a5      	str	r5, [r4, #8]
 800a2b6:	463e      	mov	r6, r7
 800a2b8:	42be      	cmp	r6, r7
 800a2ba:	d900      	bls.n	800a2be <__ssputs_r+0x72>
 800a2bc:	463e      	mov	r6, r7
 800a2be:	6820      	ldr	r0, [r4, #0]
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	f000 fabe 	bl	800a844 <memmove>
 800a2c8:	68a3      	ldr	r3, [r4, #8]
 800a2ca:	1b9b      	subs	r3, r3, r6
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	4433      	add	r3, r6
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2da:	462a      	mov	r2, r5
 800a2dc:	f000 fb42 	bl	800a964 <_realloc_r>
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d1e0      	bne.n	800a2a8 <__ssputs_r+0x5c>
 800a2e6:	6921      	ldr	r1, [r4, #16]
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	f7ff fb2d 	bl	8009948 <_free_r>
 800a2ee:	230c      	movs	r3, #12
 800a2f0:	f8ca 3000 	str.w	r3, [sl]
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	e7e9      	b.n	800a2d6 <__ssputs_r+0x8a>
	...

0800a304 <_svfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	4698      	mov	r8, r3
 800a30a:	898b      	ldrh	r3, [r1, #12]
 800a30c:	061b      	lsls	r3, r3, #24
 800a30e:	b09d      	sub	sp, #116	@ 0x74
 800a310:	4607      	mov	r7, r0
 800a312:	460d      	mov	r5, r1
 800a314:	4614      	mov	r4, r2
 800a316:	d510      	bpl.n	800a33a <_svfiprintf_r+0x36>
 800a318:	690b      	ldr	r3, [r1, #16]
 800a31a:	b973      	cbnz	r3, 800a33a <_svfiprintf_r+0x36>
 800a31c:	2140      	movs	r1, #64	@ 0x40
 800a31e:	f7ff fb87 	bl	8009a30 <_malloc_r>
 800a322:	6028      	str	r0, [r5, #0]
 800a324:	6128      	str	r0, [r5, #16]
 800a326:	b930      	cbnz	r0, 800a336 <_svfiprintf_r+0x32>
 800a328:	230c      	movs	r3, #12
 800a32a:	603b      	str	r3, [r7, #0]
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b01d      	add	sp, #116	@ 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	2340      	movs	r3, #64	@ 0x40
 800a338:	616b      	str	r3, [r5, #20]
 800a33a:	2300      	movs	r3, #0
 800a33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a33e:	2320      	movs	r3, #32
 800a340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a344:	f8cd 800c 	str.w	r8, [sp, #12]
 800a348:	2330      	movs	r3, #48	@ 0x30
 800a34a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4e8 <_svfiprintf_r+0x1e4>
 800a34e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a352:	f04f 0901 	mov.w	r9, #1
 800a356:	4623      	mov	r3, r4
 800a358:	469a      	mov	sl, r3
 800a35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a35e:	b10a      	cbz	r2, 800a364 <_svfiprintf_r+0x60>
 800a360:	2a25      	cmp	r2, #37	@ 0x25
 800a362:	d1f9      	bne.n	800a358 <_svfiprintf_r+0x54>
 800a364:	ebba 0b04 	subs.w	fp, sl, r4
 800a368:	d00b      	beq.n	800a382 <_svfiprintf_r+0x7e>
 800a36a:	465b      	mov	r3, fp
 800a36c:	4622      	mov	r2, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff ff6b 	bl	800a24c <__ssputs_r>
 800a376:	3001      	adds	r0, #1
 800a378:	f000 80a7 	beq.w	800a4ca <_svfiprintf_r+0x1c6>
 800a37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a37e:	445a      	add	r2, fp
 800a380:	9209      	str	r2, [sp, #36]	@ 0x24
 800a382:	f89a 3000 	ldrb.w	r3, [sl]
 800a386:	2b00      	cmp	r3, #0
 800a388:	f000 809f 	beq.w	800a4ca <_svfiprintf_r+0x1c6>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295
 800a392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a396:	f10a 0a01 	add.w	sl, sl, #1
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	9307      	str	r3, [sp, #28]
 800a39e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3a4:	4654      	mov	r4, sl
 800a3a6:	2205      	movs	r2, #5
 800a3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ac:	484e      	ldr	r0, [pc, #312]	@ (800a4e8 <_svfiprintf_r+0x1e4>)
 800a3ae:	f7f5 ff17 	bl	80001e0 <memchr>
 800a3b2:	9a04      	ldr	r2, [sp, #16]
 800a3b4:	b9d8      	cbnz	r0, 800a3ee <_svfiprintf_r+0xea>
 800a3b6:	06d0      	lsls	r0, r2, #27
 800a3b8:	bf44      	itt	mi
 800a3ba:	2320      	movmi	r3, #32
 800a3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3c0:	0711      	lsls	r1, r2, #28
 800a3c2:	bf44      	itt	mi
 800a3c4:	232b      	movmi	r3, #43	@ 0x2b
 800a3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3d0:	d015      	beq.n	800a3fe <_svfiprintf_r+0xfa>
 800a3d2:	9a07      	ldr	r2, [sp, #28]
 800a3d4:	4654      	mov	r4, sl
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	f04f 0c0a 	mov.w	ip, #10
 800a3dc:	4621      	mov	r1, r4
 800a3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3e2:	3b30      	subs	r3, #48	@ 0x30
 800a3e4:	2b09      	cmp	r3, #9
 800a3e6:	d94b      	bls.n	800a480 <_svfiprintf_r+0x17c>
 800a3e8:	b1b0      	cbz	r0, 800a418 <_svfiprintf_r+0x114>
 800a3ea:	9207      	str	r2, [sp, #28]
 800a3ec:	e014      	b.n	800a418 <_svfiprintf_r+0x114>
 800a3ee:	eba0 0308 	sub.w	r3, r0, r8
 800a3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	46a2      	mov	sl, r4
 800a3fc:	e7d2      	b.n	800a3a4 <_svfiprintf_r+0xa0>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	1d19      	adds	r1, r3, #4
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	9103      	str	r1, [sp, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfbb      	ittet	lt
 800a40a:	425b      	neglt	r3, r3
 800a40c:	f042 0202 	orrlt.w	r2, r2, #2
 800a410:	9307      	strge	r3, [sp, #28]
 800a412:	9307      	strlt	r3, [sp, #28]
 800a414:	bfb8      	it	lt
 800a416:	9204      	strlt	r2, [sp, #16]
 800a418:	7823      	ldrb	r3, [r4, #0]
 800a41a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a41c:	d10a      	bne.n	800a434 <_svfiprintf_r+0x130>
 800a41e:	7863      	ldrb	r3, [r4, #1]
 800a420:	2b2a      	cmp	r3, #42	@ 0x2a
 800a422:	d132      	bne.n	800a48a <_svfiprintf_r+0x186>
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	1d1a      	adds	r2, r3, #4
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	9203      	str	r2, [sp, #12]
 800a42c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a430:	3402      	adds	r4, #2
 800a432:	9305      	str	r3, [sp, #20]
 800a434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4f8 <_svfiprintf_r+0x1f4>
 800a438:	7821      	ldrb	r1, [r4, #0]
 800a43a:	2203      	movs	r2, #3
 800a43c:	4650      	mov	r0, sl
 800a43e:	f7f5 fecf 	bl	80001e0 <memchr>
 800a442:	b138      	cbz	r0, 800a454 <_svfiprintf_r+0x150>
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	eba0 000a 	sub.w	r0, r0, sl
 800a44a:	2240      	movs	r2, #64	@ 0x40
 800a44c:	4082      	lsls	r2, r0
 800a44e:	4313      	orrs	r3, r2
 800a450:	3401      	adds	r4, #1
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a458:	4824      	ldr	r0, [pc, #144]	@ (800a4ec <_svfiprintf_r+0x1e8>)
 800a45a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a45e:	2206      	movs	r2, #6
 800a460:	f7f5 febe 	bl	80001e0 <memchr>
 800a464:	2800      	cmp	r0, #0
 800a466:	d036      	beq.n	800a4d6 <_svfiprintf_r+0x1d2>
 800a468:	4b21      	ldr	r3, [pc, #132]	@ (800a4f0 <_svfiprintf_r+0x1ec>)
 800a46a:	bb1b      	cbnz	r3, 800a4b4 <_svfiprintf_r+0x1b0>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	3307      	adds	r3, #7
 800a470:	f023 0307 	bic.w	r3, r3, #7
 800a474:	3308      	adds	r3, #8
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a47a:	4433      	add	r3, r6
 800a47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a47e:	e76a      	b.n	800a356 <_svfiprintf_r+0x52>
 800a480:	fb0c 3202 	mla	r2, ip, r2, r3
 800a484:	460c      	mov	r4, r1
 800a486:	2001      	movs	r0, #1
 800a488:	e7a8      	b.n	800a3dc <_svfiprintf_r+0xd8>
 800a48a:	2300      	movs	r3, #0
 800a48c:	3401      	adds	r4, #1
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	4619      	mov	r1, r3
 800a492:	f04f 0c0a 	mov.w	ip, #10
 800a496:	4620      	mov	r0, r4
 800a498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a49c:	3a30      	subs	r2, #48	@ 0x30
 800a49e:	2a09      	cmp	r2, #9
 800a4a0:	d903      	bls.n	800a4aa <_svfiprintf_r+0x1a6>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0c6      	beq.n	800a434 <_svfiprintf_r+0x130>
 800a4a6:	9105      	str	r1, [sp, #20]
 800a4a8:	e7c4      	b.n	800a434 <_svfiprintf_r+0x130>
 800a4aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7f0      	b.n	800a496 <_svfiprintf_r+0x192>
 800a4b4:	ab03      	add	r3, sp, #12
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f4 <_svfiprintf_r+0x1f0>)
 800a4bc:	a904      	add	r1, sp, #16
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f7fd fcc6 	bl	8007e50 <_printf_float>
 800a4c4:	1c42      	adds	r2, r0, #1
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	d1d6      	bne.n	800a478 <_svfiprintf_r+0x174>
 800a4ca:	89ab      	ldrh	r3, [r5, #12]
 800a4cc:	065b      	lsls	r3, r3, #25
 800a4ce:	f53f af2d 	bmi.w	800a32c <_svfiprintf_r+0x28>
 800a4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d4:	e72c      	b.n	800a330 <_svfiprintf_r+0x2c>
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	462a      	mov	r2, r5
 800a4dc:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <_svfiprintf_r+0x1f0>)
 800a4de:	a904      	add	r1, sp, #16
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7fd ff4d 	bl	8008380 <_printf_i>
 800a4e6:	e7ed      	b.n	800a4c4 <_svfiprintf_r+0x1c0>
 800a4e8:	0800b5f8 	.word	0x0800b5f8
 800a4ec:	0800b602 	.word	0x0800b602
 800a4f0:	08007e51 	.word	0x08007e51
 800a4f4:	0800a24d 	.word	0x0800a24d
 800a4f8:	0800b5fe 	.word	0x0800b5fe

0800a4fc <__sfputc_r>:
 800a4fc:	6893      	ldr	r3, [r2, #8]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	b410      	push	{r4}
 800a504:	6093      	str	r3, [r2, #8]
 800a506:	da08      	bge.n	800a51a <__sfputc_r+0x1e>
 800a508:	6994      	ldr	r4, [r2, #24]
 800a50a:	42a3      	cmp	r3, r4
 800a50c:	db01      	blt.n	800a512 <__sfputc_r+0x16>
 800a50e:	290a      	cmp	r1, #10
 800a510:	d103      	bne.n	800a51a <__sfputc_r+0x1e>
 800a512:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a516:	f7fe baa8 	b.w	8008a6a <__swbuf_r>
 800a51a:	6813      	ldr	r3, [r2, #0]
 800a51c:	1c58      	adds	r0, r3, #1
 800a51e:	6010      	str	r0, [r2, #0]
 800a520:	7019      	strb	r1, [r3, #0]
 800a522:	4608      	mov	r0, r1
 800a524:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <__sfputs_r>:
 800a52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52c:	4606      	mov	r6, r0
 800a52e:	460f      	mov	r7, r1
 800a530:	4614      	mov	r4, r2
 800a532:	18d5      	adds	r5, r2, r3
 800a534:	42ac      	cmp	r4, r5
 800a536:	d101      	bne.n	800a53c <__sfputs_r+0x12>
 800a538:	2000      	movs	r0, #0
 800a53a:	e007      	b.n	800a54c <__sfputs_r+0x22>
 800a53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a540:	463a      	mov	r2, r7
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff ffda 	bl	800a4fc <__sfputc_r>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d1f3      	bne.n	800a534 <__sfputs_r+0xa>
 800a54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a550 <_vfiprintf_r>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	460d      	mov	r5, r1
 800a556:	b09d      	sub	sp, #116	@ 0x74
 800a558:	4614      	mov	r4, r2
 800a55a:	4698      	mov	r8, r3
 800a55c:	4606      	mov	r6, r0
 800a55e:	b118      	cbz	r0, 800a568 <_vfiprintf_r+0x18>
 800a560:	6a03      	ldr	r3, [r0, #32]
 800a562:	b90b      	cbnz	r3, 800a568 <_vfiprintf_r+0x18>
 800a564:	f7fe f978 	bl	8008858 <__sinit>
 800a568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a56a:	07d9      	lsls	r1, r3, #31
 800a56c:	d405      	bmi.n	800a57a <_vfiprintf_r+0x2a>
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	059a      	lsls	r2, r3, #22
 800a572:	d402      	bmi.n	800a57a <_vfiprintf_r+0x2a>
 800a574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a576:	f7fe fb8a 	bl	8008c8e <__retarget_lock_acquire_recursive>
 800a57a:	89ab      	ldrh	r3, [r5, #12]
 800a57c:	071b      	lsls	r3, r3, #28
 800a57e:	d501      	bpl.n	800a584 <_vfiprintf_r+0x34>
 800a580:	692b      	ldr	r3, [r5, #16]
 800a582:	b99b      	cbnz	r3, 800a5ac <_vfiprintf_r+0x5c>
 800a584:	4629      	mov	r1, r5
 800a586:	4630      	mov	r0, r6
 800a588:	f7fe faae 	bl	8008ae8 <__swsetup_r>
 800a58c:	b170      	cbz	r0, 800a5ac <_vfiprintf_r+0x5c>
 800a58e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a590:	07dc      	lsls	r4, r3, #31
 800a592:	d504      	bpl.n	800a59e <_vfiprintf_r+0x4e>
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	b01d      	add	sp, #116	@ 0x74
 800a59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	89ab      	ldrh	r3, [r5, #12]
 800a5a0:	0598      	lsls	r0, r3, #22
 800a5a2:	d4f7      	bmi.n	800a594 <_vfiprintf_r+0x44>
 800a5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5a6:	f7fe fb73 	bl	8008c90 <__retarget_lock_release_recursive>
 800a5aa:	e7f3      	b.n	800a594 <_vfiprintf_r+0x44>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ba:	2330      	movs	r3, #48	@ 0x30
 800a5bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a76c <_vfiprintf_r+0x21c>
 800a5c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5c4:	f04f 0901 	mov.w	r9, #1
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	469a      	mov	sl, r3
 800a5cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5d0:	b10a      	cbz	r2, 800a5d6 <_vfiprintf_r+0x86>
 800a5d2:	2a25      	cmp	r2, #37	@ 0x25
 800a5d4:	d1f9      	bne.n	800a5ca <_vfiprintf_r+0x7a>
 800a5d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5da:	d00b      	beq.n	800a5f4 <_vfiprintf_r+0xa4>
 800a5dc:	465b      	mov	r3, fp
 800a5de:	4622      	mov	r2, r4
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f7ff ffa1 	bl	800a52a <__sfputs_r>
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	f000 80a7 	beq.w	800a73c <_vfiprintf_r+0x1ec>
 800a5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5f0:	445a      	add	r2, fp
 800a5f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 809f 	beq.w	800a73c <_vfiprintf_r+0x1ec>
 800a5fe:	2300      	movs	r3, #0
 800a600:	f04f 32ff 	mov.w	r2, #4294967295
 800a604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a608:	f10a 0a01 	add.w	sl, sl, #1
 800a60c:	9304      	str	r3, [sp, #16]
 800a60e:	9307      	str	r3, [sp, #28]
 800a610:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a614:	931a      	str	r3, [sp, #104]	@ 0x68
 800a616:	4654      	mov	r4, sl
 800a618:	2205      	movs	r2, #5
 800a61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61e:	4853      	ldr	r0, [pc, #332]	@ (800a76c <_vfiprintf_r+0x21c>)
 800a620:	f7f5 fdde 	bl	80001e0 <memchr>
 800a624:	9a04      	ldr	r2, [sp, #16]
 800a626:	b9d8      	cbnz	r0, 800a660 <_vfiprintf_r+0x110>
 800a628:	06d1      	lsls	r1, r2, #27
 800a62a:	bf44      	itt	mi
 800a62c:	2320      	movmi	r3, #32
 800a62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a632:	0713      	lsls	r3, r2, #28
 800a634:	bf44      	itt	mi
 800a636:	232b      	movmi	r3, #43	@ 0x2b
 800a638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a63c:	f89a 3000 	ldrb.w	r3, [sl]
 800a640:	2b2a      	cmp	r3, #42	@ 0x2a
 800a642:	d015      	beq.n	800a670 <_vfiprintf_r+0x120>
 800a644:	9a07      	ldr	r2, [sp, #28]
 800a646:	4654      	mov	r4, sl
 800a648:	2000      	movs	r0, #0
 800a64a:	f04f 0c0a 	mov.w	ip, #10
 800a64e:	4621      	mov	r1, r4
 800a650:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a654:	3b30      	subs	r3, #48	@ 0x30
 800a656:	2b09      	cmp	r3, #9
 800a658:	d94b      	bls.n	800a6f2 <_vfiprintf_r+0x1a2>
 800a65a:	b1b0      	cbz	r0, 800a68a <_vfiprintf_r+0x13a>
 800a65c:	9207      	str	r2, [sp, #28]
 800a65e:	e014      	b.n	800a68a <_vfiprintf_r+0x13a>
 800a660:	eba0 0308 	sub.w	r3, r0, r8
 800a664:	fa09 f303 	lsl.w	r3, r9, r3
 800a668:	4313      	orrs	r3, r2
 800a66a:	9304      	str	r3, [sp, #16]
 800a66c:	46a2      	mov	sl, r4
 800a66e:	e7d2      	b.n	800a616 <_vfiprintf_r+0xc6>
 800a670:	9b03      	ldr	r3, [sp, #12]
 800a672:	1d19      	adds	r1, r3, #4
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	9103      	str	r1, [sp, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	bfbb      	ittet	lt
 800a67c:	425b      	neglt	r3, r3
 800a67e:	f042 0202 	orrlt.w	r2, r2, #2
 800a682:	9307      	strge	r3, [sp, #28]
 800a684:	9307      	strlt	r3, [sp, #28]
 800a686:	bfb8      	it	lt
 800a688:	9204      	strlt	r2, [sp, #16]
 800a68a:	7823      	ldrb	r3, [r4, #0]
 800a68c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a68e:	d10a      	bne.n	800a6a6 <_vfiprintf_r+0x156>
 800a690:	7863      	ldrb	r3, [r4, #1]
 800a692:	2b2a      	cmp	r3, #42	@ 0x2a
 800a694:	d132      	bne.n	800a6fc <_vfiprintf_r+0x1ac>
 800a696:	9b03      	ldr	r3, [sp, #12]
 800a698:	1d1a      	adds	r2, r3, #4
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	9203      	str	r2, [sp, #12]
 800a69e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6a2:	3402      	adds	r4, #2
 800a6a4:	9305      	str	r3, [sp, #20]
 800a6a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a77c <_vfiprintf_r+0x22c>
 800a6aa:	7821      	ldrb	r1, [r4, #0]
 800a6ac:	2203      	movs	r2, #3
 800a6ae:	4650      	mov	r0, sl
 800a6b0:	f7f5 fd96 	bl	80001e0 <memchr>
 800a6b4:	b138      	cbz	r0, 800a6c6 <_vfiprintf_r+0x176>
 800a6b6:	9b04      	ldr	r3, [sp, #16]
 800a6b8:	eba0 000a 	sub.w	r0, r0, sl
 800a6bc:	2240      	movs	r2, #64	@ 0x40
 800a6be:	4082      	lsls	r2, r0
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	3401      	adds	r4, #1
 800a6c4:	9304      	str	r3, [sp, #16]
 800a6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ca:	4829      	ldr	r0, [pc, #164]	@ (800a770 <_vfiprintf_r+0x220>)
 800a6cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6d0:	2206      	movs	r2, #6
 800a6d2:	f7f5 fd85 	bl	80001e0 <memchr>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d03f      	beq.n	800a75a <_vfiprintf_r+0x20a>
 800a6da:	4b26      	ldr	r3, [pc, #152]	@ (800a774 <_vfiprintf_r+0x224>)
 800a6dc:	bb1b      	cbnz	r3, 800a726 <_vfiprintf_r+0x1d6>
 800a6de:	9b03      	ldr	r3, [sp, #12]
 800a6e0:	3307      	adds	r3, #7
 800a6e2:	f023 0307 	bic.w	r3, r3, #7
 800a6e6:	3308      	adds	r3, #8
 800a6e8:	9303      	str	r3, [sp, #12]
 800a6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ec:	443b      	add	r3, r7
 800a6ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6f0:	e76a      	b.n	800a5c8 <_vfiprintf_r+0x78>
 800a6f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	2001      	movs	r0, #1
 800a6fa:	e7a8      	b.n	800a64e <_vfiprintf_r+0xfe>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	3401      	adds	r4, #1
 800a700:	9305      	str	r3, [sp, #20]
 800a702:	4619      	mov	r1, r3
 800a704:	f04f 0c0a 	mov.w	ip, #10
 800a708:	4620      	mov	r0, r4
 800a70a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a70e:	3a30      	subs	r2, #48	@ 0x30
 800a710:	2a09      	cmp	r2, #9
 800a712:	d903      	bls.n	800a71c <_vfiprintf_r+0x1cc>
 800a714:	2b00      	cmp	r3, #0
 800a716:	d0c6      	beq.n	800a6a6 <_vfiprintf_r+0x156>
 800a718:	9105      	str	r1, [sp, #20]
 800a71a:	e7c4      	b.n	800a6a6 <_vfiprintf_r+0x156>
 800a71c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a720:	4604      	mov	r4, r0
 800a722:	2301      	movs	r3, #1
 800a724:	e7f0      	b.n	800a708 <_vfiprintf_r+0x1b8>
 800a726:	ab03      	add	r3, sp, #12
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	462a      	mov	r2, r5
 800a72c:	4b12      	ldr	r3, [pc, #72]	@ (800a778 <_vfiprintf_r+0x228>)
 800a72e:	a904      	add	r1, sp, #16
 800a730:	4630      	mov	r0, r6
 800a732:	f7fd fb8d 	bl	8007e50 <_printf_float>
 800a736:	4607      	mov	r7, r0
 800a738:	1c78      	adds	r0, r7, #1
 800a73a:	d1d6      	bne.n	800a6ea <_vfiprintf_r+0x19a>
 800a73c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a73e:	07d9      	lsls	r1, r3, #31
 800a740:	d405      	bmi.n	800a74e <_vfiprintf_r+0x1fe>
 800a742:	89ab      	ldrh	r3, [r5, #12]
 800a744:	059a      	lsls	r2, r3, #22
 800a746:	d402      	bmi.n	800a74e <_vfiprintf_r+0x1fe>
 800a748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a74a:	f7fe faa1 	bl	8008c90 <__retarget_lock_release_recursive>
 800a74e:	89ab      	ldrh	r3, [r5, #12]
 800a750:	065b      	lsls	r3, r3, #25
 800a752:	f53f af1f 	bmi.w	800a594 <_vfiprintf_r+0x44>
 800a756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a758:	e71e      	b.n	800a598 <_vfiprintf_r+0x48>
 800a75a:	ab03      	add	r3, sp, #12
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	462a      	mov	r2, r5
 800a760:	4b05      	ldr	r3, [pc, #20]	@ (800a778 <_vfiprintf_r+0x228>)
 800a762:	a904      	add	r1, sp, #16
 800a764:	4630      	mov	r0, r6
 800a766:	f7fd fe0b 	bl	8008380 <_printf_i>
 800a76a:	e7e4      	b.n	800a736 <_vfiprintf_r+0x1e6>
 800a76c:	0800b5f8 	.word	0x0800b5f8
 800a770:	0800b602 	.word	0x0800b602
 800a774:	08007e51 	.word	0x08007e51
 800a778:	0800a52b 	.word	0x0800a52b
 800a77c:	0800b5fe 	.word	0x0800b5fe

0800a780 <__swhatbuf_r>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	460c      	mov	r4, r1
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	2900      	cmp	r1, #0
 800a78a:	b096      	sub	sp, #88	@ 0x58
 800a78c:	4615      	mov	r5, r2
 800a78e:	461e      	mov	r6, r3
 800a790:	da0d      	bge.n	800a7ae <__swhatbuf_r+0x2e>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a798:	f04f 0100 	mov.w	r1, #0
 800a79c:	bf14      	ite	ne
 800a79e:	2340      	movne	r3, #64	@ 0x40
 800a7a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	6031      	str	r1, [r6, #0]
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	b016      	add	sp, #88	@ 0x58
 800a7ac:	bd70      	pop	{r4, r5, r6, pc}
 800a7ae:	466a      	mov	r2, sp
 800a7b0:	f000 f862 	bl	800a878 <_fstat_r>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	dbec      	blt.n	800a792 <__swhatbuf_r+0x12>
 800a7b8:	9901      	ldr	r1, [sp, #4]
 800a7ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7c2:	4259      	negs	r1, r3
 800a7c4:	4159      	adcs	r1, r3
 800a7c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ca:	e7eb      	b.n	800a7a4 <__swhatbuf_r+0x24>

0800a7cc <__smakebuf_r>:
 800a7cc:	898b      	ldrh	r3, [r1, #12]
 800a7ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7d0:	079d      	lsls	r5, r3, #30
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	d507      	bpl.n	800a7e8 <__smakebuf_r+0x1c>
 800a7d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	6163      	str	r3, [r4, #20]
 800a7e4:	b003      	add	sp, #12
 800a7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e8:	ab01      	add	r3, sp, #4
 800a7ea:	466a      	mov	r2, sp
 800a7ec:	f7ff ffc8 	bl	800a780 <__swhatbuf_r>
 800a7f0:	9f00      	ldr	r7, [sp, #0]
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7ff f91a 	bl	8009a30 <_malloc_r>
 800a7fc:	b948      	cbnz	r0, 800a812 <__smakebuf_r+0x46>
 800a7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a802:	059a      	lsls	r2, r3, #22
 800a804:	d4ee      	bmi.n	800a7e4 <__smakebuf_r+0x18>
 800a806:	f023 0303 	bic.w	r3, r3, #3
 800a80a:	f043 0302 	orr.w	r3, r3, #2
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	e7e2      	b.n	800a7d8 <__smakebuf_r+0xc>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	6020      	str	r0, [r4, #0]
 800a816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	9b01      	ldr	r3, [sp, #4]
 800a81e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a822:	b15b      	cbz	r3, 800a83c <__smakebuf_r+0x70>
 800a824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a828:	4630      	mov	r0, r6
 800a82a:	f000 f837 	bl	800a89c <_isatty_r>
 800a82e:	b128      	cbz	r0, 800a83c <__smakebuf_r+0x70>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	f043 0301 	orr.w	r3, r3, #1
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	431d      	orrs	r5, r3
 800a840:	81a5      	strh	r5, [r4, #12]
 800a842:	e7cf      	b.n	800a7e4 <__smakebuf_r+0x18>

0800a844 <memmove>:
 800a844:	4288      	cmp	r0, r1
 800a846:	b510      	push	{r4, lr}
 800a848:	eb01 0402 	add.w	r4, r1, r2
 800a84c:	d902      	bls.n	800a854 <memmove+0x10>
 800a84e:	4284      	cmp	r4, r0
 800a850:	4623      	mov	r3, r4
 800a852:	d807      	bhi.n	800a864 <memmove+0x20>
 800a854:	1e43      	subs	r3, r0, #1
 800a856:	42a1      	cmp	r1, r4
 800a858:	d008      	beq.n	800a86c <memmove+0x28>
 800a85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a85e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a862:	e7f8      	b.n	800a856 <memmove+0x12>
 800a864:	4402      	add	r2, r0
 800a866:	4601      	mov	r1, r0
 800a868:	428a      	cmp	r2, r1
 800a86a:	d100      	bne.n	800a86e <memmove+0x2a>
 800a86c:	bd10      	pop	{r4, pc}
 800a86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a876:	e7f7      	b.n	800a868 <memmove+0x24>

0800a878 <_fstat_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4d07      	ldr	r5, [pc, #28]	@ (800a898 <_fstat_r+0x20>)
 800a87c:	2300      	movs	r3, #0
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	4611      	mov	r1, r2
 800a884:	602b      	str	r3, [r5, #0]
 800a886:	f7f9 fa60 	bl	8003d4a <_fstat>
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	d102      	bne.n	800a894 <_fstat_r+0x1c>
 800a88e:	682b      	ldr	r3, [r5, #0]
 800a890:	b103      	cbz	r3, 800a894 <_fstat_r+0x1c>
 800a892:	6023      	str	r3, [r4, #0]
 800a894:	bd38      	pop	{r3, r4, r5, pc}
 800a896:	bf00      	nop
 800a898:	200009b8 	.word	0x200009b8

0800a89c <_isatty_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	4d06      	ldr	r5, [pc, #24]	@ (800a8b8 <_isatty_r+0x1c>)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	602b      	str	r3, [r5, #0]
 800a8a8:	f7f9 fa5f 	bl	8003d6a <_isatty>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_isatty_r+0x1a>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_isatty_r+0x1a>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	200009b8 	.word	0x200009b8

0800a8bc <_sbrk_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4d06      	ldr	r5, [pc, #24]	@ (800a8d8 <_sbrk_r+0x1c>)
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	602b      	str	r3, [r5, #0]
 800a8c8:	f7f9 fa68 	bl	8003d9c <_sbrk>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_sbrk_r+0x1a>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_sbrk_r+0x1a>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	200009b8 	.word	0x200009b8

0800a8dc <__assert_func>:
 800a8dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8de:	4614      	mov	r4, r2
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	4b09      	ldr	r3, [pc, #36]	@ (800a908 <__assert_func+0x2c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	68d8      	ldr	r0, [r3, #12]
 800a8ea:	b954      	cbnz	r4, 800a902 <__assert_func+0x26>
 800a8ec:	4b07      	ldr	r3, [pc, #28]	@ (800a90c <__assert_func+0x30>)
 800a8ee:	461c      	mov	r4, r3
 800a8f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8f4:	9100      	str	r1, [sp, #0]
 800a8f6:	462b      	mov	r3, r5
 800a8f8:	4905      	ldr	r1, [pc, #20]	@ (800a910 <__assert_func+0x34>)
 800a8fa:	f000 f86f 	bl	800a9dc <fiprintf>
 800a8fe:	f000 f87f 	bl	800aa00 <abort>
 800a902:	4b04      	ldr	r3, [pc, #16]	@ (800a914 <__assert_func+0x38>)
 800a904:	e7f4      	b.n	800a8f0 <__assert_func+0x14>
 800a906:	bf00      	nop
 800a908:	20000028 	.word	0x20000028
 800a90c:	0800b64e 	.word	0x0800b64e
 800a910:	0800b620 	.word	0x0800b620
 800a914:	0800b613 	.word	0x0800b613

0800a918 <_calloc_r>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	fba1 5402 	umull	r5, r4, r1, r2
 800a91e:	b93c      	cbnz	r4, 800a930 <_calloc_r+0x18>
 800a920:	4629      	mov	r1, r5
 800a922:	f7ff f885 	bl	8009a30 <_malloc_r>
 800a926:	4606      	mov	r6, r0
 800a928:	b928      	cbnz	r0, 800a936 <_calloc_r+0x1e>
 800a92a:	2600      	movs	r6, #0
 800a92c:	4630      	mov	r0, r6
 800a92e:	bd70      	pop	{r4, r5, r6, pc}
 800a930:	220c      	movs	r2, #12
 800a932:	6002      	str	r2, [r0, #0]
 800a934:	e7f9      	b.n	800a92a <_calloc_r+0x12>
 800a936:	462a      	mov	r2, r5
 800a938:	4621      	mov	r1, r4
 800a93a:	f7fe f92b 	bl	8008b94 <memset>
 800a93e:	e7f5      	b.n	800a92c <_calloc_r+0x14>

0800a940 <__ascii_mbtowc>:
 800a940:	b082      	sub	sp, #8
 800a942:	b901      	cbnz	r1, 800a946 <__ascii_mbtowc+0x6>
 800a944:	a901      	add	r1, sp, #4
 800a946:	b142      	cbz	r2, 800a95a <__ascii_mbtowc+0x1a>
 800a948:	b14b      	cbz	r3, 800a95e <__ascii_mbtowc+0x1e>
 800a94a:	7813      	ldrb	r3, [r2, #0]
 800a94c:	600b      	str	r3, [r1, #0]
 800a94e:	7812      	ldrb	r2, [r2, #0]
 800a950:	1e10      	subs	r0, r2, #0
 800a952:	bf18      	it	ne
 800a954:	2001      	movne	r0, #1
 800a956:	b002      	add	sp, #8
 800a958:	4770      	bx	lr
 800a95a:	4610      	mov	r0, r2
 800a95c:	e7fb      	b.n	800a956 <__ascii_mbtowc+0x16>
 800a95e:	f06f 0001 	mvn.w	r0, #1
 800a962:	e7f8      	b.n	800a956 <__ascii_mbtowc+0x16>

0800a964 <_realloc_r>:
 800a964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a968:	4680      	mov	r8, r0
 800a96a:	4615      	mov	r5, r2
 800a96c:	460c      	mov	r4, r1
 800a96e:	b921      	cbnz	r1, 800a97a <_realloc_r+0x16>
 800a970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	4611      	mov	r1, r2
 800a976:	f7ff b85b 	b.w	8009a30 <_malloc_r>
 800a97a:	b92a      	cbnz	r2, 800a988 <_realloc_r+0x24>
 800a97c:	f7fe ffe4 	bl	8009948 <_free_r>
 800a980:	2400      	movs	r4, #0
 800a982:	4620      	mov	r0, r4
 800a984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a988:	f000 f841 	bl	800aa0e <_malloc_usable_size_r>
 800a98c:	4285      	cmp	r5, r0
 800a98e:	4606      	mov	r6, r0
 800a990:	d802      	bhi.n	800a998 <_realloc_r+0x34>
 800a992:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a996:	d8f4      	bhi.n	800a982 <_realloc_r+0x1e>
 800a998:	4629      	mov	r1, r5
 800a99a:	4640      	mov	r0, r8
 800a99c:	f7ff f848 	bl	8009a30 <_malloc_r>
 800a9a0:	4607      	mov	r7, r0
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d0ec      	beq.n	800a980 <_realloc_r+0x1c>
 800a9a6:	42b5      	cmp	r5, r6
 800a9a8:	462a      	mov	r2, r5
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	bf28      	it	cs
 800a9ae:	4632      	movcs	r2, r6
 800a9b0:	f7fe f96f 	bl	8008c92 <memcpy>
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	f7fe ffc6 	bl	8009948 <_free_r>
 800a9bc:	463c      	mov	r4, r7
 800a9be:	e7e0      	b.n	800a982 <_realloc_r+0x1e>

0800a9c0 <__ascii_wctomb>:
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	4608      	mov	r0, r1
 800a9c4:	b141      	cbz	r1, 800a9d8 <__ascii_wctomb+0x18>
 800a9c6:	2aff      	cmp	r2, #255	@ 0xff
 800a9c8:	d904      	bls.n	800a9d4 <__ascii_wctomb+0x14>
 800a9ca:	228a      	movs	r2, #138	@ 0x8a
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d2:	4770      	bx	lr
 800a9d4:	700a      	strb	r2, [r1, #0]
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	4770      	bx	lr
	...

0800a9dc <fiprintf>:
 800a9dc:	b40e      	push	{r1, r2, r3}
 800a9de:	b503      	push	{r0, r1, lr}
 800a9e0:	4601      	mov	r1, r0
 800a9e2:	ab03      	add	r3, sp, #12
 800a9e4:	4805      	ldr	r0, [pc, #20]	@ (800a9fc <fiprintf+0x20>)
 800a9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ea:	6800      	ldr	r0, [r0, #0]
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	f7ff fdaf 	bl	800a550 <_vfiprintf_r>
 800a9f2:	b002      	add	sp, #8
 800a9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9f8:	b003      	add	sp, #12
 800a9fa:	4770      	bx	lr
 800a9fc:	20000028 	.word	0x20000028

0800aa00 <abort>:
 800aa00:	b508      	push	{r3, lr}
 800aa02:	2006      	movs	r0, #6
 800aa04:	f000 f834 	bl	800aa70 <raise>
 800aa08:	2001      	movs	r0, #1
 800aa0a:	f7f9 f96a 	bl	8003ce2 <_exit>

0800aa0e <_malloc_usable_size_r>:
 800aa0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa12:	1f18      	subs	r0, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bfbc      	itt	lt
 800aa18:	580b      	ldrlt	r3, [r1, r0]
 800aa1a:	18c0      	addlt	r0, r0, r3
 800aa1c:	4770      	bx	lr

0800aa1e <_raise_r>:
 800aa1e:	291f      	cmp	r1, #31
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4605      	mov	r5, r0
 800aa24:	460c      	mov	r4, r1
 800aa26:	d904      	bls.n	800aa32 <_raise_r+0x14>
 800aa28:	2316      	movs	r3, #22
 800aa2a:	6003      	str	r3, [r0, #0]
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	bd38      	pop	{r3, r4, r5, pc}
 800aa32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa34:	b112      	cbz	r2, 800aa3c <_raise_r+0x1e>
 800aa36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa3a:	b94b      	cbnz	r3, 800aa50 <_raise_r+0x32>
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f000 f831 	bl	800aaa4 <_getpid_r>
 800aa42:	4622      	mov	r2, r4
 800aa44:	4601      	mov	r1, r0
 800aa46:	4628      	mov	r0, r5
 800aa48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa4c:	f000 b818 	b.w	800aa80 <_kill_r>
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d00a      	beq.n	800aa6a <_raise_r+0x4c>
 800aa54:	1c59      	adds	r1, r3, #1
 800aa56:	d103      	bne.n	800aa60 <_raise_r+0x42>
 800aa58:	2316      	movs	r3, #22
 800aa5a:	6003      	str	r3, [r0, #0]
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	e7e7      	b.n	800aa30 <_raise_r+0x12>
 800aa60:	2100      	movs	r1, #0
 800aa62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa66:	4620      	mov	r0, r4
 800aa68:	4798      	blx	r3
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e7e0      	b.n	800aa30 <_raise_r+0x12>
	...

0800aa70 <raise>:
 800aa70:	4b02      	ldr	r3, [pc, #8]	@ (800aa7c <raise+0xc>)
 800aa72:	4601      	mov	r1, r0
 800aa74:	6818      	ldr	r0, [r3, #0]
 800aa76:	f7ff bfd2 	b.w	800aa1e <_raise_r>
 800aa7a:	bf00      	nop
 800aa7c:	20000028 	.word	0x20000028

0800aa80 <_kill_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d07      	ldr	r5, [pc, #28]	@ (800aaa0 <_kill_r+0x20>)
 800aa84:	2300      	movs	r3, #0
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	f7f9 f918 	bl	8003cc2 <_kill>
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	d102      	bne.n	800aa9c <_kill_r+0x1c>
 800aa96:	682b      	ldr	r3, [r5, #0]
 800aa98:	b103      	cbz	r3, 800aa9c <_kill_r+0x1c>
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	bd38      	pop	{r3, r4, r5, pc}
 800aa9e:	bf00      	nop
 800aaa0:	200009b8 	.word	0x200009b8

0800aaa4 <_getpid_r>:
 800aaa4:	f7f9 b905 	b.w	8003cb2 <_getpid>

0800aaa8 <_init>:
 800aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaaa:	bf00      	nop
 800aaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaae:	bc08      	pop	{r3}
 800aab0:	469e      	mov	lr, r3
 800aab2:	4770      	bx	lr

0800aab4 <_fini>:
 800aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab6:	bf00      	nop
 800aab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaba:	bc08      	pop	{r3}
 800aabc:	469e      	mov	lr, r3
 800aabe:	4770      	bx	lr
